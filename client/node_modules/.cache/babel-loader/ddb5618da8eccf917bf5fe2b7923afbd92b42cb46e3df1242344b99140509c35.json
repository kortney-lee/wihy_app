{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout) {\n  if (retryTimeout === void 0) {\n    retryTimeout = 30;\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nvar RPRegistrationPolicy = /** @class */function (_super) {\n  __extends(RPRegistrationPolicy, _super);\n  function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {\n    if (_retryTimeout === void 0) {\n      _retryTimeout = 30;\n    }\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this._retryTimeout = _retryTimeout;\n    return _this;\n  }\n  RPRegistrationPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n      return registerIfNeeded(_this, request, response);\n    });\n  };\n  return RPRegistrationPolicy;\n}(BaseRequestPolicy);\nexport { RPRegistrationPolicy };\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    var rpName = checkRPNotRegisteredError(response.bodyAsText);\n    if (rpName) {\n      var urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n      // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(function () {\n        return false;\n      }).then(function (registrationStatus) {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n        return response;\n      });\n    }\n  }\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResourceLike} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest, reuseUrlToo) {\n  if (reuseUrlToo === void 0) {\n    reuseUrlToo = false;\n  }\n  var reqOptions = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n  var result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n  var result;\n  var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(\"Unable to extract subscriptionId from the given url - \" + url + \".\");\n  }\n  return result;\n}\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(policy, urlPrefix, provider, originalRequest) {\n  var postUrl = urlPrefix + \"providers/\" + provider + \"/register?api-version=2016-02-01\";\n  var getUrl = urlPrefix + \"providers/\" + provider + \"?api-version=2016-02-01\";\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {\n    if (response.status !== 200) {\n      throw new Error(\"Autoregistration of \" + provider + \" failed. Please try registering manually.\");\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy, url, originalRequest) {\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {\n    var obj = res.parsedBody;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(function () {\n        return getRegistrationStatus(policy, url, originalRequest);\n      });\n    }\n  });\n}","map":{"version":3,"names":["utils","BaseRequestPolicy","rpRegistrationPolicy","retryTimeout","create","nextPolicy","options","RPRegistrationPolicy","_super","__extends","_retryTimeout","_this","call","prototype","sendRequest","request","_nextPolicy","clone","then","response","registerIfNeeded","policy","status","rpName","checkRPNotRegisteredError","bodyAsText","urlPrefix","extractSubscriptionUrl","url","registerRP","catch","registrationStatus","headers","set","generateUuid","Promise","resolve","getRequestEssentials","originalRequest","reuseUrlToo","reqOptions","body","result","responseBody","JSON","parse","err","error","message","code","matchRes","match","pop","Error","provider","postUrl","getUrl","method","getRegistrationStatus","res","obj","parsedBody","registrationState","delay"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\policies\\rpRegistrationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptionsLike,\n} from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    },\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResourceLike} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((res) => {\n    const obj = res.parsedBody as any;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils\n        .delay(policy._retryTimeout * 1000)\n        .then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}