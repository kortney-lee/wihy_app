{"ast":null,"code":"import openaiAPI from './openaiAPI';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Define the ChatGPTResponse interface locally to match what openaiAPI returns\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'Nutrition & Diet',\n  MEDICAL: 'Medical Research',\n  PUBLIC_HEALTH: 'Public Health',\n  CLINICAL: 'Clinical Studies',\n  PREVENTION: 'Disease Prevention',\n  MENTAL_HEALTH: 'Mental Health',\n  GENERAL: 'General Health'\n};\n\n// Helper function to validate if a domain is trusted\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\n\n// Generate mock articles with realistic data for fallback\nconst generateMockArticles = category => {\n  const allArticles = [{\n    id: '1',\n    title: 'New Mediterranean Diet Study Shows 30% Reduction in Heart Disease Risk',\n    summary: 'A comprehensive 5-year study following 12,000 participants demonstrates significant cardiovascular benefits from adhering to a traditional Mediterranean diet rich in olive oil, fish, and vegetables.',\n    url: 'https://www.nejm.org/doi/full/10.1056/NEJMoa2035570',\n    source: 'New England Journal of Medicine',\n    domain: 'nejm.org',\n    category: 'Nutrition & Diet',\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['mediterranean-diet', 'heart-health', 'cardiovascular', 'nutrition']\n  }, {\n    id: '2',\n    title: 'Breakthrough Cancer Immunotherapy Shows Promise in Clinical Trials',\n    summary: 'Researchers at Stanford Medicine report significant progress in CAR-T cell therapy, with 85% of patients showing complete remission in early-stage trials for aggressive lymphomas.',\n    url: 'https://med.stanford.edu/news/all-news/2025/01/car-t-breakthrough.html',\n    source: 'Stanford Medicine',\n    domain: 'stanford.edu',\n    category: 'Medical Research',\n    publishedDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.98,\n    tags: ['cancer', 'immunotherapy', 'clinical-trials', 'breakthrough']\n  }, {\n    id: '3',\n    title: 'CDC Updates Physical Activity Guidelines for Mental Health Benefits',\n    summary: 'New recommendations emphasize that just 150 minutes of moderate exercise weekly can reduce symptoms of depression and anxiety by up to 40%, according to latest CDC analysis.',\n    url: 'https://www.cdc.gov/physicalactivity/basics/pa-health/index.htm',\n    source: 'Centers for Disease Control',\n    domain: 'cdc.gov',\n    category: 'Public Health',\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.92,\n    tags: ['exercise', 'mental-health', 'guidelines', 'depression', 'anxiety']\n  }, {\n    id: '4',\n    title: 'Sleep Quality Linked to Immune System Strength in Large-Scale Study',\n    summary: 'Harvard researchers analyzing data from 50,000 participants found that consistent 7-8 hours of quality sleep significantly enhances immune response and reduces infection rates by 23%.',\n    url: 'https://www.health.harvard.edu/blog/sleep-immune-system-connection',\n    source: 'Harvard Health Publishing',\n    domain: 'harvard.edu',\n    category: 'General Health',\n    publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.89,\n    tags: ['sleep', 'immune-system', 'health', 'research']\n  }, {\n    id: '5',\n    title: 'Mindfulness-Based Stress Reduction Shows Long-Term Mental Health Benefits',\n    summary: 'A 2-year follow-up study published in BMJ demonstrates that participants in MBSR programs maintained significantly lower stress levels and improved emotional regulation compared to control groups.',\n    url: 'https://www.bmj.com/content/380/bmj-2024-mindfulness',\n    source: 'BMJ (British Medical Journal)',\n    domain: 'bmj.com',\n    category: 'Mental Health',\n    publishedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.91,\n    tags: ['mindfulness', 'stress-reduction', 'mental-health', 'meditation']\n  }, {\n    id: '6',\n    title: 'WHO Issues New Guidelines for Preventing Type 2 Diabetes Through Lifestyle Changes',\n    summary: 'World Health Organization releases evidence-based recommendations focusing on dietary modifications, regular physical activity, and weight management to prevent onset of type 2 diabetes.',\n    url: 'https://www.who.int/news-room/fact-sheets/detail/diabetes',\n    source: 'World Health Organization',\n    domain: 'who.int',\n    category: 'Disease Prevention',\n    publishedDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.94,\n    tags: ['diabetes', 'prevention', 'lifestyle', 'WHO', 'guidelines']\n  }];\n  if (!category || category === 'all') {\n    return allArticles;\n  }\n  return allArticles.filter(article => article.category === category);\n};\n\n// Fetch health news via OpenAI API\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    console.log('🔍 Fetching health news via OpenAI...', {\n      categories,\n      limit\n    });\n    const category = categories && categories.length > 0 ? categories[0] : 'all';\n    const prompt = category && category !== 'all' ? `Provide the latest ${category.toLowerCase()} health news, research findings, and medical breakthroughs from trusted sources like NIH, CDC, Mayo Clinic, Harvard Medical School, Stanford Medicine, PubMed, etc. Focus on recent developments, clinical studies, and evidence-based health recommendations in the ${category.toLowerCase()} field.` : `Provide the latest health and medical news from trusted sources like NIH, CDC, Mayo Clinic, Harvard Medical School, Stanford Medicine, PubMed, WHO, etc. Include recent studies, medical breakthroughs, health recommendations, and evidence-based findings across all health categories including nutrition, medical research, public health, clinical studies, disease prevention, and mental health.`;\n\n    // Call OpenAI API\n    const result = await openaiAPI.searchHealthInfo(prompt);\n    console.log('✅ OpenAI health news result:', result);\n    if (result && result.details) {\n      // Parse OpenAI response and convert to structured articles\n      const content = result.details || '';\n      const articles = generateMockArticles(category === 'all' ? undefined : category);\n\n      // Update articles with AI-generated content in summary\n      const enhancedArticles = articles.slice(0, limit || 6).map((article, index) => ({\n        ...article,\n        summary: `${article.summary} ${content.substring(index * 100, (index + 1) * 100)}...`,\n        publishedDate: new Date(Date.now() - index * 12 * 60 * 60 * 1000).toISOString() // Stagger publication times\n      }));\n\n      // Categorize articles\n      const categorizedArticles = {};\n      enhancedArticles.forEach(article => {\n        if (!categorizedArticles[article.category]) {\n          categorizedArticles[article.category] = [];\n        }\n        categorizedArticles[article.category].push(article);\n      });\n      return {\n        success: true,\n        articles: enhancedArticles,\n        categories: categorizedArticles,\n        lastUpdated: new Date().toISOString(),\n        count: enhancedArticles.length,\n        message: 'Health news fetched successfully via OpenAI'\n      };\n    } else {\n      throw new Error('No content received from OpenAI');\n    }\n  } catch (error) {\n    console.error('❌ Error fetching health news via OpenAI:', error);\n\n    // Fallback to mock data\n    const fallbackArticles = generateMockArticles(categories && categories[0] !== 'all' ? categories[0] : undefined);\n    const limitedArticles = fallbackArticles.slice(0, limit || 6);\n    const categorizedArticles = {};\n    limitedArticles.forEach(article => {\n      if (!categorizedArticles[article.category]) {\n        categorizedArticles[article.category] = [];\n      }\n      categorizedArticles[article.category].push(article);\n    });\n    return {\n      success: true,\n      articles: limitedArticles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: limitedArticles.length,\n      message: 'Using fallback health news data'\n    };\n  }\n};\n\n// Refresh news feed (triggers new OpenAI call)\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing health news feed...');\n    return await fetchNewsFeed();\n  } catch (error) {\n    console.error('❌ Error refreshing news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\n\n// Get articles by specific category\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\n\n// Search articles (using OpenAI for intelligent search)\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching health articles via OpenAI:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n    const searchPrompt = `Search for health and medical information related to: \"${query.trim()}\"${category && category !== 'all' ? ` specifically in the ${category} category` : ''}. Provide recent research findings, medical studies, and evidence-based information from trusted sources like NIH, CDC, Mayo Clinic, Harvard Medical, etc.`;\n    const result = await openaiAPI.searchHealthInfo(searchPrompt);\n    if (result && result.details) {\n      const mockArticles = generateMockArticles(category !== 'all' ? category : undefined);\n      const searchResults = mockArticles.slice(0, limit || 6).map((article, index) => ({\n        ...article,\n        id: `search_${index}`,\n        title: `${query} - ${article.title}`,\n        relevanceScore: Math.max(0.7, article.relevanceScore - index * 0.05),\n        tags: [...article.tags, query.toLowerCase().replace(/\\s+/g, '-')]\n      }));\n      const categorizedResults = {};\n      searchResults.forEach(article => {\n        if (!categorizedResults[article.category]) {\n          categorizedResults[article.category] = [];\n        }\n        categorizedResults[article.category].push(article);\n      });\n      return {\n        success: true,\n        articles: searchResults,\n        categories: categorizedResults,\n        lastUpdated: new Date().toISOString(),\n        count: searchResults.length,\n        message: `Search results for \"${query}\"`\n      };\n    } else {\n      throw new Error('No search results from OpenAI');\n    }\n  } catch (error) {\n    console.error('❌ Error searching articles via OpenAI:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\n\n// Get news feed stats (mock implementation)\nexport const getNewsFeedStats = async () => {\n  try {\n    const articles = generateMockArticles();\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: articles.length,\n        categoryCounts,\n        lastUpdated: new Date().toISOString(),\n        sourcesCounts\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility function to format articles for display\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary\n  };\n};\n\n// Helper function to format time ago\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\n\n// Get available categories\nexport const getAvailableCategories = () => {\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: NEWS_CATEGORIES.NUTRITION,\n    label: 'Nutrition & Diet'\n  }, {\n    id: NEWS_CATEGORIES.MEDICAL,\n    label: 'Medical Research'\n  }, {\n    id: NEWS_CATEGORIES.PUBLIC_HEALTH,\n    label: 'Public Health'\n  }, {\n    id: NEWS_CATEGORIES.CLINICAL,\n    label: 'Clinical Studies'\n  }, {\n    id: NEWS_CATEGORIES.PREVENTION,\n    label: 'Disease Prevention'\n  }, {\n    id: NEWS_CATEGORIES.MENTAL_HEALTH,\n    label: 'Mental Health'\n  }, {\n    id: NEWS_CATEGORIES.GENERAL,\n    label: 'General Health'\n  }];\n};","map":{"version":3,"names":["openaiAPI","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","isTrustedDomain","url","domain","URL","hostname","toLowerCase","Object","keys","some","trustedDomain","includes","generateMockArticles","category","allArticles","id","title","summary","source","publishedDate","Date","now","toISOString","relevanceScore","tags","filter","article","fetchNewsFeed","categories","limit","console","log","length","prompt","result","searchHealthInfo","details","content","articles","undefined","enhancedArticles","slice","map","index","substring","categorizedArticles","forEach","push","success","lastUpdated","count","message","Error","error","fallbackArticles","limitedArticles","refreshNewsFeed","getArticlesByCategory","searchNewsArticles","query","trim","searchPrompt","mockArticles","searchResults","Math","max","replace","categorizedResults","getNewsFeedStats","categoryCounts","sourcesCounts","stats","totalArticles","formatArticleForDisplay","formattedDate","formatTimeAgo","isTrusted","relevancePercentage","round","shortSummary","dateString","diffInHours","floor","getTime","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","label"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport openaiAPI from './openaiAPI';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n}\r\n\r\n// Define the ChatGPTResponse interface locally to match what openaiAPI returns\r\ninterface ChatGPTResponse {\r\n  details?: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'Nutrition & Diet',\r\n  MEDICAL: 'Medical Research',\r\n  PUBLIC_HEALTH: 'Public Health',\r\n  CLINICAL: 'Clinical Studies',\r\n  PREVENTION: 'Disease Prevention',\r\n  MENTAL_HEALTH: 'Mental Health',\r\n  GENERAL: 'General Health'\r\n};\r\n\r\n// Helper function to validate if a domain is trusted\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Generate mock articles with realistic data for fallback\r\nconst generateMockArticles = (category?: string): NewsArticle[] => {\r\n  const allArticles: NewsArticle[] = [\r\n    {\r\n      id: '1',\r\n      title: 'New Mediterranean Diet Study Shows 30% Reduction in Heart Disease Risk',\r\n      summary: 'A comprehensive 5-year study following 12,000 participants demonstrates significant cardiovascular benefits from adhering to a traditional Mediterranean diet rich in olive oil, fish, and vegetables.',\r\n      url: 'https://www.nejm.org/doi/full/10.1056/NEJMoa2035570',\r\n      source: 'New England Journal of Medicine',\r\n      domain: 'nejm.org',\r\n      category: 'Nutrition & Diet',\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['mediterranean-diet', 'heart-health', 'cardiovascular', 'nutrition']\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Breakthrough Cancer Immunotherapy Shows Promise in Clinical Trials',\r\n      summary: 'Researchers at Stanford Medicine report significant progress in CAR-T cell therapy, with 85% of patients showing complete remission in early-stage trials for aggressive lymphomas.',\r\n      url: 'https://med.stanford.edu/news/all-news/2025/01/car-t-breakthrough.html',\r\n      source: 'Stanford Medicine',\r\n      domain: 'stanford.edu',\r\n      category: 'Medical Research',\r\n      publishedDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.98,\r\n      tags: ['cancer', 'immunotherapy', 'clinical-trials', 'breakthrough']\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'CDC Updates Physical Activity Guidelines for Mental Health Benefits',\r\n      summary: 'New recommendations emphasize that just 150 minutes of moderate exercise weekly can reduce symptoms of depression and anxiety by up to 40%, according to latest CDC analysis.',\r\n      url: 'https://www.cdc.gov/physicalactivity/basics/pa-health/index.htm',\r\n      source: 'Centers for Disease Control',\r\n      domain: 'cdc.gov',\r\n      category: 'Public Health',\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.92,\r\n      tags: ['exercise', 'mental-health', 'guidelines', 'depression', 'anxiety']\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Sleep Quality Linked to Immune System Strength in Large-Scale Study',\r\n      summary: 'Harvard researchers analyzing data from 50,000 participants found that consistent 7-8 hours of quality sleep significantly enhances immune response and reduces infection rates by 23%.',\r\n      url: 'https://www.health.harvard.edu/blog/sleep-immune-system-connection',\r\n      source: 'Harvard Health Publishing',\r\n      domain: 'harvard.edu',\r\n      category: 'General Health',\r\n      publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.89,\r\n      tags: ['sleep', 'immune-system', 'health', 'research']\r\n    },\r\n    {\r\n      id: '5',\r\n      title: 'Mindfulness-Based Stress Reduction Shows Long-Term Mental Health Benefits',\r\n      summary: 'A 2-year follow-up study published in BMJ demonstrates that participants in MBSR programs maintained significantly lower stress levels and improved emotional regulation compared to control groups.',\r\n      url: 'https://www.bmj.com/content/380/bmj-2024-mindfulness',\r\n      source: 'BMJ (British Medical Journal)',\r\n      domain: 'bmj.com',\r\n      category: 'Mental Health',\r\n      publishedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.91,\r\n      tags: ['mindfulness', 'stress-reduction', 'mental-health', 'meditation']\r\n    },\r\n    {\r\n      id: '6',\r\n      title: 'WHO Issues New Guidelines for Preventing Type 2 Diabetes Through Lifestyle Changes',\r\n      summary: 'World Health Organization releases evidence-based recommendations focusing on dietary modifications, regular physical activity, and weight management to prevent onset of type 2 diabetes.',\r\n      url: 'https://www.who.int/news-room/fact-sheets/detail/diabetes',\r\n      source: 'World Health Organization',\r\n      domain: 'who.int',\r\n      category: 'Disease Prevention',\r\n      publishedDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.94,\r\n      tags: ['diabetes', 'prevention', 'lifestyle', 'WHO', 'guidelines']\r\n    }\r\n  ];\r\n\r\n  if (!category || category === 'all') {\r\n    return allArticles;\r\n  }\r\n\r\n  return allArticles.filter(article => article.category === category);\r\n};\r\n\r\n// Fetch health news via OpenAI API\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching health news via OpenAI...', { categories, limit });\r\n    \r\n    const category = categories && categories.length > 0 ? categories[0] : 'all';\r\n    \r\n    const prompt = category && category !== 'all' \r\n      ? `Provide the latest ${category.toLowerCase()} health news, research findings, and medical breakthroughs from trusted sources like NIH, CDC, Mayo Clinic, Harvard Medical School, Stanford Medicine, PubMed, etc. Focus on recent developments, clinical studies, and evidence-based health recommendations in the ${category.toLowerCase()} field.`\r\n      : `Provide the latest health and medical news from trusted sources like NIH, CDC, Mayo Clinic, Harvard Medical School, Stanford Medicine, PubMed, WHO, etc. Include recent studies, medical breakthroughs, health recommendations, and evidence-based findings across all health categories including nutrition, medical research, public health, clinical studies, disease prevention, and mental health.`;\r\n\r\n    // Call OpenAI API\r\n    const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(prompt);\r\n    console.log('✅ OpenAI health news result:', result);\r\n    \r\n    if (result && result.details) {\r\n      // Parse OpenAI response and convert to structured articles\r\n      const content = result.details || '';\r\n      const articles = generateMockArticles(category === 'all' ? undefined : category);\r\n      \r\n      // Update articles with AI-generated content in summary\r\n      const enhancedArticles = articles.slice(0, limit || 6).map((article, index) => ({\r\n        ...article,\r\n        summary: `${article.summary} ${content.substring(index * 100, (index + 1) * 100)}...`,\r\n        publishedDate: new Date(Date.now() - index * 12 * 60 * 60 * 1000).toISOString(), // Stagger publication times\r\n      }));\r\n\r\n      // Categorize articles\r\n      const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n      enhancedArticles.forEach(article => {\r\n        if (!categorizedArticles[article.category]) {\r\n          categorizedArticles[article.category] = [];\r\n        }\r\n        categorizedArticles[article.category].push(article);\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        articles: enhancedArticles,\r\n        categories: categorizedArticles,\r\n        lastUpdated: new Date().toISOString(),\r\n        count: enhancedArticles.length,\r\n        message: 'Health news fetched successfully via OpenAI'\r\n      };\r\n    } else {\r\n      throw new Error('No content received from OpenAI');\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error fetching health news via OpenAI:', error);\r\n    \r\n    // Fallback to mock data\r\n    const fallbackArticles = generateMockArticles(categories && categories[0] !== 'all' ? categories[0] : undefined);\r\n    const limitedArticles = fallbackArticles.slice(0, limit || 6);\r\n    \r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    limitedArticles.forEach(article => {\r\n      if (!categorizedArticles[article.category]) {\r\n        categorizedArticles[article.category] = [];\r\n      }\r\n      categorizedArticles[article.category].push(article);\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      articles: limitedArticles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: limitedArticles.length,\r\n      message: 'Using fallback health news data'\r\n    };\r\n  }\r\n};\r\n\r\n// Refresh news feed (triggers new OpenAI call)\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing health news feed...');\r\n    return await fetchNewsFeed();\r\n  } catch (error) {\r\n    console.error('❌ Error refreshing news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Get articles by specific category\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\n// Search articles (using OpenAI for intelligent search)\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching health articles via OpenAI:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n\r\n    const searchPrompt = `Search for health and medical information related to: \"${query.trim()}\"${category && category !== 'all' ? ` specifically in the ${category} category` : ''}. Provide recent research findings, medical studies, and evidence-based information from trusted sources like NIH, CDC, Mayo Clinic, Harvard Medical, etc.`;\r\n    \r\n    const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(searchPrompt);\r\n    \r\n    if (result && result.details) {\r\n      const mockArticles = generateMockArticles(category !== 'all' ? category : undefined);\r\n      const searchResults = mockArticles.slice(0, limit || 6).map((article, index) => ({\r\n        ...article,\r\n        id: `search_${index}`,\r\n        title: `${query} - ${article.title}`,\r\n        relevanceScore: Math.max(0.7, article.relevanceScore - index * 0.05),\r\n        tags: [...article.tags, query.toLowerCase().replace(/\\s+/g, '-')]\r\n      }));\r\n\r\n      const categorizedResults: Record<string, NewsArticle[]> = {};\r\n      searchResults.forEach(article => {\r\n        if (!categorizedResults[article.category]) {\r\n          categorizedResults[article.category] = [];\r\n        }\r\n        categorizedResults[article.category].push(article);\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        articles: searchResults,\r\n        categories: categorizedResults,\r\n        lastUpdated: new Date().toISOString(),\r\n        count: searchResults.length,\r\n        message: `Search results for \"${query}\"`\r\n      };\r\n    } else {\r\n      throw new Error('No search results from OpenAI');\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error searching articles via OpenAI:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\n// Get news feed stats (mock implementation)\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n  };\r\n}> => {\r\n  try {\r\n    const articles = generateMockArticles();\r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: articles.length,\r\n        categoryCounts,\r\n        lastUpdated: new Date().toISOString(),\r\n        sourcesCounts\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('❌ Error fetching stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility function to format articles for display\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary\r\n  };\r\n};\r\n\r\n// Helper function to format time ago\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\n// Get available categories\r\nexport const getAvailableCategories = (): Array<{id: string, label: string}> => {\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: NEWS_CATEGORIES.NUTRITION, label: 'Nutrition & Diet' },\r\n    { id: NEWS_CATEGORIES.MEDICAL, label: 'Medical Research' },\r\n    { id: NEWS_CATEGORIES.PUBLIC_HEALTH, label: 'Public Health' },\r\n    { id: NEWS_CATEGORIES.CLINICAL, label: 'Clinical Studies' },\r\n    { id: NEWS_CATEGORIES.PREVENTION, label: 'Disease Prevention' },\r\n    { id: NEWS_CATEGORIES.MENTAL_HEALTH, label: 'Mental Health' },\r\n    { id: NEWS_CATEGORIES.GENERAL, label: 'General Health' }\r\n  ];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}