{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __extends } from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport var DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\nexport function redirectPolicy(maximumRetries) {\n  if (maximumRetries === void 0) {\n    maximumRetries = 20;\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\nvar RedirectPolicy = /** @class */function (_super) {\n  __extends(RedirectPolicy, _super);\n  function RedirectPolicy(nextPolicy, options, maxRetries) {\n    if (maxRetries === void 0) {\n      maxRetries = 20;\n    }\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.maxRetries = maxRetries;\n    return _this;\n  }\n  RedirectPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return handleRedirect(_this, response, 0);\n    });\n  };\n  return RedirectPolicy;\n}(BaseRequestPolicy);\nexport { RedirectPolicy };\nfunction handleRedirect(policy, response, currentRetries) {\n  var request = response.request,\n    status = response.status;\n  var locationHeader = response.headers.get(\"location\");\n  if (locationHeader && (status === 300 || status === 301 && [\"GET\", \"HEAD\"].includes(request.method) || status === 302 && [\"GET\", \"POST\", \"HEAD\"].includes(request.method) || status === 303 && \"POST\" === request.method || status === 307) && (request.redirectLimit !== undefined && currentRetries < request.redirectLimit || request.redirectLimit === undefined && currentRetries < policy.maxRetries)) {\n    var builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n    // POST request with Status code 302 and 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    // reference: https://tools.ietf.org/html/rfc7231#page-57 && https://fetch.spec.whatwg.org/#http-redirect-fetch\n    if ((status === 302 || status === 303) && request.method === \"POST\") {\n      request.method = \"GET\";\n      delete request.body;\n    }\n    return policy._nextPolicy.sendRequest(request).then(function (res) {\n      return handleRedirect(policy, res, currentRetries + 1);\n    }).then(function (res) {\n      return recordRedirect(res, request.url);\n    });\n  }\n  return Promise.resolve(response);\n}\nfunction recordRedirect(response, redirect) {\n  // This is called as the recursive calls to handleRedirect() unwind,\n  // only record the deepest/last redirect\n  if (!response.redirected) {\n    response.redirected = true;\n    response.url = redirect;\n  }\n  return response;\n}","map":{"version":3,"names":["URLBuilder","BaseRequestPolicy","DefaultRedirectOptions","handleRedirects","maxRetries","redirectPolicy","maximumRetries","create","nextPolicy","options","RedirectPolicy","_super","__extends","_this","call","prototype","sendRequest","request","_nextPolicy","then","response","handleRedirect","policy","currentRetries","status","locationHeader","headers","get","includes","method","redirectLimit","undefined","builder","parse","url","setPath","toString","body","res","recordRedirect","Promise","resolve","redirect","redirected"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\policies\\redirectPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptionsLike,\n} from \"./requestPolicy\";\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /*\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /*\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20,\n};\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    },\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    readonly maxRetries = 20\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && [\"GET\", \"HEAD\"].includes(request.method)) ||\n      (status === 302 && [\"GET\", \"POST\", \"HEAD\"].includes(request.method)) ||\n      (status === 303 && \"POST\" === request.method) ||\n      status === 307) &&\n    ((request.redirectLimit !== undefined && currentRetries < request.redirectLimit) ||\n      (request.redirectLimit === undefined && currentRetries < policy.maxRetries))\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 302 and 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    // reference: https://tools.ietf.org/html/rfc7231#page-57 && https://fetch.spec.whatwg.org/#http-redirect-fetch\n    if ((status === 302 || status === 303) && request.method === \"POST\") {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1))\n      .then((res) => recordRedirect(res, request.url));\n  }\n\n  return Promise.resolve(response);\n}\n\nfunction recordRedirect(response: HttpOperationResponse, redirect: string): HttpOperationResponse {\n  // This is called as the recursive calls to handleRedirect() unwind,\n  // only record the deepest/last redirect\n  if (!response.redirected) {\n    response.redirected = true;\n    response.url = redirect;\n  }\n  return response;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}