{"ast":null,"code":"// Simple newsService stub for user app\n\nexport const fetchNewsFeed = async (categories, limit) => {\n  // Stub implementation - in a real app this would connect to the news API\n  return {\n    success: true,\n    articles: [{\n      id: '1',\n      title: 'Sample Health News',\n      summary: 'This is a sample news article for the user dashboard.',\n      url: '#',\n      source: 'Health Source',\n      publishedDate: new Date().toISOString(),\n      category: 'general',\n      tags: ['health', 'wellness']\n    }]\n  };\n};\nexport const getArticlesByCategory = async (category, limit) => {\n  const result = await fetchNewsFeed([category], limit);\n  return result;\n};\nexport const refreshNewsFeed = async () => {\n  // Refresh news feed - stub implementation\n  return await fetchNewsFeed();\n};\nexport const searchNewsArticles = async (query, limit) => {\n  // Search news articles - stub implementation\n  return await fetchNewsFeed(undefined, limit);\n};","map":{"version":3,"names":["fetchNewsFeed","categories","limit","success","articles","id","title","summary","url","source","publishedDate","Date","toISOString","category","tags","getArticlesByCategory","result","refreshNewsFeed","searchNewsArticles","query","undefined"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// Simple newsService stub for user app\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  publishedDate: string;\r\n  category: string;\r\n  tags: string[];\r\n}\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Stub implementation - in a real app this would connect to the news API\r\n  return {\r\n    success: true,\r\n    articles: [\r\n      {\r\n        id: '1',\r\n        title: 'Sample Health News',\r\n        summary: 'This is a sample news article for the user dashboard.',\r\n        url: '#',\r\n        source: 'Health Source',\r\n        publishedDate: new Date().toISOString(),\r\n        category: 'general',\r\n        tags: ['health', 'wellness']\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  const result = await fetchNewsFeed([category], limit);\r\n  return result;\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Refresh news feed - stub implementation\r\n  return await fetchNewsFeed();\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Search news articles - stub implementation\r\n  return await fetchNewsFeed(undefined, limit);\r\n};"],"mappings":"AAAA;;AAYA,OAAO,MAAMA,aAAa,GAAG,MAAAA,CAAOC,UAAqB,EAAEC,KAAc,KAA6D;EACpI;EACA,OAAO;IACLC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,CACR;MACEC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,oBAAoB;MAC3BC,OAAO,EAAE,uDAAuD;MAChEC,GAAG,EAAE,GAAG;MACRC,MAAM,EAAE,eAAe;MACvBC,aAAa,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACvCC,QAAQ,EAAE,SAAS;MACnBC,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU;IAC7B,CAAC;EAEL,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOF,QAAgB,EAAEX,KAAc,KAA6D;EACvI,MAAMc,MAAM,GAAG,MAAMhB,aAAa,CAAC,CAACa,QAAQ,CAAC,EAAEX,KAAK,CAAC;EACrD,OAAOc,MAAM;AACf,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAoE;EACjG;EACA,OAAO,MAAMjB,aAAa,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMkB,kBAAkB,GAAG,MAAAA,CAAOC,KAAa,EAAEjB,KAAc,KAA6D;EACjI;EACA,OAAO,MAAMF,aAAa,CAACoB,SAAS,EAAElB,KAAK,CAAC;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}