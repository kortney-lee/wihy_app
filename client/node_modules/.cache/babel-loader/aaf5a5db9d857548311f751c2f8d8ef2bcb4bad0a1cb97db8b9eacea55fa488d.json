{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'cnn.com': 0.8,\n  // News sources (lower trust for health info)\n  'npr.org': 0.9,\n  'pbs.org': 0.9,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'foxnews.com': 0.7,\n  'reuters.com': 0.9,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8,\n  'latimes.com': 0.8\n};\n\n// RSS Feed URLs for different categories\nconst RSS_FEEDS = {\n  GENERAL: ['http://rss.cnn.com/rss/cnn_topstories.rss', 'https://feeds.npr.org/1002/rss.xml', 'https://www.pbs.org/newshour/feeds/rss/headlines', 'https://www.cbsnews.com/latest/rss/main', 'http://feeds.abcnews.com/abcnews/usheadlines', 'https://feeds.reuters.com/reuters/topNews'],\n  HEALTH: ['http://rss.cnn.com/rss/cnn_health.rss', 'https://feeds.npr.org/1128/rss.xml',\n  // NPR Health\n  'https://www.cbsnews.com/latest/rss/health', 'http://feeds.abcnews.com/abcnews/healthheadlines', 'https://feeds.reuters.com/reuters/health'],\n  SCIENCE: ['http://rss.cnn.com/rss/cnn_tech.rss', 'https://feeds.npr.org/1007/rss.xml',\n  // NPR Science\n  'https://feeds.reuters.com/reuters/scienceNews']\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'Nutrition & Diet',\n  MEDICAL: 'Medical Research',\n  PUBLIC_HEALTH: 'Public Health',\n  CLINICAL: 'Clinical Studies',\n  PREVENTION: 'Disease Prevention',\n  MENTAL_HEALTH: 'Mental Health',\n  GENERAL: 'General Health'\n};\n\n// Helper function to validate if a domain is trusted\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\n\n// Function to parse RSS feed and extract articles\nconst parseRSSFeed = async feedUrl => {\n  try {\n    var _rssData$items;\n    console.log('📡 Fetching RSS feed:', feedUrl);\n\n    // Use your backend to fetch and parse RSS (to avoid CORS issues)\n    const response = await fetch(`${API_URL}/news/rss?url=${encodeURIComponent(feedUrl)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const rssData = await response.json();\n    console.log('✅ RSS data received:', rssData);\n\n    // Convert RSS items to NewsArticle format\n    const articles = ((_rssData$items = rssData.items) === null || _rssData$items === void 0 ? void 0 : _rssData$items.map((item, index) => {\n      const url = item.link || item.url || '';\n      const domain = extractDomain(url);\n      const source = extractSource(domain);\n      return {\n        id: `rss_${Date.now()}_${index}`,\n        title: item.title || 'No title',\n        summary: item.description || item.summary || 'No summary available',\n        url: url,\n        source: source,\n        domain: domain,\n        category: categorizeArticle(item.title, item.description),\n        publishedDate: item.pubDate || item.published || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(item.title, item.description),\n        tags: extractTags(item.title, item.description)\n      };\n    })) || [];\n    return articles;\n  } catch (error) {\n    console.error('❌ Error parsing RSS feed:', feedUrl, error);\n    return [];\n  }\n};\n\n// Helper function to extract domain from URL\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname.toLowerCase();\n  } catch {\n    return 'unknown';\n  }\n};\n\n// Helper function to extract source name from domain\nconst extractSource = domain => {\n  const sourceMap = {\n    'cnn.com': 'CNN',\n    'npr.org': 'NPR',\n    'pbs.org': 'PBS NewsHour',\n    'cbsnews.com': 'CBS News',\n    'abcnews.com': 'ABC News',\n    'foxnews.com': 'Fox News',\n    'reuters.com': 'Reuters',\n    'washingtonpost.com': 'The Washington Post',\n    'nytimes.com': 'The New York Times',\n    'latimes.com': 'Los Angeles Times'\n  };\n  for (const [key, value] of Object.entries(sourceMap)) {\n    if (domain.includes(key)) {\n      return value;\n    }\n  }\n  return domain;\n};\n\n// Helper function to categorize articles based on content\nconst categorizeArticle = (title, description) => {\n  const content = `${title} ${description}`.toLowerCase();\n\n  // Health-related keywords\n  const healthKeywords = ['health', 'medical', 'doctor', 'hospital', 'disease', 'virus', 'vaccine', 'medicine', 'treatment', 'surgery', 'patient'];\n  const nutritionKeywords = ['food', 'diet', 'nutrition', 'eating', 'recipe', 'restaurant', 'meal', 'vitamin', 'supplement'];\n  const mentalHealthKeywords = ['mental health', 'depression', 'anxiety', 'stress', 'therapy', 'psychology'];\n  const preventionKeywords = ['prevention', 'screening', 'checkup', 'exercise', 'fitness', 'wellness'];\n  if (mentalHealthKeywords.some(keyword => content.includes(keyword))) {\n    return NEWS_CATEGORIES.MENTAL_HEALTH;\n  }\n  if (nutritionKeywords.some(keyword => content.includes(keyword))) {\n    return NEWS_CATEGORIES.NUTRITION;\n  }\n  if (preventionKeywords.some(keyword => content.includes(keyword))) {\n    return NEWS_CATEGORIES.PREVENTION;\n  }\n  if (healthKeywords.some(keyword => content.includes(keyword))) {\n    return NEWS_CATEGORIES.MEDICAL;\n  }\n  return NEWS_CATEGORIES.GENERAL;\n};\n\n// Helper function to calculate relevance score based on health content\nconst calculateRelevanceScore = (title, description) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n\n  // Base score + bonus for health relevance\n  let score = 0.5;\n  score += matchingKeywords.length * 0.1;\n\n  // Bonus for trusted domains\n  return Math.min(score, 1.0);\n};\n\n// Helper function to extract tags from content\nconst extractTags = (title, description) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const tags = [];\n  const tagKeywords = ['health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise', 'mental-health', 'wellness', 'prevention', 'treatment', 'research', 'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor'];\n  tagKeywords.forEach(keyword => {\n    if (content.includes(keyword.replace('-', ' '))) {\n      tags.push(keyword);\n    }\n  });\n  return tags.slice(0, 5); // Limit to 5 tags\n};\n\n// Fetch health news from RSS feeds\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    console.log('🔍 Fetching health news from RSS feeds...', {\n      categories,\n      limit\n    });\n    let feedsToFetch = [];\n\n    // Determine which feeds to fetch based on category\n    if (!categories || categories.includes('all') || categories.length === 0) {\n      feedsToFetch = [...RSS_FEEDS.HEALTH, ...RSS_FEEDS.GENERAL.slice(0, 2)]; // Mix of health and general\n    } else {\n      feedsToFetch = RSS_FEEDS.HEALTH; // Focus on health feeds\n    }\n\n    // Fetch articles from all selected feeds\n    const allArticlesPromises = feedsToFetch.map(feedUrl => parseRSSFeed(feedUrl));\n    const articleArrays = await Promise.all(allArticlesPromises);\n\n    // Flatten and combine all articles\n    let allArticles = articleArrays.flat();\n\n    // Filter for health relevance if needed\n    if (categories && !categories.includes('all')) {\n      const targetCategory = categories[0];\n      if (Object.values(NEWS_CATEGORIES).includes(targetCategory)) {\n        allArticles = allArticles.filter(article => article.category === targetCategory || article.tags.some(tag => tag.includes(targetCategory.toLowerCase().split(' ')[0])));\n      }\n    }\n\n    // Sort by relevance score and publication date\n    allArticles = allArticles.sort((a, b) => {\n      const scoreA = a.relevanceScore;\n      const scoreB = b.relevanceScore;\n      if (scoreB !== scoreA) return scoreB - scoreA;\n      return new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime();\n    }).slice(0, limit || 10); // Limit results\n\n    // Categorize articles\n    const categorizedArticles = {};\n    allArticles.forEach(article => {\n      if (!categorizedArticles[article.category]) {\n        categorizedArticles[article.category] = [];\n      }\n      categorizedArticles[article.category].push(article);\n    });\n    console.log('✅ RSS news feed fetched successfully:', allArticles.length, 'articles');\n    return {\n      success: true,\n      articles: allArticles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: allArticles.length,\n      message: 'Health news fetched successfully from RSS feeds'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS news feed:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed from RSS sources'\n    };\n  }\n};\n\n// Refresh news feed (triggers new RSS fetch)\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing RSS news feed...');\n    return await fetchNewsFeed();\n  } catch (error) {\n    console.error('❌ Error refreshing RSS news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\n\n// Get articles by specific category\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching RSS articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\n\n// Search articles (search through fetched RSS articles)\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching RSS articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n\n    // First fetch articles\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 50); // Get more for searching\n\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available to search'\n      };\n    }\n    const searchTerm = query.toLowerCase();\n\n    // Filter articles based on search query\n    const matchingArticles = feedResponse.articles.filter(article => article.title.toLowerCase().includes(searchTerm) || article.summary.toLowerCase().includes(searchTerm) || article.tags.some(tag => tag.includes(searchTerm))).map(article => ({\n      ...article,\n      relevanceScore: calculateSearchRelevance(article, searchTerm)\n    })).sort((a, b) => b.relevanceScore - a.relevanceScore).slice(0, limit || 10);\n\n    // Re-categorize results\n    const categorizedResults = {};\n    matchingArticles.forEach(article => {\n      if (!categorizedResults[article.category]) {\n        categorizedResults[article.category] = [];\n      }\n      categorizedResults[article.category].push(article);\n    });\n    return {\n      success: true,\n      articles: matchingArticles,\n      categories: categorizedResults,\n      lastUpdated: new Date().toISOString(),\n      count: matchingArticles.length,\n      message: `Search results for \"${query}\" from RSS feeds`\n    };\n  } catch (error) {\n    console.error('❌ Error searching RSS articles:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\n\n// Helper function to calculate search relevance\nconst calculateSearchRelevance = (article, searchTerm) => {\n  let score = 0;\n\n  // Title matches get higher score\n  if (article.title.toLowerCase().includes(searchTerm)) {\n    score += 0.5;\n  }\n\n  // Summary matches\n  if (article.summary.toLowerCase().includes(searchTerm)) {\n    score += 0.3;\n  }\n\n  // Tag matches\n  if (article.tags.some(tag => tag.includes(searchTerm))) {\n    score += 0.2;\n  }\n  return Math.min(score + article.relevanceScore, 1.0);\n};\n\n// Get news feed stats\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed();\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility function to format articles for display\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary\n  };\n};\n\n// Helper function to format time ago\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\n\n// Get available categories\nexport const getAvailableCategories = () => {\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: NEWS_CATEGORIES.NUTRITION,\n    label: 'Nutrition & Diet'\n  }, {\n    id: NEWS_CATEGORIES.MEDICAL,\n    label: 'Medical Research'\n  }, {\n    id: NEWS_CATEGORIES.PUBLIC_HEALTH,\n    label: 'Public Health'\n  }, {\n    id: NEWS_CATEGORIES.CLINICAL,\n    label: 'Clinical Studies'\n  }, {\n    id: NEWS_CATEGORIES.PREVENTION,\n    label: 'Disease Prevention'\n  }, {\n    id: NEWS_CATEGORIES.MENTAL_HEALTH,\n    label: 'Mental Health'\n  }, {\n    id: NEWS_CATEGORIES.GENERAL,\n    label: 'General Health'\n  }];\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","RSS_FEEDS","GENERAL","HEALTH","SCIENCE","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","isTrustedDomain","url","domain","URL","hostname","toLowerCase","Object","keys","some","trustedDomain","includes","parseRSSFeed","feedUrl","_rssData$items","console","log","response","fetch","encodeURIComponent","ok","Error","status","rssData","json","articles","items","map","item","index","link","extractDomain","source","extractSource","id","Date","now","title","summary","description","category","categorizeArticle","publishedDate","pubDate","published","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","error","sourceMap","key","value","entries","content","healthKeywords","nutritionKeywords","mentalHealthKeywords","preventionKeywords","keyword","matchingKeywords","filter","score","length","Math","min","tagKeywords","forEach","replace","push","slice","fetchNewsFeed","categories","limit","feedsToFetch","allArticlesPromises","articleArrays","Promise","all","allArticles","flat","targetCategory","values","article","tag","split","sort","a","b","scoreA","scoreB","getTime","categorizedArticles","success","lastUpdated","count","message","refreshNewsFeed","getArticlesByCategory","searchNewsArticles","query","trim","feedResponse","undefined","searchTerm","matchingArticles","calculateSearchRelevance","categorizedResults","getNewsFeedStats","categoryCounts","sourcesCounts","stats","totalArticles","formatArticleForDisplay","formattedDate","formatTimeAgo","isTrusted","relevancePercentage","round","shortSummary","substring","dateString","diffInHours","floor","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","label"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'cnn.com': 0.8, // News sources (lower trust for health info)\r\n  'npr.org': 0.9,\r\n  'pbs.org': 0.9,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'foxnews.com': 0.7,\r\n  'reuters.com': 0.9,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8,\r\n  'latimes.com': 0.8\r\n};\r\n\r\n// RSS Feed URLs for different categories\r\nconst RSS_FEEDS = {\r\n  GENERAL: [\r\n    'http://rss.cnn.com/rss/cnn_topstories.rss',\r\n    'https://feeds.npr.org/1002/rss.xml',\r\n    'https://www.pbs.org/newshour/feeds/rss/headlines',\r\n    'https://www.cbsnews.com/latest/rss/main',\r\n    'http://feeds.abcnews.com/abcnews/usheadlines',\r\n    'https://feeds.reuters.com/reuters/topNews'\r\n  ],\r\n  HEALTH: [\r\n    'http://rss.cnn.com/rss/cnn_health.rss',\r\n    'https://feeds.npr.org/1128/rss.xml', // NPR Health\r\n    'https://www.cbsnews.com/latest/rss/health',\r\n    'http://feeds.abcnews.com/abcnews/healthheadlines',\r\n    'https://feeds.reuters.com/reuters/health'\r\n  ],\r\n  SCIENCE: [\r\n    'http://rss.cnn.com/rss/cnn_tech.rss',\r\n    'https://feeds.npr.org/1007/rss.xml', // NPR Science\r\n    'https://feeds.reuters.com/reuters/scienceNews'\r\n  ]\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'Nutrition & Diet',\r\n  MEDICAL: 'Medical Research',\r\n  PUBLIC_HEALTH: 'Public Health',\r\n  CLINICAL: 'Clinical Studies',\r\n  PREVENTION: 'Disease Prevention',\r\n  MENTAL_HEALTH: 'Mental Health',\r\n  GENERAL: 'General Health'\r\n};\r\n\r\n// Helper function to validate if a domain is trusted\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Function to parse RSS feed and extract articles\r\nconst parseRSSFeed = async (feedUrl: string): Promise<NewsArticle[]> => {\r\n  try {\r\n    console.log('📡 Fetching RSS feed:', feedUrl);\r\n    \r\n    // Use your backend to fetch and parse RSS (to avoid CORS issues)\r\n    const response = await fetch(`${API_URL}/news/rss?url=${encodeURIComponent(feedUrl)}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const rssData = await response.json();\r\n    console.log('✅ RSS data received:', rssData);\r\n    \r\n    // Convert RSS items to NewsArticle format\r\n    const articles: NewsArticle[] = rssData.items?.map((item: any, index: number) => {\r\n      const url = item.link || item.url || '';\r\n      const domain = extractDomain(url);\r\n      const source = extractSource(domain);\r\n      \r\n      return {\r\n        id: `rss_${Date.now()}_${index}`,\r\n        title: item.title || 'No title',\r\n        summary: item.description || item.summary || 'No summary available',\r\n        url: url,\r\n        source: source,\r\n        domain: domain,\r\n        category: categorizeArticle(item.title, item.description),\r\n        publishedDate: item.pubDate || item.published || new Date().toISOString(),\r\n        relevanceScore: calculateRelevanceScore(item.title, item.description),\r\n        tags: extractTags(item.title, item.description)\r\n      };\r\n    }) || [];\r\n    \r\n    return articles;\r\n  } catch (error) {\r\n    console.error('❌ Error parsing RSS feed:', feedUrl, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to extract domain from URL\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname.toLowerCase();\r\n  } catch {\r\n    return 'unknown';\r\n  }\r\n};\r\n\r\n// Helper function to extract source name from domain\r\nconst extractSource = (domain: string): string => {\r\n  const sourceMap: Record<string, string> = {\r\n    'cnn.com': 'CNN',\r\n    'npr.org': 'NPR',\r\n    'pbs.org': 'PBS NewsHour',\r\n    'cbsnews.com': 'CBS News',\r\n    'abcnews.com': 'ABC News',\r\n    'foxnews.com': 'Fox News',\r\n    'reuters.com': 'Reuters',\r\n    'washingtonpost.com': 'The Washington Post',\r\n    'nytimes.com': 'The New York Times',\r\n    'latimes.com': 'Los Angeles Times'\r\n  };\r\n  \r\n  for (const [key, value] of Object.entries(sourceMap)) {\r\n    if (domain.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return domain;\r\n};\r\n\r\n// Helper function to categorize articles based on content\r\nconst categorizeArticle = (title: string, description: string): string => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  // Health-related keywords\r\n  const healthKeywords = ['health', 'medical', 'doctor', 'hospital', 'disease', 'virus', 'vaccine', 'medicine', 'treatment', 'surgery', 'patient'];\r\n  const nutritionKeywords = ['food', 'diet', 'nutrition', 'eating', 'recipe', 'restaurant', 'meal', 'vitamin', 'supplement'];\r\n  const mentalHealthKeywords = ['mental health', 'depression', 'anxiety', 'stress', 'therapy', 'psychology'];\r\n  const preventionKeywords = ['prevention', 'screening', 'checkup', 'exercise', 'fitness', 'wellness'];\r\n  \r\n  if (mentalHealthKeywords.some(keyword => content.includes(keyword))) {\r\n    return NEWS_CATEGORIES.MENTAL_HEALTH;\r\n  }\r\n  \r\n  if (nutritionKeywords.some(keyword => content.includes(keyword))) {\r\n    return NEWS_CATEGORIES.NUTRITION;\r\n  }\r\n  \r\n  if (preventionKeywords.some(keyword => content.includes(keyword))) {\r\n    return NEWS_CATEGORIES.PREVENTION;\r\n  }\r\n  \r\n  if (healthKeywords.some(keyword => content.includes(keyword))) {\r\n    return NEWS_CATEGORIES.MEDICAL;\r\n  }\r\n  \r\n  return NEWS_CATEGORIES.GENERAL;\r\n};\r\n\r\n// Helper function to calculate relevance score based on health content\r\nconst calculateRelevanceScore = (title: string, description: string): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  // Base score + bonus for health relevance\r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.1);\r\n  \r\n  // Bonus for trusted domains\r\n  return Math.min(score, 1.0);\r\n};\r\n\r\n// Helper function to extract tags from content\r\nconst extractTags = (title: string, description: string): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const tags: string[] = [];\r\n  \r\n  const tagKeywords = [\r\n    'health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise',\r\n    'mental-health', 'wellness', 'prevention', 'treatment', 'research',\r\n    'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor'\r\n  ];\r\n  \r\n  tagKeywords.forEach(keyword => {\r\n    if (content.includes(keyword.replace('-', ' '))) {\r\n      tags.push(keyword);\r\n    }\r\n  });\r\n  \r\n  return tags.slice(0, 5); // Limit to 5 tags\r\n};\r\n\r\n// Fetch health news from RSS feeds\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching health news from RSS feeds...', { categories, limit });\r\n    \r\n    let feedsToFetch: string[] = [];\r\n    \r\n    // Determine which feeds to fetch based on category\r\n    if (!categories || categories.includes('all') || categories.length === 0) {\r\n      feedsToFetch = [...RSS_FEEDS.HEALTH, ...RSS_FEEDS.GENERAL.slice(0, 2)]; // Mix of health and general\r\n    } else {\r\n      feedsToFetch = RSS_FEEDS.HEALTH; // Focus on health feeds\r\n    }\r\n    \r\n    // Fetch articles from all selected feeds\r\n    const allArticlesPromises = feedsToFetch.map(feedUrl => parseRSSFeed(feedUrl));\r\n    const articleArrays = await Promise.all(allArticlesPromises);\r\n    \r\n    // Flatten and combine all articles\r\n    let allArticles: NewsArticle[] = articleArrays.flat();\r\n    \r\n    // Filter for health relevance if needed\r\n    if (categories && !categories.includes('all')) {\r\n      const targetCategory = categories[0];\r\n      if (Object.values(NEWS_CATEGORIES).includes(targetCategory)) {\r\n        allArticles = allArticles.filter(article => \r\n          article.category === targetCategory || \r\n          article.tags.some(tag => tag.includes(targetCategory.toLowerCase().split(' ')[0]))\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Sort by relevance score and publication date\r\n    allArticles = allArticles\r\n      .sort((a, b) => {\r\n        const scoreA = a.relevanceScore;\r\n        const scoreB = b.relevanceScore;\r\n        if (scoreB !== scoreA) return scoreB - scoreA;\r\n        return new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime();\r\n      })\r\n      .slice(0, limit || 10); // Limit results\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    allArticles.forEach(article => {\r\n      if (!categorizedArticles[article.category]) {\r\n        categorizedArticles[article.category] = [];\r\n      }\r\n      categorizedArticles[article.category].push(article);\r\n    });\r\n    \r\n    console.log('✅ RSS news feed fetched successfully:', allArticles.length, 'articles');\r\n    \r\n    return {\r\n      success: true,\r\n      articles: allArticles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: allArticles.length,\r\n      message: 'Health news fetched successfully from RSS feeds'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching RSS news feed:', error);\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed from RSS sources'\r\n    };\r\n  }\r\n};\r\n\r\n// Refresh news feed (triggers new RSS fetch)\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing RSS news feed...');\r\n    return await fetchNewsFeed();\r\n  } catch (error) {\r\n    console.error('❌ Error refreshing RSS news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Get articles by specific category\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching RSS articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\n// Search articles (search through fetched RSS articles)\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching RSS articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    // First fetch articles\r\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 50); // Get more for searching\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available to search'\r\n      };\r\n    }\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    \r\n    // Filter articles based on search query\r\n    const matchingArticles = feedResponse.articles\r\n      .filter(article => \r\n        article.title.toLowerCase().includes(searchTerm) ||\r\n        article.summary.toLowerCase().includes(searchTerm) ||\r\n        article.tags.some(tag => tag.includes(searchTerm))\r\n      )\r\n      .map(article => ({\r\n        ...article,\r\n        relevanceScore: calculateSearchRelevance(article, searchTerm)\r\n      }))\r\n      .sort((a, b) => b.relevanceScore - a.relevanceScore)\r\n      .slice(0, limit || 10);\r\n    \r\n    // Re-categorize results\r\n    const categorizedResults: Record<string, NewsArticle[]> = {};\r\n    matchingArticles.forEach(article => {\r\n      if (!categorizedResults[article.category]) {\r\n        categorizedResults[article.category] = [];\r\n      }\r\n      categorizedResults[article.category].push(article);\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      articles: matchingArticles,\r\n      categories: categorizedResults,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: matchingArticles.length,\r\n      message: `Search results for \"${query}\" from RSS feeds`\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error searching RSS articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to calculate search relevance\r\nconst calculateSearchRelevance = (article: NewsArticle, searchTerm: string): number => {\r\n  let score = 0;\r\n  \r\n  // Title matches get higher score\r\n  if (article.title.toLowerCase().includes(searchTerm)) {\r\n    score += 0.5;\r\n  }\r\n  \r\n  // Summary matches\r\n  if (article.summary.toLowerCase().includes(searchTerm)) {\r\n    score += 0.3;\r\n  }\r\n  \r\n  // Tag matches\r\n  if (article.tags.some(tag => tag.includes(searchTerm))) {\r\n    score += 0.2;\r\n  }\r\n  \r\n  return Math.min(score + article.relevanceScore, 1.0);\r\n};\r\n\r\n// Get news feed stats\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed();\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('❌ Error fetching RSS stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility function to format articles for display\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary\r\n  };\r\n};\r\n\r\n// Helper function to format time ago\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\n// Get available categories\r\nexport const getAvailableCategories = (): Array<{id: string, label: string}> => {\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: NEWS_CATEGORIES.NUTRITION, label: 'Nutrition & Diet' },\r\n    { id: NEWS_CATEGORIES.MEDICAL, label: 'Medical Research' },\r\n    { id: NEWS_CATEGORIES.PUBLIC_HEALTH, label: 'Public Health' },\r\n    { id: NEWS_CATEGORIES.CLINICAL, label: 'Clinical Studies' },\r\n    { id: NEWS_CATEGORIES.PREVENTION, label: 'Disease Prevention' },\r\n    { id: NEWS_CATEGORIES.MENTAL_HEALTH, label: 'Mental Health' },\r\n    { id: NEWS_CATEGORIES.GENERAL, label: 'General Health' }\r\n  ];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}