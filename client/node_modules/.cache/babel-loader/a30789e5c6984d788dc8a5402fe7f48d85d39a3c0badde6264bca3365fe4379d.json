{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\NovaChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n// Extract nutrition data function moved from SearchResults\nconst extractNutritionData = (results, dataSource) => {\n  console.log('=== EXTRACTING NUTRITION DATA IN NOVACHART ===');\n  console.log('DataSource:', dataSource);\n  console.log('Results type:', typeof results);\n  if (dataSource === 'vnutrition') {\n    try {\n      var _nutrition, _nutrition2, _nutrition3, _nutrition4, _nutrition5;\n      console.log('Processing vnutrition data source');\n      let nutrition;\n      if (typeof results === 'string') {\n        console.log('Parsing string results');\n        nutrition = JSON.parse(results);\n      } else {\n        console.log('Using object results directly');\n        nutrition = results;\n      }\n      console.log('=== RAW NUTRITION OBJECT ===');\n      console.log('Full object:', nutrition);\n      console.log('Object keys:', Object.keys(nutrition || {}));\n\n      // Log each field we're looking for\n      console.log('=== FIELD ANALYSIS ===');\n      console.log('nova_classification:', (_nutrition = nutrition) === null || _nutrition === void 0 ? void 0 : _nutrition.nova_classification);\n      console.log('nova_description:', (_nutrition2 = nutrition) === null || _nutrition2 === void 0 ? void 0 : _nutrition2.nova_description);\n      console.log('calories_per_serving:', (_nutrition3 = nutrition) === null || _nutrition3 === void 0 ? void 0 : _nutrition3.calories_per_serving);\n      console.log('protein_g:', (_nutrition4 = nutrition) === null || _nutrition4 === void 0 ? void 0 : _nutrition4.protein_g);\n      console.log('found status:', (_nutrition5 = nutrition) === null || _nutrition5 === void 0 ? void 0 : _nutrition5.found);\n      if (nutrition && nutrition.found !== false) {\n        const extractedData = {\n          calories: nutrition.calories_per_serving || 0,\n          protein: nutrition.protein_g || 0,\n          carbs: nutrition.carbs_g || 0,\n          fat: nutrition.fat_g || 0,\n          fiber: nutrition.fiber_g || 0,\n          sugar: nutrition.sugar_g || 0,\n          sodium: nutrition.sodium_mg || 0,\n          novaScore: nutrition.nova_classification || 1,\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\n        };\n        console.log('=== EXTRACTED DATA ===');\n        console.log('Final extracted data:', extractedData);\n        console.log('NOVA Score:', extractedData.novaScore);\n        return extractedData;\n      } else {\n        var _nutrition6;\n        console.log('No valid nutrition data - found:', (_nutrition6 = nutrition) === null || _nutrition6 === void 0 ? void 0 : _nutrition6.found);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error parsing nutrition data:', error);\n      return null;\n    }\n  }\n  console.log('Not vnutrition source');\n  return null;\n};\nconst NovaChart = ({\n  query,\n  results,\n  dataSource\n}) => {\n  // Extract nutrition data using internal function\n  const nutritionData = extractNutritionData(results, dataSource);\n\n  // Only render if we have nutrition data\n  if (!nutritionData || dataSource !== 'vnutrition') {\n    return null;\n  }\n  const {\n    novaScore,\n    processedLevel\n  } = nutritionData;\n\n  // NOVA classification descriptions\n  const novaDescriptions = {\n    1: 'Unprocessed or minimally processed foods',\n    2: 'Processed culinary ingredients',\n    3: 'Processed foods',\n    4: 'Ultra-processed foods'\n  };\n\n  // Colors for each NOVA group\n  const novaColors = {\n    1: '#10B981',\n    // Green - Good\n    2: '#F59E0B',\n    // Yellow - Okay\n    3: '#F97316',\n    // Orange - Caution\n    4: '#EF4444' // Red - Avoid\n  };\n\n  // Create data for all 4 NOVA groups\n  const data = {\n    labels: ['Group 1', 'Group 2', 'Group 3', 'Group 4'],\n    datasets: [{\n      label: 'NOVA Classification',\n      data: [novaScore === 1 ? 1 : 0, novaScore === 2 ? 1 : 0, novaScore === 3 ? 1 : 0, novaScore === 4 ? 1 : 0],\n      backgroundColor: [novaColors[1], novaColors[2], novaColors[3], novaColors[4]],\n      borderWidth: 2,\n      borderColor: [novaScore === 1 ? '#059669' : '#E5E7EB', novaScore === 2 ? '#D97706' : '#E5E7EB', novaScore === 3 ? '#EA580C' : '#E5E7EB', novaScore === 4 ? '#DC2626' : '#E5E7EB']\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          title: function (context) {\n            const groupNum = context[0].dataIndex + 1;\n            return `NOVA Group ${groupNum}`;\n          },\n          label: function (context) {\n            const groupNum = context.dataIndex + 1;\n            return novaDescriptions[groupNum];\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 1,\n        display: false\n      },\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          font: {\n            size: 12\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '200px',\n        marginBottom: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '16px',\n            height: '16px',\n            backgroundColor: novaColors[novaScore],\n            borderRadius: '3px',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '600',\n            color: '#374151',\n            fontSize: '1rem'\n          },\n          children: [\"NOVA Group \", novaScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '0.875rem',\n          color: '#6B7280',\n          marginBottom: '0.5rem'\n        },\n        children: novaDescriptions[novaScore]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '0.875rem',\n          color: '#374151',\n          fontStyle: 'italic'\n        },\n        children: processedLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_c = NovaChart;\nexport default NovaChart;\nvar _c;\n$RefreshReg$(_c, \"NovaChart\");","map":{"version":3,"names":["React","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","jsxDEV","_jsxDEV","register","extractNutritionData","results","dataSource","console","log","_nutrition","_nutrition2","_nutrition3","_nutrition4","_nutrition5","nutrition","JSON","parse","Object","keys","nova_classification","nova_description","calories_per_serving","protein_g","found","extractedData","calories","protein","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","novaScore","processedLevel","processed_level","_nutrition6","error","NovaChart","query","nutritionData","novaDescriptions","novaColors","data","labels","datasets","label","backgroundColor","borderWidth","borderColor","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","title","context","groupNum","dataIndex","scales","y","beginAtZero","max","x","grid","ticks","font","size","style","textAlign","children","height","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","alignItems","justifyContent","width","borderRadius","marginRight","fontWeight","color","fontSize","fontStyle","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/NovaChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\ninterface NovaChartProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n}\r\n\r\n// Extract nutrition data function moved from SearchResults\r\nconst extractNutritionData = (results: string, dataSource: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NOVACHART ===');\r\n  console.log('DataSource:', dataSource);\r\n  console.log('Results type:', typeof results);\r\n  \r\n  if (dataSource === 'vnutrition') {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      // Log each field we're looking for\r\n      console.log('=== FIELD ANALYSIS ===');\r\n      console.log('nova_classification:', nutrition?.nova_classification);\r\n      console.log('nova_description:', nutrition?.nova_description);\r\n      console.log('calories_per_serving:', nutrition?.calories_per_serving);\r\n      console.log('protein_g:', nutrition?.protein_g);\r\n      console.log('found status:', nutrition?.found);\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        console.log('NOVA Score:', extractedData.novaScore);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NovaChart: React.FC<NovaChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { novaScore, processedLevel } = nutritionData;\r\n\r\n  // NOVA classification descriptions\r\n  const novaDescriptions = {\r\n    1: 'Unprocessed or minimally processed foods',\r\n    2: 'Processed culinary ingredients',\r\n    3: 'Processed foods',\r\n    4: 'Ultra-processed foods'\r\n  };\r\n\r\n  // Colors for each NOVA group\r\n  const novaColors = {\r\n    1: '#10B981', // Green - Good\r\n    2: '#F59E0B', // Yellow - Okay\r\n    3: '#F97316', // Orange - Caution\r\n    4: '#EF4444'  // Red - Avoid\r\n  };\r\n\r\n  // Create data for all 4 NOVA groups\r\n  const data = {\r\n    labels: ['Group 1', 'Group 2', 'Group 3', 'Group 4'],\r\n    datasets: [\r\n      {\r\n        label: 'NOVA Classification',\r\n        data: [\r\n          novaScore === 1 ? 1 : 0,\r\n          novaScore === 2 ? 1 : 0,\r\n          novaScore === 3 ? 1 : 0,\r\n          novaScore === 4 ? 1 : 0,\r\n        ],\r\n        backgroundColor: [\r\n          novaColors[1],\r\n          novaColors[2],\r\n          novaColors[3],\r\n          novaColors[4],\r\n        ],\r\n        borderWidth: 2,\r\n        borderColor: [\r\n          novaScore === 1 ? '#059669' : '#E5E7EB',\r\n          novaScore === 2 ? '#D97706' : '#E5E7EB',\r\n          novaScore === 3 ? '#EA580C' : '#E5E7EB',\r\n          novaScore === 4 ? '#DC2626' : '#E5E7EB',\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          title: function(context: any) {\r\n            const groupNum = context[0].dataIndex + 1;\r\n            return `NOVA Group ${groupNum}`;\r\n          },\r\n          label: function(context: any) {\r\n            const groupNum = context.dataIndex + 1;\r\n            return novaDescriptions[groupNum as keyof typeof novaDescriptions];\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 1,\r\n        display: false,\r\n      },\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 12,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ height: '200px', marginBottom: '1rem' }}>\r\n        <Bar data={data} options={options} />\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <div\r\n            style={{\r\n              width: '16px',\r\n              height: '16px',\r\n              backgroundColor: novaColors[novaScore as keyof typeof novaColors],\r\n              borderRadius: '3px',\r\n              marginRight: '0.5rem',\r\n            }}\r\n          />\r\n          <span style={{ \r\n            fontWeight: '600', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            NOVA Group {novaScore}\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          fontSize: '0.875rem',\r\n          color: '#6B7280',\r\n          marginBottom: '0.5rem'\r\n        }}>\r\n          {novaDescriptions[novaScore as keyof typeof novaDescriptions]}\r\n        </div>\r\n        \r\n        <div style={{ \r\n          fontSize: '0.875rem',\r\n          color: '#374151',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          {processedLevel}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovaChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}