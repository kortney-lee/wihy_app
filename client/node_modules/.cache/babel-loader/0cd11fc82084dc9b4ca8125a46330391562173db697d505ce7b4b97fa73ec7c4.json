{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS={'nih.gov':1,'ncbi.nlm.nih.gov':1,// PubMed\n'who.int':1,'cdc.gov':1,'fda.gov':1,'usda.gov':1,'jamanetwork.com':1,'nejm.org':1,'thelancet.com':1,'bmj.com':1,'nature.com':1,'mayoclinic.org':1,'health.harvard.edu':1};// Update API URL configuration\nclass NewsService{// Get the correct endpoint based on environment - single endpoint, no fallbacks\ngetNewsEndpoint(){const isDevelopment=process.env.NODE_ENV==='development'||window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1';if(isDevelopment){// In development: use local endpoint\nconst localEndpoint='http://localhost:5001/api/service';console.log('🔧 Development mode: Using local endpoint:',localEndpoint);return localEndpoint;}else{// In production: use production endpoint\nconst prodEndpoint='https://services.wihy.ai/api/news';console.log('🚀 Production mode: Using production endpoint:',prodEndpoint);return prodEndpoint;}}/**\r\n   * Fetch news articles based on provided parameters\r\n   */async getArticles(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// Set defaults based on OpenAPI specification\nconst queryParams=_objectSpread({limit:50,// Default from OpenAPI spec (1-500)\nquality:'1',// Use quality=1 to get quality articles with good images and mapped categories\nflat:'true',// Return flat structure\npage:1,// Default page\nper_page:50},params);// Convert boolean flat to string for API\nif(typeof queryParams.flat==='boolean'){queryParams.flat=queryParams.flat?'true':'false';}console.log('Fetching news with params:',queryParams);// Get the correct endpoint for current environment\nconst endpoint=this.getNewsEndpoint();const isDevelopment=process.env.NODE_ENV==='development'||window.location.hostname==='localhost';console.log(\"\\uD83C\\uDF0D Environment: \".concat(isDevelopment?'Development':'Production'));console.log(\"\\uD83D\\uDCE1 Using endpoint: \".concat(endpoint));try{// Set timeout based on endpoint type (local vs remote)\nconst isLocal=endpoint.includes('localhost');const timeout=isLocal?5000:10000;// 5s for local, 10s for remote\nconst response=await axios.get(\"\".concat(endpoint,\"/articles\"),{params:queryParams,timeout:timeout,headers:{'Accept':'application/json','Content-Type':'application/json'}});if(isLocal){console.log('✅ Local endpoint successful:',endpoint);}else{console.log('✅ Production endpoint successful:',endpoint);}// Process the response to add compatibility fields\nconst apiResponse=response.data;// Map API articles to client format\nif(apiResponse.articles&&apiResponse.articles.length>0){apiResponse.articles=apiResponse.articles.map(article=>this.adaptArticleForClient(article));}return apiResponse;}catch(error){console.error(\"\\u274C Failed to fetch from \".concat(endpoint,\":\"),error);const isLocal=endpoint.includes('localhost');if(isLocal&&isDevelopment){console.error('💡 Local service not available. Make sure the RSS news service is running on port 5001');console.error('💡 You can start it with the appropriate command for your local setup');}throw error;// Re-throw the error instead of trying fallbacks\n}}catch(error){console.error('Error fetching news articles:',error);return{success:false,articles:[],count:0,pagination:{total_items:0,total_pages:0,current_page:1,per_page:50,has_next_page:false,has_prev_page:false},filters_applied:{category:null,country:null,feed_id:null,limit:0},error:error instanceof Error?error.message:'Unknown error',message:error instanceof Error?error.message:'Unknown error'// For backward compatibility\n};}}/**\r\n   * Helper method to adapt API response article format to client format\r\n   */adaptArticleForClient(article){return _objectSpread(_objectSpread({},article),{},{// Add compatibility fields\nurl:article.link||article.url,summary:article.description||article.summary,publishedDate:article.published_date||article.publishedDate,thumbnailUrl:article.thumbnail||article.thumbnailUrl,imageUrl:article.image_url||article.imageUrl,hasMedia:article.has_image||article.hasMedia,readingTime:article.reading_time||article.readingTime,wordCount:article.word_count||article.wordCount});}/**\r\n   * Get available news categories from articles endpoint\r\n   */async getCategories(){try{// Based on the OpenAPI spec, health categories are:\nreturn['All Health News','Nutrition','Medical Research','Public Health','Clinical Studies','Prevention','Mental Health','General Health','Environment'];}catch(error){console.error('Error fetching news categories:',error);return[];}}/**\r\n   * Get available countries from articles endpoint\r\n   */async getCountries(){try{// Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\nreturn[{code:'US',name:'United States'},{code:'IN',name:'India'},{code:'UK',name:'United Kingdom'},{code:'CA',name:'Canada'},{code:'AU',name:'Australia'},{code:'DE',name:'Germany'},{code:'FR',name:'France'},{code:'JP',name:'Japan'}];}catch(error){console.error('Error fetching countries:',error);return[];}}/**\r\n   * Calculate trust score based on domain\r\n   */calculateTrustScore(article){if(!article.domain)return 0.5;return TRUSTED_DOMAINS[article.domain]||TRUSTED_DOMAINS[\"www.\".concat(article.domain)]||0.5;}}export const newsService=new NewsService();// Update these functions to improve category filtering and sort by date\nexport const fetchNewsFeed=async(categories,limit)=>{// First, set up the API request parameters\nconst params={};// Only add category parameter if categories array is non-empty\nif(categories&&categories.length>0){params.category=categories.join(',');}// Request more articles than needed for better sorting/filtering\nparams.limit=limit?limit*2:50;// Note: Sorting is handled by the API internally, no sort parameters needed\nconsole.log('Fetching news with params:',params);// Fetch articles from API\nconst response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// Define priority categories in exact order\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];// Sort articles by our priority scheme\nconst sortedArticles=sortArticlesByPriority(response.articles,priorityCategories);// Limit to requested count after sorting\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Log first few articles to verify order\nconsole.log('Articles returned after prioritization:');limitedArticles.slice(0,5).forEach((article,i)=>{console.log(\"  \".concat(i+1,\". [\").concat(article.category||'uncategorized',\"]: \").concat(article.title));});// Return a modified response with our prioritized articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};// Add the prioritization function to the newsService file\nfunction sortArticlesByPriority(articles,priorityCategories){// Create a copy of the articles array\nconst sortedArticles=[...articles];// Define a function to get priority score (lower is higher priority)\nconst getPriorityScore=article=>{const category=article.category||'';const categoryLower=category.toLowerCase();// FIRST: Explicitly handle tech content - make sure it's always at the bottom\n// Check if it's explicitly categorized as tech\nif(categoryLower==='tech'||categoryLower.includes('technology')||categoryLower.includes('computing')||categoryLower.includes('it ')||categoryLower.includes('software')){console.log(\"\\uD83D\\uDC49 Found tech article, assigning lowest priority: \".concat(article.title));return 1000;// Tech should be shown last\n}// 1. Exact match with priority categories (in strict order)\nfor(let i=0;i<priorityCategories.length;i++){if(category===priorityCategories[i]){return i;// Return the exact index position (0, 1, 2, etc.)\n}}// 2. Partial match with priority categories\nfor(let i=0;i<priorityCategories.length;i++){if(category.includes(priorityCategories[i])){return i+20;// Still keep order but with lower priority than exact matches\n}}// 3. Check for health-related keywords in title/description\nconst title=article.title||'';const description=article.description||'';const content=title+' '+description;const contentLower=content.toLowerCase();const healthKeywords=['health','medical','medicine','doctor','patient','hospital','disease','treatment','cure','wellness','fitness','diet','nutrition','mental','therapy','clinical','drug','vaccine','symptom','diagnosis','cancer','heart','diabetes','covid'];if(healthKeywords.some(keyword=>contentLower.includes(keyword))){return 100;// All health-related content after categorized content\n}// 4. Check for tech keywords in title/description if not already caught above\nconst techKeywords=['tech','technology','computing','software','hardware','ai','artificial intelligence','computer','code','programming','developer','cybersecurity','digital','internet','smartphone','app ','apps ','device','gadget','google','apple','microsoft','facebook','twitter','social media','tesla','elon musk'];if(techKeywords.some(keyword=>contentLower.includes(keyword))){// Extra debug log for tech content detection\nconsole.log(\"\\uD83D\\uDC49 Found tech content by keyword, assigning lowest priority: \".concat(article.title));return 900;// Tech content at the bottom, but just above explicitly categorized tech\n}// 5. Everything else (general content)\nreturn 500;};// Sort articles by priority score\nsortedArticles.sort((a,b)=>{const priorityA=getPriorityScore(a);const priorityB=getPriorityScore(b);// First sort by priority category\nif(priorityA!==priorityB){return priorityA-priorityB;}// If same priority category, sort by date (newest first)\nconst dateA=a.publishedDate||a.published_date;const dateB=b.publishedDate||b.published_date;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Add debug information to see what categories are being returned\nconsole.log('Article order after prioritization:');sortedArticles.slice(0,8).forEach((article,idx)=>{// Show the priority score as part of the debugging\nconst score=getPriorityScore(article);const category=article.category||'uncategorized';console.log(\"  \".concat(idx+1,\". [\").concat(score,\"] [\").concat(category,\"]: \").concat(article.title));});return sortedArticles;}// Update getArticlesByCategory to use the same prioritization logic\nexport const getArticlesByCategory=async(category,limit)=>{if(category==='all'){return fetchNewsFeed([],limit);}const params={category,limit:limit?Math.round(limit*1.5):20,// Fetch a few more than needed\nquality:'1'// Get quality articles with good images\n};const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// For category views, we still want to sort by date but within the category\nconst sortedArticles=response.articles.sort((a,b)=>{const dateA=a.publishedDate||a.published_date;const dateB=b.publishedDate||b.published_date;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Limit to requested count\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Return a modified response with our sorted articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};// Add these functions at the end of the file\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */export const refreshNewsFeed=async(categories,limit)=>{const timestamp=new Date().getTime();const params={timestamp,// Add timestamp to bust cache\nlimit:limit||50};if(categories&&categories.length>0){params.category=categories.join(',');}// Use quality parameter for better articles\nparams.quality='1';console.log('Refreshing news feed with timestamp:',timestamp);const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// Use the same priority sorting as fetchNewsFeed\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];const sortedArticles=sortArticlesByPriority(response.articles,priorityCategories);// Limit to requested count after sorting\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Return a modified response with our prioritized articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};/**\r\n * Search for news articles based on query\r\n */export const searchNewsArticles=async(query,limit)=>{if(!query||query.trim()===''){// If no query, return empty results\nreturn{success:true,articles:[],count:0,pagination:{total_items:0,total_pages:0,current_page:1,per_page:12,has_next_page:false,has_prev_page:false},filters_applied:{category:null,country:null,feed_id:null,limit:0}};}const params={query:query.trim(),limit:limit||50,quality:'1'// Get quality articles with good images for search\n};console.log(\"Searching news articles with query: \\\"\".concat(query,\"\\\"\"));const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// For search results, we want to prioritize by relevance to search term\n// But still use our priority categories as a secondary sort\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];// Sort articles based on search relevance and category\nconst sortedArticles=response.articles.sort((a,b)=>{// First, prioritize by relevance score if available\nif(a.relevanceScore!==undefined&&b.relevanceScore!==undefined){if(a.relevanceScore!==b.relevanceScore){return b.relevanceScore-a.relevanceScore;}}// If relevance scores are the same, use our category priority\nconst categoryA=a.category||'';const categoryB=b.category||'';// Check if categories are in our priority list\nconst indexA=priorityCategories.findIndex(cat=>categoryA.includes(cat));const indexB=priorityCategories.findIndex(cat=>categoryB.includes(cat));// If both categories are in priority list\nif(indexA>=0&&indexB>=0){if(indexA!==indexB){return indexA-indexB;}}// If only one category is in priority list\nelse if(indexA>=0){return-1;}else if(indexB>=0){return 1;}// Finally, sort by date\nconst dateA=a.publishedDate||a.published_date;const dateB=b.publishedDate||b.published_date;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Limit to requested count\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);return _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","NewsService","getNewsEndpoint","isDevelopment","process","env","NODE_ENV","window","location","hostname","localEndpoint","console","log","prodEndpoint","getArticles","params","arguments","length","undefined","queryParams","_objectSpread","limit","quality","flat","page","per_page","endpoint","concat","isLocal","includes","timeout","response","get","headers","apiResponse","data","articles","map","article","adaptArticleForClient","error","success","count","pagination","total_items","total_pages","current_page","has_next_page","has_prev_page","filters_applied","category","country","feed_id","Error","message","url","link","summary","description","publishedDate","published_date","thumbnailUrl","thumbnail","imageUrl","image_url","hasMedia","has_image","readingTime","reading_time","wordCount","word_count","getCategories","getCountries","code","name","calculateTrustScore","domain","newsService","fetchNewsFeed","categories","join","priorityCategories","sortedArticles","sortArticlesByPriority","limitedArticles","slice","forEach","i","title","getPriorityScore","categoryLower","toLowerCase","content","contentLower","healthKeywords","some","keyword","techKeywords","sort","a","b","priorityA","priorityB","dateA","dateB","Date","getTime","idx","score","getArticlesByCategory","Math","round","refreshNewsFeed","timestamp","searchNewsArticles","query","trim","relevanceScore","categoryA","categoryB","indexA","findIndex","cat","indexB"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nimport { getApiEndpoint } from '../config/apiConfig';\r\n\r\nexport interface NewsArticle {\r\n  // API response fields from OpenAPI spec\r\n  id: string;                        // Unique article identifier\r\n  title: string;                     // Article title\r\n  description: string;               // Article description/summary\r\n  link: string;                      // Article URL\r\n  author: string;                    // Article author\r\n  published_date: string;            // Publication date (ISO format)\r\n  thumbnail: string;                 // Thumbnail image URL\r\n  image_url: string;                 // Main image URL\r\n  has_image: boolean;                // Whether article has images\r\n  has_author: boolean;               // Whether article has author info\r\n  category: string;                  // Article category/topic\r\n  source: string;                    // Source publication name\r\n  feed_id: number;                   // RSS feed ID\r\n  feed_priority: string;             // Feed priority level\r\n  reading_time: number;              // Estimated reading time in minutes\r\n  word_count: number;                // Article word count\r\n  time_ago: string;                  // Human-readable time since publication\r\n  is_recent: boolean;                // Published within last 24 hours\r\n  content_quality: 'high' | 'medium' | 'low';  // Content quality assessment\r\n  completeness: 'complete' | 'partial' | 'minimal';  // Data completeness\r\n  domain: string;                    // Source domain\r\n  extracted_at: string;              // When article was extracted\r\n  \r\n  // Quality mode fields (when quality=1)\r\n  mapped_category?: string;          // Client-friendly mapped category\r\n  \r\n  // Client-side compatibility fields\r\n  url?: string;\r\n  summary?: string;\r\n  publishedDate?: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  tags?: string[];\r\n  relevanceScore?: number;\r\n  hasMedia?: boolean;\r\n  readingTime?: number;\r\n  wordCount?: number;\r\n  mediaType?: string;\r\n  contentLength?: number;   // Added to match client usage\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  pagination: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: boolean;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n    quality?: string;                // Added from OpenAPI spec\r\n  };\r\n  // Quality mode field (when quality=1)\r\n  flagged_for_review?: Array<{\r\n    id: number;\r\n    title: string;\r\n    reason: string;\r\n    category: string;\r\n  }>;\r\n  error?: string; // Added to handle errors from the API\r\n  message?: string; // For backward compatibility\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;                    // Number of articles to return (1-500)\r\n  quality?: string;                  // '1'/'true' for quality articles, '0'/'false' for all\r\n  category?: string;                 // Health categories: 'All Health News', 'Nutrition', etc.\r\n  country?: string;                  // Country code: US, IN, UK, CA, AU, DE, FR, JP\r\n  feed_id?: number;                  // Filter by specific feed ID\r\n  feed_priority?: string;            // Feed priority: single, range, or comma-separated\r\n  flat?: string | boolean;           // Return flat structure ('true'/'false')\r\n  page?: number;                     // Page number (starts at 1)\r\n  per_page?: number;                 // Number of articles per page (1-100)\r\n  your_new_param?: string;           // Additional parameter from API spec\r\n  timestamp?: number;                // Added to support refreshNewsFeed\r\n  query?: string;                    // Added to support searchNewsArticles\r\n}\r\n\r\nclass NewsService {\r\n  // Get the correct endpoint based on environment - single endpoint, no fallbacks\r\n  private getNewsEndpoint() {\r\n    const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                         window.location.hostname === 'localhost' ||\r\n                         window.location.hostname === '127.0.0.1';\r\n    \r\n    if (isDevelopment) {\r\n      // In development: use local endpoint\r\n      const localEndpoint = 'http://localhost:5001/api/service';\r\n      console.log('🔧 Development mode: Using local endpoint:', localEndpoint);\r\n      return localEndpoint;\r\n    } else {\r\n      // In production: use production endpoint\r\n      const prodEndpoint = 'https://services.wihy.ai/api/news';\r\n      console.log('🚀 Production mode: Using production endpoint:', prodEndpoint);\r\n      return prodEndpoint;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Set defaults based on OpenAPI specification\r\n      const queryParams: any = {\r\n        limit: 50,                    // Default from OpenAPI spec (1-500)\r\n        quality: '1',                 // Use quality=1 to get quality articles with good images and mapped categories\r\n        flat: 'true',                 // Return flat structure\r\n        page: 1,                      // Default page\r\n        per_page: 50,                 // Default per_page to match limit\r\n        ...params // Override with any provided params\r\n      };\r\n\r\n      // Convert boolean flat to string for API\r\n      if (typeof queryParams.flat === 'boolean') {\r\n        queryParams.flat = queryParams.flat ? 'true' : 'false';\r\n      }\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      // Get the correct endpoint for current environment\r\n      const endpoint = this.getNewsEndpoint();\r\n      const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                           window.location.hostname === 'localhost';\r\n      \r\n      console.log(`🌍 Environment: ${isDevelopment ? 'Development' : 'Production'}`);\r\n      console.log(`📡 Using endpoint: ${endpoint}`);\r\n      \r\n      try {\r\n        // Set timeout based on endpoint type (local vs remote)\r\n        const isLocal = endpoint.includes('localhost');\r\n        const timeout = isLocal ? 5000 : 10000; // 5s for local, 10s for remote\r\n        \r\n        const response = await axios.get(`${endpoint}/articles`, { \r\n          params: queryParams,\r\n          timeout: timeout,\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        if (isLocal) {\r\n          console.log('✅ Local endpoint successful:', endpoint);\r\n        } else {\r\n          console.log('✅ Production endpoint successful:', endpoint);\r\n        }\r\n        \r\n        // Process the response to add compatibility fields\r\n        const apiResponse = response.data as NewsFeedResponse;\r\n        \r\n        // Map API articles to client format\r\n        if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n          apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n        }\r\n        \r\n        return apiResponse;\r\n        \r\n      } catch (error) {\r\n        console.error(`❌ Failed to fetch from ${endpoint}:`, error);\r\n        const isLocal = endpoint.includes('localhost');\r\n        \r\n        if (isLocal && isDevelopment) {\r\n          console.error('💡 Local service not available. Make sure the RSS news service is running on port 5001');\r\n          console.error('💡 You can start it with the appropriate command for your local setup');\r\n        }\r\n        \r\n        throw error; // Re-throw the error instead of trying fallbacks\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 50,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Add compatibility fields\r\n      url: article.link || article.url,\r\n      summary: article.description || article.summary,\r\n      publishedDate: article.published_date || article.publishedDate,\r\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\r\n      imageUrl: article.image_url || article.imageUrl,\r\n      hasMedia: article.has_image || article.hasMedia,\r\n      readingTime: article.reading_time || article.readingTime,\r\n      wordCount: article.word_count || article.wordCount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories from articles endpoint\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, health categories are:\r\n      return [\r\n        'All Health News', \r\n        'Nutrition', \r\n        'Medical Research', \r\n        'Public Health', \r\n        'Clinical Studies', \r\n        'Prevention', \r\n        'Mental Health', \r\n        'General Health', \r\n        'Environment'\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries from articles endpoint\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\r\n      return [\r\n        { code: 'US', name: 'United States' },\r\n        { code: 'IN', name: 'India' },\r\n        { code: 'UK', name: 'United Kingdom' },\r\n        { code: 'CA', name: 'Canada' },\r\n        { code: 'AU', name: 'Australia' },\r\n        { code: 'DE', name: 'Germany' },\r\n        { code: 'FR', name: 'France' },\r\n        { code: 'JP', name: 'Japan' }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    if (!article.domain) return 0.5;\r\n    \r\n    return TRUSTED_DOMAINS[article.domain] || \r\n           TRUSTED_DOMAINS[`www.${article.domain}`] || \r\n           0.5;\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  // First, set up the API request parameters\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Request more articles than needed for better sorting/filtering\r\n  params.limit = limit ? limit * 2 : 50;\r\n  \r\n  // Note: Sorting is handled by the API internally, no sort parameters needed\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  \r\n  // Fetch articles from API\r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Define priority categories in exact order\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles by our priority scheme\r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Log first few articles to verify order\r\n    console.log('Articles returned after prioritization:');\r\n    limitedArticles.slice(0, 5).forEach((article, i) => {\r\n      console.log(`  ${i+1}. [${article.category || 'uncategorized'}]: ${article.title}`);\r\n    });\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add the prioritization function to the newsService file\r\nfunction sortArticlesByPriority(articles: NewsArticle[], priorityCategories: string[]): NewsArticle[] {\r\n  // Create a copy of the articles array\r\n  const sortedArticles = [...articles];\r\n  \r\n  // Define a function to get priority score (lower is higher priority)\r\n  const getPriorityScore = (article: NewsArticle): number => {\r\n    const category = article.category || '';\r\n    const categoryLower = category.toLowerCase();\r\n    \r\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\r\n    // Check if it's explicitly categorized as tech\r\n    if (categoryLower === 'tech' || \r\n        categoryLower.includes('technology') || \r\n        categoryLower.includes('computing') || \r\n        categoryLower.includes('it ') || \r\n        categoryLower.includes('software')) {\r\n      console.log(`👉 Found tech article, assigning lowest priority: ${article.title}`);\r\n      return 1000; // Tech should be shown last\r\n    }\r\n    \r\n    // 1. Exact match with priority categories (in strict order)\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category === priorityCategories[i]) {\r\n        return i; // Return the exact index position (0, 1, 2, etc.)\r\n      }\r\n    }\r\n    \r\n    // 2. Partial match with priority categories\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category.includes(priorityCategories[i])) {\r\n        return i + 20; // Still keep order but with lower priority than exact matches\r\n      }\r\n    }\r\n    \r\n    // 3. Check for health-related keywords in title/description\r\n    const title = article.title || '';\r\n    const description = article.description || '';\r\n    const content = title + ' ' + description;\r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const healthKeywords = [\r\n      'health', 'medical', 'medicine', 'doctor', 'patient', 'hospital',\r\n      'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet',\r\n      'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine',\r\n      'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'\r\n    ];\r\n    \r\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\r\n      return 100; // All health-related content after categorized content\r\n    }\r\n    \r\n    // 4. Check for tech keywords in title/description if not already caught above\r\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', \r\n                        'ai', 'artificial intelligence', 'computer', 'code', 'programming',\r\n                        'developer', 'cybersecurity', 'digital', 'internet', 'smartphone',\r\n                        'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft',\r\n                        'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\r\n    \r\n    if (techKeywords.some(keyword => \r\n      contentLower.includes(keyword)\r\n    )) {\r\n      // Extra debug log for tech content detection\r\n      console.log(`👉 Found tech content by keyword, assigning lowest priority: ${article.title}`);\r\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\r\n    }\r\n    \r\n    // 5. Everything else (general content)\r\n    return 500; \r\n  };\r\n  \r\n  // Sort articles by priority score\r\n  sortedArticles.sort((a, b) => {\r\n    const priorityA = getPriorityScore(a);\r\n    const priorityB = getPriorityScore(b);\r\n    \r\n    // First sort by priority category\r\n    if (priorityA !== priorityB) {\r\n      return priorityA - priorityB;\r\n    }\r\n    \r\n    // If same priority category, sort by date (newest first)\r\n    const dateA = a.publishedDate || a.published_date;\r\n    const dateB = b.publishedDate || b.published_date;\r\n    \r\n    if (dateA && dateB) {\r\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n  \r\n  // Add debug information to see what categories are being returned\r\n  console.log('Article order after prioritization:');\r\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\r\n    // Show the priority score as part of the debugging\r\n    const score = getPriorityScore(article);\r\n    const category = article.category || 'uncategorized';\r\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\r\n  });\r\n  \r\n  return sortedArticles;\r\n}\r\n\r\n// Update getArticlesByCategory to use the same prioritization logic\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (category === 'all') {\r\n    return fetchNewsFeed([], limit);\r\n  }\r\n  \r\n  const params: NewsQueryParams = { \r\n    category, \r\n    limit: limit ? Math.round(limit * 1.5) : 20, // Fetch a few more than needed\r\n    quality: '1' // Get quality articles with good images\r\n  };\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For category views, we still want to sort by date but within the category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our sorted articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add these functions at the end of the file\r\n\r\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\r\nexport const refreshNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  const timestamp = new Date().getTime();\r\n  const params: NewsQueryParams = {\r\n    timestamp, // Add timestamp to bust cache\r\n    limit: limit || 50\r\n  };\r\n  \r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Use quality parameter for better articles\r\n  params.quality = '1';\r\n  \r\n  console.log('Refreshing news feed with timestamp:', timestamp);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Use the same priority sorting as fetchNewsFeed\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * Search for news articles based on query\r\n */\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (!query || query.trim() === '') {\r\n    // If no query, return empty results\r\n    return {\r\n      success: true,\r\n      articles: [],\r\n      count: 0,\r\n      pagination: {\r\n        total_items: 0,\r\n        total_pages: 0,\r\n        current_page: 1,\r\n        per_page: 12,\r\n        has_next_page: false,\r\n        has_prev_page: false\r\n      },\r\n      filters_applied: {\r\n        category: null,\r\n        country: null,\r\n        feed_id: null,\r\n        limit: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  const params: NewsQueryParams = {\r\n    query: query.trim(),\r\n    limit: limit || 50,\r\n    quality: '1' // Get quality articles with good images for search\r\n  };\r\n  \r\n  console.log(`Searching news articles with query: \"${query}\"`);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For search results, we want to prioritize by relevance to search term\r\n    // But still use our priority categories as a secondary sort\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles based on search relevance and category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      // First, prioritize by relevance score if available\r\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\r\n        if (a.relevanceScore !== b.relevanceScore) {\r\n          return b.relevanceScore - a.relevanceScore;\r\n        }\r\n      }\r\n      \r\n      // If relevance scores are the same, use our category priority\r\n      const categoryA = a.category || '';\r\n      const categoryB = b.category || '';\r\n      \r\n      // Check if categories are in our priority list\r\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\r\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\r\n      \r\n      // If both categories are in priority list\r\n      if (indexA >= 0 && indexB >= 0) {\r\n        if (indexA !== indexB) {\r\n          return indexA - indexB;\r\n        }\r\n      } \r\n      // If only one category is in priority list\r\n      else if (indexA >= 0) {\r\n        return -1;\r\n      } else if (indexB >= 0) {\r\n        return 1;\r\n      }\r\n      \r\n      // Finally, sort by date\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}