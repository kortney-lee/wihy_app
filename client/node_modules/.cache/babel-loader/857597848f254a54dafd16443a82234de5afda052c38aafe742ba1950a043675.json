{"ast":null,"code":"var _jsxFileName = \"C:\\\\repo\\\\wihy_ui\\\\client\\\\src\\\\components\\\\NutritionChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n// Extract nutrition data function moved from SearchResults\nconst extractNutritionData = (results, dataSource) => {\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\n  console.log('DataSource:', dataSource);\n  console.log('Results type:', typeof results);\n  if (dataSource === 'vnutrition') {\n    try {\n      console.log('Processing vnutrition data source');\n      let nutrition;\n      if (typeof results === 'string') {\n        console.log('Parsing string results');\n\n        // Check if this is markdown/formatted text instead of JSON\n        if (results.startsWith('#') || results.includes('AI Chat response')) {\n          console.log('Results appear to be formatted text, not JSON nutrition data');\n          return null;\n        }\n        nutrition = JSON.parse(results);\n      } else {\n        console.log('Using object results directly');\n        nutrition = results;\n      }\n      console.log('=== RAW NUTRITION OBJECT ===');\n      console.log('Full object:', nutrition);\n      console.log('Object keys:', Object.keys(nutrition || {}));\n      if (nutrition && nutrition.found !== false) {\n        const extractedData = {\n          calories: nutrition.calories_per_serving || 0,\n          protein: nutrition.protein_g || 0,\n          carbs: nutrition.carbs_g || 0,\n          fat: nutrition.fat_g || 0,\n          fiber: nutrition.fiber_g || 0,\n          sugar: nutrition.sugar_g || 0,\n          sodium: nutrition.sodium_mg || 0,\n          novaScore: nutrition.nova_classification || 1,\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\n        };\n        console.log('=== EXTRACTED DATA ===');\n        console.log('Final extracted data:', extractedData);\n        return extractedData;\n      } else {\n        var _nutrition;\n        console.log('No valid nutrition data - found:', (_nutrition = nutrition) === null || _nutrition === void 0 ? void 0 : _nutrition.found);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error parsing nutrition data:', error);\n      console.log('This is likely because results are formatted text, not JSON nutrition data');\n      return null;\n    }\n  }\n  console.log('Not vnutrition source');\n  return null;\n};\nconst NutritionChart = ({\n  query,\n  results,\n  dataSource\n}) => {\n  // Extract nutrition data using internal function\n  const nutritionData = extractNutritionData(results, dataSource);\n\n  // Only render if we have nutrition data\n  if (!nutritionData || dataSource !== 'vnutrition') {\n    return null;\n  }\n  const {\n    calories,\n    protein,\n    carbs,\n    fat\n  } = nutritionData;\n\n  // Calculate total for percentages (excluding calories as it's not in grams)\n  const total = protein + carbs + fat;\n\n  // Prepare data for the pie chart\n  const data = {\n    datasets: [{\n      data: [protein, carbs, fat],\n      backgroundColor: ['#10B981',\n      // Green for protein\n      '#F59E0B',\n      // Yellow for carbs  \n      '#EF4444' // Red for fat\n      ],\n      borderWidth: 0,\n      cutout: '60%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const labels = ['Protein', 'Carbs', 'Fat'];\n            const label = labels[context.dataIndex];\n            const value = context.parsed;\n            const percentage = total > 0 ? Math.round(value / total * 100) : 0;\n            return `${label}: ${value}g (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: calories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.75rem',\n            color: '#6B7280'\n          },\n          children: \"Calories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '1.2rem',\n            marginRight: '0.5rem'\n          },\n          children: \"\\u26A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '500',\n            color: '#374151',\n            fontSize: '1rem'\n          },\n          children: \"Good\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '1rem',\n          fontSize: '0.875rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#10B981',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Protein: \", total > 0 ? Math.round(protein / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#F59E0B',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Carbs: \", total > 0 ? Math.round(carbs / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#EF4444',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Fat: \", total > 0 ? Math.round(fat / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_c = NutritionChart;\nexport default NutritionChart;\nvar _c;\n$RefreshReg$(_c, \"NutritionChart\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","extractNutritionData","results","dataSource","console","log","nutrition","startsWith","includes","JSON","parse","Object","keys","found","extractedData","calories","calories_per_serving","protein","protein_g","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","novaScore","nova_classification","processedLevel","nova_description","processed_level","_nutrition","error","NutritionChart","query","nutritionData","total","data","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","label","context","labels","dataIndex","value","parsed","percentage","Math","round","style","textAlign","children","position","height","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","marginRight","gap","borderRadius","_c","$RefreshReg$"],"sources":["C:/repo/wihy_ui/client/src/components/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n}\r\n\r\n// Extract nutrition data function moved from SearchResults\r\nconst extractNutritionData = (results: string, dataSource: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\r\n  console.log('DataSource:', dataSource);\r\n  console.log('Results type:', typeof results);\r\n  \r\n  if (dataSource === 'vnutrition') {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        \r\n        // Check if this is markdown/formatted text instead of JSON\r\n        if (results.startsWith('#') || results.includes('AI Chat response')) {\r\n          console.log('Results appear to be formatted text, not JSON nutrition data');\r\n          return null;\r\n        }\r\n        \r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      console.log('This is likely because results are formatted text, not JSON nutrition data');\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { calories, protein, carbs, fat } = nutritionData;\r\n\r\n  // Calculate total for percentages (excluding calories as it's not in grams)\r\n  const total = protein + carbs + fat;\r\n  \r\n  // Prepare data for the pie chart\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [protein, carbs, fat],\r\n        backgroundColor: [\r\n          '#10B981', // Green for protein\r\n          '#F59E0B', // Yellow for carbs  \r\n          '#EF4444', // Red for fat\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '60%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const labels = ['Protein', 'Carbs', 'Fat'];\r\n            const label = labels[context.dataIndex];\r\n            const value = context.parsed;\r\n            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\r\n            return `${label}: ${value}g (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {calories}\r\n          </div>\r\n          <div style={{ fontSize: '0.75rem', color: '#6B7280' }}>\r\n            Calories\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            ⚡\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Good\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#10B981',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Protein: {total > 0 ? Math.round((protein / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#F59E0B',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Carbs: {total > 0 ? Math.round((carbs / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#EF4444',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Fat: {total > 0 ? Math.round((fat / total) * 100) : 0}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}