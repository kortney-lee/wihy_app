{"ast":null,"code":"import React from'react';import{Chart as ChartJS,ArcElement,Tooltip,Legend}from'chart.js';import{Doughnut}from'react-chartjs-2';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(ArcElement,Tooltip,Legend);// Extract nutrition data function moved from SearchResults\nconst extractNutritionData=(results,dataSource)=>{console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');console.log('DataSource:',dataSource);console.log('Results type:',typeof results);if(dataSource==='vnutrition'){try{console.log('Processing vnutrition data source');let nutrition;if(typeof results==='string'){console.log('Parsing string results');nutrition=JSON.parse(results);}else{console.log('Using object results directly');nutrition=results;}console.log('=== RAW NUTRITION OBJECT ===');console.log('Full object:',nutrition);console.log('Object keys:',Object.keys(nutrition||{}));if(nutrition&&nutrition.found!==false){const extractedData={calories:nutrition.calories_per_serving||0,protein:nutrition.protein_g||0,carbs:nutrition.carbs_g||0,fat:nutrition.fat_g||0,fiber:nutrition.fiber_g||0,sugar:nutrition.sugar_g||0,sodium:nutrition.sodium_mg||0,novaScore:nutrition.nova_classification||1,processedLevel:nutrition.nova_description||nutrition.processed_level||'Unknown'};console.log('=== EXTRACTED DATA ===');console.log('Final extracted data:',extractedData);return extractedData;}else{var _nutrition;console.log('No valid nutrition data - found:',(_nutrition=nutrition)===null||_nutrition===void 0?void 0:_nutrition.found);return null;}}catch(error){console.error('Error parsing nutrition data:',error);return null;}}console.log('Not vnutrition source');return null;};const NutritionChart=_ref=>{let{query,results,dataSource}=_ref;// Extract nutrition data using internal function\nconst nutritionData=extractNutritionData(results,dataSource);// Only render if we have nutrition data\nif(!nutritionData||dataSource!=='vnutrition'){return null;}const{calories,protein,carbs,fat}=nutritionData;// Calculate total for percentages (excluding calories as it's not in grams)\nconst total=protein+carbs+fat;// Prepare data for the pie chart\nconst data={datasets:[{data:[protein,carbs,fat],backgroundColor:['#10B981',// Green for protein\n'#F59E0B',// Yellow for carbs  \n'#EF4444'// Red for fat\n],borderWidth:0,cutout:'60%'}]};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{callbacks:{label:function(context){const labels=['Protein','Carbs','Fat'];const label=labels[context.dataIndex];const value=context.parsed;const percentage=total>0?Math.round(value/total*100):0;return\"\".concat(label,\": \").concat(value,\"g (\").concat(percentage,\"%)\");}}}}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',height:'200px',width:'200px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(Doughnut,{data:data,options:options}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'1.5rem',fontWeight:'bold',color:'#374151'},children:calories}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.75rem',color:'#6B7280'},children:\"Calories\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',marginBottom:'0.5rem'},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'1.2rem',marginRight:'0.5rem'},children:\"\\u26A1\"}),/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:'500',color:'#374151',fontSize:'1rem'},children:\"Good\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',gap:'1rem',fontSize:'0.875rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#10B981',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Protein: \",total>0?Math.round(protein/total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#F59E0B',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Carbs: \",total>0?Math.round(carbs/total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#EF4444',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Fat: \",total>0?Math.round(fat/total*100):0,\"%\"]})]})]})]})]});};export default NutritionChart;","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsx","_jsx","jsxs","_jsxs","register","extractNutritionData","results","dataSource","console","log","nutrition","JSON","parse","Object","keys","found","extractedData","calories","calories_per_serving","protein","protein_g","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","novaScore","nova_classification","processedLevel","nova_description","processed_level","_nutrition","error","NutritionChart","_ref","query","nutritionData","total","data","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","label","context","labels","dataIndex","value","parsed","percentage","Math","round","concat","style","textAlign","children","position","height","width","margin","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","marginRight","gap","borderRadius"],"sources":["C:/repo/wihy_ui/client/src/components/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n}\r\n\r\n// Extract nutrition data function moved from SearchResults\r\nconst extractNutritionData = (results: string, dataSource: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\r\n  console.log('DataSource:', dataSource);\r\n  console.log('Results type:', typeof results);\r\n  \r\n  if (dataSource === 'vnutrition') {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { calories, protein, carbs, fat } = nutritionData;\r\n\r\n  // Calculate total for percentages (excluding calories as it's not in grams)\r\n  const total = protein + carbs + fat;\r\n  \r\n  // Prepare data for the pie chart\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [protein, carbs, fat],\r\n        backgroundColor: [\r\n          '#10B981', // Green for protein\r\n          '#F59E0B', // Yellow for carbs  \r\n          '#EF4444', // Red for fat\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '60%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const labels = ['Protein', 'Carbs', 'Fat'];\r\n            const label = labels[context.dataIndex];\r\n            const value = context.parsed;\r\n            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\r\n            return `${label}: ${value}g (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {calories}\r\n          </div>\r\n          <div style={{ fontSize: '0.75rem', color: '#6B7280' }}>\r\n            Calories\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            ⚡\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Good\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#10B981',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Protein: {total > 0 ? Math.round((protein / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#F59E0B',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Carbs: {total > 0 ? Math.round((carbs / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#EF4444',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Fat: {total > 0 ? Math.round((fat / total) * 100) : 0}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OACEC,KAAK,GAAI,CAAAC,OAAO,CAChBC,UAAU,CACVC,OAAO,CACPC,MAAM,KACD,UAAU,CACjB,OAASC,QAAQ,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3CR,OAAO,CAACS,QAAQ,CAACR,UAAU,CAAEC,OAAO,CAAEC,MAAM,CAAC,CAQ7C;AACA,KAAM,CAAAO,oBAAoB,CAAGA,CAACC,OAAe,CAAEC,UAAkB,GAAK,CACpEC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CAClED,OAAO,CAACC,GAAG,CAAC,aAAa,CAAEF,UAAU,CAAC,CACtCC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAE,MAAO,CAAAH,OAAO,CAAC,CAE5C,GAAIC,UAAU,GAAK,YAAY,CAAE,CAC/B,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAChD,GAAI,CAAAC,SAAS,CAEb,GAAI,MAAO,CAAAJ,OAAO,GAAK,QAAQ,CAAE,CAC/BE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CACrCC,SAAS,CAAGC,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CACjC,CAAC,IAAM,CACLE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CC,SAAS,CAAGJ,OAAO,CACrB,CAEAE,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEC,SAAS,CAAC,CACtCF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEI,MAAM,CAACC,IAAI,CAACJ,SAAS,EAAI,CAAC,CAAC,CAAC,CAAC,CAEzD,GAAIA,SAAS,EAAIA,SAAS,CAACK,KAAK,GAAK,KAAK,CAAE,CAC1C,KAAM,CAAAC,aAAa,CAAG,CACpBC,QAAQ,CAAEP,SAAS,CAACQ,oBAAoB,EAAI,CAAC,CAC7CC,OAAO,CAAET,SAAS,CAACU,SAAS,EAAI,CAAC,CACjCC,KAAK,CAAEX,SAAS,CAACY,OAAO,EAAI,CAAC,CAC7BC,GAAG,CAAEb,SAAS,CAACc,KAAK,EAAI,CAAC,CACzBC,KAAK,CAAEf,SAAS,CAACgB,OAAO,EAAI,CAAC,CAC7BC,KAAK,CAAEjB,SAAS,CAACkB,OAAO,EAAI,CAAC,CAC7BC,MAAM,CAAEnB,SAAS,CAACoB,SAAS,EAAI,CAAC,CAChCC,SAAS,CAAErB,SAAS,CAACsB,mBAAmB,EAAI,CAAC,CAC7CC,cAAc,CAAEvB,SAAS,CAACwB,gBAAgB,EAAIxB,SAAS,CAACyB,eAAe,EAAI,SAC7E,CAAC,CAED3B,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CACrCD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEO,aAAa,CAAC,CAEnD,MAAO,CAAAA,aAAa,CACtB,CAAC,IAAM,KAAAoB,UAAA,CACL5B,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAA2B,UAAA,CAAE1B,SAAS,UAAA0B,UAAA,iBAATA,UAAA,CAAWrB,KAAK,CAAC,CACjE,MAAO,KAAI,CACb,CACF,CAAE,MAAOsB,KAAK,CAAE,CACd7B,OAAO,CAAC6B,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,KAAI,CACb,CACF,CAEA7B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACpC,MAAO,KAAI,CACb,CAAC,CAED,KAAM,CAAA6B,cAA6C,CAAGC,IAAA,EAAoC,IAAnC,CAAEC,KAAK,CAAElC,OAAO,CAAEC,UAAW,CAAC,CAAAgC,IAAA,CACnF;AACA,KAAM,CAAAE,aAAa,CAAGpC,oBAAoB,CAACC,OAAO,CAAEC,UAAU,CAAC,CAE/D;AACA,GAAI,CAACkC,aAAa,EAAIlC,UAAU,GAAK,YAAY,CAAE,CACjD,MAAO,KAAI,CACb,CAEA,KAAM,CAAEU,QAAQ,CAAEE,OAAO,CAAEE,KAAK,CAAEE,GAAI,CAAC,CAAGkB,aAAa,CAEvD;AACA,KAAM,CAAAC,KAAK,CAAGvB,OAAO,CAAGE,KAAK,CAAGE,GAAG,CAEnC;AACA,KAAM,CAAAoB,IAAI,CAAG,CACXC,QAAQ,CAAE,CACR,CACED,IAAI,CAAE,CAACxB,OAAO,CAAEE,KAAK,CAAEE,GAAG,CAAC,CAC3BsB,eAAe,CAAE,CACf,SAAS,CAAE;AACX,SAAS,CAAE;AACX,SAAW;AAAA,CACZ,CACDC,WAAW,CAAE,CAAC,CACdC,MAAM,CAAE,KACV,CAAC,CAEL,CAAC,CAED,KAAM,CAAAC,OAAO,CAAG,CACdC,UAAU,CAAE,IAAI,CAChBC,mBAAmB,CAAE,KAAK,CAC1BC,OAAO,CAAE,CACPC,MAAM,CAAE,CACNC,OAAO,CAAE,KACX,CAAC,CACDC,OAAO,CAAE,CACPC,SAAS,CAAE,CACTC,KAAK,CAAE,QAAAA,CAASC,OAAY,CAAE,CAC5B,KAAM,CAAAC,MAAM,CAAG,CAAC,SAAS,CAAE,OAAO,CAAE,KAAK,CAAC,CAC1C,KAAM,CAAAF,KAAK,CAAGE,MAAM,CAACD,OAAO,CAACE,SAAS,CAAC,CACvC,KAAM,CAAAC,KAAK,CAAGH,OAAO,CAACI,MAAM,CAC5B,KAAM,CAAAC,UAAU,CAAGpB,KAAK,CAAG,CAAC,CAAGqB,IAAI,CAACC,KAAK,CAAEJ,KAAK,CAAGlB,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CACpE,SAAAuB,MAAA,CAAUT,KAAK,OAAAS,MAAA,CAAKL,KAAK,QAAAK,MAAA,CAAMH,UAAU,OAC3C,CACF,CACF,CACF,CACF,CAAC,CAED,mBACE3D,KAAA,QAAK+D,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,eAClCjE,KAAA,QAAK+D,KAAK,CAAE,CAAEG,QAAQ,CAAE,UAAU,CAAEC,MAAM,CAAE,OAAO,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,QAAS,CAAE,CAAAJ,QAAA,eACtFnE,IAAA,CAACF,QAAQ,EAAC4C,IAAI,CAAEA,IAAK,CAACK,OAAO,CAAEA,OAAQ,CAAE,CAAC,cAC1C7C,KAAA,QACE+D,KAAK,CAAE,CACLG,QAAQ,CAAE,UAAU,CACpBI,GAAG,CAAE,KAAK,CACVC,IAAI,CAAE,KAAK,CACXC,SAAS,CAAE,uBAAuB,CAClCR,SAAS,CAAE,QACb,CAAE,CAAAC,QAAA,eAEFnE,IAAA,QAAKiE,KAAK,CAAE,CAAEU,QAAQ,CAAE,QAAQ,CAAEC,UAAU,CAAE,MAAM,CAAEC,KAAK,CAAE,SAAU,CAAE,CAAAV,QAAA,CACtEnD,QAAQ,CACN,CAAC,cACNhB,IAAA,QAAKiE,KAAK,CAAE,CAAEU,QAAQ,CAAE,SAAS,CAAEE,KAAK,CAAE,SAAU,CAAE,CAAAV,QAAA,CAAC,UAEvD,CAAK,CAAC,EACH,CAAC,EACH,CAAC,cAENjE,KAAA,QAAK+D,KAAK,CAAE,CAAEa,SAAS,CAAE,MAAO,CAAE,CAAAX,QAAA,eAChCjE,KAAA,QAAK+D,KAAK,CAAE,CACVb,OAAO,CAAE,MAAM,CACf2B,UAAU,CAAE,QAAQ,CACpBC,cAAc,CAAE,QAAQ,CACxBC,YAAY,CAAE,QAChB,CAAE,CAAAd,QAAA,eACAnE,IAAA,SAAMiE,KAAK,CAAE,CACXU,QAAQ,CAAE,QAAQ,CAClBO,WAAW,CAAE,QACf,CAAE,CAAAf,QAAA,CAAC,QAEH,CAAM,CAAC,cACPnE,IAAA,SAAMiE,KAAK,CAAE,CACXW,UAAU,CAAE,KAAK,CACjBC,KAAK,CAAE,SAAS,CAChBF,QAAQ,CAAE,MACZ,CAAE,CAAAR,QAAA,CAAC,MAEH,CAAM,CAAC,EACJ,CAAC,cAENjE,KAAA,QAAK+D,KAAK,CAAE,CACVb,OAAO,CAAE,MAAM,CACf4B,cAAc,CAAE,QAAQ,CACxBG,GAAG,CAAE,MAAM,CACXR,QAAQ,CAAE,UACZ,CAAE,CAAAR,QAAA,eACAjE,KAAA,QAAK+D,KAAK,CAAE,CAAEb,OAAO,CAAE,MAAM,CAAE2B,UAAU,CAAE,QAAQ,CAAEI,GAAG,CAAE,SAAU,CAAE,CAAAhB,QAAA,eACpEnE,IAAA,QACEiE,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdzB,eAAe,CAAE,SAAS,CAC1BwC,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACFlF,KAAA,SAAAiE,QAAA,EAAM,WAAS,CAAC1B,KAAK,CAAG,CAAC,CAAGqB,IAAI,CAACC,KAAK,CAAE7C,OAAO,CAAGuB,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CAAC,GAAC,EAAM,CAAC,EACzE,CAAC,cACNvC,KAAA,QAAK+D,KAAK,CAAE,CAAEb,OAAO,CAAE,MAAM,CAAE2B,UAAU,CAAE,QAAQ,CAAEI,GAAG,CAAE,SAAU,CAAE,CAAAhB,QAAA,eACpEnE,IAAA,QACEiE,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdzB,eAAe,CAAE,SAAS,CAC1BwC,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACFlF,KAAA,SAAAiE,QAAA,EAAM,SAAO,CAAC1B,KAAK,CAAG,CAAC,CAAGqB,IAAI,CAACC,KAAK,CAAE3C,KAAK,CAAGqB,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CAAC,GAAC,EAAM,CAAC,EACrE,CAAC,cACNvC,KAAA,QAAK+D,KAAK,CAAE,CAAEb,OAAO,CAAE,MAAM,CAAE2B,UAAU,CAAE,QAAQ,CAAEI,GAAG,CAAE,SAAU,CAAE,CAAAhB,QAAA,eACpEnE,IAAA,QACEiE,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdzB,eAAe,CAAE,SAAS,CAC1BwC,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACFlF,KAAA,SAAAiE,QAAA,EAAM,OAAK,CAAC1B,KAAK,CAAG,CAAC,CAAGqB,IAAI,CAACC,KAAK,CAAEzC,GAAG,CAAGmB,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CAAC,GAAC,EAAM,CAAC,EACjE,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}