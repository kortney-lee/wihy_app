{"ast":null,"code":"// vHealth News API Client Integration\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\n\n// API Configuration\nconst API_BASE_URL = {\n  production: 'https://services.wihy.ai',\n  development: 'http://localhost:5001'\n};\nclass VHealthNewsClient {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    // Use production by default\n    this.baseUrl = baseUrl || API_BASE_URL.production;\n  }\n  async getArticles(params = {}) {\n    const queryParams = new URLSearchParams();\n    if (params.limit) queryParams.append('limit', params.limit.toString());\n    if (params.category) queryParams.append('category', params.category);\n    if (params.source) queryParams.append('source', params.source);\n    if (params.useAI !== undefined) queryParams.append('useAI', params.useAI.toString());\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\n    console.log('Making API request to:', fullUrl);\n    console.log('Request params:', params);\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Raw API response:', data);\n\n    // Ensure we have the correct structure and add legacy compatibility fields to articles\n    const articles = data.articles || [];\n    data.articles = articles.map(article => ({\n      ...article,\n      // Legacy compatibility fields\n      publishedDate: article.published_at,\n      pubDate: article.published_at,\n      category: article.ai_category,\n      summary: article.description,\n      tags: [article.ai_category, article.source],\n      media_url: article.image_url,\n      media_thumb_url: article.image_url,\n      relevanceScore: article.quality_score / 10,\n      // Convert 1-10 scale to 0-1 scale\n      link: article.url\n    }));\n    console.log('Processed articles:', data.articles.length, 'articles');\n    console.log('First processed article:', data.articles[0]);\n\n    // Ensure we always return a valid response structure\n    return {\n      success: data.success !== false,\n      articles: data.articles,\n      count: data.count || data.articles.length,\n      sources_used: data.sources_used || [],\n      pagination: data.pagination || {\n        total_items: data.articles.length,\n        current_page: 1,\n        per_page: data.articles.length,\n        has_next_page: false\n      },\n      filters_applied: data.filters_applied || {\n        category: params.category || null,\n        source: params.source || 'all',\n        limit: params.limit || 20,\n        ai_categorization: params.useAI !== false\n      },\n      timestamp: data.timestamp || new Date().toISOString()\n    };\n  }\n  async getCategories() {\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async getStats() {\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async healthCheck() {\n    const response = await fetch(`${this.baseUrl}/api/health`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async testSource(source, limit = 5) {\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n}\n\n// Initialize the client\nconst newsClient = new VHealthNewsClient();\n\n// Main functions for legacy compatibility\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    const category = categories && categories.length > 0 ? categories[0] : undefined;\n\n    // Use optimal parameters for maximum news coverage as per Universal News API v2.0\n    const response = await newsClient.getArticles({\n      category,\n      limit: limit || 100,\n      // Maximum articles for comprehensive coverage\n      source: 'all',\n      // All sources for maximum diversity\n      useAI: true,\n      // Enable AI categorization for better organization\n      fresh: true // Bypass cache for latest content\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error:', error);\n\n    // Fallback to sample data if API fails\n    return {\n      success: false,\n      articles: [{\n        id: 'error-1',\n        title: 'vHealth News Service Temporarily Unavailable',\n        description: 'We are currently experiencing technical difficulties with our news service. Please try again later.',\n        content: 'Technical difficulties encountered',\n        url: '#',\n        image_url: null,\n        source: 'vHealth System',\n        author: null,\n        published_at: new Date().toISOString(),\n        publishedDate: new Date().toISOString(),\n        api_source: 'NewsAPI',\n        ai_category: 'System Notice',\n        category: 'system',\n        time_ago: 'Just now',\n        is_recent: true,\n        has_image: false,\n        has_author: false,\n        reading_time: 1,\n        quality_score: 0,\n        tags: ['system', 'notice']\n      }]\n    };\n  }\n};\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    var _response$articles, _response$articles2, _response$articles2$, _response$articles3, _response$articles3$;\n    console.log('getArticlesByCategory called with:', {\n      category,\n      limit\n    });\n\n    // Use optimal parameters for Universal News API v2.0\n    const response = await newsClient.getArticles({\n      category,\n      limit: limit || 100,\n      // Maximum articles for comprehensive coverage\n      source: 'all',\n      // All sources for maximum diversity  \n      useAI: true,\n      // Enable AI categorization\n      fresh: true // Bypass cache for latest content\n    });\n    console.log('getArticlesByCategory API response:', response);\n    console.log('Articles received:', (_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.length, 'articles');\n    console.log('First article category:', ((_response$articles2 = response.articles) === null || _response$articles2 === void 0 ? void 0 : (_response$articles2$ = _response$articles2[0]) === null || _response$articles2$ === void 0 ? void 0 : _response$articles2$.ai_category) || ((_response$articles3 = response.articles) === null || _response$articles3 === void 0 ? void 0 : (_response$articles3$ = _response$articles3[0]) === null || _response$articles3$ === void 0 ? void 0 : _response$articles3$.category));\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (category):', error);\n    return await fetchNewsFeed([category], limit);\n  }\n};\nexport const refreshNewsFeed = async () => {\n  // Refresh news feed with latest articles using Universal News API v2.0 optimal settings\n  return await fetchNewsFeed(undefined, 100); // Maximum articles with fresh=true\n};\nexport const searchNewsArticles = async (query, limit) => {\n  try {\n    // Search by using the query as a category filter for now\n    // In future versions, the API might support full-text search\n    const response = await newsClient.getArticles({\n      category: query,\n      limit: limit || 100,\n      // Maximum articles for comprehensive coverage\n      source: 'all',\n      // All sources for maximum diversity\n      useAI: true,\n      // Enable AI categorization  \n      fresh: true // Bypass cache for latest content\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (search):', error);\n    return await fetchNewsFeed(undefined, limit);\n  }\n};\n\n// Additional utility functions for enhanced functionality\n\n// Universal News API v2.0 - Get ALL news content with maximum coverage\nexport const getAllNews = async (limit = 100) => {\n  try {\n    // Optimal parameters for all news content as per API documentation\n    const response = await newsClient.getArticles({\n      limit: limit,\n      // Maximum articles (up to 100)\n      fresh: true,\n      // Bypass cache for latest content  \n      useAI: true,\n      // Enable AI categorization\n      source: 'all' // All sources for comprehensive coverage\n      // No category filter = ALL news content included\n    });\n    console.log(`ðŸ“Š Found ${response.count} news articles across ${response.sources_used.length} sources`);\n    response.articles.forEach(article => {\n      console.log(`ðŸ“° [${article.ai_category}] ${article.title}`);\n    });\n    return {\n      success: response.success,\n      articles: response.articles,\n      count: response.count,\n      sources_used: response.sources_used\n    };\n  } catch (error) {\n    console.error('Error fetching all news:', error);\n    return {\n      success: false,\n      articles: [],\n      count: 0,\n      sources_used: []\n    };\n  }\n};\nexport const getNewsCategories = async () => {\n  try {\n    const response = await newsClient.getCategories();\n    return response.success ? response.categories : [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return Universal News API v2.0 categories as per documentation\n    return [{\n      category: 'Breaking News',\n      description: 'Latest developments, urgent updates, live news'\n    }, {\n      category: 'Technology',\n      description: 'Tech innovations, software, hardware, digital trends'\n    }, {\n      category: 'Business',\n      description: 'Markets, economy, corporate news, financial updates'\n    }, {\n      category: 'Science',\n      description: 'Research, discoveries, scientific breakthroughs'\n    }, {\n      category: 'Politics',\n      description: 'Government, elections, policy, political developments'\n    }, {\n      category: 'World News',\n      description: 'International events, global coverage, foreign affairs'\n    }, {\n      category: 'Health',\n      description: 'Medical news, wellness, healthcare developments'\n    }, {\n      category: 'Entertainment',\n      description: 'Movies, music, celebrity news, pop culture'\n    }, {\n      category: 'Sports',\n      description: 'Games, teams, athletic events, sports news'\n    }, {\n      category: 'Education',\n      description: 'Schools, universities, academic developments'\n    }, {\n      category: 'Environment',\n      description: 'Climate, sustainability, environmental issues'\n    }, {\n      category: 'Nutrition',\n      description: 'Diet, supplements, and nutritional research'\n    }, {\n      category: 'Medical Research',\n      description: 'Latest medical studies and breakthroughs'\n    }, {\n      category: 'Public Health',\n      description: 'Community health and disease prevention'\n    }, {\n      category: 'Clinical Studies',\n      description: 'Clinical trials and medical research'\n    }, {\n      category: 'Prevention',\n      description: 'Preventive medicine and wellness'\n    }, {\n      category: 'Mental Health',\n      description: 'Mental wellness and psychological health'\n    }, {\n      category: 'General Health',\n      description: 'General health news and information'\n    }];\n  }\n};\nexport const getNewsStats = async () => {\n  try {\n    return await newsClient.getStats();\n  } catch (error) {\n    console.error('Error fetching news stats:', error);\n    return {\n      error: 'Stats unavailable'\n    };\n  }\n};\nexport const checkNewsServiceHealth = async () => {\n  try {\n    const health = await newsClient.healthCheck();\n    return health.status === 'healthy';\n  } catch (error) {\n    console.error('News service health check failed:', error);\n    return false;\n  }\n};\n\n// Export the client for advanced usage\nexport { VHealthNewsClient, newsClient };","map":{"version":3,"names":["API_BASE_URL","production","development","VHealthNewsClient","constructor","baseUrl","getArticles","params","queryParams","URLSearchParams","limit","append","toString","category","source","useAI","undefined","fresh","fullUrl","console","log","response","fetch","method","headers","ok","Error","status","data","json","articles","map","article","publishedDate","published_at","pubDate","ai_category","summary","description","tags","media_url","image_url","media_thumb_url","relevanceScore","quality_score","link","url","length","success","count","sources_used","pagination","total_items","current_page","per_page","has_next_page","filters_applied","ai_categorization","timestamp","Date","toISOString","getCategories","getStats","healthCheck","testSource","newsClient","fetchNewsFeed","categories","error","id","title","content","author","api_source","time_ago","is_recent","has_image","has_author","reading_time","getArticlesByCategory","_response$articles","_response$articles2","_response$articles2$","_response$articles3","_response$articles3$","refreshNewsFeed","searchNewsArticles","query","getAllNews","forEach","getNewsCategories","getNewsStats","checkNewsServiceHealth","health"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// vHealth News API Client Integration\r\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content: string;\r\n  url: string;\r\n  link?: string; // Alternative URL field for legacy compatibility\r\n  image_url: string | null;\r\n  source: string;\r\n  author: string | null;\r\n  published_at: string;\r\n  publishedDate?: string; // Alternative date field for legacy compatibility\r\n  pubDate?: string; // Alternative date field for legacy compatibility\r\n  api_source: 'NewsAPI' | 'GNews' | 'NewsData' | 'MediaStack';\r\n  ai_category: string;\r\n  category?: string; // Legacy compatibility\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  has_image: boolean;\r\n  has_author: boolean;\r\n  reading_time: number;\r\n  quality_score: number;\r\n  tags: string[]; // Legacy compatibility\r\n  summary?: string; // Legacy compatibility\r\n  media_url?: string; // Legacy compatibility\r\n  media_thumb_url?: string; // Legacy compatibility\r\n  relevanceScore?: number; // Legacy compatibility\r\n}\r\n\r\nexport interface ArticlesResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  sources_used: string[];\r\n  pagination: {\r\n    total_items: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    source: string;\r\n    limit: number;\r\n    ai_categorization: boolean;\r\n  };\r\n  timestamp: string;\r\n}\r\n\r\nexport interface Category {\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n// API Configuration\r\nconst API_BASE_URL = {\r\n  production: 'https://services.wihy.ai',\r\n  development: 'http://localhost:5001'\r\n};\r\n\r\nclass VHealthNewsClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl?: string) {\r\n    // Use production by default\r\n    this.baseUrl = baseUrl || API_BASE_URL.production;\r\n  }\r\n\r\n  async getArticles(params: {\r\n    limit?: number;\r\n    category?: string;\r\n    source?: 'all' | 'newsapi' | 'gnews' | 'newsdata' | 'mediastack';\r\n    useAI?: boolean;\r\n    fresh?: boolean;\r\n  } = {}): Promise<ArticlesResponse> {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params.category) queryParams.append('category', params.category);\r\n    if (params.source) queryParams.append('source', params.source);\r\n    if (params.useAI !== undefined) queryParams.append('useAI', params.useAI.toString());\r\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\r\n\r\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\r\n    console.log('Making API request to:', fullUrl);\r\n    console.log('Request params:', params);\r\n\r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data: ArticlesResponse = await response.json();\r\n    console.log('Raw API response:', data);\r\n    \r\n    // Ensure we have the correct structure and add legacy compatibility fields to articles\r\n    const articles = data.articles || [];\r\n    data.articles = articles.map(article => ({\r\n      ...article,\r\n      // Legacy compatibility fields\r\n      publishedDate: article.published_at,\r\n      pubDate: article.published_at,\r\n      category: article.ai_category,\r\n      summary: article.description,\r\n      tags: [article.ai_category, article.source],\r\n      media_url: article.image_url,\r\n      media_thumb_url: article.image_url,\r\n      relevanceScore: article.quality_score / 10, // Convert 1-10 scale to 0-1 scale\r\n      link: article.url\r\n    }));\r\n    \r\n    console.log('Processed articles:', data.articles.length, 'articles');\r\n    console.log('First processed article:', data.articles[0]);\r\n    \r\n    // Ensure we always return a valid response structure\r\n    return {\r\n      success: data.success !== false,\r\n      articles: data.articles,\r\n      count: data.count || data.articles.length,\r\n      sources_used: data.sources_used || [],\r\n      pagination: data.pagination || {\r\n        total_items: data.articles.length,\r\n        current_page: 1,\r\n        per_page: data.articles.length,\r\n        has_next_page: false\r\n      },\r\n      filters_applied: data.filters_applied || {\r\n        category: params.category || null,\r\n        source: params.source || 'all',\r\n        limit: params.limit || 20,\r\n        ai_categorization: params.useAI !== false\r\n      },\r\n      timestamp: data.timestamp || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  async getCategories(): Promise<{ success: boolean; categories: Category[] }> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getStats(): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    const response = await fetch(`${this.baseUrl}/api/health`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async testSource(source: 'newsapi' | 'gnews' | 'newsdata' | 'mediastack', limit: number = 5): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Initialize the client\r\nconst newsClient = new VHealthNewsClient();\r\n\r\n// Main functions for legacy compatibility\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    const category = categories && categories.length > 0 ? categories[0] : undefined;\r\n    \r\n    // Use optimal parameters for maximum news coverage as per Universal News API v2.0\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 100,  // Maximum articles for comprehensive coverage\r\n      source: 'all',        // All sources for maximum diversity\r\n      useAI: true,          // Enable AI categorization for better organization\r\n      fresh: true           // Bypass cache for latest content\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error:', error);\r\n    \r\n    // Fallback to sample data if API fails\r\n    return {\r\n      success: false,\r\n      articles: [{\r\n        id: 'error-1',\r\n        title: 'vHealth News Service Temporarily Unavailable',\r\n        description: 'We are currently experiencing technical difficulties with our news service. Please try again later.',\r\n        content: 'Technical difficulties encountered',\r\n        url: '#',\r\n        image_url: null,\r\n        source: 'vHealth System',\r\n        author: null,\r\n        published_at: new Date().toISOString(),\r\n        publishedDate: new Date().toISOString(),\r\n        api_source: 'NewsAPI',\r\n        ai_category: 'System Notice',\r\n        category: 'system',\r\n        time_ago: 'Just now',\r\n        is_recent: true,\r\n        has_image: false,\r\n        has_author: false,\r\n        reading_time: 1,\r\n        quality_score: 0,\r\n        tags: ['system', 'notice']\r\n      }]\r\n    };\r\n  }\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    console.log('getArticlesByCategory called with:', { category, limit });\r\n    \r\n    // Use optimal parameters for Universal News API v2.0\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 100,  // Maximum articles for comprehensive coverage\r\n      source: 'all',        // All sources for maximum diversity  \r\n      useAI: true,          // Enable AI categorization\r\n      fresh: true           // Bypass cache for latest content\r\n    });\r\n    \r\n    console.log('getArticlesByCategory API response:', response);\r\n    console.log('Articles received:', response.articles?.length, 'articles');\r\n    console.log('First article category:', response.articles?.[0]?.ai_category || response.articles?.[0]?.category);\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (category):', error);\r\n    return await fetchNewsFeed([category], limit);\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Refresh news feed with latest articles using Universal News API v2.0 optimal settings\r\n  return await fetchNewsFeed(undefined, 100);  // Maximum articles with fresh=true\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Search by using the query as a category filter for now\r\n    // In future versions, the API might support full-text search\r\n    const response = await newsClient.getArticles({\r\n      category: query,\r\n      limit: limit || 100,  // Maximum articles for comprehensive coverage\r\n      source: 'all',        // All sources for maximum diversity\r\n      useAI: true,          // Enable AI categorization  \r\n      fresh: true           // Bypass cache for latest content\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (search):', error);\r\n    return await fetchNewsFeed(undefined, limit);\r\n  }\r\n};\r\n\r\n// Additional utility functions for enhanced functionality\r\n\r\n// Universal News API v2.0 - Get ALL news content with maximum coverage\r\nexport const getAllNews = async (limit: number = 100): Promise<{ success: boolean; articles: NewsArticle[]; count: number; sources_used: string[] }> => {\r\n  try {\r\n    // Optimal parameters for all news content as per API documentation\r\n    const response = await newsClient.getArticles({\r\n      limit: limit,         // Maximum articles (up to 100)\r\n      fresh: true,          // Bypass cache for latest content  \r\n      useAI: true,          // Enable AI categorization\r\n      source: 'all'         // All sources for comprehensive coverage\r\n      // No category filter = ALL news content included\r\n    });\r\n    \r\n    console.log(`ðŸ“Š Found ${response.count} news articles across ${response.sources_used.length} sources`);\r\n    response.articles.forEach(article => {\r\n      console.log(`ðŸ“° [${article.ai_category}] ${article.title}`);\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles,\r\n      count: response.count,\r\n      sources_used: response.sources_used\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching all news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      count: 0,\r\n      sources_used: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    const response = await newsClient.getCategories();\r\n    return response.success ? response.categories : [];\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return Universal News API v2.0 categories as per documentation\r\n    return [\r\n      { category: 'Breaking News', description: 'Latest developments, urgent updates, live news' },\r\n      { category: 'Technology', description: 'Tech innovations, software, hardware, digital trends' },\r\n      { category: 'Business', description: 'Markets, economy, corporate news, financial updates' },\r\n      { category: 'Science', description: 'Research, discoveries, scientific breakthroughs' },\r\n      { category: 'Politics', description: 'Government, elections, policy, political developments' },\r\n      { category: 'World News', description: 'International events, global coverage, foreign affairs' },\r\n      { category: 'Health', description: 'Medical news, wellness, healthcare developments' },\r\n      { category: 'Entertainment', description: 'Movies, music, celebrity news, pop culture' },\r\n      { category: 'Sports', description: 'Games, teams, athletic events, sports news' },\r\n      { category: 'Education', description: 'Schools, universities, academic developments' },\r\n      { category: 'Environment', description: 'Climate, sustainability, environmental issues' },\r\n      { category: 'Nutrition', description: 'Diet, supplements, and nutritional research' },\r\n      { category: 'Medical Research', description: 'Latest medical studies and breakthroughs' },\r\n      { category: 'Public Health', description: 'Community health and disease prevention' },\r\n      { category: 'Clinical Studies', description: 'Clinical trials and medical research' },\r\n      { category: 'Prevention', description: 'Preventive medicine and wellness' },\r\n      { category: 'Mental Health', description: 'Mental wellness and psychological health' },\r\n      { category: 'General Health', description: 'General health news and information' }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getNewsStats = async (): Promise<any> => {\r\n  try {\r\n    return await newsClient.getStats();\r\n  } catch (error) {\r\n    console.error('Error fetching news stats:', error);\r\n    return { error: 'Stats unavailable' };\r\n  }\r\n};\r\n\r\nexport const checkNewsServiceHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const health = await newsClient.healthCheck();\r\n    return health.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('News service health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export the client for advanced usage\r\nexport { VHealthNewsClient, newsClient };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}