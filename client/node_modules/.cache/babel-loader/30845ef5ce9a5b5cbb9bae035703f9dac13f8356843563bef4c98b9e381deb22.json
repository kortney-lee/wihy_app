{"ast":null,"code":"import openaiAPI from './openaiAPI';\nimport { healthAPI } from './healthAPI';\nimport axios from 'axios';\nclass HealthSearchService {\n  async searchHealthInfo(query, signal) {\n    console.log(\"HealthSearchService: Searching for\", query);\n    try {\n      // If barcode, call nutrition\n      if (/^\\d{8,14}$/.test(query.trim())) {\n        const nutritionResult = await this.fetchNutritionData(query.trim());\n        return {\n          summary: `Nutrition info for barcode: ${query}`,\n          details: JSON.stringify(nutritionResult, null, 2),\n          sources: [],\n          relatedTopics: [],\n          recommendations: [],\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\n          dataSource: 'vnutrition'\n        };\n      }\n\n      // Otherwise, call OpenAI or local health API\n      if (openaiAPI.isConfigured()) {\n        console.log(\"OpenAI API configured, using it for search\");\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\n        console.log(\"OpenAI search result:\", openaiResult);\n        return {\n          ...openaiResult,\n          dataSource: 'openai'\n        };\n      } else {\n        console.log(\"OpenAI API not configured, using fallback\");\n        const localResult = await healthAPI.searchHealthInfo(query);\n        return {\n          ...localResult,\n          dataSource: 'local'\n        };\n      }\n    } catch (error) {\n      console.error(\"Error in health search:\", error);\n      return this.getErrorResponse(query);\n    }\n  }\n  async fetchNutritionData(barcode) {\n    try {\n      const response = await axios.post('/vnutrition/analyze', {\n        barcode\n      });\n      const responseData = response.data || {};\n      return {\n        success: responseData.success || false,\n        item: responseData.item || '',\n        calories_per_serving: responseData.calories_per_serving || 0,\n        macros: responseData.macros || {\n          protein: '0g',\n          carbs: '0g',\n          fat: '0g'\n        },\n        dataSource: 'vnutrition'\n      };\n    } catch (error) {\n      console.error('vNutrition API failed:', error);\n      return null;\n    }\n  }\n  getErrorResponse(query) {\n    return {\n      summary: `We encountered an issue searching for information about \"${query}\".`,\n      details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\n      sources: ['Error Response'],\n      relatedTopics: ['Healthcare Providers', 'Medical Resources', 'Health Information'],\n      recommendations: ['Try your search again in a few minutes', 'Contact a healthcare professional for urgent concerns', 'Use reputable medical websites for basic information', 'Keep a list of trusted health resources'],\n      medicalDisclaimer: 'For any health concerns, please consult with a qualified healthcare provider. This error message should not delay seeking professional medical advice.',\n      dataSource: 'error'\n    };\n  }\n\n  // Check service availability\n  async checkServiceStatus() {\n    const openaiAvailable = openaiAPI.isConfigured();\n    const localAvailable = true; // Local service is always available\n\n    return {\n      openai: openaiAvailable,\n      local: localAvailable,\n      recommended: openaiAvailable ? 'openai' : 'local'\n    };\n  }\n\n  // Add this method for vNutrition integration\n  async searchNutritionByBarcode(barcode) {\n    try {\n      const response = await axios.post('/vnutrition/analyze', {\n        barcode\n      });\n      const responseData = response.data || {};\n      return {\n        success: responseData.success || false,\n        item: responseData.item || '',\n        calories_per_serving: responseData.calories_per_serving || 0,\n        macros: responseData.macros || {\n          protein: '0g',\n          carbs: '0g',\n          fat: '0g'\n        },\n        dataSource: 'vnutrition'\n      };\n    } catch (error) {\n      console.error('vNutrition API failed:', error);\n      return {\n        summary: `Could not retrieve nutrition info for barcode \"${barcode}\".`,\n        details: 'There was a problem connecting to the nutrition service.',\n        dataSource: 'error'\n      };\n    }\n  }\n\n  // Optionally, add a method for image upload as well\n  async searchNutritionByImage(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('/vnutrition/analyze', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const responseData = response.data || {};\n      return {\n        success: responseData.success || false,\n        item: responseData.item || '',\n        calories_per_serving: responseData.calories_per_serving || 0,\n        macros: responseData.macros || {\n          protein: '0g',\n          carbs: '0g',\n          fat: '0g'\n        },\n        dataSource: 'vnutrition'\n      };\n    } catch (error) {\n      console.error('vNutrition API failed:', error);\n      return {\n        summary: `Could not analyze the uploaded image.`,\n        details: 'There was a problem connecting to the nutrition service.',\n        dataSource: 'error'\n      };\n    }\n  }\n}\nexport const healthSearchService = new HealthSearchService();","map":{"version":3,"names":["openaiAPI","healthAPI","axios","HealthSearchService","searchHealthInfo","query","signal","console","log","test","trim","nutritionResult","fetchNutritionData","summary","details","JSON","stringify","sources","relatedTopics","recommendations","medicalDisclaimer","dataSource","isConfigured","openaiResult","localResult","error","getErrorResponse","barcode","response","post","responseData","data","success","item","calories_per_serving","macros","protein","carbs","fat","checkServiceStatus","openaiAvailable","localAvailable","openai","local","recommended","searchNutritionByBarcode","searchNutritionByImage","file","formData","FormData","append","headers","healthSearchService"],"sources":["C:/vHealth/vhealth/client/src/services/healthSearchService.ts"],"sourcesContent":["import openaiAPI, { openaiAPI as openaiService } from './openaiAPI';\r\nimport { healthAPI } from './healthAPI';\r\nimport axios from 'axios';\r\n\r\ninterface HealthSearchResult {\r\n  summary: string;\r\n  details: string;\r\n  sources: string[];\r\n  relatedTopics: string[];\r\n  recommendations: string[];\r\n  medicalDisclaimer: string;\r\n  dataSource: 'openai' | 'local' | 'error' | 'vnutrition';\r\n}\r\n\r\nclass HealthSearchService {\r\n  async searchHealthInfo(query: string, signal?: AbortSignal): Promise<HealthSearchResult> {\r\n    console.log(\"HealthSearchService: Searching for\", query);\r\n    try {\r\n      // If barcode, call nutrition\r\n      if (/^\\d{8,14}$/.test(query.trim())) {\r\n        const nutritionResult = await this.fetchNutritionData(query.trim());\r\n        return {\r\n          summary: `Nutrition info for barcode: ${query}`,\r\n          details: JSON.stringify(nutritionResult, null, 2),\r\n          sources: [],\r\n          relatedTopics: [],\r\n          recommendations: [],\r\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\r\n          dataSource: 'vnutrition'\r\n        };\r\n      }\r\n\r\n      // Otherwise, call OpenAI or local health API\r\n      if (openaiAPI.isConfigured()) {\r\n        console.log(\"OpenAI API configured, using it for search\");\r\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"OpenAI search result:\", openaiResult);\r\n        return {\r\n          ...openaiResult,\r\n          dataSource: 'openai'\r\n        };\r\n      } else {\r\n        console.log(\"OpenAI API not configured, using fallback\");\r\n        const localResult = await healthAPI.searchHealthInfo(query);\r\n        return {\r\n          ...localResult,\r\n          dataSource: 'local'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in health search:\", error);\r\n      return this.getErrorResponse(query);\r\n    }\r\n  }\r\n\r\n  private async fetchNutritionData(barcode: string) {\r\n    try {\r\n      const response = await axios.post('/vnutrition/analyze', { barcode });\r\n      const responseData: any = response.data || {};\r\n      return {\r\n        success: responseData.success || false,\r\n        item: responseData.item || '',\r\n        calories_per_serving: responseData.calories_per_serving || 0,\r\n        macros: responseData.macros || { protein: '0g', carbs: '0g', fat: '0g' },\r\n        dataSource: 'vnutrition'\r\n      };\r\n    } catch (error) {\r\n      console.error('vNutrition API failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getErrorResponse(query: string): HealthSearchResult {\r\n    return {\r\n      summary: `We encountered an issue searching for information about \"${query}\".`,\r\n      details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\r\n      sources: ['Error Response'],\r\n      relatedTopics: ['Healthcare Providers', 'Medical Resources', 'Health Information'],\r\n      recommendations: [\r\n        'Try your search again in a few minutes',\r\n        'Contact a healthcare professional for urgent concerns',\r\n        'Use reputable medical websites for basic information',\r\n        'Keep a list of trusted health resources'\r\n      ],\r\n      medicalDisclaimer: 'For any health concerns, please consult with a qualified healthcare provider. This error message should not delay seeking professional medical advice.',\r\n      dataSource: 'error'\r\n    };\r\n  }\r\n\r\n  // Check service availability\r\n  async checkServiceStatus(): Promise<{\r\n    openai: boolean;\r\n    local: boolean;\r\n    recommended: 'openai' | 'local';\r\n  }> {\r\n    const openaiAvailable = openaiAPI.isConfigured();\r\n    const localAvailable = true; // Local service is always available\r\n\r\n    return {\r\n      openai: openaiAvailable,\r\n      local: localAvailable,\r\n      recommended: openaiAvailable ? 'openai' : 'local'\r\n    };\r\n  }\r\n\r\n  // Add this method for vNutrition integration\r\n  async searchNutritionByBarcode(barcode: string): Promise<any> {\r\n    try {\r\n      const response = await axios.post('/vnutrition/analyze', { barcode });\r\n      const responseData: any = response.data || {};\r\n      return {\r\n        success: responseData.success || false,\r\n        item: responseData.item || '',\r\n        calories_per_serving: responseData.calories_per_serving || 0,\r\n        macros: responseData.macros || { protein: '0g', carbs: '0g', fat: '0g' },\r\n        dataSource: 'vnutrition'\r\n      };\r\n    } catch (error) {\r\n      console.error('vNutrition API failed:', error);\r\n      return {\r\n        summary: `Could not retrieve nutrition info for barcode \"${barcode}\".`,\r\n        details: 'There was a problem connecting to the nutrition service.',\r\n        dataSource: 'error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Optionally, add a method for image upload as well\r\n  async searchNutritionByImage(file: File): Promise<any> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    try {\r\n      const response = await axios.post('/vnutrition/analyze', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      const responseData: any = response.data || {};\r\n      return {\r\n        success: responseData.success || false,\r\n        item: responseData.item || '',\r\n        calories_per_serving: responseData.calories_per_serving || 0,\r\n        macros: responseData.macros || { protein: '0g', carbs: '0g', fat: '0g' },\r\n        dataSource: 'vnutrition'\r\n      };\r\n    } catch (error) {\r\n      console.error('vNutrition API failed:', error);\r\n      return {\r\n        summary: `Could not analyze the uploaded image.`,\r\n        details: 'There was a problem connecting to the nutrition service.',\r\n        dataSource: 'error'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const healthSearchService = new HealthSearchService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}