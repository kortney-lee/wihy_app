{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport openaiAPI from './services/openaiAPI';\nimport { searchCache } from './services/searchCache';\nimport { fetchNewsFeed, refreshNewsFeed, searchNewsArticles } from './services/newsService';\nimport './VHealthSearch.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const searchFoodDatabase = async query => {\n  try {\n    console.log('Calling food database API for:', query);\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Food API response:', data);\n    return data;\n  } catch (error) {\n    console.error('Food database API error:', error);\n    throw error;\n  }\n};\nexport const foodAPI = {\n  searchFood: searchFoodDatabase\n};\n\n// Export news API for use in other components\nexport const newsAPI = {\n  fetchNewsFeed,\n  refreshNewsFeed,\n  searchNewsArticles\n};\nconst ResultsPage = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const query = searchParams.get('q') || '';\n  const isHealthNews = searchParams.get('type') === 'health_news';\n  const category = searchParams.get('category') || 'all';\n  const [isLoading, setIsLoading] = useState(false);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Track if this is initial load to prevent loading spinner on browser navigation\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  // Detect browser navigation type\n  const isBrowserNavigation = () => {\n    var _performance, _performance$getEntri, _performance$getEntri2;\n    const navigation = (_performance = window.performance) === null || _performance === void 0 ? void 0 : (_performance$getEntri = _performance.getEntriesByType) === null || _performance$getEntri === void 0 ? void 0 : (_performance$getEntri2 = _performance$getEntri.call(_performance, 'navigation')) === null || _performance$getEntri2 === void 0 ? void 0 : _performance$getEntri2[0];\n    return (navigation === null || navigation === void 0 ? void 0 : navigation.type) === 'back_forward';\n  };\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query && !isHealthNews) {\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Query changed to:\", query);\n      console.log(\"Is health news:\", isHealthNews);\n      console.log(\"Is browser navigation:\", isBrowserNavigation());\n\n      // Create cache key based on type\n      const cacheKey = isHealthNews ? `health_news_${category}` : query;\n\n      // Always check cache first - especially for browser navigation\n      const cachedResult = searchCache.getCachedResult(cacheKey);\n      if (cachedResult) {\n        console.log('Using cached results for:', cacheKey);\n        setResults(cachedResult);\n        setDataSource('local');\n        setIsLoading(false);\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n        setIsInitialLoad(false);\n        return; // Exit early - no API calls needed\n      }\n\n      // If this is browser navigation and no cache, redirect to search page\n      if (isBrowserNavigation() || !isInitialLoad) {\n        console.log('Browser navigation detected with no cache - redirecting to search');\n        navigate('/');\n        return;\n      }\n\n      // Only show loading for genuine new searches (not browser navigation)\n      setIsLoading(true);\n      try {\n        // Handle \"I'm Feeling Healthy\" requests\n        if (isHealthNews) {\n          console.log('Fetching health news via newsService...');\n          const healthNewsResult = await fetchNewsFeed([category], 6);\n          if (healthNewsResult.success && healthNewsResult.articles) {\n            console.log('Health news fetched successfully');\n\n            // Format the news articles for display\n            const formattedNews = formatNewsArticles(healthNewsResult.articles);\n            setResults(formattedNews);\n            setDataSource('openai'); // Use openai as the display source\n\n            // Cache the health news results\n            searchCache.setCachedResult(cacheKey, formattedNews, window.location.href);\n            setDisclaimer('Health news provided by AI. Always consult healthcare professionals for medical advice.');\n          } else {\n            throw new Error(healthNewsResult.message || 'Failed to fetch health news');\n          }\n        } else {\n          // Handle regular search queries\n          // STEP 1: First try the nutrition database\n          try {\n            console.log('Trying nutrition database first...');\n            console.log('API URL:', `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\n            const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\n            if (nutritionResponse.ok) {\n              const nutritionData = await nutritionResponse.json();\n              console.log('Nutrition API response:', nutritionData);\n              if (nutritionData && nutritionData.found === true) {\n                console.log('Found nutrition data - using vnutrition source');\n                const resultString = JSON.stringify(nutritionData);\n                setResults(resultString);\n                setDataSource('vnutrition');\n\n                // Cache the nutrition results\n                searchCache.setCachedResult(query, resultString, window.location.href);\n                setIsLoading(false);\n                setIsInitialLoad(false);\n                return;\n              }\n            }\n          } catch (nutritionError) {\n            console.log('Nutrition API error:', nutritionError);\n          }\n\n          // STEP 2: Fall back to OpenAI if no nutrition data found\n          console.log('Using OpenAI as fallback...');\n          const result = await openaiAPI.searchHealthInfo(query);\n          console.log(\"OpenAI Search result:\", result);\n          const resultText = result.details || JSON.stringify(result);\n          setResults(resultText);\n          setDataSource(\"openai\");\n\n          // Cache the OpenAI results\n          searchCache.setCachedResult(query, resultText, window.location.href);\n          setCitations(result.sources || []);\n          setRecommendations(result.recommendations || []);\n          setDisclaimer(result.medicalDisclaimer || '');\n        }\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        const errorMessage = \"Sorry, there was an error processing your request.\";\n        setResults(errorMessage);\n        setDataSource(\"error\");\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n      } finally {\n        setIsLoading(false);\n        setIsInitialLoad(false);\n      }\n    };\n    fetchResults();\n  }, [query, isHealthNews, category, navigate]);\n\n  // Function to format news articles for display\n  const formatNewsArticles = articles => {\n    let formatted = '# Latest Health News\\n\\n';\n    articles.forEach((article, index) => {\n      formatted += `## ${article.title}\\n\\n`;\n      formatted += `**Source:** ${article.source} (${article.domain})\\n`;\n      formatted += `**Category:** ${article.category}\\n`;\n      formatted += `**Published:** ${new Date(article.publishedDate).toLocaleDateString()}\\n`;\n      formatted += `**Relevance:** ${Math.round(article.relevanceScore * 100)}%\\n\\n`;\n      formatted += `${article.summary}\\n\\n`;\n      if (article.tags && article.tags.length > 0) {\n        formatted += `**Tags:** ${article.tags.join(', ')}\\n\\n`;\n      }\n      formatted += `[Read Full Article](${article.url})\\n\\n`;\n      formatted += '---\\n\\n';\n    });\n    return formatted;\n  };\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    if (newQuery !== query) {\n      // Reset the initial load flag for new searches\n      setIsInitialLoad(true);\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: isHealthNews ? 'Latest Health News' : query,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultsPage, \"cQpNdWPbN9NhXnHfLjhALVl9RJI=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ResultsPage;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/results\",\n        element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","searchCache","fetchNewsFeed","refreshNewsFeed","searchNewsArticles","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","searchFoodDatabase","query","console","log","response","fetch","encodeURIComponent","method","headers","ok","Error","status","data","json","error","foodAPI","searchFood","newsAPI","ResultsPage","_s","searchParams","navigate","get","isHealthNews","category","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","isInitialLoad","setIsInitialLoad","isBrowserNavigation","_performance","_performance$getEntri","_performance$getEntri2","navigation","window","performance","getEntriesByType","call","type","fetchResults","cacheKey","cachedResult","getCachedResult","healthNewsResult","success","articles","formattedNews","formatNewsArticles","setCachedResult","location","href","message","nutritionResponse","nutritionData","found","resultString","JSON","stringify","nutritionError","result","searchHealthInfo","resultText","details","sources","medicalDisclaimer","errorMessage","formatted","forEach","article","index","title","source","domain","Date","publishedDate","toLocaleDateString","Math","round","relevanceScore","summary","tags","length","join","url","handleBackToSearch","handleNewSearch","newQuery","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport HealthNewsFeed from './components/HealthNewsFeed';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport { searchCache } from './services/searchCache';\r\nimport { fetchNewsFeed, refreshNewsFeed, searchNewsArticles } from './services/newsService';\r\nimport './VHealthSearch.css';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const searchFoodDatabase = async (query: string) => {\r\n  try {\r\n    console.log('Calling food database API for:', query);\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Food API response:', data);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Food database API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const foodAPI = {\r\n  searchFood: searchFoodDatabase\r\n};\r\n\r\n// Export news API for use in other components\r\nexport const newsAPI = {\r\n  fetchNewsFeed,\r\n  refreshNewsFeed,\r\n  searchNewsArticles\r\n};\r\n\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const isHealthNews = searchParams.get('type') === 'health_news';\r\n  const category = searchParams.get('category') || 'all';\r\n  \r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Track if this is initial load to prevent loading spinner on browser navigation\r\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\r\n  \r\n  // Detect browser navigation type\r\n  const isBrowserNavigation = () => {\r\n    const navigation = (window as any).performance?.getEntriesByType?.('navigation')?.[0];\r\n    return navigation?.type === 'back_forward';\r\n  };\r\n\r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query && !isHealthNews) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Query changed to:\", query);\r\n      console.log(\"Is health news:\", isHealthNews);\r\n      console.log(\"Is browser navigation:\", isBrowserNavigation());\r\n      \r\n      // Create cache key based on type\r\n      const cacheKey = isHealthNews ? `health_news_${category}` : query;\r\n      \r\n      // Always check cache first - especially for browser navigation\r\n      const cachedResult = searchCache.getCachedResult(cacheKey);\r\n      if (cachedResult) {\r\n        console.log('Using cached results for:', cacheKey);\r\n        setResults(cachedResult);\r\n        setDataSource('local');\r\n        setIsLoading(false);\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n        setIsInitialLoad(false);\r\n        return; // Exit early - no API calls needed\r\n      }\r\n      \r\n      // If this is browser navigation and no cache, redirect to search page\r\n      if (isBrowserNavigation() || !isInitialLoad) {\r\n        console.log('Browser navigation detected with no cache - redirecting to search');\r\n        navigate('/');\r\n        return;\r\n      }\r\n      \r\n      // Only show loading for genuine new searches (not browser navigation)\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        // Handle \"I'm Feeling Healthy\" requests\r\n        if (isHealthNews) {\r\n          console.log('Fetching health news via newsService...');\r\n          const healthNewsResult = await fetchNewsFeed([category], 6);\r\n          \r\n          if (healthNewsResult.success && healthNewsResult.articles) {\r\n            console.log('Health news fetched successfully');\r\n            \r\n            // Format the news articles for display\r\n            const formattedNews = formatNewsArticles(healthNewsResult.articles);\r\n            \r\n            setResults(formattedNews);\r\n            setDataSource('openai'); // Use openai as the display source\r\n            \r\n            // Cache the health news results\r\n            searchCache.setCachedResult(cacheKey, formattedNews, window.location.href);\r\n            \r\n            setDisclaimer('Health news provided by AI. Always consult healthcare professionals for medical advice.');\r\n          } else {\r\n            throw new Error(healthNewsResult.message || 'Failed to fetch health news');\r\n          }\r\n        } else {\r\n          // Handle regular search queries\r\n          // STEP 1: First try the nutrition database\r\n          try {\r\n            console.log('Trying nutrition database first...');\r\n            console.log('API URL:', `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n            \r\n            const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n            \r\n            if (nutritionResponse.ok) {\r\n              const nutritionData = await nutritionResponse.json();\r\n              console.log('Nutrition API response:', nutritionData);\r\n              \r\n              if (nutritionData && nutritionData.found === true) {\r\n                console.log('Found nutrition data - using vnutrition source');\r\n                const resultString = JSON.stringify(nutritionData);\r\n                setResults(resultString);\r\n                setDataSource('vnutrition');\r\n                \r\n                // Cache the nutrition results\r\n                searchCache.setCachedResult(query, resultString, window.location.href);\r\n                \r\n                setIsLoading(false);\r\n                setIsInitialLoad(false);\r\n                return;\r\n              }\r\n            }\r\n          } catch (nutritionError) {\r\n            console.log('Nutrition API error:', nutritionError);\r\n          }\r\n          \r\n          // STEP 2: Fall back to OpenAI if no nutrition data found\r\n          console.log('Using OpenAI as fallback...');\r\n          const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n          console.log(\"OpenAI Search result:\", result);\r\n          \r\n          const resultText = result.details || JSON.stringify(result);\r\n          setResults(resultText);\r\n          setDataSource(\"openai\");\r\n          \r\n          // Cache the OpenAI results\r\n          searchCache.setCachedResult(query, resultText, window.location.href);\r\n          \r\n          setCitations(result.sources || []);\r\n          setRecommendations(result.recommendations || []);\r\n          setDisclaimer(result.medicalDisclaimer || '');\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        const errorMessage = \"Sorry, there was an error processing your request.\";\r\n        setResults(errorMessage);\r\n        setDataSource(\"error\");\r\n        \r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n      } finally {\r\n        setIsLoading(false);\r\n        setIsInitialLoad(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query, isHealthNews, category, navigate]);\r\n\r\n  // Function to format news articles for display\r\n  const formatNewsArticles = (articles: any[]): string => {\r\n    let formatted = '# Latest Health News\\n\\n';\r\n    \r\n    articles.forEach((article, index) => {\r\n      formatted += `## ${article.title}\\n\\n`;\r\n      formatted += `**Source:** ${article.source} (${article.domain})\\n`;\r\n      formatted += `**Category:** ${article.category}\\n`;\r\n      formatted += `**Published:** ${new Date(article.publishedDate).toLocaleDateString()}\\n`;\r\n      formatted += `**Relevance:** ${Math.round(article.relevanceScore * 100)}%\\n\\n`;\r\n      formatted += `${article.summary}\\n\\n`;\r\n      \r\n      if (article.tags && article.tags.length > 0) {\r\n        formatted += `**Tags:** ${article.tags.join(', ')}\\n\\n`;\r\n      }\r\n      \r\n      formatted += `[Read Full Article](${article.url})\\n\\n`;\r\n      formatted += '---\\n\\n';\r\n    });\r\n    \r\n    return formatted;\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    if (newQuery !== query) {\r\n      // Reset the initial load flag for new searches\r\n      setIsInitialLoad(true);\r\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={isHealthNews ? 'Latest Health News' : query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details?: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,eAAe,EAAEC,WAAW,QAAQ,kBAAkB;AACvG,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,aAAa,EAAEC,eAAe,EAAEC,kBAAkB,QAAQ,wBAAwB;AAC3F,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAa,IAAK;EACzD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,KAAK,CAAC;IAEpD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,sBAAsBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,EAAE;MAC7FM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCX,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAES,IAAI,CAAC;IAEvC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG;EACrBC,UAAU,EAAEhB;AACd,CAAC;;AAED;AACA,OAAO,MAAMiB,OAAO,GAAG;EACrB1B,aAAa;EACbC,eAAe;EACfC;AACF,CAAC;AAID,MAAMyB,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,CAAC,GAAGnC,eAAe,CAAC,CAAC;EACxC,MAAMoC,QAAQ,GAAGnC,WAAW,CAAC,CAAC;EAC9B,MAAMe,KAAK,GAAGmB,YAAY,CAACE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE;EACzC,MAAMC,YAAY,GAAGH,YAAY,CAACE,GAAG,CAAC,MAAM,CAAC,KAAK,aAAa;EAC/D,MAAME,QAAQ,GAAGJ,YAAY,CAACE,GAAG,CAAC,UAAU,CAAC,IAAI,KAAK;EAEtD,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgD,OAAO,EAAEC,UAAU,CAAC,GAAGjD,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAACkD,UAAU,EAAEC,aAAa,CAAC,GAAGnD,QAAQ,CAAoB,OAAO,CAAC;EACxE,MAAM,CAACoD,SAAS,EAAEC,YAAY,CAAC,GAAGrD,QAAQ,CAAW,EAAE,CAAC;EACxD,MAAM,CAACsD,eAAe,EAAEC,kBAAkB,CAAC,GAAGvD,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAACwD,UAAU,EAAEC,aAAa,CAAC,GAAGzD,QAAQ,CAAS,EAAE,CAAC;;EAExD;EACA,MAAM,CAAC0D,aAAa,EAAEC,gBAAgB,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAM4D,mBAAmB,GAAGA,CAAA,KAAM;IAAA,IAAAC,YAAA,EAAAC,qBAAA,EAAAC,sBAAA;IAChC,MAAMC,UAAU,IAAAH,YAAA,GAAII,MAAM,CAASC,WAAW,cAAAL,YAAA,wBAAAC,qBAAA,GAA3BD,YAAA,CAA6BM,gBAAgB,cAAAL,qBAAA,wBAAAC,sBAAA,GAA7CD,qBAAA,CAAAM,IAAA,CAAAP,YAAA,EAAgD,YAAY,CAAC,cAAAE,sBAAA,uBAA7DA,sBAAA,CAAgE,CAAC,CAAC;IACrF,OAAO,CAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,IAAI,MAAK,cAAc;EAC5C,CAAC;;EAED;EACApE,SAAS,CAAC,MAAM;IACd,MAAMqE,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAAChD,KAAK,IAAI,CAACsB,YAAY,EAAE;QAC3BG,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;MAEAxB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,KAAK,CAAC;MACvCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEoB,YAAY,CAAC;MAC5CrB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEoC,mBAAmB,CAAC,CAAC,CAAC;;MAE5D;MACA,MAAMW,QAAQ,GAAG3B,YAAY,GAAG,eAAeC,QAAQ,EAAE,GAAGvB,KAAK;;MAEjE;MACA,MAAMkD,YAAY,GAAG7D,WAAW,CAAC8D,eAAe,CAACF,QAAQ,CAAC;MAC1D,IAAIC,YAAY,EAAE;QAChBjD,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE+C,QAAQ,CAAC;QAClDtB,UAAU,CAACuB,YAAY,CAAC;QACxBrB,aAAa,CAAC,OAAO,CAAC;QACtBJ,YAAY,CAAC,KAAK,CAAC;QACnBM,YAAY,CAAC,EAAE,CAAC;QAChBE,kBAAkB,CAAC,EAAE,CAAC;QACtBE,aAAa,CAAC,EAAE,CAAC;QACjBE,gBAAgB,CAAC,KAAK,CAAC;QACvB,OAAO,CAAC;MACV;;MAEA;MACA,IAAIC,mBAAmB,CAAC,CAAC,IAAI,CAACF,aAAa,EAAE;QAC3CnC,OAAO,CAACC,GAAG,CAAC,mEAAmE,CAAC;QAChFkB,QAAQ,CAAC,GAAG,CAAC;QACb;MACF;;MAEA;MACAK,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF;QACA,IAAIH,YAAY,EAAE;UAChBrB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;UACtD,MAAMkD,gBAAgB,GAAG,MAAM9D,aAAa,CAAC,CAACiC,QAAQ,CAAC,EAAE,CAAC,CAAC;UAE3D,IAAI6B,gBAAgB,CAACC,OAAO,IAAID,gBAAgB,CAACE,QAAQ,EAAE;YACzDrD,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;YAE/C;YACA,MAAMqD,aAAa,GAAGC,kBAAkB,CAACJ,gBAAgB,CAACE,QAAQ,CAAC;YAEnE3B,UAAU,CAAC4B,aAAa,CAAC;YACzB1B,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;;YAEzB;YACAxC,WAAW,CAACoE,eAAe,CAACR,QAAQ,EAAEM,aAAa,EAAEZ,MAAM,CAACe,QAAQ,CAACC,IAAI,CAAC;YAE1ExB,aAAa,CAAC,yFAAyF,CAAC;UAC1G,CAAC,MAAM;YACL,MAAM,IAAI1B,KAAK,CAAC2C,gBAAgB,CAACQ,OAAO,IAAI,6BAA6B,CAAC;UAC5E;QACF,CAAC,MAAM;UACL;UACA;UACA,IAAI;YACF3D,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;YACjDD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,GAAGP,YAAY,sBAAsBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,CAAC;YAEzF,MAAM6D,iBAAiB,GAAG,MAAMzD,KAAK,CAAC,GAAGT,YAAY,sBAAsBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,CAAC;YAEvG,IAAI6D,iBAAiB,CAACrD,EAAE,EAAE;cACxB,MAAMsD,aAAa,GAAG,MAAMD,iBAAiB,CAACjD,IAAI,CAAC,CAAC;cACpDX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE4D,aAAa,CAAC;cAErD,IAAIA,aAAa,IAAIA,aAAa,CAACC,KAAK,KAAK,IAAI,EAAE;gBACjD9D,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;gBAC7D,MAAM8D,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC;gBAClDnC,UAAU,CAACqC,YAAY,CAAC;gBACxBnC,aAAa,CAAC,YAAY,CAAC;;gBAE3B;gBACAxC,WAAW,CAACoE,eAAe,CAACzD,KAAK,EAAEgE,YAAY,EAAErB,MAAM,CAACe,QAAQ,CAACC,IAAI,CAAC;gBAEtElC,YAAY,CAAC,KAAK,CAAC;gBACnBY,gBAAgB,CAAC,KAAK,CAAC;gBACvB;cACF;YACF;UACF,CAAC,CAAC,OAAO8B,cAAc,EAAE;YACvBlE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEiE,cAAc,CAAC;UACrD;;UAEA;UACAlE,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;UAC1C,MAAMkE,MAAuB,GAAG,MAAMhF,SAAS,CAACiF,gBAAgB,CAACrE,KAAK,CAAC;UACvEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEkE,MAAM,CAAC;UAE5C,MAAME,UAAU,GAAGF,MAAM,CAACG,OAAO,IAAIN,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC;UAC3DzC,UAAU,CAAC2C,UAAU,CAAC;UACtBzC,aAAa,CAAC,QAAQ,CAAC;;UAEvB;UACAxC,WAAW,CAACoE,eAAe,CAACzD,KAAK,EAAEsE,UAAU,EAAE3B,MAAM,CAACe,QAAQ,CAACC,IAAI,CAAC;UAEpE5B,YAAY,CAACqC,MAAM,CAACI,OAAO,IAAI,EAAE,CAAC;UAClCvC,kBAAkB,CAACmC,MAAM,CAACpC,eAAe,IAAI,EAAE,CAAC;UAChDG,aAAa,CAACiC,MAAM,CAACK,iBAAiB,IAAI,EAAE,CAAC;QAC/C;MAEF,CAAC,CAAC,OAAO5D,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC,MAAM6D,YAAY,GAAG,oDAAoD;QACzE/C,UAAU,CAAC+C,YAAY,CAAC;QACxB7C,aAAa,CAAC,OAAO,CAAC;QAEtBE,YAAY,CAAC,EAAE,CAAC;QAChBE,kBAAkB,CAAC,EAAE,CAAC;QACtBE,aAAa,CAAC,EAAE,CAAC;MACnB,CAAC,SAAS;QACRV,YAAY,CAAC,KAAK,CAAC;QACnBY,gBAAgB,CAAC,KAAK,CAAC;MACzB;IACF,CAAC;IAEDW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAAChD,KAAK,EAAEsB,YAAY,EAAEC,QAAQ,EAAEH,QAAQ,CAAC,CAAC;;EAE7C;EACA,MAAMoC,kBAAkB,GAAIF,QAAe,IAAa;IACtD,IAAIqB,SAAS,GAAG,0BAA0B;IAE1CrB,QAAQ,CAACsB,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MACnCH,SAAS,IAAI,MAAME,OAAO,CAACE,KAAK,MAAM;MACtCJ,SAAS,IAAI,eAAeE,OAAO,CAACG,MAAM,KAAKH,OAAO,CAACI,MAAM,KAAK;MAClEN,SAAS,IAAI,iBAAiBE,OAAO,CAACtD,QAAQ,IAAI;MAClDoD,SAAS,IAAI,kBAAkB,IAAIO,IAAI,CAACL,OAAO,CAACM,aAAa,CAAC,CAACC,kBAAkB,CAAC,CAAC,IAAI;MACvFT,SAAS,IAAI,kBAAkBU,IAAI,CAACC,KAAK,CAACT,OAAO,CAACU,cAAc,GAAG,GAAG,CAAC,OAAO;MAC9EZ,SAAS,IAAI,GAAGE,OAAO,CAACW,OAAO,MAAM;MAErC,IAAIX,OAAO,CAACY,IAAI,IAAIZ,OAAO,CAACY,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3Cf,SAAS,IAAI,aAAaE,OAAO,CAACY,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC,MAAM;MACzD;MAEAhB,SAAS,IAAI,uBAAuBE,OAAO,CAACe,GAAG,OAAO;MACtDjB,SAAS,IAAI,SAAS;IACxB,CAAC,CAAC;IAEF,OAAOA,SAAS;EAClB,CAAC;EAED,MAAMkB,kBAAkB,GAAGA,CAAA,KAAM;IAC/BzE,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,MAAM0E,eAAe,GAAIC,QAAgB,IAAK;IAC5C,IAAIA,QAAQ,KAAK/F,KAAK,EAAE;MACtB;MACAqC,gBAAgB,CAAC,IAAI,CAAC;MACtBjB,QAAQ,CAAC,cAAcf,kBAAkB,CAAC0F,QAAQ,CAAC,EAAE,CAAC;IACxD;EACF,CAAC;EAED,oBACErG,OAAA,CAACP,aAAa;IACZa,KAAK,EAAEsB,YAAY,GAAG,oBAAoB,GAAGtB,KAAM;IACnD0B,OAAO,EAAEA,OAAQ;IACjBsE,cAAc,EAAEH,kBAAmB;IACnCI,WAAW,EAAEH,eAAgB;IAC7BtE,SAAS,EAAEA,SAAU;IACrBI,UAAU,EAAEA,UAAW;IACvBE,SAAS,EAAEA,SAAU;IACrBE,eAAe,EAAEA,eAAgB;IACjCE,UAAU,EAAEA;EAAW;IAAAgE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN,CAAC;AAACnF,EAAA,CAtMID,WAAqB;EAAA,QACFjC,eAAe,EACrBC,WAAW;AAAA;AAAAqH,EAAA,GAFxBrF,WAAqB;AAwM3B,MAAMsF,GAAa,GAAGA,CAAA,KAAM;EAC1BtG,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EAErC,oBACER,OAAA,CAACb,MAAM;IAAA2H,QAAA,eACL9G,OAAA,CAACZ,MAAM;MAAA0H,QAAA,gBACL9G,OAAA,CAACX,KAAK;QAAC0H,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEhH,OAAA,CAACR,aAAa;UAAAgH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9C3G,OAAA,CAACX,KAAK;QAAC0H,IAAI,EAAC,UAAU;QAACC,OAAO,eAAEhH,OAAA,CAACuB,WAAW;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACM,GAAA,GAXIJ,GAAa;AAanB,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}