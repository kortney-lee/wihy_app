{"ast":null,"code":"// src/services/azureVisionService.ts\nimport { ComputerVisionClient } from \"@azure/cognitiveservices-computervision\";\nimport { CognitiveServicesCredentials } from \"@azure/ms-rest-js\";\nclass AzureVisionService {\n  constructor() {\n    this.client = null;\n  }\n  initializeClient() {\n    if (this.client) return this.client;\n    const key = process.env.REACT_APP_AZURE_VISION_KEY;\n    const endpoint = process.env.REACT_APP_AZURE_VISION_ENDPOINT;\n    if (!key || !endpoint) {\n      throw new Error('Azure Vision credentials not configured');\n    }\n    const credentials = new CognitiveServicesCredentials(key);\n    this.client = new ComputerVisionClient(credentials, endpoint);\n    return this.client;\n  }\n\n  /**\r\n   * Comprehensive image analysis using Azure Computer Vision\r\n   * Detects: barcodes, QR codes, text (OCR), brands, objects, food items\r\n   */\n  async analyzeImage(imageFile) {\n    try {\n      const client = this.initializeClient();\n\n      // Convert file to stream/buffer for Azure\n      const imageBuffer = await this.fileToBuffer(imageFile);\n\n      // Run comprehensive analysis\n      const analysisResults = await Promise.allSettled([this.detectText(client, imageBuffer), this.detectObjects(client, imageBuffer), this.detectBrands(client, imageBuffer), this.analyzeImageContent(client, imageBuffer)]);\n\n      // Compile results\n      const result = {\n        success: true,\n        data: {\n          barcodes: [],\n          qrCodes: [],\n          text: '',\n          brands: [],\n          objects: [],\n          foodItems: [],\n          nutritionText: '',\n          description: '',\n          tags: []\n        }\n      };\n\n      // Process text detection (OCR) - includes barcode/QR detection\n      if (analysisResults[0].status === 'fulfilled') {\n        const textResult = analysisResults[0].value;\n        result.data.text = this.extractFullText(textResult);\n        result.data.nutritionText = this.extractNutritionInfo(textResult);\n\n        // Extract barcodes and QR codes from text analysis\n        const codes = this.extractCodes(textResult);\n        result.data.barcodes = codes.barcodes;\n        result.data.qrCodes = codes.qrCodes;\n      }\n\n      // Process object detection\n      if (analysisResults[1].status === 'fulfilled') {\n        const objectResult = analysisResults[1].value;\n        result.data.objects = this.extractObjects(objectResult);\n        result.data.foodItems = this.extractFoodItems(objectResult);\n      }\n\n      // Process brand detection\n      if (analysisResults[2].status === 'fulfilled') {\n        const brandResult = analysisResults[2].value;\n        result.data.brands = this.extractBrands(brandResult);\n      }\n\n      // Process general image analysis\n      if (analysisResults[3].status === 'fulfilled') {\n        const imageResult = analysisResults[3].value;\n        result.data.description = this.extractDescription(imageResult);\n        result.data.tags = this.extractTags(imageResult);\n      }\n      return result;\n    } catch (error) {\n      console.error('Azure Vision analysis error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Analysis failed'\n      };\n    }\n  }\n  async detectText(client, imageBuffer) {\n    return await client.recognizePrintedTextInStream(true, imageBuffer, {\n      language: 'en'\n    });\n  }\n  async detectObjects(client, imageBuffer) {\n    return await client.analyzeImageInStream(imageBuffer, {\n      visualFeatures: ['Objects']\n    });\n  }\n  async detectBrands(client, imageBuffer) {\n    return await client.analyzeImageInStream(imageBuffer, {\n      visualFeatures: ['Brands']\n    });\n  }\n  async analyzeImageContent(client, imageBuffer) {\n    return await client.analyzeImageInStream(imageBuffer, {\n      visualFeatures: ['Description', 'Tags', 'Categories']\n    });\n  }\n  async fileToBuffer(file) {\n    const arrayBuffer = await file.arrayBuffer();\n    return Buffer.from(arrayBuffer);\n  }\n  extractFullText(textResult) {\n    if (!(textResult !== null && textResult !== void 0 && textResult.regions)) return '';\n    return textResult.regions.map(region => {\n      var _region$lines;\n      return (_region$lines = region.lines) === null || _region$lines === void 0 ? void 0 : _region$lines.map(line => {\n        var _line$words;\n        return (_line$words = line.words) === null || _line$words === void 0 ? void 0 : _line$words.map(word => word.text).join(' ');\n      }).join('\\n');\n    }).join('\\n\\n');\n  }\n  extractNutritionInfo(textResult) {\n    const fullText = this.extractFullText(textResult);\n\n    // Look for nutrition-related keywords\n    const nutritionKeywords = ['calories', 'protein', 'carbs', 'carbohydrates', 'fat', 'sugar', 'sodium', 'fiber', 'vitamin', 'mineral', 'serving', 'ingredients', 'nutrition facts', 'per serving', 'total fat', 'saturated fat', 'trans fat', 'cholesterol'];\n    const lines = fullText.split('\\n');\n    const nutritionLines = lines.filter(line => nutritionKeywords.some(keyword => line.toLowerCase().includes(keyword)));\n    return nutritionLines.join('\\n');\n  }\n  extractCodes(textResult) {\n    const fullText = this.extractFullText(textResult);\n    const barcodes = [];\n    const qrCodes = [];\n\n    // Look for barcode patterns (UPC, EAN)\n    const barcodePatterns = [/\\b\\d{12,13}\\b/g,\n    // UPC/EAN\n    /\\b\\d{8}\\b/g // EAN-8\n    ];\n    barcodePatterns.forEach(pattern => {\n      const matches = fullText.match(pattern);\n      if (matches) {\n        barcodes.push(...matches);\n      }\n    });\n\n    // Note: QR codes would need special handling or different API endpoint\n    // Azure Computer Vision can detect QR codes but extraction might need additional processing\n\n    return {\n      barcodes: [...new Set(barcodes)],\n      qrCodes\n    };\n  }\n  extractObjects(objectResult) {\n    if (!(objectResult !== null && objectResult !== void 0 && objectResult.objects)) return [];\n    return objectResult.objects.map(obj => obj.object);\n  }\n  extractFoodItems(objectResult) {\n    if (!(objectResult !== null && objectResult !== void 0 && objectResult.objects)) return [];\n    const foodKeywords = ['food', 'fruit', 'vegetable', 'meat', 'bread', 'drink', 'beverage'];\n    return objectResult.objects.filter(obj => foodKeywords.some(keyword => obj.object.toLowerCase().includes(keyword))).map(obj => obj.object);\n  }\n  extractBrands(brandResult) {\n    if (!(brandResult !== null && brandResult !== void 0 && brandResult.brands)) return [];\n    return brandResult.brands.map(brand => brand.name);\n  }\n  extractDescription(imageResult) {\n    var _imageResult$descript;\n    if (!(imageResult !== null && imageResult !== void 0 && (_imageResult$descript = imageResult.description) !== null && _imageResult$descript !== void 0 && _imageResult$descript.captions)) return '';\n    return imageResult.description.captions.map(caption => caption.text).join('. ');\n  }\n  extractTags(imageResult) {\n    if (!(imageResult !== null && imageResult !== void 0 && imageResult.tags)) return [];\n    return imageResult.tags.filter(tag => tag.confidence > 0.5).map(tag => tag.name);\n  }\n\n  /**\r\n   * Format analysis results for display\r\n   */\n  formatForDisplay(result) {\n    if (!result.success || !result.data) {\n      return 'Image analysis failed';\n    }\n    const {\n      data\n    } = result;\n    const parts = [];\n\n    // Prioritize food-related information\n    if (data.foodItems && data.foodItems.length > 0) {\n      parts.push(`Food Items: ${data.foodItems.join(', ')}`);\n    }\n    if (data.brands && data.brands.length > 0) {\n      parts.push(`Brands: ${data.brands.join(', ')}`);\n    }\n    if (data.barcodes && data.barcodes.length > 0) {\n      parts.push(`Barcodes: ${data.barcodes.join(', ')}`);\n    }\n    if (data.nutritionText) {\n      parts.push(`Nutrition Info: ${data.nutritionText}`);\n    }\n    if (data.description) {\n      parts.push(`Description: ${data.description}`);\n    }\n    if (data.objects && data.objects.length > 0) {\n      parts.push(`Objects: ${data.objects.join(', ')}`);\n    }\n    return parts.length > 0 ? parts.join('\\n\\n') : 'No specific information detected';\n  }\n}\nexport const azureVisionService = new AzureVisionService();","map":{"version":3,"names":["ComputerVisionClient","CognitiveServicesCredentials","AzureVisionService","constructor","client","initializeClient","key","process","env","REACT_APP_AZURE_VISION_KEY","endpoint","REACT_APP_AZURE_VISION_ENDPOINT","Error","credentials","analyzeImage","imageFile","imageBuffer","fileToBuffer","analysisResults","Promise","allSettled","detectText","detectObjects","detectBrands","analyzeImageContent","result","success","data","barcodes","qrCodes","text","brands","objects","foodItems","nutritionText","description","tags","status","textResult","value","extractFullText","extractNutritionInfo","codes","extractCodes","objectResult","extractObjects","extractFoodItems","brandResult","extractBrands","imageResult","extractDescription","extractTags","error","console","message","recognizePrintedTextInStream","language","analyzeImageInStream","visualFeatures","file","arrayBuffer","Buffer","from","regions","map","region","_region$lines","lines","line","_line$words","words","word","join","fullText","nutritionKeywords","split","nutritionLines","filter","some","keyword","toLowerCase","includes","barcodePatterns","forEach","pattern","matches","match","push","Set","obj","object","foodKeywords","brand","name","_imageResult$descript","captions","caption","tag","confidence","formatForDisplay","parts","length","azureVisionService"],"sources":["C:/repo/wihy_ui/client/src/services/azureVisionService.ts"],"sourcesContent":["// src/services/azureVisionService.ts\r\nimport { ComputerVisionClient } from \"@azure/cognitiveservices-computervision\";\r\nimport { CognitiveServicesCredentials } from \"@azure/ms-rest-js\";\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    brands?: string[];\r\n    objects?: string[];\r\n    foodItems?: string[];\r\n    nutritionText?: string;\r\n    description?: string;\r\n    tags?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\nclass AzureVisionService {\r\n  private client: ComputerVisionClient | null = null;\r\n  \r\n  private initializeClient() {\r\n    if (this.client) return this.client;\r\n    \r\n    const key = process.env.REACT_APP_AZURE_VISION_KEY;\r\n    const endpoint = process.env.REACT_APP_AZURE_VISION_ENDPOINT;\r\n    \r\n    if (!key || !endpoint) {\r\n      throw new Error('Azure Vision credentials not configured');\r\n    }\r\n    \r\n    const credentials = new CognitiveServicesCredentials(key);\r\n    this.client = new ComputerVisionClient(credentials, endpoint);\r\n    return this.client;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive image analysis using Azure Computer Vision\r\n   * Detects: barcodes, QR codes, text (OCR), brands, objects, food items\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      const client = this.initializeClient();\r\n      \r\n      // Convert file to stream/buffer for Azure\r\n      const imageBuffer = await this.fileToBuffer(imageFile);\r\n      \r\n      // Run comprehensive analysis\r\n      const analysisResults = await Promise.allSettled([\r\n        this.detectText(client, imageBuffer),\r\n        this.detectObjects(client, imageBuffer),\r\n        this.detectBrands(client, imageBuffer),\r\n        this.analyzeImageContent(client, imageBuffer),\r\n      ]);\r\n\r\n      // Compile results\r\n      const result: VisionAnalysisResult = {\r\n        success: true,\r\n        data: {\r\n          barcodes: [],\r\n          qrCodes: [],\r\n          text: '',\r\n          brands: [],\r\n          objects: [],\r\n          foodItems: [],\r\n          nutritionText: '',\r\n          description: '',\r\n          tags: [],\r\n        }\r\n      };\r\n\r\n      // Process text detection (OCR) - includes barcode/QR detection\r\n      if (analysisResults[0].status === 'fulfilled') {\r\n        const textResult = analysisResults[0].value;\r\n        result.data!.text = this.extractFullText(textResult);\r\n        result.data!.nutritionText = this.extractNutritionInfo(textResult);\r\n        \r\n        // Extract barcodes and QR codes from text analysis\r\n        const codes = this.extractCodes(textResult);\r\n        result.data!.barcodes = codes.barcodes;\r\n        result.data!.qrCodes = codes.qrCodes;\r\n      }\r\n\r\n      // Process object detection\r\n      if (analysisResults[1].status === 'fulfilled') {\r\n        const objectResult = analysisResults[1].value;\r\n        result.data!.objects = this.extractObjects(objectResult);\r\n        result.data!.foodItems = this.extractFoodItems(objectResult);\r\n      }\r\n\r\n      // Process brand detection\r\n      if (analysisResults[2].status === 'fulfilled') {\r\n        const brandResult = analysisResults[2].value;\r\n        result.data!.brands = this.extractBrands(brandResult);\r\n      }\r\n\r\n      // Process general image analysis\r\n      if (analysisResults[3].status === 'fulfilled') {\r\n        const imageResult = analysisResults[3].value;\r\n        result.data!.description = this.extractDescription(imageResult);\r\n        result.data!.tags = this.extractTags(imageResult);\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Azure Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  private async detectText(client: ComputerVisionClient, imageBuffer: Buffer) {\r\n    return await client.recognizePrintedTextInStream(true, imageBuffer, {\r\n      language: 'en'\r\n    });\r\n  }\r\n\r\n  private async detectObjects(client: ComputerVisionClient, imageBuffer: Buffer) {\r\n    return await client.analyzeImageInStream(imageBuffer, {\r\n      visualFeatures: ['Objects']\r\n    });\r\n  }\r\n\r\n  private async detectBrands(client: ComputerVisionClient, imageBuffer: Buffer) {\r\n    return await client.analyzeImageInStream(imageBuffer, {\r\n      visualFeatures: ['Brands']\r\n    });\r\n  }\r\n\r\n  private async analyzeImageContent(client: ComputerVisionClient, imageBuffer: Buffer) {\r\n    return await client.analyzeImageInStream(imageBuffer, {\r\n      visualFeatures: ['Description', 'Tags', 'Categories']\r\n    });\r\n  }\r\n\r\n  private async fileToBuffer(file: File): Promise<Buffer> {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    return Buffer.from(arrayBuffer);\r\n  }\r\n\r\n  private extractFullText(textResult: any): string {\r\n    if (!textResult?.regions) return '';\r\n    \r\n    return textResult.regions\r\n      .map((region: any) => \r\n        region.lines?.map((line: any) => \r\n          line.words?.map((word: any) => word.text).join(' ')\r\n        ).join('\\n')\r\n      )\r\n      .join('\\n\\n');\r\n  }\r\n\r\n  private extractNutritionInfo(textResult: any): string {\r\n    const fullText = this.extractFullText(textResult);\r\n    \r\n    // Look for nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'carbohydrates', 'fat', 'sugar', 'sodium',\r\n      'fiber', 'vitamin', 'mineral', 'serving', 'ingredients', 'nutrition facts',\r\n      'per serving', 'total fat', 'saturated fat', 'trans fat', 'cholesterol'\r\n    ];\r\n    \r\n    const lines = fullText.split('\\n');\r\n    const nutritionLines = lines.filter(line => \r\n      nutritionKeywords.some(keyword => \r\n        line.toLowerCase().includes(keyword)\r\n      )\r\n    );\r\n    \r\n    return nutritionLines.join('\\n');\r\n  }\r\n\r\n  private extractCodes(textResult: any): { barcodes: string[], qrCodes: string[] } {\r\n    const fullText = this.extractFullText(textResult);\r\n    const barcodes: string[] = [];\r\n    const qrCodes: string[] = [];\r\n    \r\n    // Look for barcode patterns (UPC, EAN)\r\n    const barcodePatterns = [\r\n      /\\b\\d{12,13}\\b/g, // UPC/EAN\r\n      /\\b\\d{8}\\b/g,     // EAN-8\r\n    ];\r\n    \r\n    barcodePatterns.forEach(pattern => {\r\n      const matches = fullText.match(pattern);\r\n      if (matches) {\r\n        barcodes.push(...matches);\r\n      }\r\n    });\r\n    \r\n    // Note: QR codes would need special handling or different API endpoint\r\n    // Azure Computer Vision can detect QR codes but extraction might need additional processing\r\n    \r\n    return { barcodes: [...new Set(barcodes)], qrCodes };\r\n  }\r\n\r\n  private extractObjects(objectResult: any): string[] {\r\n    if (!objectResult?.objects) return [];\r\n    \r\n    return objectResult.objects.map((obj: any) => obj.object);\r\n  }\r\n\r\n  private extractFoodItems(objectResult: any): string[] {\r\n    if (!objectResult?.objects) return [];\r\n    \r\n    const foodKeywords = ['food', 'fruit', 'vegetable', 'meat', 'bread', 'drink', 'beverage'];\r\n    \r\n    return objectResult.objects\r\n      .filter((obj: any) => \r\n        foodKeywords.some(keyword => \r\n          obj.object.toLowerCase().includes(keyword)\r\n        )\r\n      )\r\n      .map((obj: any) => obj.object);\r\n  }\r\n\r\n  private extractBrands(brandResult: any): string[] {\r\n    if (!brandResult?.brands) return [];\r\n    \r\n    return brandResult.brands.map((brand: any) => brand.name);\r\n  }\r\n\r\n  private extractDescription(imageResult: any): string {\r\n    if (!imageResult?.description?.captions) return '';\r\n    \r\n    return imageResult.description.captions\r\n      .map((caption: any) => caption.text)\r\n      .join('. ');\r\n  }\r\n\r\n  private extractTags(imageResult: any): string[] {\r\n    if (!imageResult?.tags) return [];\r\n    \r\n    return imageResult.tags\r\n      .filter((tag: any) => tag.confidence > 0.5)\r\n      .map((tag: any) => tag.name);\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return 'Image analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // Prioritize food-related information\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`Food Items: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    if (data.brands && data.brands.length > 0) {\r\n      parts.push(`Brands: ${data.brands.join(', ')}`);\r\n    }\r\n\r\n    if (data.barcodes && data.barcodes.length > 0) {\r\n      parts.push(`Barcodes: ${data.barcodes.join(', ')}`);\r\n    }\r\n\r\n    if (data.nutritionText) {\r\n      parts.push(`Nutrition Info: ${data.nutritionText}`);\r\n    }\r\n\r\n    if (data.description) {\r\n      parts.push(`Description: ${data.description}`);\r\n    }\r\n\r\n    if (data.objects && data.objects.length > 0) {\r\n      parts.push(`Objects: ${data.objects.join(', ')}`);\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'No specific information detected';\r\n  }\r\n}\r\n\r\nexport const azureVisionService = new AzureVisionService();\r\nexport type { VisionAnalysisResult };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}