{"ast":null,"code":"import { openaiAPI } from './openaiAPI'; // Add this import\n\nconst NEWS_API_KEY = process.env.REACT_APP_NEWS_API_KEY;\nexport class NewsService {\n  static async fetchHealthNews(category = 'health', pageSize = 6) {\n    try {\n      const params = new URLSearchParams({\n        q: `health ${category !== 'all' ? category : ''}`,\n        category: 'health',\n        language: 'en',\n        sortBy: 'publishedAt',\n        pageSize: pageSize.toString(),\n        apiKey: NEWS_API_KEY || ''\n      });\n      console.log(`Fetching health news for category: ${category}`);\n      const response = await fetch(`${this.BASE_URL}/everything?${params}`);\n      if (!response.ok) {\n        throw new Error(`NewsAPI failed: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.articles && data.articles.length > 0) {\n        return data.articles.map(article => ({\n          id: article.url,\n          title: article.title,\n          summary: article.description,\n          url: article.url,\n          source: article.source.name,\n          publishedAt: article.publishedAt,\n          imageUrl: article.urlToImage,\n          category: this.categorizeArticle(article.title + ' ' + article.description)\n        }));\n      } else {\n        throw new Error('No articles returned from NewsAPI');\n      }\n    } catch (error) {\n      console.log('NewsAPI failed, using OpenAI fallback');\n      return await this.generateHealthNewsWithOpenAI(category, pageSize);\n    }\n  }\n\n  // New method to generate news using OpenAI\n  static async generateHealthNewsWithOpenAI(category = 'health', pageSize = 6) {\n    try {\n      console.log(`Generating health news with OpenAI for category: ${category}`);\n      const categoryPrompt = category === 'all' || category === 'health' ? 'various health topics including nutrition, fitness, mental health, medical research, and wellness' : category;\n      const newsPrompt = `Generate ${pageSize} realistic health news headlines and summaries for ${new Date().toLocaleDateString()}. \n      Focus on: ${categoryPrompt}\n      \n      Each news item should include:\n      - A compelling, realistic headline (not clickbait)\n      - A brief, informative summary (2-3 sentences)\n      - Current date as publication date\n      - Appropriate health category\n      \n      Make the news items sound professional and credible, as if from reputable health news sources.\n      \n      Return as JSON array with this exact structure:\n      [\n        {\n          \"title\": \"headline text\",\n          \"summary\": \"summary text\", \n          \"category\": \"category name\",\n          \"source\": \"Health News Today\",\n          \"publishedAt\": \"${new Date().toISOString()}\",\n          \"url\": \"#\"\n        }\n      ]\n      \n      Categories should be one of: nutrition, fitness, mental-health, medical, wellness, general`;\n      const response = await openaiAPI.searchHealthInfo(newsPrompt);\n      if (response && response.summary) {\n        try {\n          // Try to extract JSON from the response\n          let newsData;\n          const jsonMatch = response.summary.match(/\\[[\\s\\S]*\\]/);\n          if (jsonMatch) {\n            newsData = JSON.parse(jsonMatch[0]);\n          } else {\n            // If no JSON found, create structured data from the text\n            newsData = this.parseTextToNewsItems(response.summary, pageSize);\n          }\n\n          // Ensure we have the right number of items and proper structure\n          if (Array.isArray(newsData) && newsData.length > 0) {\n            return newsData.slice(0, pageSize).map((item, index) => ({\n              id: `openai-news-${Date.now()}-${index}`,\n              title: item.title || `Health Update ${index + 1}`,\n              summary: item.summary || item.description || 'Latest health information and research updates.',\n              url: item.url || '#',\n              source: item.source || 'AI Health News',\n              publishedAt: item.publishedAt || new Date().toISOString(),\n              imageUrl: null,\n              category: this.categorizeArticle(item.title + ' ' + item.summary) || item.category || 'general'\n            }));\n          }\n        } catch (parseError) {\n          console.error('Error parsing OpenAI news response:', parseError);\n        }\n      }\n\n      // Fallback to default news items if OpenAI fails\n      return this.getFallbackNews(category, pageSize);\n    } catch (error) {\n      console.error('Error generating news with OpenAI:', error);\n      return this.getFallbackNews(category, pageSize);\n    }\n  }\n\n  // Helper method to parse text response into news items\n  static parseTextToNewsItems(text, count) {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const newsItems = [];\n    for (let i = 0; i < Math.min(count, lines.length); i++) {\n      const line = lines[i].trim();\n      if (line) {\n        var _parts$;\n        // Try to extract headline and summary from each line\n        const parts = line.split(':');\n        const title = ((_parts$ = parts[0]) === null || _parts$ === void 0 ? void 0 : _parts$.replace(/^\\d+\\.?\\s*/, '').trim()) || `Health News ${i + 1}`;\n        const summary = parts.slice(1).join(':').trim() || 'Important health information and updates.';\n        newsItems.push({\n          title,\n          summary,\n          category: 'general',\n          source: 'AI Health News',\n          publishedAt: new Date().toISOString(),\n          url: '#'\n        });\n      }\n    }\n    return newsItems.length > 0 ? newsItems : this.getFallbackNews(category, count);\n  }\n\n  // Fallback news items when everything else fails\n  static getFallbackNews(category, count) {\n    const fallbackItems = [{\n      title: \"Health Experts Recommend Regular Exercise for Overall Wellness\",\n      summary: \"Medical professionals emphasize the importance of maintaining physical activity for cardiovascular health and mental well-being.\",\n      category: \"fitness\",\n      source: \"Health Today\",\n      publishedAt: new Date().toISOString(),\n      url: \"#\"\n    }, {\n      title: \"Nutrition Research Highlights Benefits of Balanced Diet\",\n      summary: \"Recent studies show that a well-balanced diet rich in fruits and vegetables can significantly impact long-term health outcomes.\",\n      category: \"nutrition\",\n      source: \"Nutrition Science\",\n      publishedAt: new Date().toISOString(),\n      url: \"#\"\n    }, {\n      title: \"Mental Health Awareness: Understanding Stress Management\",\n      summary: \"Healthcare providers stress the importance of recognizing mental health needs and seeking appropriate support when needed.\",\n      category: \"mental-health\",\n      source: \"Wellness Report\",\n      publishedAt: new Date().toISOString(),\n      url: \"#\"\n    }, {\n      title: \"Preventive Care: The Key to Long-term Health\",\n      summary: \"Regular health screenings and preventive measures continue to be the most effective approach to maintaining good health.\",\n      category: \"medical\",\n      source: \"Medical News\",\n      publishedAt: new Date().toISOString(),\n      url: \"#\"\n    }, {\n      title: \"Sleep Quality Linked to Overall Health Outcomes\",\n      summary: \"Research continues to show the vital connection between adequate sleep and various aspects of physical and mental health.\",\n      category: \"wellness\",\n      source: \"Sleep Research\",\n      publishedAt: new Date().toISOString(),\n      url: \"#\"\n    }, {\n      title: \"Healthcare Innovation: Advancing Patient Care\",\n      summary: \"New technologies and treatment approaches are improving healthcare delivery and patient outcomes across various medical fields.\",\n      category: \"medical\",\n      source: \"Health Innovation\",\n      publishedAt: new Date().toISOString(),\n      url: \"#\"\n    }];\n    return fallbackItems.slice(0, count).map((item, index) => ({\n      id: `fallback-news-${Date.now()}-${index}`,\n      title: item.title,\n      summary: item.summary,\n      url: item.url,\n      source: item.source,\n      publishedAt: item.publishedAt,\n      imageUrl: null,\n      category: item.category\n    }));\n  }\n  static categorizeArticle(content) {\n    const lower = content.toLowerCase();\n    if (lower.includes('nutrition') || lower.includes('diet') || lower.includes('food')) return 'nutrition';\n    if (lower.includes('exercise') || lower.includes('fitness') || lower.includes('workout')) return 'fitness';\n    if (lower.includes('mental') || lower.includes('anxiety') || lower.includes('depression')) return 'mental-health';\n    if (lower.includes('research') || lower.includes('study') || lower.includes('medical')) return 'medical';\n    if (lower.includes('wellness') || lower.includes('lifestyle')) return 'wellness';\n    return 'general';\n  }\n}\nNewsService.BASE_URL = 'https://newsapi.org/v2';","map":{"version":3,"names":["openaiAPI","NEWS_API_KEY","process","env","REACT_APP_NEWS_API_KEY","NewsService","fetchHealthNews","category","pageSize","params","URLSearchParams","q","language","sortBy","toString","apiKey","console","log","response","fetch","BASE_URL","ok","Error","status","data","json","articles","length","map","article","id","url","title","summary","description","source","name","publishedAt","imageUrl","urlToImage","categorizeArticle","error","generateHealthNewsWithOpenAI","categoryPrompt","newsPrompt","Date","toLocaleDateString","toISOString","searchHealthInfo","newsData","jsonMatch","match","JSON","parse","parseTextToNewsItems","Array","isArray","slice","item","index","now","parseError","getFallbackNews","text","count","lines","split","filter","line","trim","newsItems","i","Math","min","_parts$","parts","replace","join","push","fallbackItems","content","lower","toLowerCase","includes"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import { openaiAPI } from './openaiAPI'; // Add this import\r\n\r\nconst NEWS_API_KEY = process.env.REACT_APP_NEWS_API_KEY;\r\n\r\nexport class NewsService {\r\n  private static readonly BASE_URL = 'https://newsapi.org/v2';\r\n  \r\n  static async fetchHealthNews(category: string = 'health', pageSize: number = 6) {\r\n    try {\r\n      const params = new URLSearchParams({\r\n        q: `health ${category !== 'all' ? category : ''}`,\r\n        category: 'health',\r\n        language: 'en',\r\n        sortBy: 'publishedAt',\r\n        pageSize: pageSize.toString(),\r\n        apiKey: NEWS_API_KEY || ''\r\n      });\r\n\r\n      console.log(`Fetching health news for category: ${category}`);\r\n      const response = await fetch(`${this.BASE_URL}/everything?${params}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`NewsAPI failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.articles && data.articles.length > 0) {\r\n        return data.articles.map((article: any) => ({\r\n          id: article.url,\r\n          title: article.title,\r\n          summary: article.description,\r\n          url: article.url,\r\n          source: article.source.name,\r\n          publishedAt: article.publishedAt,\r\n          imageUrl: article.urlToImage,\r\n          category: this.categorizeArticle(article.title + ' ' + article.description)\r\n        }));\r\n      } else {\r\n        throw new Error('No articles returned from NewsAPI');\r\n      }\r\n    } catch (error) {\r\n      console.log('NewsAPI failed, using OpenAI fallback');\r\n      return await this.generateHealthNewsWithOpenAI(category, pageSize);\r\n    }\r\n  }\r\n\r\n  // New method to generate news using OpenAI\r\n  private static async generateHealthNewsWithOpenAI(category: string = 'health', pageSize: number = 6) {\r\n    try {\r\n      console.log(`Generating health news with OpenAI for category: ${category}`);\r\n      \r\n      const categoryPrompt = category === 'all' || category === 'health' \r\n        ? 'various health topics including nutrition, fitness, mental health, medical research, and wellness'\r\n        : category;\r\n\r\n      const newsPrompt = `Generate ${pageSize} realistic health news headlines and summaries for ${new Date().toLocaleDateString()}. \r\n      Focus on: ${categoryPrompt}\r\n      \r\n      Each news item should include:\r\n      - A compelling, realistic headline (not clickbait)\r\n      - A brief, informative summary (2-3 sentences)\r\n      - Current date as publication date\r\n      - Appropriate health category\r\n      \r\n      Make the news items sound professional and credible, as if from reputable health news sources.\r\n      \r\n      Return as JSON array with this exact structure:\r\n      [\r\n        {\r\n          \"title\": \"headline text\",\r\n          \"summary\": \"summary text\", \r\n          \"category\": \"category name\",\r\n          \"source\": \"Health News Today\",\r\n          \"publishedAt\": \"${new Date().toISOString()}\",\r\n          \"url\": \"#\"\r\n        }\r\n      ]\r\n      \r\n      Categories should be one of: nutrition, fitness, mental-health, medical, wellness, general`;\r\n\r\n      const response = await openaiAPI.searchHealthInfo(newsPrompt);\r\n      \r\n      if (response && response.summary) {\r\n        try {\r\n          // Try to extract JSON from the response\r\n          let newsData;\r\n          const jsonMatch = response.summary.match(/\\[[\\s\\S]*\\]/);\r\n          \r\n          if (jsonMatch) {\r\n            newsData = JSON.parse(jsonMatch[0]);\r\n          } else {\r\n            // If no JSON found, create structured data from the text\r\n            newsData = this.parseTextToNewsItems(response.summary, pageSize);\r\n          }\r\n          \r\n          // Ensure we have the right number of items and proper structure\r\n          if (Array.isArray(newsData) && newsData.length > 0) {\r\n            return newsData.slice(0, pageSize).map((item, index) => ({\r\n              id: `openai-news-${Date.now()}-${index}`,\r\n              title: item.title || `Health Update ${index + 1}`,\r\n              summary: item.summary || item.description || 'Latest health information and research updates.',\r\n              url: item.url || '#',\r\n              source: item.source || 'AI Health News',\r\n              publishedAt: item.publishedAt || new Date().toISOString(),\r\n              imageUrl: null,\r\n              category: this.categorizeArticle(item.title + ' ' + item.summary) || item.category || 'general'\r\n            }));\r\n          }\r\n        } catch (parseError) {\r\n          console.error('Error parsing OpenAI news response:', parseError);\r\n        }\r\n      }\r\n      \r\n      // Fallback to default news items if OpenAI fails\r\n      return this.getFallbackNews(category, pageSize);\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating news with OpenAI:', error);\r\n      return this.getFallbackNews(category, pageSize);\r\n    }\r\n  }\r\n\r\n  // Helper method to parse text response into news items\r\n  private static parseTextToNewsItems(text: string, count: number) {\r\n    const lines = text.split('\\n').filter(line => line.trim());\r\n    const newsItems = [];\r\n    \r\n    for (let i = 0; i < Math.min(count, lines.length); i++) {\r\n      const line = lines[i].trim();\r\n      if (line) {\r\n        // Try to extract headline and summary from each line\r\n        const parts = line.split(':');\r\n        const title = parts[0]?.replace(/^\\d+\\.?\\s*/, '').trim() || `Health News ${i + 1}`;\r\n        const summary = parts.slice(1).join(':').trim() || 'Important health information and updates.';\r\n        \r\n        newsItems.push({\r\n          title,\r\n          summary,\r\n          category: 'general',\r\n          source: 'AI Health News',\r\n          publishedAt: new Date().toISOString(),\r\n          url: '#'\r\n        });\r\n      }\r\n    }\r\n    \r\n    return newsItems.length > 0 ? newsItems : this.getFallbackNews(category, count);\r\n  }\r\n\r\n  // Fallback news items when everything else fails\r\n  private static getFallbackNews(category: string, count: number) {\r\n    const fallbackItems = [\r\n      {\r\n        title: \"Health Experts Recommend Regular Exercise for Overall Wellness\",\r\n        summary: \"Medical professionals emphasize the importance of maintaining physical activity for cardiovascular health and mental well-being.\",\r\n        category: \"fitness\",\r\n        source: \"Health Today\",\r\n        publishedAt: new Date().toISOString(),\r\n        url: \"#\"\r\n      },\r\n      {\r\n        title: \"Nutrition Research Highlights Benefits of Balanced Diet\",\r\n        summary: \"Recent studies show that a well-balanced diet rich in fruits and vegetables can significantly impact long-term health outcomes.\",\r\n        category: \"nutrition\", \r\n        source: \"Nutrition Science\",\r\n        publishedAt: new Date().toISOString(),\r\n        url: \"#\"\r\n      },\r\n      {\r\n        title: \"Mental Health Awareness: Understanding Stress Management\",\r\n        summary: \"Healthcare providers stress the importance of recognizing mental health needs and seeking appropriate support when needed.\",\r\n        category: \"mental-health\",\r\n        source: \"Wellness Report\",\r\n        publishedAt: new Date().toISOString(),\r\n        url: \"#\"\r\n      },\r\n      {\r\n        title: \"Preventive Care: The Key to Long-term Health\",\r\n        summary: \"Regular health screenings and preventive measures continue to be the most effective approach to maintaining good health.\",\r\n        category: \"medical\",\r\n        source: \"Medical News\",\r\n        publishedAt: new Date().toISOString(),\r\n        url: \"#\"\r\n      },\r\n      {\r\n        title: \"Sleep Quality Linked to Overall Health Outcomes\",\r\n        summary: \"Research continues to show the vital connection between adequate sleep and various aspects of physical and mental health.\",\r\n        category: \"wellness\",\r\n        source: \"Sleep Research\",\r\n        publishedAt: new Date().toISOString(),\r\n        url: \"#\"\r\n      },\r\n      {\r\n        title: \"Healthcare Innovation: Advancing Patient Care\",\r\n        summary: \"New technologies and treatment approaches are improving healthcare delivery and patient outcomes across various medical fields.\",\r\n        category: \"medical\",\r\n        source: \"Health Innovation\",\r\n        publishedAt: new Date().toISOString(),\r\n        url: \"#\"\r\n      }\r\n    ];\r\n\r\n    return fallbackItems.slice(0, count).map((item, index) => ({\r\n      id: `fallback-news-${Date.now()}-${index}`,\r\n      title: item.title,\r\n      summary: item.summary,\r\n      url: item.url,\r\n      source: item.source,\r\n      publishedAt: item.publishedAt,\r\n      imageUrl: null,\r\n      category: item.category\r\n    }));\r\n  }\r\n  \r\n  private static categorizeArticle(content: string): string {\r\n    const lower = content.toLowerCase();\r\n    if (lower.includes('nutrition') || lower.includes('diet') || lower.includes('food')) return 'nutrition';\r\n    if (lower.includes('exercise') || lower.includes('fitness') || lower.includes('workout')) return 'fitness';\r\n    if (lower.includes('mental') || lower.includes('anxiety') || lower.includes('depression')) return 'mental-health';\r\n    if (lower.includes('research') || lower.includes('study') || lower.includes('medical')) return 'medical';\r\n    if (lower.includes('wellness') || lower.includes('lifestyle')) return 'wellness';\r\n    return 'general';\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}