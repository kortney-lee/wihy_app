{"ast":null,"code":"// vHealth News API Client Integration\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\n\n// API Configuration\nconst API_BASE_URL = {\n  production: 'https://services.wihy.ai',\n  development: 'http://localhost:5001'\n};\n\n// Local cache configuration\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds\nconst ARTICLES_PER_PAGE = 12;\nconst API_FETCH_LIMIT = 100;\nclass NewsCache {\n  constructor() {\n    this.cache = new Map();\n  }\n  getCacheKey(params) {\n    return JSON.stringify(params);\n  }\n  get(params) {\n    const key = this.getCacheKey(params);\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n\n    // Check if cache is expired (5 minutes)\n    if (Date.now() - cached.timestamp > CACHE_DURATION) {\n      this.cache.delete(key);\n      return null;\n    }\n    return cached;\n  }\n  set(params, data, totalCount) {\n    const key = this.getCacheKey(params);\n    this.cache.set(key, {\n      articles: data,\n      timestamp: Date.now(),\n      totalCount\n    });\n  }\n  clear() {\n    this.cache.clear();\n  }\n}\nclass VHealthNewsClient {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    // Use production by default\n    this.baseUrl = baseUrl || API_BASE_URL.production;\n  }\n  async getArticles(params = {}) {\n    const queryParams = new URLSearchParams();\n    if (params.limit) queryParams.append('limit', params.limit.toString());\n    if (params.category) queryParams.append('category', params.category);\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\n    console.log('Making API request to:', fullUrl);\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Debug: Log API response summary (development only)\n    if (process.env.NODE_ENV === 'development') {\n      var _data$articles, _data$articles2, _data$articles3;\n      console.log('ï¿½ News API Response Summary:', {\n        success: data.success,\n        totalArticles: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n        articlesWithImages: ((_data$articles2 = data.articles) === null || _data$articles2 === void 0 ? void 0 : _data$articles2.filter(a => a.has_image && a.image_url).length) || 0,\n        articlesWithoutImages: ((_data$articles3 = data.articles) === null || _data$articles3 === void 0 ? void 0 : _data$articles3.filter(a => !a.has_image || !a.image_url).length) || 0\n      });\n\n      // Log a sample of image statuses\n      if (data.articles && data.articles.length > 0) {\n        const imageStatuses = data.articles.slice(0, 3).map(article => {\n          var _article$title;\n          return {\n            title: ((_article$title = article.title) === null || _article$title === void 0 ? void 0 : _article$title.substring(0, 40)) + '...',\n            has_image: article.has_image,\n            image_url: article.image_url ? 'present' : 'null',\n            image_status: article.image_status\n          };\n        });\n        console.log('ðŸ“¸ Sample image statuses:', imageStatuses);\n      }\n    }\n\n    // Add legacy compatibility fields to articles\n    const articles = data.articles || [];\n    data.articles = articles.map(article => ({\n      ...article,\n      // Ensure core fields are properly mapped\n      has_author: !!article.author,\n      // Legacy compatibility fields\n      published_date: article.published_at,\n      publishedDate: article.published_at,\n      pubDate: article.published_at,\n      category: article.ai_category,\n      summary: article.description,\n      tags: article.ai_category ? [article.ai_category, article.source] : [article.source],\n      media_url: article.image_url,\n      // Map image_url to media_url for legacy compatibility\n      media_thumb_url: article.image_url,\n      // Map image_url to media_thumb_url for legacy compatibility\n      relevanceScore: article.quality_score ? article.quality_score / 10 : 0.5,\n      link: article.url\n    }));\n    return {\n      success: data.success !== false,\n      articles: data.articles,\n      count: data.count || data.articles.length,\n      meta: data.meta,\n      // Legacy compatibility fields extracted from meta\n      sources_used: data.sources_used || [],\n      timestamp: data.timestamp || new Date().toISOString()\n    };\n  }\n  async getCategories() {\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async getStats() {\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async healthCheck() {\n    const response = await fetch(`${this.baseUrl}/api/health`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async testSource(source, limit = 5) {\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n}\n\n// Initialize the client\nconst newsClient = new VHealthNewsClient();\n\n// Simple function to fetch news feed - API handles all filtering\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    // Simple API call - no client-side filtering needed\n    const response = await newsClient.getArticles({\n      limit: limit || 100,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error:', error);\n    return {\n      success: false,\n      articles: []\n    };\n  }\n};\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    // Simple API call with category - API handles filtering\n    const response = await newsClient.getArticles({\n      category,\n      limit: limit || 100,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (category):', error);\n    return {\n      success: false,\n      articles: []\n    };\n  }\n};\nexport const refreshNewsFeed = async () => {\n  // Simple refresh - API handles everything\n  return await fetchNewsFeed(undefined, 100);\n};\nexport const searchNewsArticles = async (query, limit) => {\n  try {\n    // Simple search call - API handles query processing\n    const response = await newsClient.getArticles({\n      limit: limit || 100,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (search):', error);\n    return {\n      success: false,\n      articles: []\n    };\n  }\n};\n\n// Simple function to get all news - API handles filtering and priority\nexport const getAllNews = async (limit = 100) => {\n  try {\n    // Simple API call - server handles all filtering, categorization, and priority sorting\n    const response = await newsClient.getArticles({\n      limit: limit,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles,\n      count: response.count,\n      sources_used: response.sources_used || []\n    };\n  } catch (error) {\n    console.error('Error fetching all news:', error);\n    return {\n      success: false,\n      articles: [],\n      count: 0,\n      sources_used: []\n    };\n  }\n};\nexport const getNewsCategories = async () => {\n  try {\n    const response = await newsClient.getCategories();\n    return response.success ? response.categories : [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories if API fails\n    return [{\n      category: 'Medical Research',\n      description: 'Latest medical studies and breakthroughs'\n    }, {\n      category: 'Clinical Studies',\n      description: 'Clinical trials and medical research'\n    }, {\n      category: 'Public Health',\n      description: 'Community health and disease prevention'\n    }, {\n      category: 'Prevention',\n      description: 'Preventive medicine and wellness'\n    }, {\n      category: 'Nutrition',\n      description: 'Diet, supplements, and nutritional research'\n    }, {\n      category: 'Mental Health',\n      description: 'Mental wellness and psychological health'\n    }, {\n      category: 'Health Technology',\n      description: 'Health tech and medical AI innovations'\n    }, {\n      category: 'Medical Technology',\n      description: 'Medical devices and healthcare technology'\n    }, {\n      category: 'General Health',\n      description: 'General health news and information'\n    }, {\n      category: 'Environment',\n      description: 'Environmental health and sustainability'\n    }, {\n      category: 'Technology',\n      description: 'Tech innovations and digital trends'\n    }, {\n      category: 'General News',\n      description: 'General news and current events'\n    }];\n  }\n};\nexport const getNewsStats = async () => {\n  try {\n    return await newsClient.getStats();\n  } catch (error) {\n    console.error('Error fetching news stats:', error);\n    return {\n      error: 'Stats unavailable'\n    };\n  }\n};\nexport const checkNewsServiceHealth = async () => {\n  try {\n    const health = await newsClient.healthCheck();\n    return health.status === 'healthy';\n  } catch (error) {\n    console.error('News service health check failed:', error);\n    return false;\n  }\n};\n\n// Helper functions to extract information from the new meta structure\nexport const getImageStats = response => {\n  var _response$meta;\n  return ((_response$meta = response.meta) === null || _response$meta === void 0 ? void 0 : _response$meta.image_stats) || null;\n};\nexport const getCacheInfo = response => {\n  var _response$meta2;\n  return ((_response$meta2 = response.meta) === null || _response$meta2 === void 0 ? void 0 : _response$meta2.cache_info) || null;\n};\nexport const getPriorityInfo = response => {\n  var _response$meta3;\n  return ((_response$meta3 = response.meta) === null || _response$meta3 === void 0 ? void 0 : _response$meta3.priority_sorting) || null;\n};\nexport const getRecencyStats = response => {\n  var _response$meta4;\n  return ((_response$meta4 = response.meta) === null || _response$meta4 === void 0 ? void 0 : _response$meta4.recency_stats) || null;\n};\nexport const getCategoryDistribution = response => {\n  var _response$meta5;\n  return ((_response$meta5 = response.meta) === null || _response$meta5 === void 0 ? void 0 : _response$meta5.category_distribution) || {};\n};\nexport const getCategoryPriorities = response => {\n  var _response$meta6, _response$meta7, _response$meta7$prior;\n  return ((_response$meta6 = response.meta) === null || _response$meta6 === void 0 ? void 0 : _response$meta6.category_priorities) || ((_response$meta7 = response.meta) === null || _response$meta7 === void 0 ? void 0 : (_response$meta7$prior = _response$meta7.priority_sorting) === null || _response$meta7$prior === void 0 ? void 0 : _response$meta7$prior.category_priorities) || {};\n};\n\n// Export the client for advanced usage\nexport { VHealthNewsClient, newsClient };","map":{"version":3,"names":["API_BASE_URL","production","development","CACHE_DURATION","ARTICLES_PER_PAGE","API_FETCH_LIMIT","NewsCache","constructor","cache","Map","getCacheKey","params","JSON","stringify","get","key","cached","Date","now","timestamp","delete","set","data","totalCount","articles","clear","VHealthNewsClient","baseUrl","getArticles","queryParams","URLSearchParams","limit","append","toString","category","fresh","undefined","fullUrl","console","log","response","fetch","method","headers","ok","Error","status","json","process","env","NODE_ENV","_data$articles","_data$articles2","_data$articles3","success","totalArticles","length","articlesWithImages","filter","a","has_image","image_url","articlesWithoutImages","imageStatuses","slice","map","article","_article$title","title","substring","image_status","has_author","author","published_date","published_at","publishedDate","pubDate","ai_category","summary","description","tags","source","media_url","media_thumb_url","relevanceScore","quality_score","link","url","count","meta","sources_used","toISOString","getCategories","getStats","healthCheck","testSource","newsClient","fetchNewsFeed","categories","error","getArticlesByCategory","refreshNewsFeed","searchNewsArticles","query","getAllNews","getNewsCategories","getNewsStats","checkNewsServiceHealth","health","getImageStats","_response$meta","image_stats","getCacheInfo","_response$meta2","cache_info","getPriorityInfo","_response$meta3","priority_sorting","getRecencyStats","_response$meta4","recency_stats","getCategoryDistribution","_response$meta5","category_distribution","getCategoryPriorities","_response$meta6","_response$meta7","_response$meta7$prior","category_priorities"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// vHealth News API Client Integration\r\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\r\n\r\nexport interface NewsArticle {\r\n  // Article Identity\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content?: string;\r\n  url: string;\r\n  \r\n  // Source Information\r\n  source: string;\r\n  api_source?: 'NewsAPI' | 'GNews' | 'NewsData' | 'MediaStack';\r\n  author: string | null;\r\n  published_at: string; // API uses published_at\r\n  \r\n  // AI Categorization\r\n  ai_category: string;\r\n  category_priority?: number;\r\n  priority_position?: number;\r\n  \r\n  // Image Data (Complete)\r\n  image_url: string | null;\r\n  has_image: boolean;\r\n  image_status?: 'original' | 'generated' | 'missing';\r\n  image_source?: 'unsplash' | 'pexels' | 'pixabay' | 'extracted';\r\n  image_attribution?: string;\r\n  photographer?: string;\r\n  \r\n  // Enriched Metadata\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  reading_time: number; // Minutes\r\n  quality_score: number; // 0-10 scale\r\n  \r\n  // Legacy compatibility fields\r\n  published_date?: string; // Alternative date field\r\n  publishedDate?: string; // Alternative date field\r\n  pubDate?: string; // Alternative date field\r\n  category?: string; // Maps to ai_category\r\n  has_author?: boolean; // Computed from author field\r\n  tags?: string[]; // Legacy compatibility\r\n  summary?: string; // Maps to description\r\n  media_url?: string; // Maps to image_url\r\n  media_thumb_url?: string; // Maps to image_url\r\n  relevanceScore?: number; // Maps to quality_score\r\n  link?: string; // Maps to url\r\n}\r\n\r\nexport interface ArticlesResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  meta?: {\r\n    // Cache Information\r\n    total_articles?: number;\r\n    returned_articles?: number;\r\n    cache_info?: {\r\n      served_from_cache: boolean;\r\n      cache_size: number;\r\n      last_refresh: string;\r\n      last_top_refresh: string;\r\n      cache_age_minutes: number;\r\n    };\r\n    \r\n    // Sorting Information\r\n    sorting?: {\r\n      sort_by: string;\r\n      sort_order: string;\r\n      sorted_field: string;\r\n    };\r\n    \r\n    // Image Statistics\r\n    image_stats?: {\r\n      total_articles: number;\r\n      articles_with_images: number;\r\n      image_percentage: number;\r\n      original_images: number;\r\n      generated_images: number;\r\n      ai_enhanced_images: number;\r\n      sources: {\r\n        extracted: number;\r\n        unsplash: number;\r\n        pexels: number;\r\n        pixabay: number;\r\n      };\r\n    };\r\n    \r\n    // Pagination\r\n    pagination?: {\r\n      total_items: number;\r\n      current_page: number;\r\n      per_page: number;\r\n      has_next_page: boolean;\r\n    };\r\n    \r\n    // Applied Filters\r\n    filters_applied?: {\r\n      images_only: boolean;\r\n      top_articles_only: boolean;\r\n      limit: number;\r\n      offset: number;\r\n      category?: string | null;\r\n      source?: string;\r\n      ai_categorization?: boolean;\r\n    };\r\n    \r\n    // Priority Sorting System\r\n    priority_sorting?: {\r\n      enabled: boolean;\r\n      description: string;\r\n      sorting_order: string;\r\n      total: number;\r\n      priority_categories: number;\r\n      discovered_categories: number;\r\n      categories: string[];\r\n      category_priorities: Record<string, number>;\r\n      dynamic_learning: string;\r\n    };\r\n    \r\n    // Adaptive Recency System\r\n    recency_stats?: {\r\n      recent_articles: number;\r\n      older_articles: number;\r\n      threshold: string;\r\n      threshold_description: string;\r\n      adaptive_sorting?: string;\r\n    };\r\n    \r\n    // Category Distribution (Current Response)\r\n    category_distribution?: Record<string, number>;\r\n    \r\n    // Category Priorities (Duplicate for convenience)\r\n    category_priorities?: Record<string, number>;\r\n  };\r\n  \r\n  // Legacy compatibility fields\r\n  sources_used?: string[];\r\n  timestamp?: string;\r\n}\r\n\r\nexport interface Category {\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n// API Configuration\r\nconst API_BASE_URL = {\r\n  production: 'https://services.wihy.ai',\r\n  development: 'http://localhost:5001'\r\n};\r\n\r\n// Local cache configuration\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds\r\nconst ARTICLES_PER_PAGE = 12;\r\nconst API_FETCH_LIMIT = 100;\r\n\r\ninterface CachedData {\r\n  articles: NewsArticle[];\r\n  timestamp: number;\r\n  totalCount: number;\r\n}\r\n\r\nclass NewsCache {\r\n  private cache: Map<string, CachedData> = new Map();\r\n\r\n  private getCacheKey(params: any): string {\r\n    return JSON.stringify(params);\r\n  }\r\n\r\n  get(params: any): CachedData | null {\r\n    const key = this.getCacheKey(params);\r\n    const cached = this.cache.get(key);\r\n    \r\n    if (!cached) return null;\r\n    \r\n    // Check if cache is expired (5 minutes)\r\n    if (Date.now() - cached.timestamp > CACHE_DURATION) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return cached;\r\n  }\r\n\r\n  set(params: any, data: NewsArticle[], totalCount: number): void {\r\n    const key = this.getCacheKey(params);\r\n    this.cache.set(key, {\r\n      articles: data,\r\n      timestamp: Date.now(),\r\n      totalCount\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n\r\nclass VHealthNewsClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl?: string) {\r\n    // Use production by default\r\n    this.baseUrl = baseUrl || API_BASE_URL.production;\r\n  }\r\n\r\n  async getArticles(params: {\r\n    limit?: number;\r\n    category?: string;\r\n    fresh?: boolean;\r\n  } = {}): Promise<ArticlesResponse> {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params.category) queryParams.append('category', params.category);\r\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\r\n\r\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\r\n    console.log('Making API request to:', fullUrl);\r\n\r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data: ArticlesResponse = await response.json();\r\n    \r\n    // Debug: Log API response summary (development only)\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('ï¿½ News API Response Summary:', {\r\n        success: data.success,\r\n        totalArticles: data.articles?.length || 0,\r\n        articlesWithImages: data.articles?.filter(a => a.has_image && a.image_url).length || 0,\r\n        articlesWithoutImages: data.articles?.filter(a => !a.has_image || !a.image_url).length || 0\r\n      });\r\n      \r\n      // Log a sample of image statuses\r\n      if (data.articles && data.articles.length > 0) {\r\n        const imageStatuses = data.articles.slice(0, 3).map(article => ({\r\n          title: article.title?.substring(0, 40) + '...',\r\n          has_image: article.has_image,\r\n          image_url: article.image_url ? 'present' : 'null',\r\n          image_status: article.image_status\r\n        }));\r\n        console.log('ðŸ“¸ Sample image statuses:', imageStatuses);\r\n      }\r\n    }\r\n    \r\n    // Add legacy compatibility fields to articles\r\n    const articles = data.articles || [];\r\n    data.articles = articles.map(article => ({\r\n      ...article,\r\n      // Ensure core fields are properly mapped\r\n      has_author: !!article.author,\r\n      // Legacy compatibility fields\r\n      published_date: article.published_at,\r\n      publishedDate: article.published_at,\r\n      pubDate: article.published_at,\r\n      category: article.ai_category,\r\n      summary: article.description,\r\n      tags: article.ai_category ? [article.ai_category, article.source] : [article.source],\r\n      media_url: article.image_url, // Map image_url to media_url for legacy compatibility\r\n      media_thumb_url: article.image_url, // Map image_url to media_thumb_url for legacy compatibility\r\n      relevanceScore: article.quality_score ? article.quality_score / 10 : 0.5,\r\n      link: article.url\r\n    }));\r\n    \r\n    return {\r\n      success: data.success !== false,\r\n      articles: data.articles,\r\n      count: data.count || data.articles.length,\r\n      meta: data.meta,\r\n      // Legacy compatibility fields extracted from meta\r\n      sources_used: data.sources_used || [],\r\n      timestamp: data.timestamp || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  async getCategories(): Promise<{ success: boolean; categories: Category[] }> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getStats(): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    const response = await fetch(`${this.baseUrl}/api/health`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async testSource(source: 'newsapi' | 'gnews' | 'newsdata' | 'mediastack', limit: number = 5): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Initialize the client\r\nconst newsClient = new VHealthNewsClient();\r\n\r\n// Simple function to fetch news feed - API handles all filtering\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call - no client-side filtering needed\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error:', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call with category - API handles filtering\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (category):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Simple refresh - API handles everything\r\n  return await fetchNewsFeed(undefined, 100);\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple search call - API handles query processing\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (search):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\n// Simple function to get all news - API handles filtering and priority\r\nexport const getAllNews = async (limit: number = 100): Promise<{ success: boolean; articles: NewsArticle[]; count: number; sources_used: string[] }> => {\r\n  try {\r\n    // Simple API call - server handles all filtering, categorization, and priority sorting\r\n    const response = await newsClient.getArticles({\r\n      limit: limit,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles,\r\n      count: response.count,\r\n      sources_used: response.sources_used || []\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching all news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      count: 0,\r\n      sources_used: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    const response = await newsClient.getCategories();\r\n    return response.success ? response.categories : [];\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return default categories if API fails\r\n    return [\r\n      { category: 'Medical Research', description: 'Latest medical studies and breakthroughs' },\r\n      { category: 'Clinical Studies', description: 'Clinical trials and medical research' },\r\n      { category: 'Public Health', description: 'Community health and disease prevention' },\r\n      { category: 'Prevention', description: 'Preventive medicine and wellness' },\r\n      { category: 'Nutrition', description: 'Diet, supplements, and nutritional research' },\r\n      { category: 'Mental Health', description: 'Mental wellness and psychological health' },\r\n      { category: 'Health Technology', description: 'Health tech and medical AI innovations' },\r\n      { category: 'Medical Technology', description: 'Medical devices and healthcare technology' },\r\n      { category: 'General Health', description: 'General health news and information' },\r\n      { category: 'Environment', description: 'Environmental health and sustainability' },\r\n      { category: 'Technology', description: 'Tech innovations and digital trends' },\r\n      { category: 'General News', description: 'General news and current events' }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getNewsStats = async (): Promise<any> => {\r\n  try {\r\n    return await newsClient.getStats();\r\n  } catch (error) {\r\n    console.error('Error fetching news stats:', error);\r\n    return { error: 'Stats unavailable' };\r\n  }\r\n};\r\n\r\nexport const checkNewsServiceHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const health = await newsClient.healthCheck();\r\n    return health.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('News service health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Helper functions to extract information from the new meta structure\r\nexport const getImageStats = (response: ArticlesResponse) => {\r\n  return response.meta?.image_stats || null;\r\n};\r\n\r\nexport const getCacheInfo = (response: ArticlesResponse) => {\r\n  return response.meta?.cache_info || null;\r\n};\r\n\r\nexport const getPriorityInfo = (response: ArticlesResponse) => {\r\n  return response.meta?.priority_sorting || null;\r\n};\r\n\r\nexport const getRecencyStats = (response: ArticlesResponse) => {\r\n  return response.meta?.recency_stats || null;\r\n};\r\n\r\nexport const getCategoryDistribution = (response: ArticlesResponse) => {\r\n  return response.meta?.category_distribution || {};\r\n};\r\n\r\nexport const getCategoryPriorities = (response: ArticlesResponse) => {\r\n  return response.meta?.category_priorities || response.meta?.priority_sorting?.category_priorities || {};\r\n};\r\n\r\n// Export the client for advanced usage\r\nexport { VHealthNewsClient, newsClient };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}