{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { MapperType } from \"./serializer\";\nexport function isStreamOperation(operationSpec) {\n  var result = false;\n  for (var statusCode in operationSpec.responses) {\n    var operationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperType.Stream) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["MapperType","isStreamOperation","operationSpec","result","statusCode","responses","operationResponse","bodyMapper","type","name","Stream"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\operationSpec.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter,\n} from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA;AACA;AAQA,SAASA,UAAU,QAAoB,cAAc;AA2ErD,OAAM,SAAUC,iBAAiBA,CAACC,aAA4B;EAC5D,IAAIC,MAAM,GAAG,KAAK;EAClB,KAAK,IAAMC,UAAU,IAAIF,aAAa,CAACG,SAAS,EAAE;IAChD,IAAMC,iBAAiB,GAAsBJ,aAAa,CAACG,SAAS,CAACD,UAAU,CAAC;IAChF,IACEE,iBAAiB,CAACC,UAAU,IAC5BD,iBAAiB,CAACC,UAAU,CAACC,IAAI,CAACC,IAAI,KAAKT,UAAU,CAACU,MAAM,EAC5D;MACAP,MAAM,GAAG,IAAI;MACb;;;EAGJ,OAAOA,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}