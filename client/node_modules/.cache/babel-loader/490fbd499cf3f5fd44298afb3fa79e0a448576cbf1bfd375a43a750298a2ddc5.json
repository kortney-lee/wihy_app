{"ast":null,"code":"// src/services/foodAnalysisService.ts\nimport axios from 'axios';\n\n// Add a type for the API response\n\nconst API_URL = 'http://localhost:5000/api';\nexport const foodAnalysisService = {\n  // Analyze food image via API\n  analyzeFoodImage: async imageFile => {\n    try {\n      console.log(\"Analyzing food image:\", imageFile.name);\n\n      // For demo purposes: if filename contains \"blueberry\", treat as blueberry image\n      if (imageFile.name.toLowerCase().includes(\"blueberr\")) {\n        console.log(\"Detected blueberries in image name\");\n      }\n\n      // Mock API call with typed response\n      const response = await axios.post(`${API_URL}/analyze-image`, {\n        fileName: imageFile.name,\n        foodName: imageFile.name.toLowerCase().includes(\"blueberr\") ? \"blueberries\" : \"Sample Food\"\n      });\n      console.log(\"Image analysis response:\", response.data);\n\n      // Return the food name for search or the whole analysis result\n      if (response.data.foodName) {\n        return response.data.foodName;\n      } else if (response.data.name) {\n        return response.data.name;\n      } else {\n        return JSON.stringify(response.data);\n      }\n    } catch (error) {\n      console.error(\"Error analyzing food image:\", error);\n      throw error;\n    }\n  },\n  // Fix the private method syntax - can't use 'private' keyword in object literals\n  formatFoodAnalysisResults: function (analysis) {\n    const {\n      classification,\n      nutrition,\n      healthInsight,\n      recommendations\n    } = analysis;\n    return `🍽️ **Food Analysis Results**\n\n**📸 Detected Item:** ${classification.foodName}\n**🎯 Confidence:** ${classification.confidence}%\n**📂 Category:** ${classification.category}\n${classification.portionSize ? `**📏 Portion Size:** ${classification.portionSize}` : ''}\n\n**📊 Nutrition Facts (per serving):**\n• **Calories:** ${nutrition.calories} kcal\n• **Protein:** ${nutrition.macros.protein}g\n• **Carbs:** ${nutrition.macros.carbs}g (${nutrition.macros.sugar}g sugar)\n• **Fat:** ${nutrition.macros.fat}g (${nutrition.macros.saturatedFat}g saturated)\n• **Fiber:** ${nutrition.macros.fiber}g\n• **Sodium:** ${nutrition.macros.sodium}mg\n\n**🎯 Health Score:** ${nutrition.healthScore}/100\n**🏷️ Processing Level:** NOVA ${nutrition.novaClassification}\n${nutrition.allergens.length > 0 ? `**⚠️ Potential Allergens:** ${nutrition.allergens.join(', ')}` : ''}\n**💳 SNAP Eligible:** ${nutrition.snapEligible ? 'Yes ✅' : 'No ❌'}\n\n**💡 Health Insight:**\n${healthInsight}\n\n**📋 Recommendations:**\n${recommendations.map(rec => `• ${rec}`).join('\\n')}\n\n**🔬 Sources:** AI Image Recognition, USDA FoodData Central, Nutritionix Database\n*This analysis is for educational purposes. Consult healthcare professionals for medical advice.*`;\n  }\n};","map":{"version":3,"names":["axios","API_URL","foodAnalysisService","analyzeFoodImage","imageFile","console","log","name","toLowerCase","includes","response","post","fileName","foodName","data","JSON","stringify","error","formatFoodAnalysisResults","analysis","classification","nutrition","healthInsight","recommendations","confidence","category","portionSize","calories","macros","protein","carbs","sugar","fat","saturatedFat","fiber","sodium","healthScore","novaClassification","allergens","length","join","snapEligible","map","rec"],"sources":["C:/vHealth/vhealth/client/src/components/foodAnalysisService.tsx"],"sourcesContent":["// src/services/foodAnalysisService.ts\r\nimport axios from 'axios';\r\n\r\ninterface FoodAnalysisResult {\r\n  classification: {\r\n    foodName: string;\r\n    confidence: number;\r\n    category: string;\r\n    portionSize?: string;\r\n    alternatives?: string[];\r\n  };\r\n  nutrition: {\r\n    calories: number;\r\n    macros: {\r\n      protein: number;\r\n      carbs: number;\r\n      fat: number;\r\n      saturatedFat: number;\r\n      sugar: number;\r\n      fiber: number;\r\n      sodium: number;\r\n    };\r\n    healthScore: number;\r\n    novaClassification: 1 | 2 | 3 | 4;\r\n    allergens: string[];\r\n    snapEligible: boolean;\r\n  };\r\n  healthInsight: string;\r\n  recommendations: string[];\r\n}\r\n\r\n// Add a type for the API response\r\ninterface AnalyzeImageResponse {\r\n  foodName: string;\r\n  name?: string;  // Alternative field name\r\n  nutrition?: any;\r\n  confidence?: number;\r\n  // Add other fields as needed\r\n}\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const foodAnalysisService = {\r\n  // Analyze food image via API\r\n  analyzeFoodImage: async (imageFile: File): Promise<string | FoodAnalysisResult | null> => {\r\n    try {\r\n      console.log(\"Analyzing food image:\", imageFile.name);\r\n      \r\n      // For demo purposes: if filename contains \"blueberry\", treat as blueberry image\r\n      if (imageFile.name.toLowerCase().includes(\"blueberr\")) {\r\n        console.log(\"Detected blueberries in image name\");\r\n      }\r\n      \r\n      // Mock API call with typed response\r\n      const response = await axios.post<AnalyzeImageResponse>(\r\n        `${API_URL}/analyze-image`, \r\n        {\r\n          fileName: imageFile.name,\r\n          foodName: imageFile.name.toLowerCase().includes(\"blueberr\") ? \"blueberries\" : \"Sample Food\"\r\n        }\r\n      );\r\n      \r\n      console.log(\"Image analysis response:\", response.data);\r\n      \r\n      // Return the food name for search or the whole analysis result\r\n      if (response.data.foodName) {\r\n        return response.data.foodName;\r\n      } else if (response.data.name) {\r\n        return response.data.name;\r\n      } else {\r\n        return JSON.stringify(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error analyzing food image:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fix the private method syntax - can't use 'private' keyword in object literals\r\n  formatFoodAnalysisResults: function(analysis: FoodAnalysisResult): string {\r\n    const { classification, nutrition, healthInsight, recommendations } = analysis;\r\n    \r\n    return `🍽️ **Food Analysis Results**\r\n\r\n**📸 Detected Item:** ${classification.foodName}\r\n**🎯 Confidence:** ${classification.confidence}%\r\n**📂 Category:** ${classification.category}\r\n${classification.portionSize ? `**📏 Portion Size:** ${classification.portionSize}` : ''}\r\n\r\n**📊 Nutrition Facts (per serving):**\r\n• **Calories:** ${nutrition.calories} kcal\r\n• **Protein:** ${nutrition.macros.protein}g\r\n• **Carbs:** ${nutrition.macros.carbs}g (${nutrition.macros.sugar}g sugar)\r\n• **Fat:** ${nutrition.macros.fat}g (${nutrition.macros.saturatedFat}g saturated)\r\n• **Fiber:** ${nutrition.macros.fiber}g\r\n• **Sodium:** ${nutrition.macros.sodium}mg\r\n\r\n**🎯 Health Score:** ${nutrition.healthScore}/100\r\n**🏷️ Processing Level:** NOVA ${nutrition.novaClassification}\r\n${nutrition.allergens.length > 0 ? `**⚠️ Potential Allergens:** ${nutrition.allergens.join(', ')}` : ''}\r\n**💳 SNAP Eligible:** ${nutrition.snapEligible ? 'Yes ✅' : 'No ❌'}\r\n\r\n**💡 Health Insight:**\r\n${healthInsight}\r\n\r\n**📋 Recommendations:**\r\n${recommendations.map((rec: string) => `• ${rec}`).join('\\n')}\r\n\r\n**🔬 Sources:** AI Image Recognition, USDA FoodData Central, Nutritionix Database\r\n*This analysis is for educational purposes. Consult healthcare professionals for medical advice.*`;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AA8BzB;;AASA,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,mBAAmB,GAAG;EACjC;EACAC,gBAAgB,EAAE,MAAOC,SAAe,IAAkD;IACxF,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,SAAS,CAACG,IAAI,CAAC;;MAEpD;MACA,IAAIH,SAAS,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;QACrDJ,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACnD;;MAEA;MACA,MAAMI,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAC/B,GAAGV,OAAO,gBAAgB,EAC1B;QACEW,QAAQ,EAAER,SAAS,CAACG,IAAI;QACxBM,QAAQ,EAAET,SAAS,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,GAAG,aAAa,GAAG;MAChF,CACF,CAAC;MAEDJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,QAAQ,CAACI,IAAI,CAAC;;MAEtD;MACA,IAAIJ,QAAQ,CAACI,IAAI,CAACD,QAAQ,EAAE;QAC1B,OAAOH,QAAQ,CAACI,IAAI,CAACD,QAAQ;MAC/B,CAAC,MAAM,IAAIH,QAAQ,CAACI,IAAI,CAACP,IAAI,EAAE;QAC7B,OAAOG,QAAQ,CAACI,IAAI,CAACP,IAAI;MAC3B,CAAC,MAAM;QACL,OAAOQ,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACI,IAAI,CAAC;MACtC;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,yBAAyB,EAAE,SAAAA,CAASC,QAA4B,EAAU;IACxE,MAAM;MAAEC,cAAc;MAAEC,SAAS;MAAEC,aAAa;MAAEC;IAAgB,CAAC,GAAGJ,QAAQ;IAE9E,OAAO;AACX;AACA,wBAAwBC,cAAc,CAACP,QAAQ;AAC/C,qBAAqBO,cAAc,CAACI,UAAU;AAC9C,mBAAmBJ,cAAc,CAACK,QAAQ;AAC1C,EAAEL,cAAc,CAACM,WAAW,GAAG,wBAAwBN,cAAc,CAACM,WAAW,EAAE,GAAG,EAAE;AACxF;AACA;AACA,kBAAkBL,SAAS,CAACM,QAAQ;AACpC,iBAAiBN,SAAS,CAACO,MAAM,CAACC,OAAO;AACzC,eAAeR,SAAS,CAACO,MAAM,CAACE,KAAK,MAAMT,SAAS,CAACO,MAAM,CAACG,KAAK;AACjE,aAAaV,SAAS,CAACO,MAAM,CAACI,GAAG,MAAMX,SAAS,CAACO,MAAM,CAACK,YAAY;AACpE,eAAeZ,SAAS,CAACO,MAAM,CAACM,KAAK;AACrC,gBAAgBb,SAAS,CAACO,MAAM,CAACO,MAAM;AACvC;AACA,uBAAuBd,SAAS,CAACe,WAAW;AAC5C,iCAAiCf,SAAS,CAACgB,kBAAkB;AAC7D,EAAEhB,SAAS,CAACiB,SAAS,CAACC,MAAM,GAAG,CAAC,GAAG,+BAA+BlB,SAAS,CAACiB,SAAS,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE;AACvG,wBAAwBnB,SAAS,CAACoB,YAAY,GAAG,OAAO,GAAG,MAAM;AACjE;AACA;AACA,EAAEnB,aAAa;AACf;AACA;AACA,EAAEC,eAAe,CAACmB,GAAG,CAAEC,GAAW,IAAK,KAAKA,GAAG,EAAE,CAAC,CAACH,IAAI,CAAC,IAAI,CAAC;AAC7D;AACA;AACA,kGAAkG;EAChG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}