{"ast":null,"code":"/**\r\n * Chat Service - Dedicated service for ChatWidget functionality\r\n * Connects to http://localhost:8000 with direct chat endpoint (no session required)\r\n * Sessions are optional and only used if they exist\r\n */const CHAT_API_BASE='http://localhost:8000';class ChatService{constructor(){this.currentSessionId=null;this.conversationId=null;this.userProfile=void 0;}/**\r\n   * Send a message using the direct chat endpoint (no session required)\r\n   * This is the primary method for simple health questions\r\n   */async sendDirectMessage(message,userProfile){try{console.log('üîç CHAT SERVICE: Sending message');const request={message:message,conversation_id:this.conversationId||undefined,user_profile:userProfile};const response=await fetch(\"\".concat(CHAT_API_BASE,\"/chat\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){throw new Error(\"Failed to send message: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();console.log('üîç CHAT SERVICE: Response received');// Store conversation ID for continuity\nif(data.session_token){this.conversationId=data.session_token;}return data;}catch(error){console.error('Chat service direct message error:',error);return{success:false,response:'Failed to send message',error:error instanceof Error?error.message:'Unknown error'};}}/**\r\n   * Send a message using session-based endpoint (optional, advanced features)\r\n   * Only used if a session already exists\r\n   */async sendSessionMessage(message){let messageType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'health_chat';let useCustomModel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!this.currentSessionId){console.log('üîç CHAT SERVICE: No session available, falling back to direct message');return null;}try{var _data$response;console.log('üîç CHAT SERVICE: Sending session message:',{sessionId:this.currentSessionId,message:message.substring(0,100)+'...',messageType,useCustomModel});const request={session_id:this.currentSessionId,message:message,message_type:messageType,use_custom_model:useCustomModel};const response=await fetch(\"\".concat(CHAT_API_BASE,\"/api/chat/send-message\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){throw new Error(\"Failed to send session message: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();console.log('üîç CHAT SERVICE: Session message response:',{success:data.success,messageId:data.message_id,modelUsed:data.model_used,confidenceScore:data.confidence_score,responseTime:data.response_time_ms,responsePreview:((_data$response=data.response)===null||_data$response===void 0?void 0:_data$response.substring(0,100))+'...'});return data;}catch(error){console.error('Chat service session message error:',error);return{success:false,message:'Failed to send session message',error:error instanceof Error?error.message:'Unknown error'};}}/**\r\n   * Primary send message method - tries session first, falls back to direct\r\n   */async sendMessage(message,userProfile){let useCustomModel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Try session-based chat first if session exists\nif(this.currentSessionId){const sessionResponse=await this.sendSessionMessage(message,'health_chat',useCustomModel);if(sessionResponse!==null&&sessionResponse!==void 0&&sessionResponse.success){return sessionResponse;}}// Fall back to direct chat (no session required)\nreturn await this.sendDirectMessage(message,userProfile);}/**\r\n   * Set an existing session ID (optional)\r\n   */setSessionId(sessionId){this.currentSessionId=sessionId;console.log('üîç CHAT SERVICE: Session ID set:',sessionId);}/**\r\n   * Clear current session - will use direct chat\r\n   */clearSession(){this.currentSessionId=null;this.conversationId=null;console.log('üîç CHAT SERVICE: Session cleared, using direct chat');}/**\r\n   * Get current session ID (may be null)\r\n   */getCurrentSessionId(){return this.currentSessionId;}/**\r\n   * Get current conversation ID for direct chat continuity\r\n   */getConversationId(){return this.conversationId;}/**\r\n   * Set user profile for personalized responses in direct chat\r\n   */setUserProfile(profile){this.userProfile=profile;}/**\r\n   * Send message with current user profile\r\n   */async sendMessageWithProfile(message){return await this.sendMessage(message,this.userProfile);}}// Create and export singleton instance\nexport const chatService=new ChatService();// Export for type usage\nexport default chatService;","map":{"version":3,"names":["CHAT_API_BASE","ChatService","constructor","currentSessionId","conversationId","userProfile","sendDirectMessage","message","console","log","request","conversation_id","undefined","user_profile","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","status","statusText","data","json","session_token","error","success","sendSessionMessage","messageType","arguments","length","useCustomModel","_data$response","sessionId","substring","session_id","message_type","use_custom_model","messageId","message_id","modelUsed","model_used","confidenceScore","confidence_score","responseTime","response_time_ms","responsePreview","sendMessage","sessionResponse","setSessionId","clearSession","getCurrentSessionId","getConversationId","setUserProfile","profile","sendMessageWithProfile","chatService"],"sources":["C:/repo/wihy_ui/client/src/services/chatService.ts"],"sourcesContent":["/**\r\n * Chat Service - Dedicated service for ChatWidget functionality\r\n * Connects to http://localhost:8000 with direct chat endpoint (no session required)\r\n * Sessions are optional and only used if they exist\r\n */\r\n\r\nconst CHAT_API_BASE = 'http://localhost:8000';\r\n\r\nexport interface ChatRequest {\r\n  message: string;\r\n  conversation_id?: string;\r\n  user_profile?: Record<string, any>;\r\n}\r\n\r\nexport interface ChatResponse {\r\n  success: boolean;\r\n  response: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  session_token?: string;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ChatSession {\r\n  session_id: string;\r\n  session_name?: string;\r\n  created_at: string;\r\n  user_id: string;\r\n}\r\n\r\nexport interface ChatMessageRequest {\r\n  session_id: string;\r\n  message: string;\r\n  message_type?: string;\r\n  use_custom_model?: boolean;\r\n}\r\n\r\nexport interface ChatMessageResponse {\r\n  success: boolean;\r\n  message_id?: string;\r\n  response?: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\nclass ChatService {\r\n  private currentSessionId: string | null = null;\r\n  private conversationId: string | null = null;\r\n\r\n  /**\r\n   * Send a message using the direct chat endpoint (no session required)\r\n   * This is the primary method for simple health questions\r\n   */\r\n  async sendDirectMessage(\r\n    message: string, \r\n    userProfile?: Record<string, any>\r\n  ): Promise<ChatResponse | null> {\r\n    try {\r\n      console.log('üîç CHAT SERVICE: Sending message');\r\n\r\n      const request: ChatRequest = {\r\n        message: message,\r\n        conversation_id: this.conversationId || undefined,\r\n        user_profile: userProfile\r\n      };\r\n\r\n      const response = await fetch(`${CHAT_API_BASE}/chat`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to send message: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Response received');\r\n\r\n      // Store conversation ID for continuity\r\n      if (data.session_token) {\r\n        this.conversationId = data.session_token;\r\n      }\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Chat service direct message error:', error);\r\n      return {\r\n        success: false,\r\n        response: 'Failed to send message',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message using session-based endpoint (optional, advanced features)\r\n   * Only used if a session already exists\r\n   */\r\n  async sendSessionMessage(\r\n    message: string, \r\n    messageType: string = 'health_chat',\r\n    useCustomModel: boolean = false\r\n  ): Promise<ChatMessageResponse | null> {\r\n    if (!this.currentSessionId) {\r\n      console.log('üîç CHAT SERVICE: No session available, falling back to direct message');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      console.log('üîç CHAT SERVICE: Sending session message:', {\r\n        sessionId: this.currentSessionId,\r\n        message: message.substring(0, 100) + '...',\r\n        messageType,\r\n        useCustomModel\r\n      });\r\n\r\n      const request: ChatMessageRequest = {\r\n        session_id: this.currentSessionId,\r\n        message: message,\r\n        message_type: messageType,\r\n        use_custom_model: useCustomModel\r\n      };\r\n\r\n      const response = await fetch(`${CHAT_API_BASE}/api/chat/send-message`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to send session message: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatMessageResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Session message response:', {\r\n        success: data.success,\r\n        messageId: data.message_id,\r\n        modelUsed: data.model_used,\r\n        confidenceScore: data.confidence_score,\r\n        responseTime: data.response_time_ms,\r\n        responsePreview: data.response?.substring(0, 100) + '...'\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Chat service session message error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to send session message',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Primary send message method - tries session first, falls back to direct\r\n   */\r\n  async sendMessage(\r\n    message: string, \r\n    userProfile?: Record<string, any>,\r\n    useCustomModel: boolean = false\r\n  ): Promise<ChatResponse | ChatMessageResponse | null> {\r\n    // Try session-based chat first if session exists\r\n    if (this.currentSessionId) {\r\n      const sessionResponse = await this.sendSessionMessage(message, 'health_chat', useCustomModel);\r\n      if (sessionResponse?.success) {\r\n        return sessionResponse;\r\n      }\r\n    }\r\n\r\n    // Fall back to direct chat (no session required)\r\n    return await this.sendDirectMessage(message, userProfile);\r\n  }\r\n\r\n  /**\r\n   * Set an existing session ID (optional)\r\n   */\r\n  setSessionId(sessionId: string): void {\r\n    this.currentSessionId = sessionId;\r\n    console.log('üîç CHAT SERVICE: Session ID set:', sessionId);\r\n  }\r\n\r\n  /**\r\n   * Clear current session - will use direct chat\r\n   */\r\n  clearSession(): void {\r\n    this.currentSessionId = null;\r\n    this.conversationId = null;\r\n    console.log('üîç CHAT SERVICE: Session cleared, using direct chat');\r\n  }\r\n\r\n  /**\r\n   * Get current session ID (may be null)\r\n   */\r\n  getCurrentSessionId(): string | null {\r\n    return this.currentSessionId;\r\n  }\r\n\r\n  /**\r\n   * Get current conversation ID for direct chat continuity\r\n   */\r\n  getConversationId(): string | null {\r\n    return this.conversationId;\r\n  }\r\n\r\n  /**\r\n   * Set user profile for personalized responses in direct chat\r\n   */\r\n  setUserProfile(profile: Record<string, any>): void {\r\n    this.userProfile = profile;\r\n  }\r\n\r\n  private userProfile?: Record<string, any>;\r\n\r\n  /**\r\n   * Send message with current user profile\r\n   */\r\n  async sendMessageWithProfile(message: string): Promise<ChatResponse | ChatMessageResponse | null> {\r\n    return await this.sendMessage(message, this.userProfile);\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const chatService = new ChatService();\r\n\r\n// Export for type usage\r\nexport default chatService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}