{"ast":null,"code":"import axios from 'axios';\n\n// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'mayoclinic.org': 1,\n  'health.harvard.edu': 1\n};\n\n// Update API URL configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass NewsService {\n  constructor() {\n    // Update the apiUrl to use the correct base URL\n    this.apiUrl = `${API_BASE_URL}/api/news`;\n  }\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\n  async getArticles(params = {}) {\n    try {\n      // Set defaults\n      const queryParams = {\n        limit: 500,\n        country: 'US',\n        feed_priority: '1-10',\n        flat: true,\n        page: 1,\n        per_page: 12,\n        ...params // Override with any provided params\n      };\n      console.log('Fetching news with params:', queryParams);\n      const response = await axios.get(`${this.apiUrl}/articles`, {\n        params: queryParams\n      });\n\n      // Process the response to add compatibility fields\n      const apiResponse = response.data;\n\n      // Map API articles to client format\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\n      }\n      return apiResponse;\n    } catch (error) {\n      console.error('Error fetching news articles:', error);\n      return {\n        success: false,\n        articles: [],\n        count: 0,\n        pagination: {\n          total_items: 0,\n          total_pages: 0,\n          current_page: 1,\n          per_page: 12,\n          has_next_page: false,\n          has_prev_page: false\n        },\n        filters_applied: {\n          category: null,\n          country: null,\n          feed_id: null,\n          limit: 0\n        },\n        error: error instanceof Error ? error.message : 'Unknown error',\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\n      };\n    }\n  }\n\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\n  adaptArticleForClient(article) {\n    return {\n      ...article,\n      // Add compatibility fields\n      url: article.link || article.url,\n      summary: article.description || article.summary,\n      publishedDate: article.published_date || article.publishedDate,\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\n      imageUrl: article.image_url || article.imageUrl,\n      hasMedia: article.has_image || article.hasMedia,\n      hasAuthor: article.has_author || article.hasAuthor,\n      readingTime: article.reading_time || article.readingTime,\n      wordCount: article.word_count || article.wordCount\n    };\n  }\n\n  /**\r\n   * Get available news categories\r\n   */\n  async getCategories() {\n    try {\n      const response = await axios.get(`${this.apiUrl}/categories`);\n      // Type assertion for correct response type\n      return response.data.categories || [];\n    } catch (error) {\n      console.error('Error fetching news categories:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Get available countries\r\n   */\n  async getCountries() {\n    try {\n      const response = await axios.get(`${this.apiUrl}/countries`);\n      // Type assertion for correct response type\n      return response.data.countries || [];\n    } catch (error) {\n      console.error('Error fetching countries:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Calculate trust score based on domain\r\n   */\n  calculateTrustScore(article) {\n    if (!article.domain) return 0.5;\n    return TRUSTED_DOMAINS[article.domain] || TRUSTED_DOMAINS[`www.${article.domain}`] || 0.5;\n  }\n}\nexport const newsService = new NewsService();\n\n// Update these functions to improve category filtering and sort by date\n\nexport const fetchNewsFeed = async (categories, limit) => {\n  const params = {};\n\n  // Only add category parameter if categories array is non-empty\n  if (categories && categories.length > 0) {\n    params.category = categories.join(',');\n  }\n  if (limit) {\n    params.limit = limit;\n  }\n\n  // Always sort by published date to get newest content\n  params.sort_by = 'published_date';\n  params.sort_order = 'desc';\n  console.log('Fetching news with params:', params);\n  return await newsService.getArticles(params);\n};\nexport const getArticlesByCategory = async (category, limit) => {\n  if (category === 'all') {\n    return fetchNewsFeed();\n  }\n  const params = {\n    category,\n    limit,\n    // Sort by published date to randomize based on date\n    sort_by: 'published_date',\n    sort_order: 'desc'\n  };\n  return await newsService.getArticles(params);\n};\nexport const refreshNewsFeed = async () => {\n  // Force refresh by adding timestamp\n  return await newsService.getArticles({\n    timestamp: Date.now()\n  });\n};\nexport const searchNewsArticles = async (query, limit = 10) => {\n  return await newsService.getArticles({\n    query,\n    limit\n  });\n};","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","API_BASE_URL","process","env","REACT_APP_API_URL","NewsService","constructor","apiUrl","getArticles","params","queryParams","limit","country","feed_priority","flat","page","per_page","console","log","response","get","apiResponse","data","articles","length","map","article","adaptArticleForClient","error","success","count","pagination","total_items","total_pages","current_page","has_next_page","has_prev_page","filters_applied","category","feed_id","Error","message","url","link","summary","description","publishedDate","published_date","thumbnailUrl","thumbnail","imageUrl","image_url","hasMedia","has_image","hasAuthor","has_author","readingTime","reading_time","wordCount","word_count","getCategories","categories","getCountries","countries","calculateTrustScore","domain","newsService","fetchNewsFeed","join","sort_by","sort_order","getArticlesByCategory","refreshNewsFeed","timestamp","Date","now","searchNewsArticles","query"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport interface NewsArticle {\r\n  // API response standard fields\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  author: string;\r\n  published_date: string;\r\n  thumbnail: string;\r\n  image_url: string;\r\n  has_image: boolean;\r\n  has_author: boolean;\r\n  category: string;\r\n  source: string;\r\n  feed_id: number;\r\n  feed_priority: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  content_quality: string;\r\n  completeness: string;\r\n  domain: string;\r\n  extracted_at: string;\r\n  \r\n  // Client-side compatibility fields\r\n  url?: string;\r\n  summary?: string;\r\n  publishedDate?: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;        // Added to match client usage\r\n  tags?: string[];\r\n  relevanceScore?: number;\r\n  hasMedia?: boolean;\r\n  hasAuthor?: boolean;\r\n  readingTime?: number;     // Added to match client usage\r\n  wordCount?: number;       // Added to match client usage\r\n  mediaType?: string;       // Added to match client usage\r\n  contentLength?: number;   // Added to match client usage\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  pagination: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: false;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n  };\r\n  error?: string; // Added to handle errors from the API\r\n  message?: string; // For backward compatibility\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;\r\n  country?: string;\r\n  category?: string;\r\n  exclude_category?: string; // Add this field to exclude certain categories\r\n  feed_id?: number;\r\n  feed_priority?: string;\r\n  flat?: boolean;\r\n  page?: number;\r\n  per_page?: number;\r\n  timestamp?: number; // Added to support refreshNewsFeed\r\n  query?: string;     // Added to support searchNewsArticles\r\n  sort_by?: string; // Add sorting parameter\r\n  sort_order?: 'asc' | 'desc'; // Add sort direction\r\n}\r\n\r\nclass NewsService {\r\n  // Update the apiUrl to use the correct base URL\r\n  private apiUrl = `${API_BASE_URL}/api/news`;\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Set defaults\r\n      const queryParams: NewsQueryParams = {\r\n        limit: 500,\r\n        country: 'US',\r\n        feed_priority: '1-10',\r\n        flat: true,\r\n        page: 1,\r\n        per_page: 12,\r\n        ...params // Override with any provided params\r\n      };\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      const response = await axios.get(`${this.apiUrl}/articles`, { params: queryParams });\r\n      \r\n      // Process the response to add compatibility fields\r\n      const apiResponse = response.data as NewsFeedResponse;\r\n      \r\n      // Map API articles to client format\r\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n      }\r\n      \r\n      return apiResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 12,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Add compatibility fields\r\n      url: article.link || article.url,\r\n      summary: article.description || article.summary,\r\n      publishedDate: article.published_date || article.publishedDate,\r\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\r\n      imageUrl: article.image_url || article.imageUrl,\r\n      hasMedia: article.has_image || article.hasMedia,\r\n      hasAuthor: article.has_author || article.hasAuthor,\r\n      readingTime: article.reading_time || article.readingTime,\r\n      wordCount: article.word_count || article.wordCount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      const response = await axios.get(`${this.apiUrl}/categories`);\r\n      // Type assertion for correct response type\r\n      return (response.data as any).categories || [];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      const response = await axios.get(`${this.apiUrl}/countries`);\r\n      // Type assertion for correct response type\r\n      return (response.data as any).countries || [];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    if (!article.domain) return 0.5;\r\n    \r\n    return TRUSTED_DOMAINS[article.domain] || \r\n           TRUSTED_DOMAINS[`www.${article.domain}`] || \r\n           0.5;\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  if (limit) {\r\n    params.limit = limit;\r\n  }\r\n  \r\n  // Always sort by published date to get newest content\r\n  params.sort_by = 'published_date';\r\n  params.sort_order = 'desc';\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  return await newsService.getArticles(params);\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (category === 'all') {\r\n    return fetchNewsFeed();\r\n  }\r\n  \r\n  const params: NewsQueryParams = { \r\n    category, \r\n    limit,\r\n    // Sort by published date to randomize based on date\r\n    sort_by: 'published_date',\r\n    sort_order: 'desc'\r\n  };\r\n  \r\n  return await newsService.getArticles(params);\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  // Force refresh by adding timestamp\r\n  return await newsService.getArticles({ timestamp: Date.now() } as NewsQueryParams);\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit = 10): Promise<NewsFeedResponse> => {\r\n  return await newsService.getArticles({ query, limit } as NewsQueryParams);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}