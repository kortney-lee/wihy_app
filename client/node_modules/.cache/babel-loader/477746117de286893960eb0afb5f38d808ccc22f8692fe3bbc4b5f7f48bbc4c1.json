{"ast":null,"code":"// vHealth News API Client Integration\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\n\n// API Configuration\nconst API_BASE_URL = {\n  production: 'https://services.wihy.ai',\n  development: 'http://localhost:5001'\n};\nclass VHealthNewsClient {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    // Use production by default\n    this.baseUrl = baseUrl || API_BASE_URL.production;\n  }\n  async getArticles(params = {}) {\n    const queryParams = new URLSearchParams();\n    if (params.limit) queryParams.append('limit', params.limit.toString());\n    if (params.category) queryParams.append('category', params.category);\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\n    console.log('Making API request to:', fullUrl);\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Add legacy compatibility fields to articles\n    const articles = data.articles || [];\n    data.articles = articles.map(article => ({\n      ...article,\n      // Ensure core fields are properly mapped\n      has_author: !!article.author,\n      // Legacy compatibility fields\n      published_date: article.published_at,\n      publishedDate: article.published_at,\n      pubDate: article.published_at,\n      category: article.ai_category,\n      summary: article.description,\n      tags: article.ai_category ? [article.ai_category, article.source] : [article.source],\n      media_url: article.image_url,\n      // Map image_url to media_url for legacy compatibility\n      media_thumb_url: article.image_url,\n      // Map image_url to media_thumb_url for legacy compatibility\n      relevanceScore: article.quality_score ? article.quality_score / 10 : 0.5,\n      link: article.url\n    }));\n    return {\n      success: data.success !== false,\n      articles: data.articles,\n      count: data.count || data.articles.length,\n      meta: data.meta,\n      // Legacy compatibility fields extracted from meta\n      sources_used: data.sources_used || [],\n      timestamp: data.timestamp || new Date().toISOString()\n    };\n  }\n  async getCategories() {\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async getStats() {\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async healthCheck() {\n    const response = await fetch(`${this.baseUrl}/api/health`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async testSource(source, limit = 5) {\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n}\n\n// Initialize the client\nconst newsClient = new VHealthNewsClient();\n\n// Simple function to fetch news feed - API handles all filtering\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    // Simple API call - no client-side filtering needed\n    const response = await newsClient.getArticles({\n      limit: limit || 100,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error:', error);\n    return {\n      success: false,\n      articles: []\n    };\n  }\n};\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    // Simple API call with category - API handles filtering\n    const response = await newsClient.getArticles({\n      category,\n      limit: limit || 100,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (category):', error);\n    return {\n      success: false,\n      articles: []\n    };\n  }\n};\nexport const refreshNewsFeed = async () => {\n  // Simple refresh - API handles everything\n  return await fetchNewsFeed(undefined, 100);\n};\nexport const searchNewsArticles = async (query, limit) => {\n  try {\n    // Simple search call - API handles query processing\n    const response = await newsClient.getArticles({\n      limit: limit || 100,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (search):', error);\n    return {\n      success: false,\n      articles: []\n    };\n  }\n};\n\n// Simple function to get all news - API handles filtering and priority\nexport const getAllNews = async (limit = 100) => {\n  try {\n    // Simple API call - server handles all filtering, categorization, and priority sorting\n    const response = await newsClient.getArticles({\n      limit: limit,\n      fresh: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles,\n      count: response.count,\n      sources_used: response.sources_used || []\n    };\n  } catch (error) {\n    console.error('Error fetching all news:', error);\n    return {\n      success: false,\n      articles: [],\n      count: 0,\n      sources_used: []\n    };\n  }\n};\nexport const getNewsCategories = async () => {\n  try {\n    const response = await newsClient.getCategories();\n    return response.success ? response.categories : [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories if API fails\n    return [{\n      category: 'Medical Research',\n      description: 'Latest medical studies and breakthroughs'\n    }, {\n      category: 'Clinical Studies',\n      description: 'Clinical trials and medical research'\n    }, {\n      category: 'Public Health',\n      description: 'Community health and disease prevention'\n    }, {\n      category: 'Prevention',\n      description: 'Preventive medicine and wellness'\n    }, {\n      category: 'Nutrition',\n      description: 'Diet, supplements, and nutritional research'\n    }, {\n      category: 'Mental Health',\n      description: 'Mental wellness and psychological health'\n    }, {\n      category: 'Health Technology',\n      description: 'Health tech and medical AI innovations'\n    }, {\n      category: 'Medical Technology',\n      description: 'Medical devices and healthcare technology'\n    }, {\n      category: 'General Health',\n      description: 'General health news and information'\n    }, {\n      category: 'Environment',\n      description: 'Environmental health and sustainability'\n    }, {\n      category: 'Technology',\n      description: 'Tech innovations and digital trends'\n    }, {\n      category: 'General News',\n      description: 'General news and current events'\n    }];\n  }\n};\nexport const getNewsStats = async () => {\n  try {\n    return await newsClient.getStats();\n  } catch (error) {\n    console.error('Error fetching news stats:', error);\n    return {\n      error: 'Stats unavailable'\n    };\n  }\n};\nexport const checkNewsServiceHealth = async () => {\n  try {\n    const health = await newsClient.healthCheck();\n    return health.status === 'healthy';\n  } catch (error) {\n    console.error('News service health check failed:', error);\n    return false;\n  }\n};\n\n// Export the client for advanced usage\nexport { VHealthNewsClient, newsClient };","map":{"version":3,"names":["API_BASE_URL","production","development","VHealthNewsClient","constructor","baseUrl","getArticles","params","queryParams","URLSearchParams","limit","append","toString","category","fresh","undefined","fullUrl","console","log","response","fetch","method","headers","ok","Error","status","data","json","articles","map","article","has_author","author","published_date","published_at","publishedDate","pubDate","ai_category","summary","description","tags","source","media_url","image_url","media_thumb_url","relevanceScore","quality_score","link","url","success","count","length","meta","sources_used","timestamp","Date","toISOString","getCategories","getStats","healthCheck","testSource","newsClient","fetchNewsFeed","categories","error","getArticlesByCategory","refreshNewsFeed","searchNewsArticles","query","getAllNews","getNewsCategories","getNewsStats","checkNewsServiceHealth","health"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// vHealth News API Client Integration\r\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\r\n\r\nexport interface NewsArticle {\r\n  // Article Identity\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content?: string;\r\n  url: string;\r\n  \r\n  // Source Information\r\n  source: string;\r\n  api_source?: 'NewsAPI' | 'GNews' | 'NewsData' | 'MediaStack';\r\n  author: string | null;\r\n  published_at: string; // API uses published_at\r\n  \r\n  // AI Categorization\r\n  ai_category: string;\r\n  category_priority?: number;\r\n  priority_position?: number;\r\n  \r\n  // Image Data (Complete)\r\n  image_url: string | null;\r\n  has_image: boolean;\r\n  image_status?: 'original' | 'generated' | 'missing';\r\n  image_source?: 'unsplash' | 'pexels' | 'pixabay' | 'extracted';\r\n  image_attribution?: string;\r\n  photographer?: string;\r\n  \r\n  // Enriched Metadata\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  reading_time: number; // Minutes\r\n  quality_score: number; // 0-10 scale\r\n  \r\n  // Legacy compatibility fields\r\n  published_date?: string; // Alternative date field\r\n  publishedDate?: string; // Alternative date field\r\n  pubDate?: string; // Alternative date field\r\n  category?: string; // Maps to ai_category\r\n  has_author?: boolean; // Computed from author field\r\n  tags?: string[]; // Legacy compatibility\r\n  summary?: string; // Maps to description\r\n  media_url?: string; // Maps to image_url\r\n  media_thumb_url?: string; // Maps to image_url\r\n  relevanceScore?: number; // Maps to quality_score\r\n  link?: string; // Maps to url\r\n}\r\n\r\nexport interface ArticlesResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  meta?: {\r\n    // Cache Information\r\n    total_articles?: number;\r\n    returned_articles?: number;\r\n    cache_info?: {\r\n      served_from_cache: boolean;\r\n      cache_size: number;\r\n      last_refresh: string;\r\n      last_top_refresh: string;\r\n      cache_age_minutes: number;\r\n    };\r\n    \r\n    // Sorting Information\r\n    sorting?: {\r\n      sort_by: string;\r\n      sort_order: string;\r\n      sorted_field: string;\r\n    };\r\n    \r\n    // Image Statistics\r\n    image_stats?: {\r\n      total_articles: number;\r\n      articles_with_images: number;\r\n      image_percentage: number;\r\n      original_images: number;\r\n      generated_images: number;\r\n      ai_enhanced_images: number;\r\n      sources: {\r\n        extracted: number;\r\n        unsplash: number;\r\n        pexels: number;\r\n        pixabay: number;\r\n      };\r\n    };\r\n    \r\n    // Pagination\r\n    pagination?: {\r\n      total_items: number;\r\n      current_page: number;\r\n      per_page: number;\r\n      has_next_page: boolean;\r\n    };\r\n    \r\n    // Applied Filters\r\n    filters_applied?: {\r\n      images_only: boolean;\r\n      top_articles_only: boolean;\r\n      limit: number;\r\n      offset: number;\r\n      category?: string | null;\r\n      source?: string;\r\n      ai_categorization?: boolean;\r\n    };\r\n    \r\n    // Priority Sorting System\r\n    priority_sorting?: {\r\n      enabled: boolean;\r\n      description: string;\r\n      sorting_order: string;\r\n      total: number;\r\n      priority_categories: number;\r\n      discovered_categories: number;\r\n      categories: string[];\r\n      category_priorities: Record<string, number>;\r\n      dynamic_learning: string;\r\n    };\r\n    \r\n    // Adaptive Recency System\r\n    recency_stats?: {\r\n      recent_articles: number;\r\n      older_articles: number;\r\n      threshold: string;\r\n      threshold_description: string;\r\n      adaptive_sorting?: string;\r\n    };\r\n    \r\n    // Category Distribution (Current Response)\r\n    category_distribution?: Record<string, number>;\r\n    \r\n    // Category Priorities (Duplicate for convenience)\r\n    category_priorities?: Record<string, number>;\r\n  };\r\n  \r\n  // Legacy compatibility fields\r\n  sources_used?: string[];\r\n  timestamp?: string;\r\n}\r\n\r\nexport interface Category {\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n// API Configuration\r\nconst API_BASE_URL = {\r\n  production: 'https://services.wihy.ai',\r\n  development: 'http://localhost:5001'\r\n};\r\n\r\nclass VHealthNewsClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl?: string) {\r\n    // Use production by default\r\n    this.baseUrl = baseUrl || API_BASE_URL.production;\r\n  }\r\n\r\n  async getArticles(params: {\r\n    limit?: number;\r\n    category?: string;\r\n    fresh?: boolean;\r\n  } = {}): Promise<ArticlesResponse> {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params.category) queryParams.append('category', params.category);\r\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\r\n\r\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\r\n    console.log('Making API request to:', fullUrl);\r\n\r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data: ArticlesResponse = await response.json();\r\n    \r\n    // Add legacy compatibility fields to articles\r\n    const articles = data.articles || [];\r\n    data.articles = articles.map(article => ({\r\n      ...article,\r\n      // Ensure core fields are properly mapped\r\n      has_author: !!article.author,\r\n      // Legacy compatibility fields\r\n      published_date: article.published_at,\r\n      publishedDate: article.published_at,\r\n      pubDate: article.published_at,\r\n      category: article.ai_category,\r\n      summary: article.description,\r\n      tags: article.ai_category ? [article.ai_category, article.source] : [article.source],\r\n      media_url: article.image_url, // Map image_url to media_url for legacy compatibility\r\n      media_thumb_url: article.image_url, // Map image_url to media_thumb_url for legacy compatibility\r\n      relevanceScore: article.quality_score ? article.quality_score / 10 : 0.5,\r\n      link: article.url\r\n    }));\r\n    \r\n    return {\r\n      success: data.success !== false,\r\n      articles: data.articles,\r\n      count: data.count || data.articles.length,\r\n      meta: data.meta,\r\n      // Legacy compatibility fields extracted from meta\r\n      sources_used: data.sources_used || [],\r\n      timestamp: data.timestamp || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  async getCategories(): Promise<{ success: boolean; categories: Category[] }> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getStats(): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    const response = await fetch(`${this.baseUrl}/api/health`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async testSource(source: 'newsapi' | 'gnews' | 'newsdata' | 'mediastack', limit: number = 5): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Initialize the client\r\nconst newsClient = new VHealthNewsClient();\r\n\r\n// Simple function to fetch news feed - API handles all filtering\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call - no client-side filtering needed\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error:', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call with category - API handles filtering\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (category):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Simple refresh - API handles everything\r\n  return await fetchNewsFeed(undefined, 100);\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple search call - API handles query processing\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (search):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\n// Simple function to get all news - API handles filtering and priority\r\nexport const getAllNews = async (limit: number = 100): Promise<{ success: boolean; articles: NewsArticle[]; count: number; sources_used: string[] }> => {\r\n  try {\r\n    // Simple API call - server handles all filtering, categorization, and priority sorting\r\n    const response = await newsClient.getArticles({\r\n      limit: limit,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles,\r\n      count: response.count,\r\n      sources_used: response.sources_used || []\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching all news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      count: 0,\r\n      sources_used: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    const response = await newsClient.getCategories();\r\n    return response.success ? response.categories : [];\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return default categories if API fails\r\n    return [\r\n      { category: 'Medical Research', description: 'Latest medical studies and breakthroughs' },\r\n      { category: 'Clinical Studies', description: 'Clinical trials and medical research' },\r\n      { category: 'Public Health', description: 'Community health and disease prevention' },\r\n      { category: 'Prevention', description: 'Preventive medicine and wellness' },\r\n      { category: 'Nutrition', description: 'Diet, supplements, and nutritional research' },\r\n      { category: 'Mental Health', description: 'Mental wellness and psychological health' },\r\n      { category: 'Health Technology', description: 'Health tech and medical AI innovations' },\r\n      { category: 'Medical Technology', description: 'Medical devices and healthcare technology' },\r\n      { category: 'General Health', description: 'General health news and information' },\r\n      { category: 'Environment', description: 'Environmental health and sustainability' },\r\n      { category: 'Technology', description: 'Tech innovations and digital trends' },\r\n      { category: 'General News', description: 'General news and current events' }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getNewsStats = async (): Promise<any> => {\r\n  try {\r\n    return await newsClient.getStats();\r\n  } catch (error) {\r\n    console.error('Error fetching news stats:', error);\r\n    return { error: 'Stats unavailable' };\r\n  }\r\n};\r\n\r\nexport const checkNewsServiceHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const health = await newsClient.healthCheck();\r\n    return health.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('News service health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export the client for advanced usage\r\nexport { VHealthNewsClient, newsClient };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}