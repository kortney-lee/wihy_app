{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Chart as ChartJS,ArcElement,Tooltip,Legend}from'chart.js';import{Doughnut}from'react-chartjs-2';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(ArcElement,Tooltip,Legend);/* ====================== Evidence Confidence (Gated) ====================== *//** Trusted domains for quick credibility checks. Tune anytime. */const TRUSTED_DOMAINS={'nih.gov':1,'ncbi.nlm.nih.gov':1,// PubMed\n'who.int':1,'cdc.gov':1,'fda.gov':1,'usda.gov':1,'jamanetwork.com':1,'nejm.org':1,'thelancet.com':1,'bmj.com':1,'nature.com':1,'science.org':1,'mayoclinic.org':1,'harvard.edu':1,'stanford.edu':1,'clevelandclinic.org':1,'uptodate.com':1};const extractUrls=text=>{const urlRegex=/(https?:\\/\\/[^\\s)]+)(?=\\)|\\s|$)/g;return[...text.matchAll(urlRegex)].map(m=>m[1]);};const domainKey=url=>{try{const u=new URL(url);const parts=u.hostname.split('.');return parts.slice(-2).join('.');}catch(_unused){return null;}};const hasStrongId=text=>/doi\\.org\\/10\\./i.test(text)||/pubmed\\.ncbi\\.nlm\\.nih\\.gov\\/\\d+/i.test(text);const hasSpecificNumbers=lower=>/\\b\\d+(\\.\\d+)?\\s?(mg|g|mcg|iu|kcal|calories|%)\\b/.test(lower)||/\\b\\d+(\\.\\d+)?%/.test(lower);const hypeOrBS=lower=>/(miracle|cure-all|100% guaranteed|secret|instantly|revolutionary|breakthrough|detox scam|shocking)/i.test(lower);const contradictionWithoutRefs=lower=>/(contradictory|no consensus|insufficient evidence)/i.test(lower)&&!hasStrongId(lower)&&extractUrls(lower).length===0;const recencyOK=lower=>{const years=(lower.match(/\\b(20\\d{2}|19\\d{2})\\b/g)||[]).map(y=>parseInt(y,10));if(years.length===0)return true;// no year mentioned: don't punish\nconst mostRecent=Math.max(...years);return new Date().getFullYear()-mostRecent<=5;};const sourceGate=(text,dataSource)=>{// Database sources and WiHy count as trusted.\nif(dataSource==='vnutrition'||dataSource==='local'||dataSource==='wihy')return true;// Otherwise require a strong id or a trusted domain link.\nif(hasStrongId(text))return true;const urls=extractUrls(text);for(const u of urls){const key=domainKey(u);if(key&&TRUSTED_DOMAINS[key])return true;}return false;};/* Legacy evaluation function removed - now using unified API response *//* ====================== Component ====================== */const ResultQualityPie=_ref=>{let{apiResponse,query,results,dataSource,citations}=_ref;const[evaluation,setEvaluation]=useState({score:0.20,verdict:'BAD',reasons:['Loading...']});// Debug logging to see what props are being received\nuseEffect(()=>{console.log('ResultQualityPie received props:',{apiResponse,query,results:(results===null||results===void 0?void 0:results.substring(0,100))+'...',dataSource,citations,hasResults:!!results&&results.trim()!==''});},[query,results,dataSource,citations,apiResponse]);// Evaluate when props change and we have valid data\nuseEffect(()=>{// Handle unified API response first\nif(apiResponse&&apiResponse.success&&apiResponse.data){var _apiResponse$data$hea,_apiResponse$data$nut,_apiResponse$data$nut2;console.log('Using unified API response for quality evaluation...');// Use health_analysis if available\nif((_apiResponse$data$hea=apiResponse.data.health_analysis)!==null&&_apiResponse$data$hea!==void 0&&_apiResponse$data$hea.safety_score){var _apiResponse$data$hea2,_apiResponse$data$hea3;const safetyScore=apiResponse.data.health_analysis.safety_score/100;// Convert to 0-1 scale\nconst verdict=safetyScore>=0.8?'GOOD':safetyScore>=0.6?'REVIEW':'BAD';const reasons=[\"Safety Score: \".concat(apiResponse.data.health_analysis.safety_score,\"%\"),\"Processing Level: \".concat(apiResponse.data.health_analysis.processing_level),...(((_apiResponse$data$hea2=apiResponse.data.health_analysis.carcinogen_alerts)===null||_apiResponse$data$hea2===void 0?void 0:_apiResponse$data$hea2.map(alert=>\"\\u26A0\\uFE0F \".concat(alert)))||[]),...(((_apiResponse$data$hea3=apiResponse.data.health_analysis.toxic_additives)===null||_apiResponse$data$hea3===void 0?void 0:_apiResponse$data$hea3.map(additive=>\"\\u26A0\\uFE0F Toxic: \".concat(additive)))||[])];setEvaluation({score:safetyScore,verdict,reasons});return;}// Use nutrition nourish_score if available\nif((_apiResponse$data$nut=apiResponse.data.nutrition)!==null&&_apiResponse$data$nut!==void 0&&(_apiResponse$data$nut2=_apiResponse$data$nut.nourish_score)!==null&&_apiResponse$data$nut2!==void 0&&_apiResponse$data$nut2.score){var _nourish$breakdown,_nourish$breakdown2,_nourish$breakdown3;const nourish=apiResponse.data.nutrition.nourish_score;const score=nourish.score/100;// Convert to 0-1 scale\nconst verdict=score>=0.8?'GOOD':score>=0.6?'REVIEW':'BAD';const reasons=[\"Nourish Score: \".concat(nourish.score,\"% (\").concat(nourish.category,\")\"),\"Nutrient Density: \".concat(((_nourish$breakdown=nourish.breakdown)===null||_nourish$breakdown===void 0?void 0:_nourish$breakdown.nutrient_density)||'N/A',\"%\"),\"Processing Level: \".concat(((_nourish$breakdown2=nourish.breakdown)===null||_nourish$breakdown2===void 0?void 0:_nourish$breakdown2.processing_level)||'N/A',\"%\"),\"Ingredient Quality: \".concat(((_nourish$breakdown3=nourish.breakdown)===null||_nourish$breakdown3===void 0?void 0:_nourish$breakdown3.ingredient_quality)||'N/A',\"%\")];setEvaluation({score,verdict,reasons});return;}}// No API response available - set default evaluation\nconsole.log('No unified API response available for evaluation');setEvaluation({score:0.20,verdict:'BAD',reasons:['Waiting for results...']});},[query,results,dataSource,citations,apiResponse]);const{score,verdict,reasons}=evaluation;const percentage=Math.round(score*100);const remaining=100-percentage;// Colors by verdict (lock to clear categories)\nconst colorByVerdict=v=>v==='GOOD'?'#10B981':v==='REVIEW'?'#F59E0B':'#EF4444';const labelByVerdict=v=>v==='GOOD'?'Good':v==='REVIEW'?'Needs review':'Poor';const ringColor=colorByVerdict(verdict);const verdictLabel=labelByVerdict(verdict);const data={datasets:[{data:[percentage,remaining],backgroundColor:[ringColor,'#E5E7EB'],borderWidth:0,cutout:'70%'}]};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{enabled:false}}};const legendGoodColor=verdict==='BAD'?'#E5E7EB':'#10B981';const legendBadColor=verdict==='BAD'?'#EF4444':'#E5E7EB';return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',height:'200px',width:'200px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(Doughnut,{data:data,options:options}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'2rem',fontWeight:'bold',color:'#374151'},children:[percentage,\"%\"]}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.875rem',color:'#6B7280'},children:\"Evidence\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',marginBottom:'0.5rem'},children:/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:500,color:ringColor,fontSize:'1rem'},children:verdictLabel})}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',gap:'1rem',fontSize:'0.875rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:legendGoodColor,borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Good: \",percentage,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:legendBadColor,borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Bad: \",remaining,\"%\"]})]})]}),reasons.length>0&&reasons[0]!=='Loading...'&&reasons[0]!=='Waiting for results...'&&/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'0.5rem',fontSize:'0.85rem',color:'#6B7280'},children:reasons.slice(0,2).join(' • ')})]})]});};export default ResultQualityPie;","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsx","_jsx","jsxs","_jsxs","register","TRUSTED_DOMAINS","extractUrls","text","urlRegex","matchAll","map","m","domainKey","url","u","URL","parts","hostname","split","slice","join","_unused","hasStrongId","test","hasSpecificNumbers","lower","hypeOrBS","contradictionWithoutRefs","length","recencyOK","years","match","y","parseInt","mostRecent","Math","max","Date","getFullYear","sourceGate","dataSource","urls","key","ResultQualityPie","_ref","apiResponse","query","results","citations","evaluation","setEvaluation","score","verdict","reasons","console","log","substring","hasResults","trim","success","data","_apiResponse$data$hea","_apiResponse$data$nut","_apiResponse$data$nut2","health_analysis","safety_score","_apiResponse$data$hea2","_apiResponse$data$hea3","safetyScore","concat","processing_level","carcinogen_alerts","alert","toxic_additives","additive","nutrition","nourish_score","_nourish$breakdown","_nourish$breakdown2","_nourish$breakdown3","nourish","category","breakdown","nutrient_density","ingredient_quality","percentage","round","remaining","colorByVerdict","v","labelByVerdict","ringColor","verdictLabel","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","legendGoodColor","legendBadColor","style","textAlign","children","position","height","width","margin","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","gap","borderRadius"],"sources":["C:/repo/wihy_ui/client/src/components/charts/ResultQualityPie.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface ResultQualityPieProps {\r\n  apiResponse?: UnifiedResponse | any;\r\n  query?: string;\r\n  results?: string;\r\n  dataSource?: \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n  citations?: string[];\r\n}\r\n\r\n/* ====================== Evidence Confidence (Gated) ====================== */\r\n\r\ntype Verdict = 'GOOD' | 'REVIEW' | 'BAD';\r\n\r\n/** Trusted domains for quick credibility checks. Tune anytime. */\r\nconst TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n};\r\n\r\nconst extractUrls = (text: string): string[] => {\r\n  const urlRegex = /(https?:\\/\\/[^\\s)]+)(?=\\)|\\s|$)/g;\r\n  return [...text.matchAll(urlRegex)].map(m => m[1]);\r\n};\r\n\r\nconst domainKey = (url: string): string | null => {\r\n  try {\r\n    const u = new URL(url);\r\n    const parts = u.hostname.split('.');\r\n    return parts.slice(-2).join('.');\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst hasStrongId = (text: string) =>\r\n  /doi\\.org\\/10\\./i.test(text) || /pubmed\\.ncbi\\.nlm\\.nih\\.gov\\/\\d+/i.test(text);\r\n\r\nconst hasSpecificNumbers = (lower: string) =>\r\n  /\\b\\d+(\\.\\d+)?\\s?(mg|g|mcg|iu|kcal|calories|%)\\b/.test(lower) || /\\b\\d+(\\.\\d+)?%/.test(lower);\r\n\r\nconst hypeOrBS = (lower: string) =>\r\n  /(miracle|cure-all|100% guaranteed|secret|instantly|revolutionary|breakthrough|detox scam|shocking)/i.test(lower);\r\n\r\nconst contradictionWithoutRefs = (lower: string) =>\r\n  /(contradictory|no consensus|insufficient evidence)/i.test(lower) &&\r\n  !hasStrongId(lower) &&\r\n  extractUrls(lower).length === 0;\r\n\r\nconst recencyOK = (lower: string) => {\r\n  const years = (lower.match(/\\b(20\\d{2}|19\\d{2})\\b/g) || []).map(y => parseInt(y, 10));\r\n  if (years.length === 0) return true; // no year mentioned: don't punish\r\n  const mostRecent = Math.max(...years);\r\n  return new Date().getFullYear() - mostRecent <= 5;\r\n};\r\n\r\nconst sourceGate = (text: string, dataSource: ResultQualityPieProps['dataSource']) => {\r\n  // Database sources and WiHy count as trusted.\r\n  if (dataSource === 'vnutrition' || dataSource === 'local' || dataSource === 'wihy') return true;\r\n\r\n  // Otherwise require a strong id or a trusted domain link.\r\n  if (hasStrongId(text)) return true;\r\n  const urls = extractUrls(text);\r\n  for (const u of urls) {\r\n    const key = domainKey(u);\r\n    if (key && TRUSTED_DOMAINS[key]) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/* Legacy evaluation function removed - now using unified API response */\r\n\r\n/* ====================== Component ====================== */\r\n\r\nconst ResultQualityPie: React.FC<ResultQualityPieProps> = ({\r\n  apiResponse,\r\n  query,\r\n  results,\r\n  dataSource,\r\n  citations\r\n}) => {\r\n  const [evaluation, setEvaluation] = useState<{\r\n    score: number;\r\n    verdict: Verdict;\r\n    reasons: string[];\r\n  }>({ score: 0.20, verdict: 'BAD', reasons: ['Loading...'] });\r\n\r\n  // Debug logging to see what props are being received\r\n  useEffect(() => {\r\n    console.log('ResultQualityPie received props:', {\r\n      apiResponse,\r\n      query,\r\n      results: results?.substring(0, 100) + '...',\r\n      dataSource,\r\n      citations,\r\n      hasResults: !!results && results.trim() !== ''\r\n    });\r\n  }, [query, results, dataSource, citations, apiResponse]);\r\n\r\n  // Evaluate when props change and we have valid data\r\n  useEffect(() => {\r\n    // Handle unified API response first\r\n    if (apiResponse && apiResponse.success && apiResponse.data) {\r\n      console.log('Using unified API response for quality evaluation...');\r\n      \r\n      // Use health_analysis if available\r\n      if (apiResponse.data.health_analysis?.safety_score) {\r\n        const safetyScore = apiResponse.data.health_analysis.safety_score / 100; // Convert to 0-1 scale\r\n        const verdict: Verdict = safetyScore >= 0.8 ? 'GOOD' : safetyScore >= 0.6 ? 'REVIEW' : 'BAD';\r\n        const reasons = [\r\n          `Safety Score: ${apiResponse.data.health_analysis.safety_score}%`,\r\n          `Processing Level: ${apiResponse.data.health_analysis.processing_level}`,\r\n          ...(apiResponse.data.health_analysis.carcinogen_alerts?.map(alert => `⚠️ ${alert}`) || []),\r\n          ...(apiResponse.data.health_analysis.toxic_additives?.map(additive => `⚠️ Toxic: ${additive}`) || [])\r\n        ];\r\n        \r\n        setEvaluation({ score: safetyScore, verdict, reasons });\r\n        return;\r\n      }\r\n      \r\n      // Use nutrition nourish_score if available\r\n      if (apiResponse.data.nutrition?.nourish_score?.score) {\r\n        const nourish = apiResponse.data.nutrition.nourish_score;\r\n        const score = nourish.score / 100; // Convert to 0-1 scale\r\n        const verdict: Verdict = score >= 0.8 ? 'GOOD' : score >= 0.6 ? 'REVIEW' : 'BAD';\r\n        const reasons = [\r\n          `Nourish Score: ${nourish.score}% (${nourish.category})`,\r\n          `Nutrient Density: ${nourish.breakdown?.nutrient_density || 'N/A'}%`,\r\n          `Processing Level: ${nourish.breakdown?.processing_level || 'N/A'}%`,\r\n          `Ingredient Quality: ${nourish.breakdown?.ingredient_quality || 'N/A'}%`\r\n        ];\r\n        \r\n        setEvaluation({ score, verdict, reasons });\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // No API response available - set default evaluation\r\n    console.log('No unified API response available for evaluation');\r\n    setEvaluation({\r\n      score: 0.20,\r\n      verdict: 'BAD',\r\n      reasons: ['Waiting for results...']\r\n    });\r\n  }, [query, results, dataSource, citations, apiResponse]);\r\n\r\n  const { score, verdict, reasons } = evaluation;\r\n  const percentage = Math.round(score * 100);\r\n  const remaining = 100 - percentage;\r\n\r\n  // Colors by verdict (lock to clear categories)\r\n  const colorByVerdict = (v: Verdict) =>\r\n    v === 'GOOD' ? '#10B981' : v === 'REVIEW' ? '#F59E0B' : '#EF4444';\r\n\r\n  const labelByVerdict = (v: Verdict) =>\r\n    v === 'GOOD' ? 'Good' : v === 'REVIEW' ? 'Needs review' : 'Poor';\r\n\r\n  const ringColor = colorByVerdict(verdict);\r\n  const verdictLabel = labelByVerdict(verdict);\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [percentage, remaining],\r\n        backgroundColor: [ringColor, '#E5E7EB'],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: { display: false },\r\n      tooltip: { enabled: false },\r\n    },\r\n  };\r\n\r\n  const legendGoodColor = verdict === 'BAD' ? '#E5E7EB' : '#10B981';\r\n  const legendBadColor = verdict === 'BAD' ? '#EF4444' : '#E5E7EB';\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {percentage}%\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            Evidence\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            marginBottom: '0.5rem'\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              fontWeight: 500,\r\n              color: ringColor,\r\n              fontSize: '1rem'\r\n            }}\r\n          >\r\n            {verdictLabel}\r\n          </span>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            gap: '1rem',\r\n            fontSize: '0.875rem'\r\n          }}\r\n        >\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: legendGoodColor,\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Good: {percentage}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: legendBadColor,\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Bad: {remaining}%</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tiny rationale (first 1–2 reasons) */}\r\n        {reasons.length > 0 && reasons[0] !== 'Loading...' && reasons[0] !== 'Waiting for results...' && (\r\n          <div\r\n            style={{\r\n              marginTop: '0.5rem',\r\n              fontSize: '0.85rem',\r\n              color: '#6B7280'\r\n            }}\r\n          >\r\n            {reasons.slice(0, 2).join(' • ')}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultQualityPie;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OACEC,KAAK,GAAI,CAAAC,OAAO,CAChBC,UAAU,CACVC,OAAO,CACPC,MAAM,KACD,UAAU,CACjB,OAASC,QAAQ,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAG3CR,OAAO,CAACS,QAAQ,CAACR,UAAU,CAAEC,OAAO,CAAEC,MAAM,CAAC,CAU7C,+EAIA,kEACA,KAAM,CAAAO,eAAuC,CAAG,CAC9C,SAAS,CAAE,CAAC,CACZ,kBAAkB,CAAE,CAAC,CAAG;AACxB,SAAS,CAAE,CAAC,CACZ,SAAS,CAAE,CAAC,CACZ,SAAS,CAAE,CAAC,CACZ,UAAU,CAAE,CAAC,CACb,iBAAiB,CAAE,CAAC,CACpB,UAAU,CAAE,CAAC,CACb,eAAe,CAAE,CAAC,CAClB,SAAS,CAAE,CAAC,CACZ,YAAY,CAAE,CAAC,CACf,aAAa,CAAE,CAAC,CAChB,gBAAgB,CAAE,CAAC,CACnB,aAAa,CAAE,CAAC,CAChB,cAAc,CAAE,CAAC,CACjB,qBAAqB,CAAE,CAAC,CACxB,cAAc,CAAE,CAClB,CAAC,CAED,KAAM,CAAAC,WAAW,CAAIC,IAAY,EAAe,CAC9C,KAAM,CAAAC,QAAQ,CAAG,kCAAkC,CACnD,MAAO,CAAC,GAAGD,IAAI,CAACE,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAACE,GAAG,CAACC,CAAC,EAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CACpD,CAAC,CAED,KAAM,CAAAC,SAAS,CAAIC,GAAW,EAAoB,CAChD,GAAI,CACF,KAAM,CAAAC,CAAC,CAAG,GAAI,CAAAC,GAAG,CAACF,GAAG,CAAC,CACtB,KAAM,CAAAG,KAAK,CAAGF,CAAC,CAACG,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CACnC,MAAO,CAAAF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAClC,CAAE,MAAAC,OAAA,CAAM,CACN,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAC,WAAW,CAAIf,IAAY,EAC/B,iBAAiB,CAACgB,IAAI,CAAChB,IAAI,CAAC,EAAI,mCAAmC,CAACgB,IAAI,CAAChB,IAAI,CAAC,CAEhF,KAAM,CAAAiB,kBAAkB,CAAIC,KAAa,EACvC,iDAAiD,CAACF,IAAI,CAACE,KAAK,CAAC,EAAI,gBAAgB,CAACF,IAAI,CAACE,KAAK,CAAC,CAE/F,KAAM,CAAAC,QAAQ,CAAID,KAAa,EAC7B,qGAAqG,CAACF,IAAI,CAACE,KAAK,CAAC,CAEnH,KAAM,CAAAE,wBAAwB,CAAIF,KAAa,EAC7C,qDAAqD,CAACF,IAAI,CAACE,KAAK,CAAC,EACjE,CAACH,WAAW,CAACG,KAAK,CAAC,EACnBnB,WAAW,CAACmB,KAAK,CAAC,CAACG,MAAM,GAAK,CAAC,CAEjC,KAAM,CAAAC,SAAS,CAAIJ,KAAa,EAAK,CACnC,KAAM,CAAAK,KAAK,CAAG,CAACL,KAAK,CAACM,KAAK,CAAC,wBAAwB,CAAC,EAAI,EAAE,EAAErB,GAAG,CAACsB,CAAC,EAAIC,QAAQ,CAACD,CAAC,CAAE,EAAE,CAAC,CAAC,CACrF,GAAIF,KAAK,CAACF,MAAM,GAAK,CAAC,CAAE,MAAO,KAAI,CAAE;AACrC,KAAM,CAAAM,UAAU,CAAGC,IAAI,CAACC,GAAG,CAAC,GAAGN,KAAK,CAAC,CACrC,MAAO,IAAI,CAAAO,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAGJ,UAAU,EAAI,CAAC,CACnD,CAAC,CAED,KAAM,CAAAK,UAAU,CAAGA,CAAChC,IAAY,CAAEiC,UAA+C,GAAK,CACpF;AACA,GAAIA,UAAU,GAAK,YAAY,EAAIA,UAAU,GAAK,OAAO,EAAIA,UAAU,GAAK,MAAM,CAAE,MAAO,KAAI,CAE/F;AACA,GAAIlB,WAAW,CAACf,IAAI,CAAC,CAAE,MAAO,KAAI,CAClC,KAAM,CAAAkC,IAAI,CAAGnC,WAAW,CAACC,IAAI,CAAC,CAC9B,IAAK,KAAM,CAAAO,CAAC,GAAI,CAAA2B,IAAI,CAAE,CACpB,KAAM,CAAAC,GAAG,CAAG9B,SAAS,CAACE,CAAC,CAAC,CACxB,GAAI4B,GAAG,EAAIrC,eAAe,CAACqC,GAAG,CAAC,CAAE,MAAO,KAAI,CAC9C,CACA,MAAO,MAAK,CACd,CAAC,CAED,yEAEA,6DAEA,KAAM,CAAAC,gBAAiD,CAAGC,IAAA,EAMpD,IANqD,CACzDC,WAAW,CACXC,KAAK,CACLC,OAAO,CACPP,UAAU,CACVQ,SACF,CAAC,CAAAJ,IAAA,CACC,KAAM,CAACK,UAAU,CAAEC,aAAa,CAAC,CAAGzD,QAAQ,CAIzC,CAAE0D,KAAK,CAAE,IAAI,CAAEC,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,CAAC,YAAY,CAAE,CAAC,CAAC,CAE5D;AACA7D,SAAS,CAAC,IAAM,CACd8D,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAE,CAC9CV,WAAW,CACXC,KAAK,CACLC,OAAO,CAAE,CAAAA,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAES,SAAS,CAAC,CAAC,CAAE,GAAG,CAAC,EAAG,KAAK,CAC3ChB,UAAU,CACVQ,SAAS,CACTS,UAAU,CAAE,CAAC,CAACV,OAAO,EAAIA,OAAO,CAACW,IAAI,CAAC,CAAC,GAAK,EAC9C,CAAC,CAAC,CACJ,CAAC,CAAE,CAACZ,KAAK,CAAEC,OAAO,CAAEP,UAAU,CAAEQ,SAAS,CAAEH,WAAW,CAAC,CAAC,CAExD;AACArD,SAAS,CAAC,IAAM,CACd;AACA,GAAIqD,WAAW,EAAIA,WAAW,CAACc,OAAO,EAAId,WAAW,CAACe,IAAI,CAAE,KAAAC,qBAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAC1DT,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CAEnE;AACA,IAAAM,qBAAA,CAAIhB,WAAW,CAACe,IAAI,CAACI,eAAe,UAAAH,qBAAA,WAAhCA,qBAAA,CAAkCI,YAAY,CAAE,KAAAC,sBAAA,CAAAC,sBAAA,CAClD,KAAM,CAAAC,WAAW,CAAGvB,WAAW,CAACe,IAAI,CAACI,eAAe,CAACC,YAAY,CAAG,GAAG,CAAE;AACzE,KAAM,CAAAb,OAAgB,CAAGgB,WAAW,EAAI,GAAG,CAAG,MAAM,CAAGA,WAAW,EAAI,GAAG,CAAG,QAAQ,CAAG,KAAK,CAC5F,KAAM,CAAAf,OAAO,CAAG,kBAAAgB,MAAA,CACGxB,WAAW,CAACe,IAAI,CAACI,eAAe,CAACC,YAAY,2BAAAI,MAAA,CACzCxB,WAAW,CAACe,IAAI,CAACI,eAAe,CAACM,gBAAgB,EACtE,IAAI,EAAAJ,sBAAA,CAAArB,WAAW,CAACe,IAAI,CAACI,eAAe,CAACO,iBAAiB,UAAAL,sBAAA,iBAAlDA,sBAAA,CAAoDxD,GAAG,CAAC8D,KAAK,kBAAAH,MAAA,CAAUG,KAAK,CAAE,CAAC,GAAI,EAAE,CAAC,CAC1F,IAAI,EAAAL,sBAAA,CAAAtB,WAAW,CAACe,IAAI,CAACI,eAAe,CAACS,eAAe,UAAAN,sBAAA,iBAAhDA,sBAAA,CAAkDzD,GAAG,CAACgE,QAAQ,yBAAAL,MAAA,CAAiBK,QAAQ,CAAE,CAAC,GAAI,EAAE,CAAC,CACtG,CAEDxB,aAAa,CAAC,CAAEC,KAAK,CAAEiB,WAAW,CAAEhB,OAAO,CAAEC,OAAQ,CAAC,CAAC,CACvD,OACF,CAEA;AACA,IAAAS,qBAAA,CAAIjB,WAAW,CAACe,IAAI,CAACe,SAAS,UAAAb,qBAAA,YAAAC,sBAAA,CAA1BD,qBAAA,CAA4Bc,aAAa,UAAAb,sBAAA,WAAzCA,sBAAA,CAA2CZ,KAAK,CAAE,KAAA0B,kBAAA,CAAAC,mBAAA,CAAAC,mBAAA,CACpD,KAAM,CAAAC,OAAO,CAAGnC,WAAW,CAACe,IAAI,CAACe,SAAS,CAACC,aAAa,CACxD,KAAM,CAAAzB,KAAK,CAAG6B,OAAO,CAAC7B,KAAK,CAAG,GAAG,CAAE;AACnC,KAAM,CAAAC,OAAgB,CAAGD,KAAK,EAAI,GAAG,CAAG,MAAM,CAAGA,KAAK,EAAI,GAAG,CAAG,QAAQ,CAAG,KAAK,CAChF,KAAM,CAAAE,OAAO,CAAG,mBAAAgB,MAAA,CACIW,OAAO,CAAC7B,KAAK,QAAAkB,MAAA,CAAMW,OAAO,CAACC,QAAQ,2BAAAZ,MAAA,CAChC,EAAAQ,kBAAA,CAAAG,OAAO,CAACE,SAAS,UAAAL,kBAAA,iBAAjBA,kBAAA,CAAmBM,gBAAgB,GAAI,KAAK,2BAAAd,MAAA,CAC5C,EAAAS,mBAAA,CAAAE,OAAO,CAACE,SAAS,UAAAJ,mBAAA,iBAAjBA,mBAAA,CAAmBR,gBAAgB,GAAI,KAAK,6BAAAD,MAAA,CAC1C,EAAAU,mBAAA,CAAAC,OAAO,CAACE,SAAS,UAAAH,mBAAA,iBAAjBA,mBAAA,CAAmBK,kBAAkB,GAAI,KAAK,MACtE,CAEDlC,aAAa,CAAC,CAAEC,KAAK,CAAEC,OAAO,CAAEC,OAAQ,CAAC,CAAC,CAC1C,OACF,CACF,CAEA;AACAC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAC/DL,aAAa,CAAC,CACZC,KAAK,CAAE,IAAI,CACXC,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CAAC,wBAAwB,CACpC,CAAC,CAAC,CACJ,CAAC,CAAE,CAACP,KAAK,CAAEC,OAAO,CAAEP,UAAU,CAAEQ,SAAS,CAAEH,WAAW,CAAC,CAAC,CAExD,KAAM,CAAEM,KAAK,CAAEC,OAAO,CAAEC,OAAQ,CAAC,CAAGJ,UAAU,CAC9C,KAAM,CAAAoC,UAAU,CAAGlD,IAAI,CAACmD,KAAK,CAACnC,KAAK,CAAG,GAAG,CAAC,CAC1C,KAAM,CAAAoC,SAAS,CAAG,GAAG,CAAGF,UAAU,CAElC;AACA,KAAM,CAAAG,cAAc,CAAIC,CAAU,EAChCA,CAAC,GAAK,MAAM,CAAG,SAAS,CAAGA,CAAC,GAAK,QAAQ,CAAG,SAAS,CAAG,SAAS,CAEnE,KAAM,CAAAC,cAAc,CAAID,CAAU,EAChCA,CAAC,GAAK,MAAM,CAAG,MAAM,CAAGA,CAAC,GAAK,QAAQ,CAAG,cAAc,CAAG,MAAM,CAElE,KAAM,CAAAE,SAAS,CAAGH,cAAc,CAACpC,OAAO,CAAC,CACzC,KAAM,CAAAwC,YAAY,CAAGF,cAAc,CAACtC,OAAO,CAAC,CAE5C,KAAM,CAAAQ,IAAI,CAAG,CACXiC,QAAQ,CAAE,CACR,CACEjC,IAAI,CAAE,CAACyB,UAAU,CAAEE,SAAS,CAAC,CAC7BO,eAAe,CAAE,CAACH,SAAS,CAAE,SAAS,CAAC,CACvCI,WAAW,CAAE,CAAC,CACdC,MAAM,CAAE,KACV,CAAC,CAEL,CAAC,CAED,KAAM,CAAAC,OAAO,CAAG,CACdC,UAAU,CAAE,IAAI,CAChBC,mBAAmB,CAAE,KAAK,CAC1BC,OAAO,CAAE,CACPC,MAAM,CAAE,CAAEC,OAAO,CAAE,KAAM,CAAC,CAC1BC,OAAO,CAAE,CAAEC,OAAO,CAAE,KAAM,CAC5B,CACF,CAAC,CAED,KAAM,CAAAC,eAAe,CAAGrD,OAAO,GAAK,KAAK,CAAG,SAAS,CAAG,SAAS,CACjE,KAAM,CAAAsD,cAAc,CAAGtD,OAAO,GAAK,KAAK,CAAG,SAAS,CAAG,SAAS,CAEhE,mBACEjD,KAAA,QAAKwG,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,eAClC1G,KAAA,QAAKwG,KAAK,CAAE,CAAEG,QAAQ,CAAE,UAAU,CAAEC,MAAM,CAAE,OAAO,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,QAAS,CAAE,CAAAJ,QAAA,eACtF5G,IAAA,CAACF,QAAQ,EAAC6D,IAAI,CAAEA,IAAK,CAACqC,OAAO,CAAEA,OAAQ,CAAE,CAAC,cAC1C9F,KAAA,QACEwG,KAAK,CAAE,CACLG,QAAQ,CAAE,UAAU,CACpBI,GAAG,CAAE,KAAK,CACVC,IAAI,CAAE,KAAK,CACXC,SAAS,CAAE,uBAAuB,CAClCR,SAAS,CAAE,QACb,CAAE,CAAAC,QAAA,eAEF1G,KAAA,QAAKwG,KAAK,CAAE,CAAEU,QAAQ,CAAE,MAAM,CAAEC,UAAU,CAAE,MAAM,CAAEC,KAAK,CAAE,SAAU,CAAE,CAAAV,QAAA,EACpExB,UAAU,CAAC,GACd,EAAK,CAAC,cACNpF,IAAA,QAAK0G,KAAK,CAAE,CAAEU,QAAQ,CAAE,UAAU,CAAEE,KAAK,CAAE,SAAU,CAAE,CAAAV,QAAA,CAAC,UAExD,CAAK,CAAC,EACH,CAAC,EACH,CAAC,cAEN1G,KAAA,QAAKwG,KAAK,CAAE,CAAEa,SAAS,CAAE,MAAO,CAAE,CAAAX,QAAA,eAChC5G,IAAA,QACE0G,KAAK,CAAE,CACLL,OAAO,CAAE,MAAM,CACfmB,UAAU,CAAE,QAAQ,CACpBC,cAAc,CAAE,QAAQ,CACxBC,YAAY,CAAE,QAChB,CAAE,CAAAd,QAAA,cAEF5G,IAAA,SACE0G,KAAK,CAAE,CACLW,UAAU,CAAE,GAAG,CACfC,KAAK,CAAE5B,SAAS,CAChB0B,QAAQ,CAAE,MACZ,CAAE,CAAAR,QAAA,CAEDjB,YAAY,CACT,CAAC,CACJ,CAAC,cAENzF,KAAA,QACEwG,KAAK,CAAE,CACLL,OAAO,CAAE,MAAM,CACfoB,cAAc,CAAE,QAAQ,CACxBE,GAAG,CAAE,MAAM,CACXP,QAAQ,CAAE,UACZ,CAAE,CAAAR,QAAA,eAEF1G,KAAA,QAAKwG,KAAK,CAAE,CAAEL,OAAO,CAAE,MAAM,CAAEmB,UAAU,CAAE,QAAQ,CAAEG,GAAG,CAAE,SAAU,CAAE,CAAAf,QAAA,eACpE5G,IAAA,QACE0G,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdjB,eAAe,CAAEW,eAAe,CAChCoB,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACF1H,KAAA,SAAA0G,QAAA,EAAM,QAAM,CAACxB,UAAU,CAAC,GAAC,EAAM,CAAC,EAC7B,CAAC,cACNlF,KAAA,QAAKwG,KAAK,CAAE,CAAEL,OAAO,CAAE,MAAM,CAAEmB,UAAU,CAAE,QAAQ,CAAEG,GAAG,CAAE,SAAU,CAAE,CAAAf,QAAA,eACpE5G,IAAA,QACE0G,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdjB,eAAe,CAAEY,cAAc,CAC/BmB,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACF1H,KAAA,SAAA0G,QAAA,EAAM,OAAK,CAACtB,SAAS,CAAC,GAAC,EAAM,CAAC,EAC3B,CAAC,EACH,CAAC,CAGLlC,OAAO,CAACzB,MAAM,CAAG,CAAC,EAAIyB,OAAO,CAAC,CAAC,CAAC,GAAK,YAAY,EAAIA,OAAO,CAAC,CAAC,CAAC,GAAK,wBAAwB,eAC3FpD,IAAA,QACE0G,KAAK,CAAE,CACLa,SAAS,CAAE,QAAQ,CACnBH,QAAQ,CAAE,SAAS,CACnBE,KAAK,CAAE,SACT,CAAE,CAAAV,QAAA,CAEDxD,OAAO,CAAClC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAC7B,CACN,EACE,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAuB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}