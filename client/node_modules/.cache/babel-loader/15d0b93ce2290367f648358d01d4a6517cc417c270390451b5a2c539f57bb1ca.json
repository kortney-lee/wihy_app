{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useLocation, useHistory } from 'react-router-dom';\nimport VHealthSearch from './components/VHealthSearch';\nimport ResultsPage from './components/ResultsPage';\nimport openaiAPI from './services/openaiAPI';\nimport './VHealthSearch.css';\n\n// Define a type for the allowed data sources that matches SearchResults requirements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create a wrapper component to access router hooks\nconst ResultsPageWrapper = () => {\n  _s();\n  const location = useLocation();\n  const history = useHistory();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [results, setResults] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const query = params.get('q');\n    if (query && query !== searchQuery) {\n      setSearchQuery(query);\n      performSearch(query);\n    }\n  }, [location.search]);\n  const performSearch = async query => {\n    if (!query.trim()) return;\n    setIsLoading(true);\n    try {\n      console.log(\"Performing search for:\", query);\n\n      // Check if it's a test query\n      if (query.toLowerCase() === 'test') {\n        setResults(`# Search Results for \"${query}\"\\n\\nThis is a test search result.`);\n        setDataSource('test');\n      } else {\n        // Use OpenAI for real searches\n        const result = await openaiAPI.searchHealthInfo(query);\n        console.log(\"Search result:\", result);\n        setResults(result.details);\n        setDataSource(\"openai\");\n        if (result.sources) {\n          setCitations(result.sources);\n        }\n        if (result.recommendations) {\n          setRecommendations(result.recommendations);\n        }\n        if (result.medicalDisclaimer) {\n          setDisclaimer(result.medicalDisclaimer);\n        }\n      }\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      setResults(`Sorry, we couldn't retrieve information about \"${query}\". Please try a different search or try again later.`);\n      setDataSource(\"error\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleBackToSearch = () => {\n    history.push('/');\n  };\n  const handleNewSearch = newQuery => {\n    setSearchQuery(newQuery);\n    history.push(`/results?q=${encodeURIComponent(newQuery)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(ResultsPage, {\n    query: searchQuery,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App with routing\n_s(ResultsPageWrapper, \"xNZIDspo2LoT1N6LkHP8FfYF5qo=\", false, function () {\n  return [useLocation, useHistory];\n});\n_c = ResultsPageWrapper;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/results\",\n          element: /*#__PURE__*/_jsxDEV(ResultsPageWrapper, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPageWrapper\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useLocation","useHistory","VHealthSearch","ResultsPage","openaiAPI","jsxDEV","_jsxDEV","ResultsPageWrapper","_s","location","history","searchQuery","setSearchQuery","results","setResults","isLoading","setIsLoading","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","params","URLSearchParams","search","query","get","performSearch","trim","console","log","toLowerCase","result","searchHealthInfo","details","sources","medicalDisclaimer","error","handleBackToSearch","push","handleNewSearch","newQuery","encodeURIComponent","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","className","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useLocation, useHistory } from 'react-router-dom';\r\nimport VHealthSearch from './components/VHealthSearch';\r\nimport ResultsPage from './components/ResultsPage';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport './VHealthSearch.css';\r\n\r\n// Define a type for the allowed data sources that matches SearchResults requirements\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\n// Create a wrapper component to access router hooks\r\nconst ResultsPageWrapper: React.FC = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [results, setResults] = useState<string>('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n    const query = params.get('q');\r\n    \r\n    if (query && query !== searchQuery) {\r\n      setSearchQuery(query);\r\n      performSearch(query);\r\n    }\r\n  }, [location.search]);\r\n\r\n  const performSearch = async (query: string) => {\r\n    if (!query.trim()) return;\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      console.log(\"Performing search for:\", query);\r\n      \r\n      // Check if it's a test query\r\n      if (query.toLowerCase() === 'test') {\r\n        setResults(`# Search Results for \"${query}\"\\n\\nThis is a test search result.`);\r\n        setDataSource('test');\r\n      } else {\r\n        // Use OpenAI for real searches\r\n        const result = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"Search result:\", result);\r\n        \r\n        setResults(result.details);\r\n        setDataSource(\"openai\");\r\n        \r\n        if (result.sources) {\r\n          setCitations(result.sources);\r\n        }\r\n        \r\n        if (result.recommendations) {\r\n          setRecommendations(result.recommendations);\r\n        }\r\n        \r\n        if (result.medicalDisclaimer) {\r\n          setDisclaimer(result.medicalDisclaimer);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Search error:\", error);\r\n      setResults(`Sorry, we couldn't retrieve information about \"${query}\". Please try a different search or try again later.`);\r\n      setDataSource(\"error\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    history.push('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    setSearchQuery(newQuery);\r\n    history.push(`/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  return (\r\n    <ResultsPage\r\n      query={searchQuery}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\n// Main App with routing\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<VHealthSearch />} />\r\n          <Route path=\"/results\" element={<ResultsPageWrapper />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}