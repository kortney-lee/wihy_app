{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { ComputerVisionClientContext } from \"./computerVisionClientContext\";\nvar ComputerVisionClient = /** @class */function (_super) {\n  __extends(ComputerVisionClient, _super);\n  /**\n   * Initializes a new instance of the ComputerVisionClient class.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  function ComputerVisionClient(credentials, endpoint, options) {\n    return _super.call(this, credentials, endpoint, options) || this;\n  }\n  ComputerVisionClient.prototype.analyzeImage = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, analyzeImageOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.describeImage = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, describeImageOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.detectObjects = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, detectObjectsOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.listModels = function (options, callback) {\n    return this.sendOperationRequest({\n      options: options\n    }, listModelsOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.analyzeImageByDomain = function (model, url, options, callback) {\n    return this.sendOperationRequest({\n      model: model,\n      url: url,\n      options: options\n    }, analyzeImageByDomainOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.recognizePrintedText = function (detectOrientation, url, options, callback) {\n    return this.sendOperationRequest({\n      detectOrientation: detectOrientation,\n      url: url,\n      options: options\n    }, recognizePrintedTextOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.tagImage = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, tagImageOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.generateThumbnail = function (width, height, url, options, callback) {\n    return this.sendOperationRequest({\n      width: width,\n      height: height,\n      url: url,\n      options: options\n    }, generateThumbnailOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.getAreaOfInterest = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, getAreaOfInterestOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.read = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, readOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.getReadResult = function (operationId, options, callback) {\n    return this.sendOperationRequest({\n      operationId: operationId,\n      options: options\n    }, getReadResultOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.analyzeImageInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, analyzeImageInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.getAreaOfInterestInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, getAreaOfInterestInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.describeImageInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, describeImageInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.detectObjectsInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, detectObjectsInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.generateThumbnailInStream = function (width, height, image, options, callback) {\n    return this.sendOperationRequest({\n      width: width,\n      height: height,\n      image: image,\n      options: options\n    }, generateThumbnailInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.analyzeImageByDomainInStream = function (model, image, options, callback) {\n    return this.sendOperationRequest({\n      model: model,\n      image: image,\n      options: options\n    }, analyzeImageByDomainInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.recognizePrintedTextInStream = function (detectOrientation, image, options, callback) {\n    return this.sendOperationRequest({\n      detectOrientation: detectOrientation,\n      image: image,\n      options: options\n    }, recognizePrintedTextInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.tagImageInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, tagImageInStreamOperationSpec, callback);\n  };\n  ComputerVisionClient.prototype.readInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, readInStreamOperationSpec, callback);\n  };\n  return ComputerVisionClient;\n}(ComputerVisionClientContext);\n// Operation Specifications\nvar serializer = new msRest.Serializer(Mappers);\nvar analyzeImageOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.visualFeatures, Parameters.details, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar describeImageOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.maxCandidates, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar detectObjectsOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar listModelsOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"models\",\n  urlParameters: [Parameters.endpoint],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListModelsResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar analyzeImageByDomainOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [Parameters.endpoint, Parameters.model],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar recognizePrintedTextOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.detectOrientation, Parameters.language1, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar tagImageOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar generateThumbnailOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.width, Parameters.height, Parameters.smartCropping, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer: serializer\n};\nvar getAreaOfInterestOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar readOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language2, Parameters.pages, Parameters.modelVersion, Parameters.readingOrder],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadHeaders\n    }\n  },\n  serializer: serializer\n};\nvar getReadResultOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"read/analyzeResults/{operationId}\",\n  urlParameters: [Parameters.endpoint, Parameters.operationId],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReadOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError\n    }\n  },\n  serializer: serializer\n};\nvar analyzeImageInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.visualFeatures, Parameters.details, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar getAreaOfInterestInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar describeImageInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.maxCandidates, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar detectObjectsInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar generateThumbnailInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.width, Parameters.height, Parameters.smartCropping, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer: serializer\n};\nvar analyzeImageByDomainInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [Parameters.endpoint, Parameters.model],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar recognizePrintedTextInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.detectOrientation, Parameters.language1, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar tagImageInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar readInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language2, Parameters.pages, Parameters.modelVersion, Parameters.readingOrder],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadInStreamHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadInStreamHeaders\n    }\n  },\n  serializer: serializer\n};\nexport { ComputerVisionClient, ComputerVisionClientContext, Models as ComputerVisionModels, Mappers as ComputerVisionMappers };","map":{"version":3,"names":["msRest","Models","Mappers","Parameters","ComputerVisionClientContext","ComputerVisionClient","_super","__extends","credentials","endpoint","options","call","prototype","analyzeImage","url","callback","sendOperationRequest","analyzeImageOperationSpec","describeImage","describeImageOperationSpec","detectObjects","detectObjectsOperationSpec","listModels","listModelsOperationSpec","analyzeImageByDomain","model","analyzeImageByDomainOperationSpec","recognizePrintedText","detectOrientation","recognizePrintedTextOperationSpec","tagImage","tagImageOperationSpec","generateThumbnail","width","height","generateThumbnailOperationSpec","getAreaOfInterest","getAreaOfInterestOperationSpec","read","readOperationSpec","getReadResult","operationId","getReadResultOperationSpec","analyzeImageInStream","image","analyzeImageInStreamOperationSpec","getAreaOfInterestInStream","getAreaOfInterestInStreamOperationSpec","describeImageInStream","describeImageInStreamOperationSpec","detectObjectsInStream","detectObjectsInStreamOperationSpec","generateThumbnailInStream","generateThumbnailInStreamOperationSpec","analyzeImageByDomainInStream","analyzeImageByDomainInStreamOperationSpec","recognizePrintedTextInStream","recognizePrintedTextInStreamOperationSpec","tagImageInStream","tagImageInStreamOperationSpec","readInStream","readInStreamOperationSpec","serializer","Serializer","httpMethod","path","urlParameters","queryParameters","visualFeatures","details","language0","descriptionExclude","modelVersion","requestBody","parameterPath","mapper","__assign","ImageUrl","required","responses","bodyMapper","ImageAnalysis","default","ComputerVisionErrorResponse","maxCandidates","ImageDescription","DetectResult","ListModelsResult","DomainModelResults","language1","OcrResult","TagResult","smartCropping","serializedName","type","name","AreaOfInterestResult","language2","pages","readingOrder","headersMapper","ReadHeaders","ComputerVisionOcrError","ReadOperationResult","contentType","ReadInStreamHeaders","ComputerVisionModels","ComputerVisionMappers"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\cognitiveservices-computervision\\src\\computerVisionClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { ComputerVisionClientContext } from \"./computerVisionClientContext\";\n\nclass ComputerVisionClient extends ComputerVisionClientContext {\n  /**\n   * Initializes a new instance of the ComputerVisionClient class.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(credentials, endpoint, options);\n  }\n\n  /**\n   * This operation extracts a rich set of visual features based on the image content.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within\n   * your request, there is an optional parameter to allow you to choose which features to return. By\n   * default, image categories are returned in the response.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageResponse>\n   */\n  analyzeImage(url: string, options?: Models.ComputerVisionClientAnalyzeImageOptionalParams): Promise<Models.AnalyzeImageResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  analyzeImage(url: string, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImage(url: string, options: Models.ComputerVisionClientAnalyzeImageOptionalParams, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  analyzeImage(url: string, options?: Models.ComputerVisionClientAnalyzeImageOptionalParams | msRest.ServiceCallback<Models.ImageAnalysis>, callback?: msRest.ServiceCallback<Models.ImageAnalysis>): Promise<Models.AnalyzeImageResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      analyzeImageOperationSpec,\n      callback) as Promise<Models.AnalyzeImageResponse>;\n  }\n\n  /**\n   * This operation generates a description of an image in human readable language with complete\n   * sentences. The description is based on a collection of content tags, which are also returned by\n   * the operation. More than one description can be generated for each image. Descriptions are\n   * ordered by their confidence score. Descriptions may include results from celebrity and landmark\n   * domain models, if applicable.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DescribeImageResponse>\n   */\n  describeImage(url: string, options?: Models.ComputerVisionClientDescribeImageOptionalParams): Promise<Models.DescribeImageResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  describeImage(url: string, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  describeImage(url: string, options: Models.ComputerVisionClientDescribeImageOptionalParams, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  describeImage(url: string, options?: Models.ComputerVisionClientDescribeImageOptionalParams | msRest.ServiceCallback<Models.ImageDescription>, callback?: msRest.ServiceCallback<Models.ImageDescription>): Promise<Models.DescribeImageResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      describeImageOperationSpec,\n      callback) as Promise<Models.DescribeImageResponse>;\n  }\n\n  /**\n   * Performs object detection on the specified image.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectObjectsResponse>\n   */\n  detectObjects(url: string, options?: Models.ComputerVisionClientDetectObjectsOptionalParams): Promise<Models.DetectObjectsResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  detectObjects(url: string, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectObjects(url: string, options: Models.ComputerVisionClientDetectObjectsOptionalParams, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  detectObjects(url: string, options?: Models.ComputerVisionClientDetectObjectsOptionalParams | msRest.ServiceCallback<Models.DetectResult>, callback?: msRest.ServiceCallback<Models.DetectResult>): Promise<Models.DetectObjectsResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      detectObjectsOperationSpec,\n      callback) as Promise<Models.DetectObjectsResponse>;\n  }\n\n  /**\n   * This operation returns the list of domain-specific models that are supported by the Computer\n   * Vision API. Currently, the API supports following domain-specific models: celebrity recognizer,\n   * landmark recognizer.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ListModelsResponse>\n   */\n  listModels(options?: msRest.RequestOptionsBase): Promise<Models.ListModelsResponse>;\n  /**\n   * @param callback The callback\n   */\n  listModels(callback: msRest.ServiceCallback<Models.ListModelsResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListModelsResult>): void;\n  listModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListModelsResult>, callback?: msRest.ServiceCallback<Models.ListModelsResult>): Promise<Models.ListModelsResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      listModelsOperationSpec,\n      callback) as Promise<Models.ListModelsResponse>;\n  }\n\n  /**\n   * This operation recognizes content within an image by applying a domain-specific model. The list\n   * of domain-specific models that are supported by the Computer Vision API can be retrieved using\n   * the /models GET request. Currently, the API provides following domain-specific models:\n   * celebrities, landmarks.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON.\n   * If the request failed, the response will contain an error code and a message to help understand\n   * what went wrong.\n   * @param model The domain-specific content to recognize.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageByDomainResponse>\n   */\n  analyzeImageByDomain(model: string, url: string, options?: Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams): Promise<Models.AnalyzeImageByDomainResponse>;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  analyzeImageByDomain(model: string, url: string, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImageByDomain(model: string, url: string, options: Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  analyzeImageByDomain(model: string, url: string, options?: Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams | msRest.ServiceCallback<Models.DomainModelResults>, callback?: msRest.ServiceCallback<Models.DomainModelResults>): Promise<Models.AnalyzeImageByDomainResponse> {\n    return this.sendOperationRequest(\n      {\n        model,\n        url,\n        options\n      },\n      analyzeImageByDomainOperationSpec,\n      callback) as Promise<Models.AnalyzeImageByDomainResponse>;\n  }\n\n  /**\n   * Optical Character Recognition (OCR) detects text in an image and extracts the recognized\n   * characters into a machine-usable character stream.\n   * Upon success, the OCR results will be returned.\n   * Upon failure, the error code together with an error message will be returned. The error code can\n   * be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,\n   * NotSupportedLanguage, or InternalServerError.\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecognizePrintedTextResponse>\n   */\n  recognizePrintedText(detectOrientation: boolean, url: string, options?: Models.ComputerVisionClientRecognizePrintedTextOptionalParams): Promise<Models.RecognizePrintedTextResponse>;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  recognizePrintedText(detectOrientation: boolean, url: string, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recognizePrintedText(detectOrientation: boolean, url: string, options: Models.ComputerVisionClientRecognizePrintedTextOptionalParams, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  recognizePrintedText(detectOrientation: boolean, url: string, options?: Models.ComputerVisionClientRecognizePrintedTextOptionalParams | msRest.ServiceCallback<Models.OcrResult>, callback?: msRest.ServiceCallback<Models.OcrResult>): Promise<Models.RecognizePrintedTextResponse> {\n    return this.sendOperationRequest(\n      {\n        detectOrientation,\n        url,\n        options\n      },\n      recognizePrintedTextOperationSpec,\n      callback) as Promise<Models.RecognizePrintedTextResponse>;\n  }\n\n  /**\n   * This operation generates a list of words, or tags, that are relevant to the content of the\n   * supplied image. The Computer Vision API can return tags based on objects, living beings, scenery\n   * or actions found in images. Unlike categories, tags are not organized according to a\n   * hierarchical classification system, but correspond to image content. Tags may contain hints to\n   * avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the\n   * hint \"fungus\".\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.TagImageResponse>\n   */\n  tagImage(url: string, options?: Models.ComputerVisionClientTagImageOptionalParams): Promise<Models.TagImageResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  tagImage(url: string, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  tagImage(url: string, options: Models.ComputerVisionClientTagImageOptionalParams, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  tagImage(url: string, options?: Models.ComputerVisionClientTagImageOptionalParams | msRest.ServiceCallback<Models.TagResult>, callback?: msRest.ServiceCallback<Models.TagResult>): Promise<Models.TagImageResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      tagImageOperationSpec,\n      callback) as Promise<Models.TagImageResponse>;\n  }\n\n  /**\n   * This operation generates a thumbnail image with the user-specified width and height. By default,\n   * the service analyzes the image, identifies the region of interest (ROI), and generates smart\n   * cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio\n   * that differs from that of the input image.\n   * A successful response contains the thumbnail image binary. If the request failed, the response\n   * contains an error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,\n   * FailedToProcess, Timeout, or InternalServerError.\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GenerateThumbnailResponse>\n   */\n  generateThumbnail(width: number, height: number, url: string, options?: Models.ComputerVisionClientGenerateThumbnailOptionalParams): Promise<Models.GenerateThumbnailResponse>;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  generateThumbnail(width: number, height: number, url: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  generateThumbnail(width: number, height: number, url: string, options: Models.ComputerVisionClientGenerateThumbnailOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  generateThumbnail(width: number, height: number, url: string, options?: Models.ComputerVisionClientGenerateThumbnailOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GenerateThumbnailResponse> {\n    return this.sendOperationRequest(\n      {\n        width,\n        height,\n        url,\n        options\n      },\n      generateThumbnailOperationSpec,\n      callback) as Promise<Models.GenerateThumbnailResponse>;\n  }\n\n  /**\n   * This operation returns a bounding box around the most important area of the image.\n   * A successful response will be returned in JSON. If the request failed, the response contains an\n   * error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,\n   * Timeout, or InternalServerError.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetAreaOfInterestResponse>\n   */\n  getAreaOfInterest(url: string, options?: Models.ComputerVisionClientGetAreaOfInterestOptionalParams): Promise<Models.GetAreaOfInterestResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  getAreaOfInterest(url: string, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAreaOfInterest(url: string, options: Models.ComputerVisionClientGetAreaOfInterestOptionalParams, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  getAreaOfInterest(url: string, options?: Models.ComputerVisionClientGetAreaOfInterestOptionalParams | msRest.ServiceCallback<Models.AreaOfInterestResult>, callback?: msRest.ServiceCallback<Models.AreaOfInterestResult>): Promise<Models.GetAreaOfInterestResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      getAreaOfInterestOperationSpec,\n      callback) as Promise<Models.GetAreaOfInterestResponse>;\n  }\n\n  /**\n   * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical\n   * Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read\n   * interface, the response contains a field called 'Operation-Location'. The 'Operation-Location'\n   * field contains the URL that you must use for your 'GetReadResult' operation to access OCR\n   * results.​\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ReadResponse>\n   */\n  read(url: string, options?: Models.ComputerVisionClientReadOptionalParams): Promise<Models.ReadResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  read(url: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  read(url: string, options: Models.ComputerVisionClientReadOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  read(url: string, options?: Models.ComputerVisionClientReadOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ReadResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      readOperationSpec,\n      callback) as Promise<Models.ReadResponse>;\n  }\n\n  /**\n   * This interface is used for getting OCR results of Read operation. The URL to this interface\n   * should be retrieved from 'Operation-Location' field returned from Read interface.\n   * @param operationId Id of read operation returned in the response of the 'Read' interface.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetReadResultResponse>\n   */\n  getReadResult(operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetReadResultResponse>;\n  /**\n   * @param operationId Id of read operation returned in the response of the 'Read' interface.\n   * @param callback The callback\n   */\n  getReadResult(operationId: string, callback: msRest.ServiceCallback<Models.ReadOperationResult>): void;\n  /**\n   * @param operationId Id of read operation returned in the response of the 'Read' interface.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getReadResult(operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReadOperationResult>): void;\n  getReadResult(operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReadOperationResult>, callback?: msRest.ServiceCallback<Models.ReadOperationResult>): Promise<Models.GetReadResultResponse> {\n    return this.sendOperationRequest(\n      {\n        operationId,\n        options\n      },\n      getReadResultOperationSpec,\n      callback) as Promise<Models.GetReadResultResponse>;\n  }\n\n  /**\n   * This operation extracts a rich set of visual features based on the image content.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within\n   * your request, there is an optional parameter to allow you to choose which features to return. By\n   * default, image categories are returned in the response.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageInStreamResponse>\n   */\n  analyzeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams): Promise<Models.AnalyzeImageInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  analyzeImageInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImageInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  analyzeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams | msRest.ServiceCallback<Models.ImageAnalysis>, callback?: msRest.ServiceCallback<Models.ImageAnalysis>): Promise<Models.AnalyzeImageInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      analyzeImageInStreamOperationSpec,\n      callback) as Promise<Models.AnalyzeImageInStreamResponse>;\n  }\n\n  /**\n   * This operation returns a bounding box around the most important area of the image.\n   * A successful response will be returned in JSON. If the request failed, the response contains an\n   * error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,\n   * Timeout, or InternalServerError.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetAreaOfInterestInStreamResponse>\n   */\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams): Promise<Models.GetAreaOfInterestInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams | msRest.ServiceCallback<Models.AreaOfInterestResult>, callback?: msRest.ServiceCallback<Models.AreaOfInterestResult>): Promise<Models.GetAreaOfInterestInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      getAreaOfInterestInStreamOperationSpec,\n      callback) as Promise<Models.GetAreaOfInterestInStreamResponse>;\n  }\n\n  /**\n   * This operation generates a description of an image in human readable language with complete\n   * sentences. The description is based on a collection of content tags, which are also returned by\n   * the operation. More than one description can be generated for each image. Descriptions are\n   * ordered by their confidence score. Descriptions may include results from celebrity and landmark\n   * domain models, if applicable.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DescribeImageInStreamResponse>\n   */\n  describeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDescribeImageInStreamOptionalParams): Promise<Models.DescribeImageInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  describeImageInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  describeImageInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientDescribeImageInStreamOptionalParams, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  describeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDescribeImageInStreamOptionalParams | msRest.ServiceCallback<Models.ImageDescription>, callback?: msRest.ServiceCallback<Models.ImageDescription>): Promise<Models.DescribeImageInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      describeImageInStreamOperationSpec,\n      callback) as Promise<Models.DescribeImageInStreamResponse>;\n  }\n\n  /**\n   * Performs object detection on the specified image.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectObjectsInStreamResponse>\n   */\n  detectObjectsInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDetectObjectsInStreamOptionalParams): Promise<Models.DetectObjectsInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  detectObjectsInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectObjectsInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientDetectObjectsInStreamOptionalParams, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  detectObjectsInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDetectObjectsInStreamOptionalParams | msRest.ServiceCallback<Models.DetectResult>, callback?: msRest.ServiceCallback<Models.DetectResult>): Promise<Models.DetectObjectsInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      detectObjectsInStreamOperationSpec,\n      callback) as Promise<Models.DetectObjectsInStreamResponse>;\n  }\n\n  /**\n   * This operation generates a thumbnail image with the user-specified width and height. By default,\n   * the service analyzes the image, identifies the region of interest (ROI), and generates smart\n   * cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio\n   * that differs from that of the input image.\n   * A successful response contains the thumbnail image binary. If the request failed, the response\n   * contains an error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,\n   * FailedToProcess, Timeout, or InternalServerError.\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GenerateThumbnailInStreamResponse>\n   */\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams): Promise<Models.GenerateThumbnailInStreamResponse>;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, options: Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GenerateThumbnailInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        width,\n        height,\n        image,\n        options\n      },\n      generateThumbnailInStreamOperationSpec,\n      callback) as Promise<Models.GenerateThumbnailInStreamResponse>;\n  }\n\n  /**\n   * This operation recognizes content within an image by applying a domain-specific model. The list\n   * of domain-specific models that are supported by the Computer Vision API can be retrieved using\n   * the /models GET request. Currently, the API provides following domain-specific models:\n   * celebrities, landmarks.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON.\n   * If the request failed, the response will contain an error code and a message to help understand\n   * what went wrong.\n   * @param model The domain-specific content to recognize.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageByDomainInStreamResponse>\n   */\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams): Promise<Models.AnalyzeImageByDomainInStreamResponse>;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, options: Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams | msRest.ServiceCallback<Models.DomainModelResults>, callback?: msRest.ServiceCallback<Models.DomainModelResults>): Promise<Models.AnalyzeImageByDomainInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        model,\n        image,\n        options\n      },\n      analyzeImageByDomainInStreamOperationSpec,\n      callback) as Promise<Models.AnalyzeImageByDomainInStreamResponse>;\n  }\n\n  /**\n   * Optical Character Recognition (OCR) detects text in an image and extracts the recognized\n   * characters into a machine-usable character stream.\n   * Upon success, the OCR results will be returned.\n   * Upon failure, the error code together with an error message will be returned. The error code can\n   * be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,\n   * NotSupportedLanguage, or InternalServerError.\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecognizePrintedTextInStreamResponse>\n   */\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams): Promise<Models.RecognizePrintedTextInStreamResponse>;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, options: Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams | msRest.ServiceCallback<Models.OcrResult>, callback?: msRest.ServiceCallback<Models.OcrResult>): Promise<Models.RecognizePrintedTextInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        detectOrientation,\n        image,\n        options\n      },\n      recognizePrintedTextInStreamOperationSpec,\n      callback) as Promise<Models.RecognizePrintedTextInStreamResponse>;\n  }\n\n  /**\n   * This operation generates a list of words, or tags, that are relevant to the content of the\n   * supplied image. The Computer Vision API can return tags based on objects, living beings, scenery\n   * or actions found in images. Unlike categories, tags are not organized according to a\n   * hierarchical classification system, but correspond to image content. Tags may contain hints to\n   * avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the\n   * hint \"fungus\".\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.TagImageInStreamResponse>\n   */\n  tagImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientTagImageInStreamOptionalParams): Promise<Models.TagImageInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  tagImageInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  tagImageInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientTagImageInStreamOptionalParams, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  tagImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientTagImageInStreamOptionalParams | msRest.ServiceCallback<Models.TagResult>, callback?: msRest.ServiceCallback<Models.TagResult>): Promise<Models.TagImageInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      tagImageInStreamOperationSpec,\n      callback) as Promise<Models.TagImageInStreamResponse>;\n  }\n\n  /**\n   * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical\n   * Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read\n   * interface, the response contains a field called 'Operation-Location'. The 'Operation-Location'\n   * field contains the URL that you must use for your 'GetReadResult' operation to access OCR\n   * results.​\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ReadInStreamResponse>\n   */\n  readInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientReadInStreamOptionalParams): Promise<Models.ReadInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  readInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  readInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientReadInStreamOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  readInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientReadInStreamOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ReadInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      readInStreamOperationSpec,\n      callback) as Promise<Models.ReadInStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst analyzeImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.visualFeatures,\n    Parameters.details,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst describeImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.maxCandidates,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst detectObjectsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst listModelsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"models\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListModelsResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst analyzeImageByDomainOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.model\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst recognizePrintedTextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.detectOrientation,\n    Parameters.language1,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst tagImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst generateThumbnailOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.width,\n    Parameters.height,\n    Parameters.smartCropping,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer\n};\n\nconst getAreaOfInterestOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst readOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language2,\n    Parameters.pages,\n    Parameters.modelVersion,\n    Parameters.readingOrder\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadHeaders\n    }\n  },\n  serializer\n};\n\nconst getReadResultOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"read/analyzeResults/{operationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.operationId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReadOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError\n    }\n  },\n  serializer\n};\n\nconst analyzeImageInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.visualFeatures,\n    Parameters.details,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst getAreaOfInterestInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst describeImageInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.maxCandidates,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst detectObjectsInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst generateThumbnailInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.width,\n    Parameters.height,\n    Parameters.smartCropping,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer\n};\n\nconst analyzeImageByDomainInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.model\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst recognizePrintedTextInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.detectOrientation,\n    Parameters.language1,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst tagImageInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst readInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language2,\n    Parameters.pages,\n    Parameters.modelVersion,\n    Parameters.readingOrder\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadInStreamHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadInStreamHeaders\n    }\n  },\n  serializer\n};\n\nexport {\n  ComputerVisionClient,\n  ComputerVisionClientContext,\n  Models as ComputerVisionModels,\n  Mappers as ComputerVisionMappers\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}