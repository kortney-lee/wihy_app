{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport openaiAPI from './services/openaiAPI';\nimport { searchCache } from './services/searchCache';\nimport './VHealthSearch.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const searchFoodDatabase = async query => {\n  try {\n    console.log('Calling food database API for:', query);\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Food API response:', data);\n    return data;\n  } catch (error) {\n    console.error('Food database API error:', error);\n    throw error;\n  }\n};\nexport const foodAPI = {\n  searchFood: searchFoodDatabase\n};\nconst ResultsPage = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const query = searchParams.get('q') || '';\n  const [isLoading, setIsLoading] = useState(false);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Track if this is initial load to prevent loading spinner on browser navigation\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  // Detect browser navigation type\n  const isBrowserNavigation = () => {\n    var _performance, _performance$getEntri, _performance$getEntri2;\n    const navigation = (_performance = window.performance) === null || _performance === void 0 ? void 0 : (_performance$getEntri = _performance.getEntriesByType) === null || _performance$getEntri === void 0 ? void 0 : (_performance$getEntri2 = _performance$getEntri.call(_performance, 'navigation')) === null || _performance$getEntri2 === void 0 ? void 0 : _performance$getEntri2[0];\n    return (navigation === null || navigation === void 0 ? void 0 : navigation.type) === 'back_forward';\n  };\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query) {\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Query changed to:\", query);\n      console.log(\"Is browser navigation:\", isBrowserNavigation());\n\n      // Always check cache first - especially for browser navigation\n      const cachedResult = searchCache.getCachedResult(query);\n      if (cachedResult) {\n        console.log('Using cached results for:', query);\n        setResults(cachedResult);\n        setDataSource('local');\n        setIsLoading(false);\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n        setIsInitialLoad(false);\n        return; // Exit early - no API calls needed\n      }\n\n      // If this is browser navigation and no cache, redirect to search page\n      if (isBrowserNavigation() || !isInitialLoad) {\n        console.log('Browser navigation detected with no cache - redirecting to search');\n        navigate('/');\n        return;\n      }\n\n      // Only show loading for genuine new searches (not browser navigation)\n      setIsLoading(true);\n      try {\n        // STEP 1: First try the nutrition database\n        try {\n          console.log('Trying nutrition database first...');\n          console.log('API URL:', `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\n          const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\n          if (nutritionResponse.ok) {\n            const nutritionData = await nutritionResponse.json();\n            console.log('Nutrition API response:', nutritionData);\n            if (nutritionData && nutritionData.found === true) {\n              console.log('Found nutrition data - using vnutrition source');\n              const resultString = JSON.stringify(nutritionData);\n              setResults(resultString);\n              setDataSource('vnutrition');\n\n              // Cache the nutrition results\n              searchCache.setCachedResult(query, resultString, window.location.href);\n              setIsLoading(false);\n              setIsInitialLoad(false);\n              return;\n            }\n          }\n        } catch (nutritionError) {\n          console.log('Nutrition API error:', nutritionError);\n        }\n\n        // STEP 2: Fall back to OpenAI if no nutrition data found\n        console.log('Using OpenAI as fallback...');\n        const result = await openaiAPI.searchHealthInfo(query);\n        console.log(\"OpenAI Search result:\", result);\n        const resultText = result.details || result.response || JSON.stringify(result);\n        setResults(resultText);\n        setDataSource(\"openai\");\n\n        // Cache the OpenAI results\n        searchCache.setCachedResult(query, resultText, window.location.href);\n        setCitations(result.sources || []);\n        setRecommendations(result.recommendations || []);\n        setDisclaimer(result.medicalDisclaimer || '');\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        const errorMessage = \"Sorry, there was an error processing your request.\";\n        setResults(errorMessage);\n        setDataSource(\"error\");\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n      } finally {\n        setIsLoading(false);\n        setIsInitialLoad(false);\n      }\n    };\n    fetchResults();\n  }, [query, navigate]); // Add navigate dependency\n\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    if (newQuery !== query) {\n      // Reset the initial load flag for new searches\n      setIsInitialLoad(true);\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: query,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultsPage, \"cQpNdWPbN9NhXnHfLjhALVl9RJI=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ResultsPage;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/results\",\n        element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","searchCache","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","searchFoodDatabase","query","console","log","response","fetch","encodeURIComponent","method","headers","ok","Error","status","data","json","error","foodAPI","searchFood","ResultsPage","_s","searchParams","navigate","get","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","isInitialLoad","setIsInitialLoad","isBrowserNavigation","_performance","_performance$getEntri","_performance$getEntri2","navigation","window","performance","getEntriesByType","call","type","fetchResults","cachedResult","getCachedResult","nutritionResponse","nutritionData","found","resultString","JSON","stringify","setCachedResult","location","href","nutritionError","result","searchHealthInfo","resultText","details","sources","medicalDisclaimer","errorMessage","handleBackToSearch","handleNewSearch","newQuery","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport { searchCache } from './services/searchCache';\r\nimport './VHealthSearch.css';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const searchFoodDatabase = async (query: string) => {\r\n  try {\r\n    console.log('Calling food database API for:', query);\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Food API response:', data);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Food database API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const foodAPI = {\r\n  searchFood: searchFoodDatabase\r\n};\r\n\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Track if this is initial load to prevent loading spinner on browser navigation\r\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\r\n  \r\n  // Detect browser navigation type\r\n  const isBrowserNavigation = () => {\r\n    const navigation = (window as any).performance?.getEntriesByType?.('navigation')?.[0];\r\n    return navigation?.type === 'back_forward';\r\n  };\r\n\r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Query changed to:\", query);\r\n      console.log(\"Is browser navigation:\", isBrowserNavigation());\r\n      \r\n      // Always check cache first - especially for browser navigation\r\n      const cachedResult = searchCache.getCachedResult(query);\r\n      if (cachedResult) {\r\n        console.log('Using cached results for:', query);\r\n        setResults(cachedResult);\r\n        setDataSource('local');\r\n        setIsLoading(false);\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n        setIsInitialLoad(false);\r\n        return; // Exit early - no API calls needed\r\n      }\r\n      \r\n      // If this is browser navigation and no cache, redirect to search page\r\n      if (isBrowserNavigation() || !isInitialLoad) {\r\n        console.log('Browser navigation detected with no cache - redirecting to search');\r\n        navigate('/');\r\n        return;\r\n      }\r\n      \r\n      // Only show loading for genuine new searches (not browser navigation)\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        // STEP 1: First try the nutrition database\r\n        try {\r\n          console.log('Trying nutrition database first...');\r\n          console.log('API URL:', `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          if (nutritionResponse.ok) {\r\n            const nutritionData = await nutritionResponse.json();\r\n            console.log('Nutrition API response:', nutritionData);\r\n            \r\n            if (nutritionData && nutritionData.found === true) {\r\n              console.log('Found nutrition data - using vnutrition source');\r\n              const resultString = JSON.stringify(nutritionData);\r\n              setResults(resultString);\r\n              setDataSource('vnutrition');\r\n              \r\n              // Cache the nutrition results\r\n              searchCache.setCachedResult(query, resultString, window.location.href);\r\n              \r\n              setIsLoading(false);\r\n              setIsInitialLoad(false);\r\n              return;\r\n            }\r\n          }\r\n        } catch (nutritionError) {\r\n          console.log('Nutrition API error:', nutritionError);\r\n        }\r\n        \r\n        // STEP 2: Fall back to OpenAI if no nutrition data found\r\n        console.log('Using OpenAI as fallback...');\r\n        const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"OpenAI Search result:\", result);\r\n        \r\n        const resultText = result.details || result.response || JSON.stringify(result);\r\n        setResults(resultText);\r\n        setDataSource(\"openai\");\r\n        \r\n        // Cache the OpenAI results\r\n        searchCache.setCachedResult(query, resultText, window.location.href);\r\n        \r\n        setCitations(result.sources || []);\r\n        setRecommendations(result.recommendations || []);\r\n        setDisclaimer(result.medicalDisclaimer || '');\r\n        \r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        const errorMessage = \"Sorry, there was an error processing your request.\";\r\n        setResults(errorMessage);\r\n        setDataSource(\"error\");\r\n        \r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n      } finally {\r\n        setIsLoading(false);\r\n        setIsInitialLoad(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query, navigate]); // Add navigate dependency\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    if (newQuery !== query) {\r\n      // Reset the initial load flag for new searches\r\n      setIsInitialLoad(true);\r\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n  response?: string;\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,eAAe,EAAEC,WAAW,QAAQ,kBAAkB;AACvG,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAa,IAAK;EACzD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,KAAK,CAAC;IAEpD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,sBAAsBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,EAAE;MAC7FM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCX,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAES,IAAI,CAAC;IAEvC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG;EACrBC,UAAU,EAAEhB;AACd,CAAC;AAID,MAAMiB,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,CAAC,GAAG/B,eAAe,CAAC,CAAC;EACxC,MAAMgC,QAAQ,GAAG/B,WAAW,CAAC,CAAC;EAC9B,MAAMY,KAAK,GAAGkB,YAAY,CAACE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE;EACzC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAAC4C,UAAU,EAAEC,aAAa,CAAC,GAAG7C,QAAQ,CAAoB,OAAO,CAAC;EACxE,MAAM,CAAC8C,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAW,EAAE,CAAC;EACxD,MAAM,CAACgD,eAAe,EAAEC,kBAAkB,CAAC,GAAGjD,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAACkD,UAAU,EAAEC,aAAa,CAAC,GAAGnD,QAAQ,CAAS,EAAE,CAAC;;EAExD;EACA,MAAM,CAACoD,aAAa,EAAEC,gBAAgB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMsD,mBAAmB,GAAGA,CAAA,KAAM;IAAA,IAAAC,YAAA,EAAAC,qBAAA,EAAAC,sBAAA;IAChC,MAAMC,UAAU,IAAAH,YAAA,GAAII,MAAM,CAASC,WAAW,cAAAL,YAAA,wBAAAC,qBAAA,GAA3BD,YAAA,CAA6BM,gBAAgB,cAAAL,qBAAA,wBAAAC,sBAAA,GAA7CD,qBAAA,CAAAM,IAAA,CAAAP,YAAA,EAAgD,YAAY,CAAC,cAAAE,sBAAA,uBAA7DA,sBAAA,CAAgE,CAAC,CAAC;IACrF,OAAO,CAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,IAAI,MAAK,cAAc;EAC5C,CAAC;;EAED;EACA9D,SAAS,CAAC,MAAM;IACd,MAAM+D,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAAC7C,KAAK,EAAE;QACVsB,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;MAEArB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,KAAK,CAAC;MACvCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEiC,mBAAmB,CAAC,CAAC,CAAC;;MAE5D;MACA,MAAMW,YAAY,GAAGtD,WAAW,CAACuD,eAAe,CAAC/C,KAAK,CAAC;MACvD,IAAI8C,YAAY,EAAE;QAChB7C,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,KAAK,CAAC;QAC/CwB,UAAU,CAACsB,YAAY,CAAC;QACxBpB,aAAa,CAAC,OAAO,CAAC;QACtBJ,YAAY,CAAC,KAAK,CAAC;QACnBM,YAAY,CAAC,EAAE,CAAC;QAChBE,kBAAkB,CAAC,EAAE,CAAC;QACtBE,aAAa,CAAC,EAAE,CAAC;QACjBE,gBAAgB,CAAC,KAAK,CAAC;QACvB,OAAO,CAAC;MACV;;MAEA;MACA,IAAIC,mBAAmB,CAAC,CAAC,IAAI,CAACF,aAAa,EAAE;QAC3ChC,OAAO,CAACC,GAAG,CAAC,mEAAmE,CAAC;QAChFiB,QAAQ,CAAC,GAAG,CAAC;QACb;MACF;;MAEA;MACAG,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF;QACA,IAAI;UACFrB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;UACjDD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,GAAGP,YAAY,sBAAsBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,CAAC;UAEzF,MAAMgD,iBAAiB,GAAG,MAAM5C,KAAK,CAAC,GAAGT,YAAY,sBAAsBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,CAAC;UAEvG,IAAIgD,iBAAiB,CAACxC,EAAE,EAAE;YACxB,MAAMyC,aAAa,GAAG,MAAMD,iBAAiB,CAACpC,IAAI,CAAC,CAAC;YACpDX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE+C,aAAa,CAAC;YAErD,IAAIA,aAAa,IAAIA,aAAa,CAACC,KAAK,KAAK,IAAI,EAAE;cACjDjD,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;cAC7D,MAAMiD,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC;cAClDzB,UAAU,CAAC2B,YAAY,CAAC;cACxBzB,aAAa,CAAC,YAAY,CAAC;;cAE3B;cACAlC,WAAW,CAAC8D,eAAe,CAACtD,KAAK,EAAEmD,YAAY,EAAEX,MAAM,CAACe,QAAQ,CAACC,IAAI,CAAC;cAEtElC,YAAY,CAAC,KAAK,CAAC;cACnBY,gBAAgB,CAAC,KAAK,CAAC;cACvB;YACF;UACF;QACF,CAAC,CAAC,OAAOuB,cAAc,EAAE;UACvBxD,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEuD,cAAc,CAAC;QACrD;;QAEA;QACAxD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,MAAMwD,MAAuB,GAAG,MAAMnE,SAAS,CAACoE,gBAAgB,CAAC3D,KAAK,CAAC;QACvEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEwD,MAAM,CAAC;QAE5C,MAAME,UAAU,GAAGF,MAAM,CAACG,OAAO,IAAIH,MAAM,CAACvD,QAAQ,IAAIiD,IAAI,CAACC,SAAS,CAACK,MAAM,CAAC;QAC9ElC,UAAU,CAACoC,UAAU,CAAC;QACtBlC,aAAa,CAAC,QAAQ,CAAC;;QAEvB;QACAlC,WAAW,CAAC8D,eAAe,CAACtD,KAAK,EAAE4D,UAAU,EAAEpB,MAAM,CAACe,QAAQ,CAACC,IAAI,CAAC;QAEpE5B,YAAY,CAAC8B,MAAM,CAACI,OAAO,IAAI,EAAE,CAAC;QAClChC,kBAAkB,CAAC4B,MAAM,CAAC7B,eAAe,IAAI,EAAE,CAAC;QAChDG,aAAa,CAAC0B,MAAM,CAACK,iBAAiB,IAAI,EAAE,CAAC;MAE/C,CAAC,CAAC,OAAOlD,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC,MAAMmD,YAAY,GAAG,oDAAoD;QACzExC,UAAU,CAACwC,YAAY,CAAC;QACxBtC,aAAa,CAAC,OAAO,CAAC;QAEtBE,YAAY,CAAC,EAAE,CAAC;QAChBE,kBAAkB,CAAC,EAAE,CAAC;QACtBE,aAAa,CAAC,EAAE,CAAC;MACnB,CAAC,SAAS;QACRV,YAAY,CAAC,KAAK,CAAC;QACnBY,gBAAgB,CAAC,KAAK,CAAC;MACzB;IACF,CAAC;IAEDW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC7C,KAAK,EAAEmB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEvB,MAAM8C,kBAAkB,GAAGA,CAAA,KAAM;IAC/B9C,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,MAAM+C,eAAe,GAAIC,QAAgB,IAAK;IAC5C,IAAIA,QAAQ,KAAKnE,KAAK,EAAE;MACtB;MACAkC,gBAAgB,CAAC,IAAI,CAAC;MACtBf,QAAQ,CAAC,cAAcd,kBAAkB,CAAC8D,QAAQ,CAAC,EAAE,CAAC;IACxD;EACF,CAAC;EAED,oBACEzE,OAAA,CAACJ,aAAa;IACZU,KAAK,EAAEA,KAAM;IACbuB,OAAO,EAAEA,OAAQ;IACjB6C,cAAc,EAAEH,kBAAmB;IACnCI,WAAW,EAAEH,eAAgB;IAC7B7C,SAAS,EAAEA,SAAU;IACrBI,UAAU,EAAEA,UAAW;IACvBE,SAAS,EAAEA,SAAU;IACrBE,eAAe,EAAEA,eAAgB;IACjCE,UAAU,EAAEA;EAAW;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN,CAAC;AAACxD,EAAA,CAhJID,WAAqB;EAAA,QACF7B,eAAe,EACrBC,WAAW;AAAA;AAAAsF,EAAA,GAFxB1D,WAAqB;AAkJ3B,MAAM2D,GAAa,GAAGA,CAAA,KAAM;EAC1B1E,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EAErC,oBACER,OAAA,CAACV,MAAM;IAAA4F,QAAA,eACLlF,OAAA,CAACT,MAAM;MAAA2F,QAAA,gBACLlF,OAAA,CAACR,KAAK;QAAC2F,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEpF,OAAA,CAACL,aAAa;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9C/E,OAAA,CAACR,KAAK;QAAC2F,IAAI,EAAC,UAAU;QAACC,OAAO,eAAEpF,OAAA,CAACsB,WAAW;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACM,GAAA,GAXIJ,GAAa;AAanB,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}