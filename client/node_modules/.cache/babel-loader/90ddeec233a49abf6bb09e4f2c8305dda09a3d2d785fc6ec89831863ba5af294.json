{"ast":null,"code":"// src/services/visionAnalysisService.ts\n\n// WIHY Scanner API Configuration\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\nclass VisionAnalysisService {\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\n  async analyzeImage(imageFile) {\n    try {\n      console.log('üîç Starting WIHY image analysis...');\n\n      // Get basic image information\n      const imageInfo = this.getImageInfo(imageFile);\n      console.log('Image info:', imageInfo);\n\n      // Use WIHY Scanner API for comprehensive food analysis\n      let wihyResult = null;\n      try {\n        console.log('Analyzing with WIHY Scanner API...');\n        wihyResult = await this.analyzeWithWihyAPI(imageFile);\n        console.log('WIHY Scanner analysis result:', wihyResult);\n      } catch (error) {\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n      if (wihyResult && wihyResult.success) {\n        return this.processWihyImageResponse(wihyResult, imageInfo);\n      } else {\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n    } catch (error) {\n      console.error('Vision analysis error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Analysis failed'\n      };\n    }\n  }\n\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\n  async analyzeWithWihyAPI(imageFile) {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('context', 'food_analysis');\n    const response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`WIHY API Error: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\n  processWihyImageResponse(wihyResult, imageInfo) {\n    var _nova_chart_reference, _wihy_analysis$family;\n    const {\n      success,\n      overall_assessment,\n      google_vision_analysis,\n      detected_foods,\n      nova_chart_reference,\n      wihy_recommendations,\n      wihy_analysis\n    } = wihyResult;\n    const healthScore = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.health_score) || 0;\n    const novaGroup = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.nova_group) || 4;\n    const verdict = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.verdict) || 'Analysis completed';\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference = nova_chart_reference.client_guidance) === null || _nova_chart_reference === void 0 ? void 0 : _nova_chart_reference.color_coding) || 'red';\n\n    // Extract detected foods\n    const foodItems = (detected_foods === null || detected_foods === void 0 ? void 0 : detected_foods.map(food => food.name || food)) || [];\n\n    // Extract recommendations and warnings\n    const recommendations = wihy_recommendations || [];\n    const warnings = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [];\n\n    // Determine if healthy based on NOVA group and health score\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family = wihy_analysis.family_safety) === null || _wihy_analysis$family === void 0 ? void 0 : _wihy_analysis$family.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: verdict,\n        foodItems: foodItems,\n        brands: [],\n        // Could extract from vision analysis\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\n        barcodes: [],\n        qrCodes: [],\n        text: (google_vision_analysis === null || google_vision_analysis === void 0 ? void 0 : google_vision_analysis.detected_text) || '',\n        imageInfo,\n        // WIHY Scanner specific data\n        healthScore,\n        novaGroup,\n        novaDescription: this.getNovaDescription(novaGroup),\n        isHealthy,\n        recommendations,\n        warnings,\n        familySafe,\n        colorCode,\n        verdict,\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\n      }\n    };\n  }\n\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\n  async fallbackAnalysis(imageFile, imageInfo) {\n    console.log('Using fallback analysis...');\n\n    // Try legacy WiHy API as fallback\n    let wihyAnalysis = '';\n    try {\n      var _wihyResult$data, _wihyResult$data$ai_r;\n      const {\n        wihyAPI\n      } = await import('./wihyAPI');\n      const wihyResult = await wihyAPI.scanFood(imageFile);\n      if (wihyResult.success && 'data' in wihyResult && (_wihyResult$data = wihyResult.data) !== null && _wihyResult$data !== void 0 && (_wihyResult$data$ai_r = _wihyResult$data.ai_response) !== null && _wihyResult$data$ai_r !== void 0 && _wihyResult$data$ai_r.response) {\n        wihyAnalysis = wihyResult.data.ai_response.response;\n      }\n    } catch (error) {\n      console.log('Legacy WiHy API also unavailable');\n    }\n\n    // Extract potential nutrition and food information\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\n    return {\n      success: true,\n      data: {\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\n        foodItems: foodAnalysis.foodItems,\n        brands: foodAnalysis.brands,\n        nutritionText: foodAnalysis.nutritionText,\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo,\n        // Default WIHY values for fallback\n        healthScore: 50,\n        novaGroup: 4,\n        novaDescription: 'Unknown processing level',\n        isHealthy: false,\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\n        warnings: ['Could not analyze product completely'],\n        familySafe: false,\n        colorCode: 'orange',\n        verdict: 'Analysis limited - choose natural foods',\n        dataSources: ['Local Analysis']\n      }\n    };\n  }\n\n  /**\r\n   * Get NOVA group description\r\n   */\n  getNovaDescription(novaGroup) {\n    const descriptions = {\n      1: 'Natural - Real food as God intended',\n      2: 'Processed - Use sparingly',\n      3: 'Highly Processed - Find alternatives',\n      4: 'Ultra-Processed - Your family deserves better'\n    };\n    return descriptions[novaGroup] || descriptions[4];\n  }\n\n  /**\r\n   * Get basic image file information\r\n   */\n  getImageInfo(file) {\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\n    return {\n      name: file.name,\n      size: `${sizeInMB} MB`,\n      type: file.type,\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\n    };\n  }\n\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\n  analyzeFoodContent(analysisText, imageInfo) {\n    const text = analysisText.toLowerCase();\n\n    // Common food keywords\n    const foodKeywords = ['apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef', 'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable', 'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'];\n\n    // Common brand keywords\n    const brandKeywords = ['coca cola', 'pepsi', 'nestl√©', 'kraft', 'kellogs', 'general mills', 'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'];\n\n    // Nutrition-related keywords\n    const nutritionKeywords = ['calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber', 'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'];\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\n    return {\n      foodItems: detectedFood,\n      brands: detectedBrands,\n      nutritionText: nutritionMentions.length > 0 ? `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : ''\n    };\n  }\n\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\n  async scanBarcode(barcode, userContext = {}) {\n    try {\n      console.log('üîç Scanning barcode with WIHY Scanner API:', barcode);\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: barcode,\n          user_context: {\n            scan_location: 'web_app',\n            device_type: 'browser',\n            ...userContext\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\n      }\n      const result = await response.json();\n      return this.processWihyBarcodeResponse(result, barcode);\n    } catch (error) {\n      console.error('Barcode scan failed:', error);\n      return this.handleBarcodeError(error, barcode);\n    }\n  }\n\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\n  processWihyBarcodeResponse(result, barcode) {\n    var _nova_chart_reference2, _wihy_analysis$family2;\n    const {\n      success,\n      nova_group,\n      nova_description,\n      nova_chart_reference,\n      health_score,\n      wihy_analysis,\n      data_sources,\n      product_name\n    } = result;\n    const isHealthy = nova_group <= 2 && health_score >= 60;\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference2 = nova_chart_reference.client_guidance) === null || _nova_chart_reference2 === void 0 ? void 0 : _nova_chart_reference2.color_coding) || 'red';\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family2 = wihy_analysis.family_safety) === null || _wihy_analysis$family2 === void 0 ? void 0 : _wihy_analysis$family2.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: product_name || `Product ${barcode}`,\n        foodItems: product_name ? [product_name] : [],\n        brands: [],\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\n        barcodes: [barcode],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: `Barcode-${barcode}`,\n          size: 'N/A',\n          type: 'barcode',\n          dimensions: 'N/A'\n        },\n        // WIHY Scanner specific data\n        healthScore: health_score,\n        novaGroup: nova_group,\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\n        isHealthy,\n        recommendations: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.wihy_recommendations) || [],\n        warnings: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [],\n        familySafe,\n        colorCode,\n        verdict: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.verdict) || this.getHealthVerdict(health_score, nova_group),\n        dataSources: data_sources || ['WIHY Enhanced DB']\n      }\n    };\n  }\n\n  /**\r\n   * Handle barcode scan errors\r\n   */\n  handleBarcodeError(error, barcode) {\n    return {\n      success: false,\n      error: error.message || 'Barcode scan failed',\n      data: {\n        description: 'Could not analyze product',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Analysis failed',\n        barcodes: [barcode],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: `Barcode-${barcode}`,\n          size: 'N/A',\n          type: 'barcode',\n          dimensions: 'N/A'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Analysis failed',\n        isHealthy: false,\n        recommendations: ['API Error - When in doubt, choose whole foods', 'Real food doesn\\'t need barcodes'],\n        warnings: ['Could not analyze product'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods when uncertain',\n        dataSources: ['Error - No data available']\n      }\n    };\n  }\n\n  /**\r\n   * Get health verdict based on scores\r\n   */\n  getHealthVerdict(healthScore, novaGroup) {\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\n    if (novaGroup === 3) return 'Caution - highly processed food';\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\n    return 'Choose whole foods for better health';\n  }\n\n  /**\r\n   * Format analysis results for display\r\n   */\n  formatForDisplay(result) {\n    if (!result.success || !result.data) {\n      return result.error || 'Analysis failed';\n    }\n    const {\n      data\n    } = result;\n    const parts = [];\n\n    // WIHY Scanner results\n    if (data.verdict) {\n      parts.push(`üéØ ${data.verdict}`);\n    }\n\n    // Health information\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\n      parts.push(`üìä Health Score: ${data.healthScore}/100`);\n      parts.push(`üè∑Ô∏è ${data.novaDescription}`);\n    }\n\n    // Detected foods\n    if (data.foodItems && data.foodItems.length > 0) {\n      parts.push(`üçé Detected: ${data.foodItems.join(', ')}`);\n    }\n\n    // Recommendations\n    if (data.recommendations && data.recommendations.length > 0) {\n      parts.push(`üí° Recommendations:`);\n      data.recommendations.forEach(rec => parts.push(`  ‚Ä¢ ${rec}`));\n    }\n\n    // Warnings\n    if (data.warnings && data.warnings.length > 0) {\n      parts.push(`‚ö†Ô∏è Warnings:`);\n      data.warnings.forEach(warning => parts.push(`  ‚Ä¢ ${warning}`));\n    }\n\n    // Data sources\n    if (data.dataSources && data.dataSources.length > 0) {\n      parts.push(`üìã Data from: ${data.dataSources.join(' ‚Ä¢ ')}`);\n    }\n\n    // Fallback to basic info\n    if (parts.length === 0) {\n      if (data.description) {\n        parts.push(data.description);\n      }\n      if (data.imageInfo) {\n        parts.push(`üìÅ ${data.imageInfo.name} (${data.imageInfo.size})`);\n      }\n    }\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\n  }\n\n  /**\r\n   * Get color coding for UI display\r\n   */\n  getColorCoding(result) {\n    var _result$data;\n    if (!result.success || !((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.colorCode)) {\n      return {\n        color: 'red',\n        label: 'ERROR',\n        action: 'TRY AGAIN'\n      };\n    }\n    const colorMap = {\n      'green': {\n        color: '#4CAF50',\n        label: 'CHOOSE',\n        action: 'Great choice!'\n      },\n      'yellow': {\n        color: '#FFEB3B',\n        label: 'MODERATE',\n        action: 'Use sparingly'\n      },\n      'orange': {\n        color: '#FF9800',\n        label: 'LIMIT',\n        action: 'Find alternatives'\n      },\n      'red': {\n        color: '#F44336',\n        label: 'AVOID',\n        action: 'Choose whole foods instead'\n      }\n    };\n    return colorMap[result.data.colorCode] || colorMap.red;\n  }\n}\nexport const visionAnalysisService = new VisionAnalysisService();","map":{"version":3,"names":["WIHY_API_BASE","VisionAnalysisService","analyzeImage","imageFile","console","log","imageInfo","getImageInfo","wihyResult","analyzeWithWihyAPI","error","fallbackAnalysis","success","processWihyImageResponse","Error","message","formData","FormData","append","response","fetch","method","body","ok","status","json","_nova_chart_reference","_wihy_analysis$family","overall_assessment","google_vision_analysis","detected_foods","nova_chart_reference","wihy_recommendations","wihy_analysis","healthScore","health_score","novaGroup","nova_group","verdict","colorCode","client_guidance","color_coding","foodItems","map","food","name","recommendations","warnings","carcinogen_warnings","isHealthy","familySafe","family_safety","safety_score","data","description","brands","nutritionText","barcodes","qrCodes","text","detected_text","novaDescription","getNovaDescription","dataSources","data_sources","wihyAnalysis","_wihyResult$data","_wihyResult$data$ai_r","wihyAPI","scanFood","ai_response","foodAnalysis","analyzeFoodContent","descriptions","file","sizeInMB","size","toFixed","type","dimensions","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","length","join","scanBarcode","barcode","userContext","headers","JSON","stringify","query","user_context","scan_location","device_type","result","processWihyBarcodeResponse","handleBarcodeError","_nova_chart_reference2","_wihy_analysis$family2","nova_description","product_name","getHealthVerdict","formatForDisplay","parts","push","undefined","forEach","rec","warning","getColorCoding","_result$data","color","label","action","colorMap","red","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n    // WIHY Scanner API fields\r\n    healthScore?: number;\r\n    novaGroup?: number;\r\n    novaDescription?: string;\r\n    isHealthy?: boolean;\r\n    recommendations?: string[];\r\n    warnings?: string[];\r\n    familySafe?: boolean;\r\n    colorCode?: string;\r\n    verdict?: string;\r\n    dataSources?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\n// WIHY Scanner API Configuration\r\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\r\n\r\nclass VisionAnalysisService {\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('üîç Starting WIHY image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // Use WIHY Scanner API for comprehensive food analysis\r\n      let wihyResult: any = null;\r\n      \r\n      try {\r\n        console.log('Analyzing with WIHY Scanner API...');\r\n        wihyResult = await this.analyzeWithWihyAPI(imageFile);\r\n        console.log('WIHY Scanner analysis result:', wihyResult);\r\n      } catch (error) {\r\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, imageInfo);\r\n      } else {\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  private async analyzeWithWihyAPI(imageFile: File): Promise<any> {\r\n    const formData = new FormData();\r\n    formData.append('image', imageFile);\r\n    formData.append('context', 'food_analysis');\r\n    \r\n    const response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n      method: 'POST',\r\n      body: formData\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`WIHY API Error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\r\n  private processWihyImageResponse(wihyResult: any, imageInfo: any): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      overall_assessment,\r\n      google_vision_analysis,\r\n      detected_foods,\r\n      nova_chart_reference,\r\n      wihy_recommendations,\r\n      wihy_analysis\r\n    } = wihyResult;\r\n\r\n    const healthScore = overall_assessment?.health_score || 0;\r\n    const novaGroup = overall_assessment?.nova_group || 4;\r\n    const verdict = overall_assessment?.verdict || 'Analysis completed';\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    \r\n    // Extract detected foods\r\n    const foodItems = detected_foods?.map((food: any) => food.name || food) || [];\r\n    \r\n    // Extract recommendations and warnings\r\n    const recommendations = wihy_recommendations || [];\r\n    const warnings = wihy_analysis?.carcinogen_warnings || [];\r\n    \r\n    // Determine if healthy based on NOVA group and health score\r\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: verdict,\r\n        foodItems: foodItems,\r\n        brands: [], // Could extract from vision analysis\r\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: google_vision_analysis?.detected_text || '',\r\n        imageInfo,\r\n        // WIHY Scanner specific data\r\n        healthScore,\r\n        novaGroup,\r\n        novaDescription: this.getNovaDescription(novaGroup),\r\n        isHealthy,\r\n        recommendations,\r\n        warnings,\r\n        familySafe,\r\n        colorCode,\r\n        verdict,\r\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\r\n  private async fallbackAnalysis(imageFile: File, imageInfo: any): Promise<VisionAnalysisResult> {\r\n    console.log('Using fallback analysis...');\r\n    \r\n    // Try legacy WiHy API as fallback\r\n    let wihyAnalysis = '';\r\n    \r\n    try {\r\n      const { wihyAPI } = await import('./wihyAPI');\r\n      const wihyResult = await wihyAPI.scanFood(imageFile);\r\n      \r\n      if (wihyResult.success && 'data' in wihyResult && wihyResult.data?.ai_response?.response) {\r\n        wihyAnalysis = wihyResult.data.ai_response.response;\r\n      }\r\n    } catch (error) {\r\n      console.log('Legacy WiHy API also unavailable');\r\n    }\r\n\r\n    // Extract potential nutrition and food information\r\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\r\n        foodItems: foodAnalysis.foodItems,\r\n        brands: foodAnalysis.brands,\r\n        nutritionText: foodAnalysis.nutritionText,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo,\r\n        // Default WIHY values for fallback\r\n        healthScore: 50,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown processing level',\r\n        isHealthy: false,\r\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\r\n        warnings: ['Could not analyze product completely'],\r\n        familySafe: false,\r\n        colorCode: 'orange',\r\n        verdict: 'Analysis limited - choose natural foods',\r\n        dataSources: ['Local Analysis']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group description\r\n   */\r\n  private getNovaDescription(novaGroup: number): string {\r\n    const descriptions = {\r\n      1: 'Natural - Real food as God intended',\r\n      2: 'Processed - Use sparingly',\r\n      3: 'Highly Processed - Find alternatives',\r\n      4: 'Ultra-Processed - Your family deserves better'\r\n    };\r\n    \r\n    return descriptions[novaGroup as keyof typeof descriptions] || descriptions[4];\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestl√©', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\r\n  async scanBarcode(barcode: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('üîç Scanning barcode with WIHY Scanner API:', barcode);\r\n      \r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: barcode,\r\n          user_context: {\r\n            scan_location: 'web_app',\r\n            device_type: 'browser',\r\n            ...userContext\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      return this.processWihyBarcodeResponse(result, barcode);\r\n      \r\n    } catch (error) {\r\n      console.error('Barcode scan failed:', error);\r\n      return this.handleBarcodeError(error, barcode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\r\n  private processWihyBarcodeResponse(result: any, barcode: string): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      nova_group,\r\n      nova_description,\r\n      nova_chart_reference,\r\n      health_score,\r\n      wihy_analysis,\r\n      data_sources,\r\n      product_name\r\n    } = result;\r\n    \r\n    const isHealthy = nova_group <= 2 && health_score >= 60;\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: product_name || `Product ${barcode}`,\r\n        foodItems: product_name ? [product_name] : [],\r\n        brands: [],\r\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        // WIHY Scanner specific data\r\n        healthScore: health_score,\r\n        novaGroup: nova_group,\r\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\r\n        isHealthy,\r\n        recommendations: wihy_analysis?.wihy_recommendations || [],\r\n        warnings: wihy_analysis?.carcinogen_warnings || [],\r\n        familySafe,\r\n        colorCode,\r\n        verdict: wihy_analysis?.verdict || this.getHealthVerdict(health_score, nova_group),\r\n        dataSources: data_sources || ['WIHY Enhanced DB']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle barcode scan errors\r\n   */\r\n  private handleBarcodeError(error: any, barcode: string): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Barcode scan failed',\r\n      data: {\r\n        description: 'Could not analyze product',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'API Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need barcodes'\r\n        ],\r\n        warnings: ['Could not analyze product'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health verdict based on scores\r\n   */\r\n  private getHealthVerdict(healthScore: number, novaGroup: number): string {\r\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\r\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\r\n    if (novaGroup === 3) return 'Caution - highly processed food';\r\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\r\n    return 'Choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // WIHY Scanner results\r\n    if (data.verdict) {\r\n      parts.push(`üéØ ${data.verdict}`);\r\n    }\r\n\r\n    // Health information\r\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\r\n      parts.push(`üìä Health Score: ${data.healthScore}/100`);\r\n      parts.push(`üè∑Ô∏è ${data.novaDescription}`);\r\n    }\r\n\r\n    // Detected foods\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`üçé Detected: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Recommendations\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      parts.push(`üí° Recommendations:`);\r\n      data.recommendations.forEach(rec => parts.push(`  ‚Ä¢ ${rec}`));\r\n    }\r\n\r\n    // Warnings\r\n    if (data.warnings && data.warnings.length > 0) {\r\n      parts.push(`‚ö†Ô∏è Warnings:`);\r\n      data.warnings.forEach(warning => parts.push(`  ‚Ä¢ ${warning}`));\r\n    }\r\n\r\n    // Data sources\r\n    if (data.dataSources && data.dataSources.length > 0) {\r\n      parts.push(`üìã Data from: ${data.dataSources.join(' ‚Ä¢ ')}`);\r\n    }\r\n\r\n    // Fallback to basic info\r\n    if (parts.length === 0) {\r\n      if (data.description) {\r\n        parts.push(data.description);\r\n      }\r\n      if (data.imageInfo) {\r\n        parts.push(`üìÅ ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n      }\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Get color coding for UI display\r\n   */\r\n  getColorCoding(result: VisionAnalysisResult): { color: string; label: string; action: string } {\r\n    if (!result.success || !result.data?.colorCode) {\r\n      return { color: 'red', label: 'ERROR', action: 'TRY AGAIN' };\r\n    }\r\n\r\n    const colorMap = {\r\n      'green': { color: '#4CAF50', label: 'CHOOSE', action: 'Great choice!' },\r\n      'yellow': { color: '#FFEB3B', label: 'MODERATE', action: 'Use sparingly' },\r\n      'orange': { color: '#FF9800', label: 'LIMIT', action: 'Find alternatives' },\r\n      'red': { color: '#F44336', label: 'AVOID', action: 'Choose whole foods instead' }\r\n    };\r\n\r\n    return colorMap[result.data.colorCode as keyof typeof colorMap] || colorMap.red;\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}