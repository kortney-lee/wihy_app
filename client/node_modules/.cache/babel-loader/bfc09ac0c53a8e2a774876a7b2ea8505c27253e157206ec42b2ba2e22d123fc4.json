{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { RestError } from \"./restError\";\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nvar XhrHttpClient = /** @class */function () {\n  function XhrHttpClient() {}\n  XhrHttpClient.prototype.sendRequest = function (request) {\n    var xhr = new XMLHttpRequest();\n    if (request.agentSettings) {\n      throw new Error(\"HTTP agent settings not supported in browser environment\");\n    }\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n    var abortSignal = request.abortSignal;\n    if (abortSignal) {\n      var listener_1 = function () {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener_1);\n      xhr.addEventListener(\"readystatechange\", function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener_1);\n        }\n      });\n    }\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n    if (request.formData) {\n      var formData = request.formData;\n      var requestForm_1 = new FormData();\n      var appendFormValue = function (key, value) {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm_1.append(key, value.value, value.options);\n        } else {\n          requestForm_1.append(key, value);\n        }\n      };\n      for (var _i = 0, _a = Object.keys(formData); _i < _a.length; _i++) {\n        var formKey = _a[_i];\n        var formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (var j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n      request.body = requestForm_1;\n      request.formData = undefined;\n      var contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (var _b = 0, _c = request.headers.headersArray(); _b < _c.length; _b++) {\n      var header = _c[_b];\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n    if (request.streamResponseBody) {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"readystatechange\", function () {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            var blobBody = new Promise(function (resolve, reject) {\n              xhr.addEventListener(\"load\", function () {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request: request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody: blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", function () {\n          return resolve({\n            request: request,\n            status: xhr.status,\n            headers: parseHeaders(xhr),\n            bodyAsText: xhr.responseText\n          });\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  };\n  return XhrHttpClient;\n}();\nexport { XhrHttpClient };\nfunction addProgressListener(xhr, listener) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", function (rawEvent) {\n      return listener({\n        loadedBytes: rawEvent.loaded\n      });\n    });\n  }\n}\n// exported locally for testing\nexport function parseHeaders(xhr) {\n  var responseHeaders = new HttpHeaders();\n  var headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n  for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {\n    var line = headerLines_1[_i];\n    var index = line.indexOf(\":\");\n    var headerName = line.slice(0, index);\n    var headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\nfunction rejectOnTerminalEvent(request, xhr, reject) {\n  xhr.addEventListener(\"error\", function () {\n    return reject(new RestError(\"Failed to send request to \" + request.url, RestError.REQUEST_SEND_ERROR, undefined, request));\n  });\n  xhr.addEventListener(\"abort\", function () {\n    return reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request));\n  });\n  xhr.addEventListener(\"timeout\", function () {\n    return reject(new RestError(\"timeout of \" + xhr.timeout + \"ms exceeded\", RestError.REQUEST_SEND_ERROR, undefined, request));\n  });\n}","map":{"version":3,"names":["HttpHeaders","RestError","XhrHttpClient","prototype","sendRequest","request","xhr","XMLHttpRequest","agentSettings","Error","proxySettings","abortSignal","listener_1","abort","addEventListener","readyState","DONE","removeEventListener","addProgressListener","upload","onUploadProgress","onDownloadProgress","formData","requestForm_1","FormData","appendFormValue","key","value","hasOwnProperty","append","options","_i","_a","Object","keys","length","formKey","formValue","Array","isArray","j","body","undefined","contentType","headers","get","indexOf","remove","open","method","url","timeout","withCredentials","_b","_c","headersArray","header","setRequestHeader","name","responseType","streamResponseBody","send","Promise","resolve","reject","HEADERS_RECEIVED","blobBody","response","rejectOnTerminalEvent","status","parseHeaders","bodyAsText","responseText","listener","rawEvent","loadedBytes","loaded","responseHeaders","headerLines","getAllResponseHeaders","trim","split","headerLines_1","line","index","headerName","slice","headerValue","set","REQUEST_SEND_ERROR","REQUEST_ABORTED_ERROR"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\xhrHttpClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResourceLike, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.agentSettings) {\n      throw new Error(\"HTTP agent settings not supported in browser environment\");\n    }\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody,\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", () =>\n          resolve({\n            request,\n            status: xhr.status,\n            headers: parseHeaders(xhr),\n            bodyAsText: xhr.responseText,\n          })\n        );\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(\n  xhr: XMLHttpRequestEventTarget,\n  listener?: (progress: TransferProgressEvent) => void\n) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", (rawEvent) =>\n      listener({\n        loadedBytes: rawEvent.loaded,\n      })\n    );\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr\n    .getAllResponseHeaders()\n    .trim()\n    .split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(\n  request: WebResourceLike,\n  xhr: XMLHttpRequest,\n  reject: (err: any) => void\n) {\n  xhr.addEventListener(\"error\", () =>\n    reject(\n      new RestError(\n        `Failed to send request to ${request.url}`,\n        RestError.REQUEST_SEND_ERROR,\n        undefined,\n        request\n      )\n    )\n  );\n  xhr.addEventListener(\"abort\", () =>\n    reject(\n      new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request)\n    )\n  );\n  xhr.addEventListener(\"timeout\", () =>\n    reject(\n      new RestError(\n        `timeout of ${xhr.timeout}ms exceeded`,\n        RestError.REQUEST_SEND_ERROR,\n        undefined,\n        request\n      )\n    )\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}