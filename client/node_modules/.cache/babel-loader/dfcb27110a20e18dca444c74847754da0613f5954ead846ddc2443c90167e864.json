{"ast":null,"code":"import axios from 'axios';\n\n// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'mayoclinic.org': 1,\n  'health.harvard.edu': 1\n};\n\n// Update API URL configuration\n\nclass NewsService {\n  // Smart endpoint selection based on environment\n  getEndpoints() {\n    const isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    if (isDevelopment) {\n      // In development: try the updated local API first, then other local ports as fallback\n      return ['http://localhost:5001/api/service',\n      // Updated API with proper mappings and images\n      'http://localhost:5000/api/news',\n      // Legacy local API\n      'http://localhost:8000/api/news',\n      // Alternative local API\n      'https://services.wihy.ai/api/news', 'https://ml-news-feed.graypebble-2c416c49.westus2.azurecontainerapps.io/api/news'];\n    } else {\n      // In production: try production endpoints first, local as fallback (for hybrid setups)\n      return ['https://services.wihy.ai/api/news', 'https://ml-news-feed.graypebble-2c416c49.westus2.azurecontainerapps.io/api/news', 'http://localhost:5001/api/service',\n      // Updated local API for hybrid setups\n      'http://localhost:5000/api/news', 'http://localhost:8000/api/news'];\n    }\n  }\n\n  // Get primary endpoint (first in list based on environment)\n  getNewsEndpoint() {\n    return this.getEndpoints()[0];\n  }\n\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\n  async getArticles(params = {}) {\n    try {\n      // Set defaults based on OpenAPI specification\n      const queryParams = {\n        limit: 50,\n        // Default from OpenAPI spec\n        quality: '1',\n        // Use quality=1 to get articles with good images\n        country: 'US',\n        // Default country\n        feed_priority: '1-10',\n        // Feed priority range as per spec\n        flat: 'true',\n        // Return flat structure\n        page: 1,\n        per_page: 12,\n        ...params // Override with any provided params\n      };\n\n      // Convert boolean flat to string for API\n      if (typeof queryParams.flat === 'boolean') {\n        queryParams.flat = queryParams.flat ? 'true' : 'false';\n      }\n      console.log('Fetching news with params:', queryParams);\n      let response;\n      let lastError;\n\n      // Try all endpoints in order until one works\n      const endpoints = this.getEndpoints();\n      const isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost';\n      console.log(`üåç Environment: ${isDevelopment ? 'Development' : 'Production'}`);\n      console.log(`üì° Endpoint priority order:`, endpoints);\n      for (let i = 0; i < endpoints.length; i++) {\n        try {\n          const endpoint = endpoints[i];\n          console.log(`üîÑ Trying endpoint ${i + 1}/${endpoints.length}: ${endpoint}`);\n\n          // Set timeout based on endpoint type (local vs remote)\n          const isLocal = endpoint.includes('localhost');\n          const timeout = isLocal ? 3000 : 8000; // 3s for local, 8s for remote\n\n          response = await axios.get(`${endpoint}/articles`, {\n            params: queryParams,\n            timeout: timeout,\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n          console.log('‚úÖ Endpoint successful:', endpoint);\n          break;\n        } catch (error) {\n          lastError = error;\n          const isTimeout = error.code === 'ECONNABORTED';\n          const isNetworkError = error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED';\n          console.warn(`‚ùå Endpoint ${i + 1} failed:`, endpoints[i]);\n          console.warn(`   Error type: ${isTimeout ? 'Timeout' : isNetworkError ? 'Network' : 'Other'}`);\n          console.warn(`   Error details:`, error.message);\n\n          // If this is the last endpoint, throw the error\n          if (i === endpoints.length - 1) {\n            throw error;\n          }\n        }\n      }\n\n      // Process the response to add compatibility fields\n      const apiResponse = response.data;\n\n      // Map API articles to client format\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\n      }\n      return apiResponse;\n    } catch (error) {\n      console.error('Error fetching news articles:', error);\n      return {\n        success: false,\n        articles: [],\n        count: 0,\n        pagination: {\n          total_items: 0,\n          total_pages: 0,\n          current_page: 1,\n          per_page: 12,\n          has_next_page: false,\n          has_prev_page: false\n        },\n        filters_applied: {\n          category: null,\n          country: null,\n          feed_id: null,\n          limit: 0\n        },\n        error: error instanceof Error ? error.message : 'Unknown error',\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\n      };\n    }\n  }\n\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\n  adaptArticleForClient(article) {\n    return {\n      ...article,\n      // Add compatibility fields\n      url: article.link || article.url,\n      summary: article.description || article.summary,\n      publishedDate: article.published_date || article.publishedDate,\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\n      imageUrl: article.image_url || article.imageUrl,\n      hasMedia: article.has_image || article.hasMedia,\n      hasAuthor: article.has_author || article.hasAuthor,\n      readingTime: article.reading_time || article.readingTime,\n      wordCount: article.word_count || article.wordCount\n    };\n  }\n\n  /**\r\n   * Get available news categories from articles endpoint\r\n   */\n  async getCategories() {\n    try {\n      // Use the articles endpoint to get category data by checking available categories\n      // Based on the OpenAPI spec, categories are: tech, business, science, health, sports, entertainment, politics, world\n      return ['tech', 'business', 'science', 'health', 'sports', 'entertainment', 'politics', 'world'];\n    } catch (error) {\n      console.error('Error fetching news categories:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Get available countries from articles endpoint\r\n   */\n  async getCountries() {\n    try {\n      // Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\n      return [{\n        code: 'US',\n        name: 'United States'\n      }, {\n        code: 'IN',\n        name: 'India'\n      }, {\n        code: 'UK',\n        name: 'United Kingdom'\n      }, {\n        code: 'CA',\n        name: 'Canada'\n      }, {\n        code: 'AU',\n        name: 'Australia'\n      }, {\n        code: 'DE',\n        name: 'Germany'\n      }, {\n        code: 'FR',\n        name: 'France'\n      }, {\n        code: 'JP',\n        name: 'Japan'\n      }];\n    } catch (error) {\n      console.error('Error fetching countries:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Calculate trust score based on domain\r\n   */\n  calculateTrustScore(article) {\n    if (!article.domain) return 0.5;\n    return TRUSTED_DOMAINS[article.domain] || TRUSTED_DOMAINS[`www.${article.domain}`] || 0.5;\n  }\n}\nexport const newsService = new NewsService();\n\n// Update these functions to improve category filtering and sort by date\n\nexport const fetchNewsFeed = async (categories, limit) => {\n  // First, set up the API request parameters\n  const params = {};\n\n  // Only add category parameter if categories array is non-empty\n  if (categories && categories.length > 0) {\n    params.category = categories.join(',');\n  }\n\n  // Request more articles than needed for better sorting/filtering\n  params.limit = limit ? limit * 2 : 50;\n\n  // Note: Sorting is handled by the API internally, no sort parameters needed\n\n  console.log('Fetching news with params:', params);\n\n  // Fetch articles from API\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // Define priority categories in exact order\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n\n    // Sort articles by our priority scheme\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\n\n    // Limit to requested count after sorting\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Log first few articles to verify order\n    console.log('Articles returned after prioritization:');\n    limitedArticles.slice(0, 5).forEach((article, i) => {\n      console.log(`  ${i + 1}. [${article.category || 'uncategorized'}]: ${article.title}`);\n    });\n\n    // Return a modified response with our prioritized articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n// Add the prioritization function to the newsService file\nfunction sortArticlesByPriority(articles, priorityCategories) {\n  // Create a copy of the articles array\n  const sortedArticles = [...articles];\n\n  // Define a function to get priority score (lower is higher priority)\n  const getPriorityScore = article => {\n    const category = article.category || '';\n    const categoryLower = category.toLowerCase();\n\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\n    // Check if it's explicitly categorized as tech\n    if (categoryLower === 'tech' || categoryLower.includes('technology') || categoryLower.includes('computing') || categoryLower.includes('it ') || categoryLower.includes('software')) {\n      console.log(`üëâ Found tech article, assigning lowest priority: ${article.title}`);\n      return 1000; // Tech should be shown last\n    }\n\n    // 1. Exact match with priority categories (in strict order)\n    for (let i = 0; i < priorityCategories.length; i++) {\n      if (category === priorityCategories[i]) {\n        return i; // Return the exact index position (0, 1, 2, etc.)\n      }\n    }\n\n    // 2. Partial match with priority categories\n    for (let i = 0; i < priorityCategories.length; i++) {\n      if (category.includes(priorityCategories[i])) {\n        return i + 20; // Still keep order but with lower priority than exact matches\n      }\n    }\n\n    // 3. Check for health-related keywords in title/description\n    const title = article.title || '';\n    const description = article.description || '';\n    const content = title + ' ' + description;\n    const contentLower = content.toLowerCase();\n    const healthKeywords = ['health', 'medical', 'medicine', 'doctor', 'patient', 'hospital', 'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet', 'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine', 'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'];\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\n      return 100; // All health-related content after categorized content\n    }\n\n    // 4. Check for tech keywords in title/description if not already caught above\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', 'ai', 'artificial intelligence', 'computer', 'code', 'programming', 'developer', 'cybersecurity', 'digital', 'internet', 'smartphone', 'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft', 'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\n    if (techKeywords.some(keyword => contentLower.includes(keyword))) {\n      // Extra debug log for tech content detection\n      console.log(`üëâ Found tech content by keyword, assigning lowest priority: ${article.title}`);\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\n    }\n\n    // 5. Everything else (general content)\n    return 500;\n  };\n\n  // Sort articles by priority score\n  sortedArticles.sort((a, b) => {\n    const priorityA = getPriorityScore(a);\n    const priorityB = getPriorityScore(b);\n\n    // First sort by priority category\n    if (priorityA !== priorityB) {\n      return priorityA - priorityB;\n    }\n\n    // If same priority category, sort by date (newest first)\n    const dateA = a.publishedDate || a.published_date;\n    const dateB = b.publishedDate || b.published_date;\n    if (dateA && dateB) {\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\n    }\n    return 0;\n  });\n\n  // Add debug information to see what categories are being returned\n  console.log('Article order after prioritization:');\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\n    // Show the priority score as part of the debugging\n    const score = getPriorityScore(article);\n    const category = article.category || 'uncategorized';\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\n  });\n  return sortedArticles;\n}\n\n// Update getArticlesByCategory to use the same prioritization logic\n\nexport const getArticlesByCategory = async (category, limit) => {\n  if (category === 'all') {\n    return fetchNewsFeed([], limit);\n  }\n  const params = {\n    category,\n    limit: limit ? Math.round(limit * 1.5) : 20,\n    // Fetch a few more than needed\n    quality: '1' // Get quality articles with good images\n  };\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // For category views, we still want to sort by date but within the category\n    const sortedArticles = response.articles.sort((a, b) => {\n      const dateA = a.publishedDate || a.published_date;\n      const dateB = b.publishedDate || b.published_date;\n      if (dateA && dateB) {\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\n      }\n      return 0;\n    });\n\n    // Limit to requested count\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Return a modified response with our sorted articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n// Add these functions at the end of the file\n\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\nexport const refreshNewsFeed = async (categories, limit) => {\n  const timestamp = new Date().getTime();\n  const params = {\n    timestamp,\n    // Add timestamp to bust cache\n    limit: limit || 50\n  };\n  if (categories && categories.length > 0) {\n    params.category = categories.join(',');\n  }\n\n  // Use quality parameter for better articles\n  params.quality = '1';\n  console.log('Refreshing news feed with timestamp:', timestamp);\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // Use the same priority sorting as fetchNewsFeed\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\n\n    // Limit to requested count after sorting\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Return a modified response with our prioritized articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n/**\r\n * Search for news articles based on query\r\n */\nexport const searchNewsArticles = async (query, limit) => {\n  if (!query || query.trim() === '') {\n    // If no query, return empty results\n    return {\n      success: true,\n      articles: [],\n      count: 0,\n      pagination: {\n        total_items: 0,\n        total_pages: 0,\n        current_page: 1,\n        per_page: 12,\n        has_next_page: false,\n        has_prev_page: false\n      },\n      filters_applied: {\n        category: null,\n        country: null,\n        feed_id: null,\n        limit: 0\n      }\n    };\n  }\n  const params = {\n    query: query.trim(),\n    limit: limit || 50,\n    quality: '1' // Get quality articles with good images for search\n  };\n  console.log(`Searching news articles with query: \"${query}\"`);\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // For search results, we want to prioritize by relevance to search term\n    // But still use our priority categories as a secondary sort\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n\n    // Sort articles based on search relevance and category\n    const sortedArticles = response.articles.sort((a, b) => {\n      // First, prioritize by relevance score if available\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\n        if (a.relevanceScore !== b.relevanceScore) {\n          return b.relevanceScore - a.relevanceScore;\n        }\n      }\n\n      // If relevance scores are the same, use our category priority\n      const categoryA = a.category || '';\n      const categoryB = b.category || '';\n\n      // Check if categories are in our priority list\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\n\n      // If both categories are in priority list\n      if (indexA >= 0 && indexB >= 0) {\n        if (indexA !== indexB) {\n          return indexA - indexB;\n        }\n      }\n      // If only one category is in priority list\n      else if (indexA >= 0) {\n        return -1;\n      } else if (indexB >= 0) {\n        return 1;\n      }\n\n      // Finally, sort by date\n      const dateA = a.publishedDate || a.published_date;\n      const dateB = b.publishedDate || b.published_date;\n      if (dateA && dateB) {\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\n      }\n      return 0;\n    });\n\n    // Limit to requested count\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","NewsService","getEndpoints","isDevelopment","process","env","NODE_ENV","window","location","hostname","getNewsEndpoint","getArticles","params","queryParams","limit","quality","country","feed_priority","flat","page","per_page","console","log","response","lastError","endpoints","i","length","endpoint","isLocal","includes","timeout","get","headers","error","isTimeout","code","isNetworkError","warn","message","apiResponse","data","articles","map","article","adaptArticleForClient","success","count","pagination","total_items","total_pages","current_page","has_next_page","has_prev_page","filters_applied","category","feed_id","Error","url","link","summary","description","publishedDate","published_date","thumbnailUrl","thumbnail","imageUrl","image_url","hasMedia","has_image","hasAuthor","has_author","readingTime","reading_time","wordCount","word_count","getCategories","getCountries","name","calculateTrustScore","domain","newsService","fetchNewsFeed","categories","join","priorityCategories","sortedArticles","sortArticlesByPriority","limitedArticles","slice","forEach","title","getPriorityScore","categoryLower","toLowerCase","content","contentLower","healthKeywords","some","keyword","techKeywords","sort","a","b","priorityA","priorityB","dateA","dateB","Date","getTime","idx","score","getArticlesByCategory","Math","round","refreshNewsFeed","timestamp","searchNewsArticles","query","trim","relevanceScore","undefined","categoryA","categoryB","indexA","findIndex","cat","indexB"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nimport { getApiEndpoint } from '../config/apiConfig';\r\n\r\nexport interface NewsArticle {\r\n  // API response fields from OpenAPI spec\r\n  id: string;                        // Unique article identifier\r\n  title: string;                     // Article title\r\n  description: string;               // Article description/summary\r\n  link: string;                      // Article URL\r\n  author: string;                    // Article author\r\n  published_date: string;            // Publication date (ISO format)\r\n  thumbnail: string;                 // Thumbnail image URL\r\n  image_url: string;                 // Main image URL\r\n  has_image: boolean;                // Whether article has images\r\n  has_author: boolean;               // Whether article has author info\r\n  category: string;                  // Article category/topic\r\n  source: string;                    // Source publication name\r\n  feed_id: number;                   // RSS feed ID\r\n  feed_priority: string;             // Feed priority level\r\n  reading_time: number;              // Estimated reading time in minutes\r\n  word_count: number;                // Article word count\r\n  time_ago: string;                  // Human-readable time since publication\r\n  is_recent: boolean;                // Published within last 24 hours\r\n  content_quality: 'high' | 'medium' | 'low';  // Content quality assessment\r\n  completeness: 'complete' | 'partial' | 'minimal';  // Data completeness\r\n  domain: string;                    // Source domain\r\n  extracted_at: string;              // When article was extracted\r\n  \r\n  // Quality mode fields (when quality=1)\r\n  mapped_category?: string;          // Client-friendly mapped category\r\n  \r\n  // Client-side compatibility fields\r\n  url?: string;\r\n  summary?: string;\r\n  publishedDate?: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  tags?: string[];\r\n  relevanceScore?: number;\r\n  hasMedia?: boolean;\r\n  readingTime?: number;\r\n  wordCount?: number;\r\n  mediaType?: string;\r\n  contentLength?: number;   // Added to match client usage\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  pagination: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: boolean;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n    quality?: string;                // Added from OpenAPI spec\r\n  };\r\n  // Quality mode field (when quality=1)\r\n  flagged_for_review?: Array<{\r\n    id: number;\r\n    title: string;\r\n    reason: string;\r\n    category: string;\r\n  }>;\r\n  error?: string; // Added to handle errors from the API\r\n  message?: string; // For backward compatibility\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;                    // Number of articles to return (1-500)\r\n  quality?: string;                  // '1' or 'true' for quality articles with good images\r\n  category?: string;                 // Filter by category (tech, business, science, health, etc.)\r\n  country?: string;                  // Filter by country code (US, IN, UK, CA, AU, DE, FR, JP)\r\n  feed_id?: number;                  // Filter by specific feed ID\r\n  feed_priority?: string;            // Filter by feed priority (single, range, or comma-separated)\r\n  flat?: string | boolean;           // Return flat structure ('true'/'false')\r\n  page?: number;                     // Page number (starts at 1)\r\n  per_page?: number;                 // Number of articles per page (1-100)\r\n  timestamp?: number;                // Added to support refreshNewsFeed\r\n  query?: string;                    // Added to support searchNewsArticles (not in OpenAPI but used internally)\r\n}\r\n\r\nclass NewsService {\r\n  // Smart endpoint selection based on environment\r\n  private getEndpoints() {\r\n    const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                         window.location.hostname === 'localhost' ||\r\n                         window.location.hostname === '127.0.0.1';\r\n    \r\n    if (isDevelopment) {\r\n      // In development: try the updated local API first, then other local ports as fallback\r\n      return [\r\n        'http://localhost:5001/api/service',  // Updated API with proper mappings and images\r\n        'http://localhost:5000/api/news',     // Legacy local API\r\n        'http://localhost:8000/api/news',     // Alternative local API\r\n        'https://services.wihy.ai/api/news',\r\n        'https://ml-news-feed.graypebble-2c416c49.westus2.azurecontainerapps.io/api/news'\r\n      ];\r\n    } else {\r\n      // In production: try production endpoints first, local as fallback (for hybrid setups)\r\n      return [\r\n        'https://services.wihy.ai/api/news',\r\n        'https://ml-news-feed.graypebble-2c416c49.westus2.azurecontainerapps.io/api/news',\r\n        'http://localhost:5001/api/service',  // Updated local API for hybrid setups\r\n        'http://localhost:5000/api/news',\r\n        'http://localhost:8000/api/news'\r\n      ];\r\n    }\r\n  }\r\n\r\n  // Get primary endpoint (first in list based on environment)\r\n  private getNewsEndpoint() {\r\n    return this.getEndpoints()[0];\r\n  }\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Set defaults based on OpenAPI specification\r\n      const queryParams: any = {\r\n        limit: 50,                    // Default from OpenAPI spec\r\n        quality: '1',                 // Use quality=1 to get articles with good images\r\n        country: 'US',                // Default country\r\n        feed_priority: '1-10',        // Feed priority range as per spec\r\n        flat: 'true',                 // Return flat structure\r\n        page: 1,\r\n        per_page: 12,\r\n        ...params // Override with any provided params\r\n      };\r\n\r\n      // Convert boolean flat to string for API\r\n      if (typeof queryParams.flat === 'boolean') {\r\n        queryParams.flat = queryParams.flat ? 'true' : 'false';\r\n      }\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      let response;\r\n      let lastError;\r\n      \r\n      // Try all endpoints in order until one works\r\n      const endpoints = this.getEndpoints();\r\n      const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                           window.location.hostname === 'localhost';\r\n      \r\n      console.log(`üåç Environment: ${isDevelopment ? 'Development' : 'Production'}`);\r\n      console.log(`üì° Endpoint priority order:`, endpoints);\r\n      \r\n      for (let i = 0; i < endpoints.length; i++) {\r\n        try {\r\n          const endpoint = endpoints[i];\r\n          console.log(`üîÑ Trying endpoint ${i + 1}/${endpoints.length}: ${endpoint}`);\r\n          \r\n          // Set timeout based on endpoint type (local vs remote)\r\n          const isLocal = endpoint.includes('localhost');\r\n          const timeout = isLocal ? 3000 : 8000; // 3s for local, 8s for remote\r\n          \r\n          response = await axios.get(`${endpoint}/articles`, { \r\n            params: queryParams,\r\n            timeout: timeout,\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n          \r\n          console.log('‚úÖ Endpoint successful:', endpoint);\r\n          break;\r\n        } catch (error) {\r\n          lastError = error;\r\n          const isTimeout = error.code === 'ECONNABORTED';\r\n          const isNetworkError = error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED';\r\n          \r\n          console.warn(`‚ùå Endpoint ${i + 1} failed:`, endpoints[i]);\r\n          console.warn(`   Error type: ${isTimeout ? 'Timeout' : isNetworkError ? 'Network' : 'Other'}`);\r\n          console.warn(`   Error details:`, error.message);\r\n          \r\n          // If this is the last endpoint, throw the error\r\n          if (i === endpoints.length - 1) {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Process the response to add compatibility fields\r\n      const apiResponse = response.data as NewsFeedResponse;\r\n      \r\n      // Map API articles to client format\r\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n      }\r\n      \r\n      return apiResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 12,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Add compatibility fields\r\n      url: article.link || article.url,\r\n      summary: article.description || article.summary,\r\n      publishedDate: article.published_date || article.publishedDate,\r\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\r\n      imageUrl: article.image_url || article.imageUrl,\r\n      hasMedia: article.has_image || article.hasMedia,\r\n      hasAuthor: article.has_author || article.hasAuthor,\r\n      readingTime: article.reading_time || article.readingTime,\r\n      wordCount: article.word_count || article.wordCount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories from articles endpoint\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      // Use the articles endpoint to get category data by checking available categories\r\n      // Based on the OpenAPI spec, categories are: tech, business, science, health, sports, entertainment, politics, world\r\n      return ['tech', 'business', 'science', 'health', 'sports', 'entertainment', 'politics', 'world'];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries from articles endpoint\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\r\n      return [\r\n        { code: 'US', name: 'United States' },\r\n        { code: 'IN', name: 'India' },\r\n        { code: 'UK', name: 'United Kingdom' },\r\n        { code: 'CA', name: 'Canada' },\r\n        { code: 'AU', name: 'Australia' },\r\n        { code: 'DE', name: 'Germany' },\r\n        { code: 'FR', name: 'France' },\r\n        { code: 'JP', name: 'Japan' }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    if (!article.domain) return 0.5;\r\n    \r\n    return TRUSTED_DOMAINS[article.domain] || \r\n           TRUSTED_DOMAINS[`www.${article.domain}`] || \r\n           0.5;\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  // First, set up the API request parameters\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Request more articles than needed for better sorting/filtering\r\n  params.limit = limit ? limit * 2 : 50;\r\n  \r\n  // Note: Sorting is handled by the API internally, no sort parameters needed\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  \r\n  // Fetch articles from API\r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Define priority categories in exact order\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles by our priority scheme\r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Log first few articles to verify order\r\n    console.log('Articles returned after prioritization:');\r\n    limitedArticles.slice(0, 5).forEach((article, i) => {\r\n      console.log(`  ${i+1}. [${article.category || 'uncategorized'}]: ${article.title}`);\r\n    });\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add the prioritization function to the newsService file\r\nfunction sortArticlesByPriority(articles: NewsArticle[], priorityCategories: string[]): NewsArticle[] {\r\n  // Create a copy of the articles array\r\n  const sortedArticles = [...articles];\r\n  \r\n  // Define a function to get priority score (lower is higher priority)\r\n  const getPriorityScore = (article: NewsArticle): number => {\r\n    const category = article.category || '';\r\n    const categoryLower = category.toLowerCase();\r\n    \r\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\r\n    // Check if it's explicitly categorized as tech\r\n    if (categoryLower === 'tech' || \r\n        categoryLower.includes('technology') || \r\n        categoryLower.includes('computing') || \r\n        categoryLower.includes('it ') || \r\n        categoryLower.includes('software')) {\r\n      console.log(`üëâ Found tech article, assigning lowest priority: ${article.title}`);\r\n      return 1000; // Tech should be shown last\r\n    }\r\n    \r\n    // 1. Exact match with priority categories (in strict order)\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category === priorityCategories[i]) {\r\n        return i; // Return the exact index position (0, 1, 2, etc.)\r\n      }\r\n    }\r\n    \r\n    // 2. Partial match with priority categories\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category.includes(priorityCategories[i])) {\r\n        return i + 20; // Still keep order but with lower priority than exact matches\r\n      }\r\n    }\r\n    \r\n    // 3. Check for health-related keywords in title/description\r\n    const title = article.title || '';\r\n    const description = article.description || '';\r\n    const content = title + ' ' + description;\r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const healthKeywords = [\r\n      'health', 'medical', 'medicine', 'doctor', 'patient', 'hospital',\r\n      'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet',\r\n      'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine',\r\n      'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'\r\n    ];\r\n    \r\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\r\n      return 100; // All health-related content after categorized content\r\n    }\r\n    \r\n    // 4. Check for tech keywords in title/description if not already caught above\r\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', \r\n                        'ai', 'artificial intelligence', 'computer', 'code', 'programming',\r\n                        'developer', 'cybersecurity', 'digital', 'internet', 'smartphone',\r\n                        'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft',\r\n                        'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\r\n    \r\n    if (techKeywords.some(keyword => \r\n      contentLower.includes(keyword)\r\n    )) {\r\n      // Extra debug log for tech content detection\r\n      console.log(`üëâ Found tech content by keyword, assigning lowest priority: ${article.title}`);\r\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\r\n    }\r\n    \r\n    // 5. Everything else (general content)\r\n    return 500; \r\n  };\r\n  \r\n  // Sort articles by priority score\r\n  sortedArticles.sort((a, b) => {\r\n    const priorityA = getPriorityScore(a);\r\n    const priorityB = getPriorityScore(b);\r\n    \r\n    // First sort by priority category\r\n    if (priorityA !== priorityB) {\r\n      return priorityA - priorityB;\r\n    }\r\n    \r\n    // If same priority category, sort by date (newest first)\r\n    const dateA = a.publishedDate || a.published_date;\r\n    const dateB = b.publishedDate || b.published_date;\r\n    \r\n    if (dateA && dateB) {\r\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n  \r\n  // Add debug information to see what categories are being returned\r\n  console.log('Article order after prioritization:');\r\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\r\n    // Show the priority score as part of the debugging\r\n    const score = getPriorityScore(article);\r\n    const category = article.category || 'uncategorized';\r\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\r\n  });\r\n  \r\n  return sortedArticles;\r\n}\r\n\r\n// Update getArticlesByCategory to use the same prioritization logic\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (category === 'all') {\r\n    return fetchNewsFeed([], limit);\r\n  }\r\n  \r\n  const params: NewsQueryParams = { \r\n    category, \r\n    limit: limit ? Math.round(limit * 1.5) : 20, // Fetch a few more than needed\r\n    quality: '1' // Get quality articles with good images\r\n  };\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For category views, we still want to sort by date but within the category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our sorted articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add these functions at the end of the file\r\n\r\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\r\nexport const refreshNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  const timestamp = new Date().getTime();\r\n  const params: NewsQueryParams = {\r\n    timestamp, // Add timestamp to bust cache\r\n    limit: limit || 50\r\n  };\r\n  \r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Use quality parameter for better articles\r\n  params.quality = '1';\r\n  \r\n  console.log('Refreshing news feed with timestamp:', timestamp);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Use the same priority sorting as fetchNewsFeed\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * Search for news articles based on query\r\n */\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (!query || query.trim() === '') {\r\n    // If no query, return empty results\r\n    return {\r\n      success: true,\r\n      articles: [],\r\n      count: 0,\r\n      pagination: {\r\n        total_items: 0,\r\n        total_pages: 0,\r\n        current_page: 1,\r\n        per_page: 12,\r\n        has_next_page: false,\r\n        has_prev_page: false\r\n      },\r\n      filters_applied: {\r\n        category: null,\r\n        country: null,\r\n        feed_id: null,\r\n        limit: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  const params: NewsQueryParams = {\r\n    query: query.trim(),\r\n    limit: limit || 50,\r\n    quality: '1' // Get quality articles with good images for search\r\n  };\r\n  \r\n  console.log(`Searching news articles with query: \"${query}\"`);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For search results, we want to prioritize by relevance to search term\r\n    // But still use our priority categories as a secondary sort\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles based on search relevance and category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      // First, prioritize by relevance score if available\r\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\r\n        if (a.relevanceScore !== b.relevanceScore) {\r\n          return b.relevanceScore - a.relevanceScore;\r\n        }\r\n      }\r\n      \r\n      // If relevance scores are the same, use our category priority\r\n      const categoryA = a.category || '';\r\n      const categoryB = b.category || '';\r\n      \r\n      // Check if categories are in our priority list\r\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\r\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\r\n      \r\n      // If both categories are in priority list\r\n      if (indexA >= 0 && indexB >= 0) {\r\n        if (indexA !== indexB) {\r\n          return indexA - indexB;\r\n        }\r\n      } \r\n      // If only one category is in priority list\r\n      else if (indexA >= 0) {\r\n        return -1;\r\n      } else if (indexB >= 0) {\r\n        return 1;\r\n      }\r\n      \r\n      // Finally, sort by date\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}