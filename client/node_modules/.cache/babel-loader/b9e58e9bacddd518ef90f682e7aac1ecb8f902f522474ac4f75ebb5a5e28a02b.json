{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{API_CONFIG,getApiEndpoint}from'../config/apiConfig';import{logger}from'../utils/logger';// Dynamic endpoint that adapts to environment\nconst getWihyApiEndpoint=function(){let path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'/ask';return getApiEndpoint(path);};// Types for the WiHy API (updated to match OpenAPI specification v4.0.0)\n// Chart data structure from OpenAPI spec\n// Core response data structure from OpenAPI spec\n// Main response structure from OpenAPI spec\n// Keep the old interface for backward compatibility\n// Interface for the /scan endpoint\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj){return obj&&typeof obj==='object'&&'data'in obj&&'service_used'in obj;}// Legacy types for backward compatibility\nclass WihyAPIService{constructor(){this.baseURL=void 0;this.isLocalDevelopment=void 0;this.baseURL=getWihyApiEndpoint('/ask');this.isLocalDevelopment=API_CONFIG.WIHY_API_URL.includes('localhost');// 🔍 DEBUG: Show which endpoint is being used\nconsole.log('🔍 WIHY API SERVICE INITIALIZED:',{baseURL:this.baseURL,isLocalDevelopment:this.isLocalDevelopment,API_CONFIG_URL:API_CONFIG.WIHY_API_URL});}/**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */async askAnything(request){// 🔍 WIHY API LOGGING: Request initiated\nconst requestStartTime=performance.now();console.log('🔍 WIHY API REQUEST INITIATED:',{timestamp:new Date().toISOString(),component:'wihyAPI',action:'requestInitiated',query:request.query,requestType:'user_context'in request?'WihyRequest':'UnifiedRequest',hasUserContext:'user_context'in request?!!request.user_context:!!request.context,isLocalDev:this.isLocalDevelopment});try{var _data$data;logger.apiRequest('Making WiHy Unified API request',request);let requestBody;let endpoint;// Both local and remote APIs use the same /ask endpoint with HealthQuestion format\nendpoint=this.isLocalDevelopment?this.baseURL:\"\".concat(API_CONFIG.WIHY_API_URL,\"/ask\");// Build HealthQuestion object according to OpenAPI spec\nif('user_context'in request){requestBody={query:request.query,user_context:request.user_context||{},include_nutrition:true,include_biblical_wisdom:false,include_charts:true};}else{const unifiedReq=request;requestBody={query:unifiedReq.query,user_context:unifiedReq.context||unifiedReq.user_context||{},include_nutrition:unifiedReq.include_nutrition!==false,include_biblical_wisdom:unifiedReq.include_biblical_wisdom===true,include_charts:unifiedReq.include_charts!==false};}// Use fetch API to match the working example exactly with timeout\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 second timeout\n// 🔍 WIHY API LOGGING: Fetch request starting\nconsole.log('🔍 WIHY API FETCH START:',{timestamp:new Date().toISOString(),component:'wihyAPI',action:'fetchRequestStart',endpoint:endpoint,requestBody:{query:requestBody.query,include_nutrition:requestBody.include_nutrition,include_biblical_wisdom:requestBody.include_biblical_wisdom,include_charts:requestBody.include_charts,hasUserContext:!!requestBody.user_context},timeout:'30000ms'});const response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody),signal:controller.signal});clearTimeout(timeoutId);// 🔍 WIHY API LOGGING: Fetch response received\nconst requestDuration=performance.now()-requestStartTime;console.log('🔍 WIHY API FETCH RESPONSE:',{timestamp:new Date().toISOString(),component:'wihyAPI',action:'fetchResponseReceived',status:response.status,statusText:response.statusText,ok:response.ok,duration:\"\".concat(requestDuration.toFixed(2),\"ms\"),headers:{contentType:response.headers.get('content-type'),contentLength:response.headers.get('content-length')}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();// 🔍 WIHY API LOGGING: Response parsed successfully\nconsole.log('🔍 WIHY API RESPONSE PARSED:',{timestamp:new Date().toISOString(),component:'wihyAPI',action:'responseParsedSuccess',dataType:typeof data,hasSuccess:!!data.success,hasData:!!data.data,hasResponse:!!((_data$data=data.data)!==null&&_data$data!==void 0&&_data$data.response),dataKeys:Object.keys(data),duration:\"\".concat((performance.now()-requestStartTime).toFixed(2),\"ms\"),query:request.query});logger.apiResponse('WiHy Unified API response received',data);return data;}catch(error){// 🔍 WIHY API LOGGING: Error occurred\nconsole.log('🔍 WIHY API ERROR:',{timestamp:new Date().toISOString(),component:'wihyAPI',action:'apiError',errorType:error instanceof Error?error.name:typeof error,errorMessage:error instanceof Error?error.message:String(error),duration:\"\".concat((performance.now()-requestStartTime).toFixed(2),\"ms\"),query:request.query});logger.error('WiHy API error:',error);if(error instanceof Error){// Check for timeout/abort errors\nif(error.name==='AbortError'){throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');}// Check for CORS errors\nif(error.message.includes('CORS')||error.message.includes('Access to fetch')||error.message.includes('No \\'Access-Control-Allow-Origin\\'')){throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');}// Check for network/connectivity issues (including mobile-specific issues)\nif(error.message.includes('fetch')||error.message.includes('network')||error.name==='TypeError'||error.message.includes('Failed to fetch')){// Provide mobile-specific guidance\nconst isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);const baseMessage='NETWORK_ERROR: Unable to connect to WiHy services';if(isMobile){throw new Error(\"\".concat(baseMessage,\". For mobile testing, ensure your device and development machine are on the same network, and set REACT_APP_WIHY_API_URL to your machine's IP address (e.g., http://192.168.1.100:8000).\"));}else{throw new Error(\"\".concat(baseMessage,\". Check if the API server is running on the configured endpoint.\"));}}// Check for server errors\nif(error.message.includes('HTTP error! status: 5')){throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');}throw new Error(error.message||'WiHy API request failed');}throw new Error('Unknown error occurred while contacting WiHy API');}}/**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */convertToLegacyFormat(unifiedResponse,originalQuery){var _unifiedResponse$data,_unifiedResponse$data2,_unifiedResponse$data3,_unifiedResponse$data4;// Handle chat service response\nif(unifiedResponse.service_used==='chat'&&unifiedResponse.data.response){return{success:unifiedResponse.success,timestamp:new Date().toISOString(),response_type:unifiedResponse.request_type||'chat',query:originalQuery,wihy_response:{query_type:unifiedResponse.request_type||'chat',query:originalQuery,core_principle:unifiedResponse.data.response,personalized_analysis:{identified_risk_factors:[],priority_health_goals:[unifiedResponse.data.response],action_items:[{action:unifiedResponse.data.response,priority:'medium',target_illness:'general_health',evidence_level:'ai_generated',mechanism:'chat_response',timeline:'immediate'}],timeline:'immediate'},research_foundation:[{citation_text:'WiHy AI Chat System',study_type:'ai_response',key_finding:unifiedResponse.data.response}],progress_tracking:{key_metrics:['general_health'],reassessment_period:'1 week'},biblical_wisdom:[]},message:unifiedResponse.data.response};}// Handle other service types (training, nutrition, etc.)\nreturn{success:unifiedResponse.success,timestamp:new Date().toISOString(),response_type:unifiedResponse.request_type||'health',query:originalQuery,wihy_response:{query_type:unifiedResponse.request_type||'health',query:originalQuery,core_principle:unifiedResponse.data.analysis||unifiedResponse.data.response||'Health Information',personalized_analysis:{identified_risk_factors:[],priority_health_goals:[],action_items:((_unifiedResponse$data=unifiedResponse.data.recommendations)===null||_unifiedResponse$data===void 0?void 0:(_unifiedResponse$data2=_unifiedResponse$data.immediate_actions)===null||_unifiedResponse$data2===void 0?void 0:_unifiedResponse$data2.map((rec,index)=>({action:rec,priority:'medium',target_illness:'general_health',evidence_level:'moderate',mechanism:'lifestyle_modification',timeline:'ongoing'})))||((_unifiedResponse$data3=unifiedResponse.data.legacy_recommendations)===null||_unifiedResponse$data3===void 0?void 0:_unifiedResponse$data3.map((rec,index)=>({action:rec,priority:'medium',target_illness:'general_health',evidence_level:'moderate',mechanism:'lifestyle_modification',timeline:'ongoing'})))||[],timeline:'ongoing'},research_foundation:((_unifiedResponse$data4=unifiedResponse.data.sources)===null||_unifiedResponse$data4===void 0?void 0:_unifiedResponse$data4.map(source=>({citation_text:source,study_type:'research',key_finding:source})))||[],progress_tracking:{key_metrics:['general_health'],reassessment_period:'1 month'},biblical_wisdom:[]},message:unifiedResponse.data.response||unifiedResponse.data.analysis||'Health information provided'};}/**\r\n   * Get health news articles using the unified API\r\n   */async getHealthNews(categories,limit){const query=categories&&categories.length>0?\"Latest health news about \".concat(categories.join(', ')):'Latest health news';const request={query:query,request_type:'health',context:{categories:categories,limit:limit}};const response=await this.askAnything(request);if('data'in response){// It's a UnifiedResponse, convert to legacy format\nreturn this.convertToLegacyFormat(response,query);}return response;}/**\r\n   * Search for nutrition information using the unified API\r\n   */async searchNutrition(foodQuery,userContext){const request={query:\"Nutrition information for \".concat(foodQuery),request_type:'nutrition',context:userContext||{}};const response=await this.askAnything(request);if('data'in response){// It's a UnifiedResponse, convert to legacy format\nreturn this.convertToLegacyFormat(response,request.query);}return response;}/**\r\n   * Scan food images, barcodes, or products using the unified API\r\n   */async scanFood(file,scanOptions){try{let endpoint;let requestBody;if(this.isLocalDevelopment){// Local API uses /scan endpoint\nendpoint=\"\".concat(API_CONFIG.WIHY_API_URL,\"/scan\");if(file){// Convert file to base64 for the API\nconst base64=await this.fileToBase64(file);requestBody=_objectSpread({image_base64:base64,user_context:(scanOptions===null||scanOptions===void 0?void 0:scanOptions.user_context)||{}},scanOptions);}else{requestBody=scanOptions||{};}}else{// Remote API - fallback to legacy image analysis\n// This would need to be implemented based on what the remote API supports\nthrow new Error('Image scanning not yet supported on remote API');}const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);const response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();logger.apiResponse('WiHy Scan API response received',data);return data;}catch(error){logger.error('WiHy Scan API error:',error);throw error;}}/**\r\n   * Convert File to base64 string\r\n   */fileToBase64(file){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.readAsDataURL(file);reader.onload=()=>{const result=reader.result;// Remove the data:image/jpeg;base64, prefix\nconst base64=result.split(',')[1];resolve(base64);};reader.onerror=error=>reject(error);});}/**\r\n   * Scan food image - alias for scanFood for compatibility\r\n   */async scanFoodImage(file,scanOptions){return this.scanFood(file,scanOptions);}/**\r\n   * Ask health question - compatibility method\r\n   */async askHealthQuestion(request){var _wihyResp$wihy_respon;const unifiedRequest={query:request.query,request_type:'health',context:{}};const response=await this.askAnything(unifiedRequest);// Ensure we return a HealthQuestionResponse format\nif('success'in response&&'data'in response){return response;}// Convert WihyResponse to HealthQuestionResponse format\nconst wihyResp=response;const timestamp=Date.now();return{success:wihyResp.success,timestamp:new Date().toISOString(),endpoint:'/health/question',data:{query:request.query,timestamp:timestamp,response:((_wihyResp$wihy_respon=wihyResp.wihy_response)===null||_wihyResp$wihy_respon===void 0?void 0:_wihyResp$wihy_respon.core_principle)||wihyResp.message,processor_used:'wihy_api',processing_time:100,nutrition_data:{},health_insights:{key_benefits:[],potential_risks:[],recommendations:[]},biblical_wisdom:{},charts_data:{nutrition_breakdown:{chart_type:'pie',labels:[],values:[],colors:[]},health_quality:{chart_type:'bar',labels:[],values:[],colors:[]}}}};}/**\r\n   * General health search using the unified API\r\n   */async searchHealth(query,userContext){const request={query:query,request_type:'auto',context:userContext||{}};const response=await this.askAnything(request);// Return the raw response (could be legacy WihyResponse or UnifiedResponse)\nreturn response;}/**\r\n   * Enhanced analysis method for special cases (compatibility method)\r\n   */async analyzeWithWiHy(query,userContext,source){const request={query:query,request_type:'auto',context:_objectSpread({enhanced_analysis:true,source:source},userContext)};const response=await this.askAnything(request);return response;}/**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */formatWihyResponse(response){var _wihy_response$resear,_wihy_response$biblic;// Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\nif('success'in response&&'data'in response&&response.data&&'response'in response.data&&'processor_used'in response.data){const healthResp=response;const data=healthResp.data;let formatted=\"# WiHy Health Intelligence\\n\\n\";// Main response content\nformatted+=data.response;// Add health insights if available\nif(data.health_insights){var _data$health_insights,_data$health_insights2,_data$health_insights3;if((_data$health_insights=data.health_insights.key_benefits)!==null&&_data$health_insights!==void 0&&_data$health_insights.length){formatted+=\"\\n\\n## \\uD83C\\uDF1F Key Benefits\\n\";data.health_insights.key_benefits.forEach(benefit=>{formatted+=\"- \".concat(benefit,\"\\n\");});}if((_data$health_insights2=data.health_insights.potential_risks)!==null&&_data$health_insights2!==void 0&&_data$health_insights2.length){formatted+=\"\\n\\n## \\u26A0\\uFE0F Potential Risks\\n\";data.health_insights.potential_risks.forEach(risk=>{formatted+=\"- \".concat(risk,\"\\n\");});}if((_data$health_insights3=data.health_insights.recommendations)!==null&&_data$health_insights3!==void 0&&_data$health_insights3.length){formatted+=\"\\n\\n## \\uD83D\\uDCCB Recommendations\\n\";data.health_insights.recommendations.forEach(rec=>{formatted+=\"- \".concat(rec,\"\\n\");});}}// Add processing info\nformatted+=\"\\n\\n---\\n\\n*Processed by \".concat(data.processor_used,\" in \").concat(data.processing_time.toFixed(2),\"ms*\");return formatted;}// Handle UnifiedResponse format (legacy API)\nif('success'in response&&'data'in response&&response.data&&'ai_response'in response.data){var _unifiedResp$data$ai_;const unifiedResp=response;let formatted=\"# WiHy Health Assistant\\n\\n\";// Use the ai_response.response field which contains the actual response\nif(unifiedResp.data.ai_response&&unifiedResp.data.ai_response.response){formatted+=unifiedResp.data.ai_response.response;}else{// Fallback to showing raw data if ai_response is not available\nformatted+=\"**Data:**\\n```json\\n\".concat(JSON.stringify(unifiedResp.data,null,2),\"\\n```\");}// Add service information if available\nif((_unifiedResp$data$ai_=unifiedResp.data.ai_response)!==null&&_unifiedResp$data$ai_!==void 0&&_unifiedResp$data$ai_.service){formatted+=\"\\n\\n---\\n\\n*Response from \".concat(unifiedResp.data.ai_response.service,\" service*\");if(unifiedResp.data.ai_response.confidence){formatted+=\" (Confidence: \".concat(Math.round(unifiedResp.data.ai_response.confidence*100),\"%)\");}}return formatted;}// Handle legacy WihyResponse format\nconst legacyResp=response;const{wihy_response}=legacyResp;let formatted=\"# \".concat(wihy_response.core_principle,\"\\n\\n\");// Personalized Analysis\nif(wihy_response.personalized_analysis){var _wihy_response$person,_wihy_response$person2,_wihy_response$person3;formatted+=\"## \\uD83C\\uDFAF Personalized Health Analysis\\n\\n\";// Risk Factors\nif(((_wihy_response$person=wihy_response.personalized_analysis.identified_risk_factors)===null||_wihy_response$person===void 0?void 0:_wihy_response$person.length)>0){formatted+=\"### Identified Risk Factors:\\n\";wihy_response.personalized_analysis.identified_risk_factors.forEach(risk=>{formatted+=\"- **\".concat(risk.risk_factor.replace(/_/g,' ').toUpperCase(),\"**\\n\");formatted+=\"  - Associated with: \".concat(risk.associated_illnesses.replace(/_/g,' '),\"\\n\");formatted+=\"  - Prevalence: \".concat(risk.prevalence_rate,\"%\\n\");formatted+=\"  - Preventability: \".concat(risk.preventability_score,\"%\\n\\n\");});}// Priority Goals\nif(((_wihy_response$person2=wihy_response.personalized_analysis.priority_health_goals)===null||_wihy_response$person2===void 0?void 0:_wihy_response$person2.length)>0){formatted+=\"### \\uD83C\\uDFAF Priority Health Goals:\\n\";wihy_response.personalized_analysis.priority_health_goals.forEach(goal=>{formatted+=\"- \".concat(goal,\"\\n\");});formatted+='\\n';}// Action Items\nif(((_wihy_response$person3=wihy_response.personalized_analysis.action_items)===null||_wihy_response$person3===void 0?void 0:_wihy_response$person3.length)>0){formatted+=\"### \\uD83D\\uDCCB Action Items:\\n\";wihy_response.personalized_analysis.action_items.forEach((action,index)=>{formatted+=\"#### \".concat(index+1,\". \").concat(action.action,\"\\n\");formatted+=\"- **Priority:** \".concat(action.priority,\"\\n\");formatted+=\"- **Target:** \".concat(action.target_illness.replace(/_/g,' '),\"\\n\");formatted+=\"- **Evidence Level:** \".concat(action.evidence_level,\"\\n\");formatted+=\"- **How it works:** \".concat(action.mechanism,\"\\n\");formatted+=\"- **Timeline:** \".concat(action.timeline,\"\\n\\n\");});}// Timeline\nif(wihy_response.personalized_analysis.timeline){formatted+=\"**Implementation Timeline:** \".concat(wihy_response.personalized_analysis.timeline,\"\\n\\n\");}}// Research Foundation\nif(((_wihy_response$resear=wihy_response.research_foundation)===null||_wihy_response$resear===void 0?void 0:_wihy_response$resear.length)>0){formatted+=\"## \\uD83D\\uDCDA Research Foundation\\n\\n\";wihy_response.research_foundation.forEach(research=>{formatted+=\"- **\".concat(research.citation_text,\"** (\").concat(research.study_type,\")\\n\");formatted+=\"  \".concat(research.key_finding,\"\\n\\n\");});}// Progress Tracking\nif(wihy_response.progress_tracking){formatted+=\"## \\uD83D\\uDCCA Progress Tracking\\n\\n\";formatted+=\"**Key Metrics to Track:**\\n\";wihy_response.progress_tracking.key_metrics.forEach(metric=>{formatted+=\"- \".concat(metric,\"\\n\");});formatted+=\"\\n**Reassessment:** \".concat(wihy_response.progress_tracking.reassessment_period,\"\\n\\n\");}// Biblical Wisdom\nif(((_wihy_response$biblic=wihy_response.biblical_wisdom)===null||_wihy_response$biblic===void 0?void 0:_wihy_response$biblic.length)>0){formatted+=\"## \\u271D\\uFE0F Biblical Wisdom\\n\\n\";wihy_response.biblical_wisdom.forEach(wisdom=>{formatted+=\"> \".concat(wisdom,\"\\n\\n\");});}// Add timestamp if available (different field names in different response formats)\nconst timestamp=response.timestamp||response.created_at||new Date().toISOString();formatted+=\"---\\n\\n*WiHy health truth analysis generated at: \".concat(new Date(timestamp).toLocaleString(),\"*\\n\");return formatted;}/**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */extractRecommendations(response){const recommendations=[];// Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\nif('success'in response&&'data'in response&&response.data&&'health_insights'in response.data){const healthResp=response;if(healthResp.data.health_insights.recommendations){healthResp.data.health_insights.recommendations.forEach(r=>recommendations.push(r));}return recommendations;}if(isUnifiedResponse(response)){// Handle new structured recommendations\nif(response.data.recommendations){const recs=response.data.recommendations;if(recs.immediate_actions)recs.immediate_actions.forEach(r=>recommendations.push(r));if(recs.lifestyle_changes)recs.lifestyle_changes.forEach(r=>recommendations.push(r));if(recs.better_alternatives)recs.better_alternatives.forEach(r=>recommendations.push(r));if(recs.shopping_tips)recs.shopping_tips.forEach(r=>recommendations.push(r));if(recs.meal_planning)recs.meal_planning.forEach(r=>recommendations.push(r));}// Handle legacy recommendations\nif(response.data.legacy_recommendations&&response.data.legacy_recommendations.length>0){response.data.legacy_recommendations.forEach(r=>recommendations.push(r));}}else{var _legacyResp$wihy_resp;// Handle legacy WihyResponse format\nconst legacyResp=response;if(legacyResp.wihy_response&&(_legacyResp$wihy_resp=legacyResp.wihy_response.personalized_analysis)!==null&&_legacyResp$wihy_resp!==void 0&&_legacyResp$wihy_resp.action_items){legacyResp.wihy_response.personalized_analysis.action_items.forEach(action=>{recommendations.push(\"\".concat(action.action,\" (\").concat(action.priority,\" priority)\"));});}}return recommendations;}/**\r\n   * Extract citations from WiHy response for UI display\r\n   */extractCitations(response){const citations=[];// Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\nif('success'in response&&'data'in response&&response.data&&'processor_used'in response.data){// For now, the new API doesn't include specific citation fields in the schema\n// We could parse citations from the response text if needed\nreturn citations;}if(isUnifiedResponse(response)){// Unified API may include sources array\nif(response.data.sources&&response.data.sources.length>0){response.data.sources.forEach(s=>citations.push(s));}}else{// Handle legacy WihyResponse format\nconst legacyResp=response;if(legacyResp.wihy_response&&legacyResp.wihy_response.research_foundation){legacyResp.wihy_response.research_foundation.forEach(research=>{citations.push(\"\".concat(research.citation_text,\": \").concat(research.key_finding));});}}return citations;}/**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */formatUnifiedResponseForChat(response){// Handle chat service responses\nif(response.service_used==='chat'&&response.data.response){// For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n// We should provide more helpful information to the user\nconst briefResponse=response.data.response;if(briefResponse.includes('AI Chat response to:')){// The API gave us a placeholder response, provide something more useful\nconst query=response.data.query||'your question';return\"I received your question about \\\"\".concat(query,\"\\\" and I'm here to help! \\n\\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\\n\\n\\u2022 Understanding health and nutrition concepts\\n\\u2022 Providing general wellness guidance  \\n\\u2022 Explaining health data and metrics\\n\\u2022 Offering evidence-based health insights\\n\\nWhat specific aspect of health would you like to explore further?\");}return briefResponse;}// Handle other response types\nif(response.data.response){return response.data.response;}if(response.data.analysis){return response.data.analysis;}if(response.data.training_status){let message=\"\\uD83D\\uDD04 \".concat(response.data.training_status);if(response.data.available_models&&response.data.available_models.length>0){message+=\"\\n\\n\\uD83D\\uDCCA Available models: \".concat(response.data.available_models.join(', '));}return message;}// Fallback - show the raw data in a readable format\nreturn\"I received a response from the \".concat(response.service_used,\" service. Here's what I found:\\n\\n\").concat(JSON.stringify(response.data,null,2));}/**\r\n   * Format response for display - compatibility alias for formatWihyResponse\r\n   */formatResponse(response){return this.formatWihyResponse(response);}}// Export a singleton instance\nexport const wihyAPI=new WihyAPIService();export default wihyAPI;","map":{"version":3,"names":["API_CONFIG","getApiEndpoint","logger","getWihyApiEndpoint","path","arguments","length","undefined","isUnifiedResponse","obj","WihyAPIService","constructor","baseURL","isLocalDevelopment","WIHY_API_URL","includes","console","log","API_CONFIG_URL","askAnything","request","requestStartTime","performance","now","timestamp","Date","toISOString","component","action","query","requestType","hasUserContext","user_context","context","isLocalDev","_data$data","apiRequest","requestBody","endpoint","concat","include_nutrition","include_biblical_wisdom","include_charts","unifiedReq","controller","AbortController","timeoutId","setTimeout","abort","timeout","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","requestDuration","status","statusText","ok","duration","toFixed","contentType","get","contentLength","Error","data","json","dataType","hasSuccess","success","hasData","hasResponse","dataKeys","Object","keys","apiResponse","error","errorType","name","errorMessage","message","String","isMobile","test","navigator","userAgent","baseMessage","convertToLegacyFormat","unifiedResponse","originalQuery","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","response_type","request_type","wihy_response","query_type","core_principle","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","analysis","recommendations","immediate_actions","map","rec","index","legacy_recommendations","sources","source","getHealthNews","categories","limit","join","searchNutrition","foodQuery","userContext","scanFood","file","scanOptions","base64","fileToBase64","_objectSpread","image_base64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","scanFoodImage","askHealthQuestion","_wihyResp$wihy_respon","unifiedRequest","wihyResp","processor_used","processing_time","nutrition_data","health_insights","key_benefits","potential_risks","charts_data","nutrition_breakdown","chart_type","labels","values","colors","health_quality","searchHealth","analyzeWithWiHy","enhanced_analysis","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","healthResp","formatted","_data$health_insights","_data$health_insights2","_data$health_insights3","forEach","benefit","risk","_unifiedResp$data$ai_","unifiedResp","ai_response","service","confidence","Math","round","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","risk_factor","replace","toUpperCase","associated_illnesses","prevalence_rate","preventability_score","goal","research","metric","wisdom","created_at","toLocaleString","extractRecommendations","r","push","recs","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_legacyResp$wihy_resp","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","training_status","available_models","formatResponse","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Dynamic endpoint that adapts to environment\r\nconst getWihyApiEndpoint = (path: string = '/ask') => {\r\n  return getApiEndpoint(path);\r\n};\r\n\r\n// Types for the WiHy API (updated to match OpenAPI specification v4.0.0)\r\nexport interface HealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n  include_nutrition?: boolean;            // OPTIONAL: Include nutrition analysis (default: true)\r\n  include_biblical_wisdom?: boolean;      // OPTIONAL: Include biblical wisdom (default: true)\r\n  include_charts?: boolean;               // OPTIONAL: Include chart data (default: true)\r\n}\r\n\r\n// Chart data structure from OpenAPI spec\r\nexport interface ChartData {\r\n  chart_type: string;\r\n  labels: string[];\r\n  values: number[];\r\n  colors: string[];\r\n  verdict?: string;\r\n  reasons?: string[];\r\n}\r\n\r\nexport interface ChartsData {\r\n  nutrition_breakdown?: ChartData;\r\n  health_quality?: ChartData;\r\n}\r\n\r\nexport interface HealthInsights {\r\n  key_benefits?: string[];\r\n  potential_risks?: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\n// Core response data structure from OpenAPI spec\r\nexport interface ProcessedHealthData {\r\n  query: string;\r\n  timestamp: number;\r\n  processor_used: string;\r\n  processing_time: number;\r\n  response: string;\r\n  nutrition_data: Record<string, any>;\r\n  health_insights: HealthInsights;\r\n  biblical_wisdom: Record<string, any>;\r\n  charts_data: ChartsData;\r\n}\r\n\r\n// Main response structure from OpenAPI spec\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ProcessedHealthData;\r\n}\r\n\r\n// Keep the old interface for backward compatibility\r\nexport interface UnifiedRequest extends HealthQuestion {\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train';\r\n  context?: Record<string, any>;\r\n  user_id?: string;\r\n  session_id?: string;\r\n}\r\n\r\n// Interface for the /scan endpoint\r\nexport interface ScanRequest {\r\n  image_url?: string;                     // OPTIONAL: URL to image\r\n  image_base64?: string;                  // OPTIONAL: Base64 encoded image\r\n  product_name?: string;                  // OPTIONAL: Product name to scan\r\n  barcode?: string;                       // OPTIONAL: Barcode/UPC to scan  \r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n  private isLocalDevelopment: boolean;\r\n\r\n  constructor() {\r\n    this.baseURL = getWihyApiEndpoint('/ask');\r\n    this.isLocalDevelopment = API_CONFIG.WIHY_API_URL.includes('localhost');\r\n    \r\n    // 🔍 DEBUG: Show which endpoint is being used\r\n    console.log('🔍 WIHY API SERVICE INITIALIZED:', {\r\n      baseURL: this.baseURL,\r\n      isLocalDevelopment: this.isLocalDevelopment,\r\n      API_CONFIG_URL: API_CONFIG.WIHY_API_URL\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    // 🔍 WIHY API LOGGING: Request initiated\r\n    const requestStartTime = performance.now();\r\n    console.log('🔍 WIHY API REQUEST INITIATED:', {\r\n      timestamp: new Date().toISOString(),\r\n      component: 'wihyAPI',\r\n      action: 'requestInitiated',\r\n      query: request.query,\r\n      requestType: 'user_context' in request ? 'WihyRequest' : 'UnifiedRequest',\r\n      hasUserContext: 'user_context' in request ? !!request.user_context : !!(request as any).context,\r\n      isLocalDev: this.isLocalDevelopment\r\n    });\r\n    \r\n    try {\r\n      logger.apiRequest('Making WiHy Unified API request', request);\r\n      \r\n      let requestBody: any;\r\n      let endpoint: string;\r\n      \r\n      // Both local and remote APIs use the same /ask endpoint with HealthQuestion format\r\n      endpoint = this.isLocalDevelopment ? this.baseURL : `${API_CONFIG.WIHY_API_URL}/ask`;\r\n      \r\n      // Build HealthQuestion object according to OpenAPI spec\r\n      if ('user_context' in request) {\r\n        requestBody = {\r\n          query: request.query,\r\n          user_context: request.user_context || {},\r\n          include_nutrition: true,\r\n          include_biblical_wisdom: false,\r\n          include_charts: true\r\n        };\r\n      } else {\r\n        const unifiedReq = request as UnifiedRequest;\r\n        requestBody = {\r\n          query: unifiedReq.query,\r\n          user_context: unifiedReq.context || unifiedReq.user_context || {},\r\n          include_nutrition: unifiedReq.include_nutrition !== false,\r\n          include_biblical_wisdom: unifiedReq.include_biblical_wisdom === true,\r\n          include_charts: unifiedReq.include_charts !== false\r\n        };\r\n      }\r\n      \r\n      // Use fetch API to match the working example exactly with timeout\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      // 🔍 WIHY API LOGGING: Fetch request starting\r\n      console.log('🔍 WIHY API FETCH START:', {\r\n        timestamp: new Date().toISOString(),\r\n        component: 'wihyAPI',\r\n        action: 'fetchRequestStart',\r\n        endpoint: endpoint,\r\n        requestBody: {\r\n          query: requestBody.query,\r\n          include_nutrition: requestBody.include_nutrition,\r\n          include_biblical_wisdom: requestBody.include_biblical_wisdom,\r\n          include_charts: requestBody.include_charts,\r\n          hasUserContext: !!requestBody.user_context\r\n        },\r\n        timeout: '30000ms'\r\n      });\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n      \r\n      // 🔍 WIHY API LOGGING: Fetch response received\r\n      const requestDuration = performance.now() - requestStartTime;\r\n      console.log('🔍 WIHY API FETCH RESPONSE:', {\r\n        timestamp: new Date().toISOString(),\r\n        component: 'wihyAPI',\r\n        action: 'fetchResponseReceived',\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        ok: response.ok,\r\n        duration: `${requestDuration.toFixed(2)}ms`,\r\n        headers: {\r\n          contentType: response.headers.get('content-type'),\r\n          contentLength: response.headers.get('content-length')\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // 🔍 WIHY API LOGGING: Response parsed successfully\r\n      console.log('🔍 WIHY API RESPONSE PARSED:', {\r\n        timestamp: new Date().toISOString(),\r\n        component: 'wihyAPI',\r\n        action: 'responseParsedSuccess',\r\n        dataType: typeof data,\r\n        hasSuccess: !!data.success,\r\n        hasData: !!data.data,\r\n        hasResponse: !!(data.data?.response),\r\n        dataKeys: Object.keys(data),\r\n        duration: `${(performance.now() - requestStartTime).toFixed(2)}ms`,\r\n        query: request.query\r\n      });\r\n      \r\n      logger.apiResponse('WiHy Unified API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      // 🔍 WIHY API LOGGING: Error occurred\r\n      console.log('🔍 WIHY API ERROR:', {\r\n        timestamp: new Date().toISOString(),\r\n        component: 'wihyAPI',\r\n        action: 'apiError',\r\n        errorType: error instanceof Error ? error.name : typeof error,\r\n        errorMessage: error instanceof Error ? error.message : String(error),\r\n        duration: `${(performance.now() - requestStartTime).toFixed(2)}ms`,\r\n        query: request.query\r\n      });\r\n      \r\n      logger.error('WiHy API error:', error);\r\n      \r\n      if (error instanceof Error) {\r\n        // Check for timeout/abort errors\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');\r\n        }\r\n        \r\n        // Check for CORS errors\r\n        if (error.message.includes('CORS') || \r\n            error.message.includes('Access to fetch') ||\r\n            error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n          throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');\r\n        }\r\n        \r\n        // Check for network/connectivity issues (including mobile-specific issues)\r\n        if (error.message.includes('fetch') || \r\n            error.message.includes('network') || \r\n            error.name === 'TypeError' ||\r\n            error.message.includes('Failed to fetch')) {\r\n          \r\n          // Provide mobile-specific guidance\r\n          const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n          const baseMessage = 'NETWORK_ERROR: Unable to connect to WiHy services';\r\n          \r\n          if (isMobile) {\r\n            throw new Error(`${baseMessage}. For mobile testing, ensure your device and development machine are on the same network, and set REACT_APP_WIHY_API_URL to your machine's IP address (e.g., http://192.168.1.100:8000).`);\r\n          } else {\r\n            throw new Error(`${baseMessage}. Check if the API server is running on the configured endpoint.`);\r\n          }\r\n        }\r\n        \r\n        // Check for server errors\r\n        if (error.message.includes('HTTP error! status: 5')) {\r\n          throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');\r\n        }\r\n        \r\n        throw new Error(error.message || 'WiHy API request failed');\r\n      }\r\n      \r\n      throw new Error('Unknown error occurred while contacting WiHy API');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type || 'chat',\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type || 'chat',\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type || 'health',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type || 'health',\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Scan food images, barcodes, or products using the unified API\r\n   */\r\n  async scanFood(file?: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      let endpoint: string;\r\n      let requestBody: any;\r\n      \r\n      if (this.isLocalDevelopment) {\r\n        // Local API uses /scan endpoint\r\n        endpoint = `${API_CONFIG.WIHY_API_URL}/scan`;\r\n        \r\n        if (file) {\r\n          // Convert file to base64 for the API\r\n          const base64 = await this.fileToBase64(file);\r\n          requestBody = {\r\n            image_base64: base64,\r\n            user_context: scanOptions?.user_context || {},\r\n            ...scanOptions\r\n          };\r\n        } else {\r\n          requestBody = scanOptions || {};\r\n        }\r\n      } else {\r\n        // Remote API - fallback to legacy image analysis\r\n        // This would need to be implemented based on what the remote API supports\r\n        throw new Error('Image scanning not yet supported on remote API');\r\n      }\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000);\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Scan API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Scan API error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert File to base64 string\r\n   */\r\n  private fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        // Remove the data:image/jpeg;base64, prefix\r\n        const base64 = result.split(',')[1];\r\n        resolve(base64);\r\n      };\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Scan food image - alias for scanFood for compatibility\r\n   */\r\n  async scanFoodImage(file: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    return this.scanFood(file, scanOptions);\r\n  }\r\n\r\n  /**\r\n   * Ask health question - compatibility method\r\n   */\r\n  async askHealthQuestion(request: { query: string }): Promise<HealthQuestionResponse> {\r\n    const unifiedRequest: UnifiedRequest = {\r\n      query: request.query,\r\n      request_type: 'health',\r\n      context: {}\r\n    };\r\n\r\n    const response = await this.askAnything(unifiedRequest);\r\n    \r\n    // Ensure we return a HealthQuestionResponse format\r\n    if ('success' in response && 'data' in response) {\r\n      return response as HealthQuestionResponse;\r\n    }\r\n    \r\n    // Convert WihyResponse to HealthQuestionResponse format\r\n    const wihyResp = response as WihyResponse;\r\n    const timestamp = Date.now();\r\n    \r\n    return {\r\n      success: wihyResp.success,\r\n      timestamp: new Date().toISOString(),\r\n      endpoint: '/health/question',\r\n      data: {\r\n        query: request.query,\r\n        timestamp: timestamp,\r\n        response: wihyResp.wihy_response?.core_principle || wihyResp.message,\r\n        processor_used: 'wihy_api',\r\n        processing_time: 100,\r\n        nutrition_data: {},\r\n        health_insights: {\r\n          key_benefits: [],\r\n          potential_risks: [],\r\n          recommendations: []\r\n        },\r\n        biblical_wisdom: {},\r\n        charts_data: {\r\n          nutrition_breakdown: {\r\n            chart_type: 'pie',\r\n            labels: [],\r\n            values: [],\r\n            colors: []\r\n          },\r\n          health_quality: {\r\n            chart_type: 'bar',\r\n            labels: [],\r\n            values: [],\r\n            colors: []\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Enhanced analysis method for special cases (compatibility method)\r\n   */\r\n  async analyzeWithWiHy(query: string, userContext?: UserContext, source?: string): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: {\r\n        enhanced_analysis: true,\r\n        source: source,\r\n        ...userContext\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\r\n  formatWihyResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const data = healthResp.data;\r\n      \r\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n      \r\n      // Main response content\r\n      formatted += data.response;\r\n      \r\n      // Add health insights if available\r\n      if (data.health_insights) {\r\n        if (data.health_insights.key_benefits?.length) {\r\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n          data.health_insights.key_benefits.forEach(benefit => {\r\n            formatted += `- ${benefit}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.potential_risks?.length) {\r\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n          data.health_insights.potential_risks.forEach(risk => {\r\n            formatted += `- ${risk}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.recommendations?.length) {\r\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n          data.health_insights.recommendations.forEach(rec => {\r\n            formatted += `- ${rec}\\n`;\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Add processing info\r\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle UnifiedResponse format (legacy API)\r\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      // Use the ai_response.response field which contains the actual response\r\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\r\n        formatted += unifiedResp.data.ai_response.response;\r\n      } else {\r\n        // Fallback to showing raw data if ai_response is not available\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      // Add service information if available\r\n      if (unifiedResp.data.ai_response?.service) {\r\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\r\n        if (unifiedResp.data.ai_response.confidence) {\r\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\r\n        }\r\n      }\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add timestamp if available (different field names in different response formats)\r\n    const timestamp = (response as any).timestamp || (response as any).created_at || new Date().toISOString();\r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\r\n      }\r\n      return recommendations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response && legacyResp.wihy_response.personalized_analysis?.action_items) {\r\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\r\n      // For now, the new API doesn't include specific citation fields in the schema\r\n      // We could parse citations from the response text if needed\r\n      return citations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response && legacyResp.wihy_response.research_foundation) {\r\n        legacyResp.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n\r\n  /**\r\n   * Format response for display - compatibility alias for formatWihyResponse\r\n   */\r\n  formatResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    return this.formatWihyResponse(response);\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}