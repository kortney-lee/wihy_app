{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport openaiAPI from './services/openaiAPI';\nimport './VHealthSearch.css';\n\n// Define a type for the allowed data sources that matches SearchResults requirements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Results page wrapper to handle URL parameters\nconst ResultsPage = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const query = searchParams.get('q') || '';\n  const [isLoading, setIsLoading] = useState(true);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query) {\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Fetching results for query:\", query);\n      setIsLoading(true);\n      try {\n        // Try to use openaiAPI\n        const result = await openaiAPI.searchHealthInfo(query);\n        console.log(\"Search result:\", result);\n        setResults(result.details);\n        setDataSource(\"openai\");\n        if (result.sources) {\n          setCitations(result.sources);\n        }\n        if (result.recommendations) {\n          setRecommendations(result.recommendations);\n        }\n        if (result.medicalDisclaimer) {\n          setDisclaimer(result.medicalDisclaimer);\n        }\n      } catch (error) {\n        console.error(\"Error fetching results:\", error);\n        setResults(`Sorry, we couldn't retrieve information about \"${query}\". Please try a different search or try again later.`);\n        setDataSource(\"error\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchResults();\n  }, [query]);\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: query,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App with routing\n_s(ResultsPage, \"X2PdXXkm0iSGXMCZYDLtT4OvLjk=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ResultsPage;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/results\",\n        element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","jsxDEV","_jsxDEV","ResultsPage","_s","searchParams","navigate","query","get","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","fetchResults","console","log","result","searchHealthInfo","details","sources","medicalDisclaimer","error","handleBackToSearch","handleNewSearch","newQuery","encodeURIComponent","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport './VHealthSearch.css';\r\n\r\n// Define a type for the allowed data sources that matches SearchResults requirements\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\n// Results page wrapper to handle URL parameters\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Fetching results for query:\", query);\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        // Try to use openaiAPI\r\n        const result = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"Search result:\", result);\r\n        \r\n        setResults(result.details);\r\n        setDataSource(\"openai\");\r\n        \r\n        if (result.sources) {\r\n          setCitations(result.sources);\r\n        }\r\n        \r\n        if (result.recommendations) {\r\n          setRecommendations(result.recommendations);\r\n        }\r\n        \r\n        if (result.medicalDisclaimer) {\r\n          setDisclaimer(result.medicalDisclaimer);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching results:\", error);\r\n        setResults(`Sorry, we couldn't retrieve information about \"${query}\". Please try a different search or try again later.`);\r\n        setDataSource(\"error\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query]);\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\n// Main App with routing\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}