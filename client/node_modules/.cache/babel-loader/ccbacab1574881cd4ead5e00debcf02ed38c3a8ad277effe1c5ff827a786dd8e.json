{"ast":null,"code":"import React from'react';import{Chart as ChartJS,ArcElement,Tooltip,Legend}from'chart.js';import{Doughnut}from'react-chartjs-2';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(ArcElement,Tooltip,Legend);// Extract nutrition data function moved from SearchResults\nconst extractNutritionData=(results,dataSource)=>{console.log('=== EXTRACTING NUTRITION DATA IN NOVACHART ===');console.log('DataSource:',dataSource);console.log('Results type:',typeof results);if(dataSource==='vnutrition'){try{console.log('Processing vnutrition data source');let nutrition;if(typeof results==='string'){console.log('Parsing string results');// Check if this is markdown/formatted text instead of JSON\nif(results.startsWith('#')||results.includes('AI Chat response')){console.log('Results appear to be formatted text, not JSON nutrition data');return null;}nutrition=JSON.parse(results);}else{console.log('Using object results directly');nutrition=results;}console.log('=== RAW NUTRITION OBJECT ===');console.log('Full object:',nutrition);console.log('Object keys:',Object.keys(nutrition||{}));if(nutrition&&nutrition.found!==false){const extractedData={calories:nutrition.calories_per_serving||0,protein:nutrition.protein_g||0,carbs:nutrition.carbs_g||0,fat:nutrition.fat_g||0,fiber:nutrition.fiber_g||0,sugar:nutrition.sugar_g||0,sodium:nutrition.sodium_mg||0,novaScore:nutrition.nova_classification||1,processedLevel:nutrition.nova_description||nutrition.processed_level||'Unknown'};console.log('=== EXTRACTED DATA ===');console.log('Final extracted data:',extractedData);console.log('NOVA Score:',extractedData.novaScore);return extractedData;}else{var _nutrition;console.log('No valid nutrition data - found:',(_nutrition=nutrition)===null||_nutrition===void 0?void 0:_nutrition.found);return null;}}catch(error){console.error('Error parsing nutrition data:',error);console.log('This is likely because results are formatted text, not JSON nutrition data');return null;}}console.log('Not vnutrition source');return null;};const NovaChart=_ref=>{let{query,results,dataSource}=_ref;// Extract nutrition data using internal function\nconst nutritionData=extractNutritionData(results,dataSource);// Only render if we have nutrition data\nif(!nutritionData||dataSource!=='vnutrition'){return null;}const{novaScore,processedLevel}=nutritionData;// NOVA classification colors\nconst novaColors={1:'#10B981',// Green - Good\n2:'#F59E0B',// Yellow - Okay\n3:'#F97316',// Orange - Caution\n4:'#EF4444'// Red - Avoid\n};// Create data for the current NOVA score (100% fill)\nconst data={datasets:[{data:[100,0],// 100% for the current score, 0% for remaining\nbackgroundColor:[novaColors[novaScore],'#E5E7EB'// Light gray for empty portion\n],borderWidth:0,cutout:'70%'}]};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{enabled:false}}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',height:'200px',width:'200px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(Doughnut,{data:data,options:options}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'2rem',fontWeight:'bold',color:'#374151'},children:novaScore}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.875rem',color:'#6B7280'},children:\"NOVA\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',marginBottom:'0.5rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'16px',height:'16px',backgroundColor:novaColors[novaScore],borderRadius:'3px',marginRight:'0.5rem'}}),/*#__PURE__*/_jsxs(\"span\",{style:{fontWeight:'600',color:'#374151',fontSize:'1rem'},children:[\"Group \",novaScore]})]}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.875rem',color:'#374151',fontStyle:'italic'},children:processedLevel})]})]});};export default NovaChart;","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsx","_jsx","jsxs","_jsxs","register","extractNutritionData","results","dataSource","console","log","nutrition","startsWith","includes","JSON","parse","Object","keys","found","extractedData","calories","calories_per_serving","protein","protein_g","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","novaScore","nova_classification","processedLevel","nova_description","processed_level","_nutrition","error","NovaChart","_ref","query","nutritionData","novaColors","data","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","style","textAlign","children","position","height","width","margin","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","borderRadius","marginRight","fontStyle"],"sources":["C:/repo/wihy_ui/client/src/components/NovaChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NovaChartProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n}\r\n\r\n// Extract nutrition data function moved from SearchResults\r\nconst extractNutritionData = (results: string, dataSource: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NOVACHART ===');\r\n  console.log('DataSource:', dataSource);\r\n  console.log('Results type:', typeof results);\r\n  \r\n  if (dataSource === 'vnutrition') {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        \r\n        // Check if this is markdown/formatted text instead of JSON\r\n        if (results.startsWith('#') || results.includes('AI Chat response')) {\r\n          console.log('Results appear to be formatted text, not JSON nutrition data');\r\n          return null;\r\n        }\r\n        \r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        console.log('NOVA Score:', extractedData.novaScore);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      console.log('This is likely because results are formatted text, not JSON nutrition data');\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NovaChart: React.FC<NovaChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { novaScore, processedLevel } = nutritionData;\r\n\r\n  // NOVA classification colors\r\n  const novaColors = {\r\n    1: '#10B981', // Green - Good\r\n    2: '#F59E0B', // Yellow - Okay\r\n    3: '#F97316', // Orange - Caution\r\n    4: '#EF4444'  // Red - Avoid\r\n  };\r\n\r\n  // Create data for the current NOVA score (100% fill)\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [100, 0], // 100% for the current score, 0% for remaining\r\n        backgroundColor: [\r\n          novaColors[novaScore as keyof typeof novaColors],\r\n          '#E5E7EB' // Light gray for empty portion\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        enabled: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {novaScore}\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            NOVA\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <div\r\n            style={{\r\n              width: '16px',\r\n              height: '16px',\r\n              backgroundColor: novaColors[novaScore as keyof typeof novaColors],\r\n              borderRadius: '3px',\r\n              marginRight: '0.5rem',\r\n            }}\r\n          />\r\n          <span style={{ \r\n            fontWeight: '600', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Group {novaScore}\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          fontSize: '0.875rem',\r\n          color: '#374151',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          {processedLevel}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovaChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}