{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\HealthNewsFeed.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { NewsService } from '../services/newsService';\nimport openaiAPI from '../services/openaiAPI';\nimport './HealthNewsFeed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthNewsFeed = ({\n  maxArticles = 6\n}) => {\n  _s();\n  const [articles, setArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const categories = [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: 'nutrition',\n    label: 'Nutrition'\n  }, {\n    id: 'fitness',\n    label: 'Fitness'\n  }, {\n    id: 'mental-health',\n    label: 'Mental Health'\n  }, {\n    id: 'medical',\n    label: 'Medical Research'\n  }, {\n    id: 'wellness',\n    label: 'Wellness'\n  }];\n  useEffect(() => {\n    fetchHealthNews();\n  }, [selectedCategory, maxArticles]);\n  const fetchHealthNews = async () => {\n    setLoading(true);\n    try {\n      console.log('Fetching health news for category:', selectedCategory);\n\n      // Try NewsService first\n      try {\n        const newsData = await NewsService.fetchHealthNews(selectedCategory, maxArticles);\n        if (newsData && newsData.length > 0) {\n          setArticles(newsData);\n          return;\n        }\n      } catch (newsServiceError) {\n        console.log('NewsService failed, trying OpenAI...', newsServiceError);\n      }\n\n      // Use OpenAI to generate news\n      await fetchNewsWithOpenAI();\n    } catch (error) {\n      console.error('Error fetching health news:', error);\n      setArticles([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchNewsWithOpenAI = async () => {\n    try {\n      const categoryText = selectedCategory === 'all' ? 'general health' : selectedCategory;\n      const prompt = `Generate ${maxArticles} recent health news articles about ${categoryText}. \n      \n      Please format each article as follows:\n      TITLE: [Clear, engaging title]\n      SUMMARY: [2-3 sentence informative summary]\n      SOURCE: [Realistic health news source name]\n      ---\n      \n      Focus on current trends, recent research, and practical health advice.\n      Make each article unique and informative.`;\n      const response = await openaiAPI.searchHealthInfo(prompt);\n      console.log('OpenAI response for news:', response);\n      if (response && (response.details || response.response)) {\n        const responseText = response.details || response.response || '';\n        const generatedArticles = parseOpenAINewsResponse(responseText);\n        if (generatedArticles.length > 0) {\n          setArticles(generatedArticles);\n          console.log('Using OpenAI generated articles:', generatedArticles.length);\n        } else {\n          console.log('No articles parsed from OpenAI response');\n          setArticles([]);\n        }\n      } else {\n        console.log('No valid OpenAI response received');\n        setArticles([]);\n      }\n    } catch (openaiError) {\n      console.error('OpenAI error:', openaiError);\n      setArticles([]);\n    }\n  };\n  const parseOpenAINewsResponse = responseText => {\n    try {\n      const articles = [];\n\n      // Split by article separators or double newlines\n      const articleSections = responseText.split(/---|\\n\\n\\n/).filter(section => section.trim());\n      articleSections.forEach((section, index) => {\n        const lines = section.split('\\n').map(line => line.trim()).filter(line => line);\n        let title = '';\n        let summary = '';\n        let source = 'AI Health News';\n        for (const line of lines) {\n          if (line.toLowerCase().startsWith('title:') || line.match(/^\\d+\\./)) {\n            title = line.replace(/^title:\\s*/i, '').replace(/^\\d+\\.\\s*/, '').trim();\n          } else if (line.toLowerCase().startsWith('summary:')) {\n            summary = line.replace(/^summary:\\s*/i, '').trim();\n          } else if (line.toLowerCase().startsWith('source:')) {\n            source = line.replace(/^source:\\s*/i, '').trim();\n          } else if (!title && line.length > 10) {\n            // First substantial line could be the title\n            title = line;\n          } else if (title && !summary && line.length > 20) {\n            // Second substantial line could be the summary\n            summary = line;\n          }\n        }\n\n        // If we have at least a title, create an article\n        if (title) {\n          articles.push({\n            id: `openai-${Date.now()}-${index}`,\n            title: title || `Health News Update ${index + 1}`,\n            summary: summary || 'Stay informed with the latest health developments and research findings.',\n            url: '#',\n            source: source,\n            publishedAt: new Date().toISOString(),\n            imageUrl: `/assets/health-news-${index % 6 + 1}.jpg`,\n            category: selectedCategory === 'all' ? 'wellness' : selectedCategory\n          });\n        }\n      });\n\n      // If the structured parsing didn't work well, try a simpler approach\n      if (articles.length === 0) {\n        const lines = responseText.split('\\n').filter(line => line.trim());\n        let currentTitle = '';\n        for (let i = 0; i < lines.length && articles.length < maxArticles; i++) {\n          const line = lines[i].trim();\n\n          // Look for potential titles (numbered lists, bullets, or substantial lines)\n          if (line.match(/^\\d+\\./) || line.match(/^[-*â€¢]/) || line.length > 30 && !line.includes(':') && currentTitle === '') {\n            currentTitle = line.replace(/^\\d+\\.\\s*/, '').replace(/^[-*â€¢]\\s*/, '').trim();\n\n            // Look for summary in next few lines\n            let summary = '';\n            for (let j = i + 1; j < Math.min(i + 3, lines.length); j++) {\n              const nextLine = lines[j].trim();\n              if (nextLine && nextLine.length > 20 && !nextLine.match(/^\\d+\\./)) {\n                summary = nextLine;\n                break;\n              }\n            }\n            articles.push({\n              id: `openai-simple-${Date.now()}-${articles.length}`,\n              title: currentTitle,\n              summary: summary || 'Latest health news and research updates.',\n              url: '#',\n              source: 'AI Health News',\n              publishedAt: new Date().toISOString(),\n              imageUrl: `/assets/health-news-${articles.length % 6 + 1}.jpg`,\n              category: selectedCategory === 'all' ? 'wellness' : selectedCategory\n            });\n            currentTitle = '';\n          }\n        }\n      }\n      return articles.slice(0, maxArticles);\n    } catch (error) {\n      console.error('Error parsing OpenAI response:', error);\n      return [];\n    }\n  };\n  const generateFreshNewsWithAI = async () => {\n    setLoading(true);\n    try {\n      const categoryText = selectedCategory === 'all' ? 'general health and wellness' : selectedCategory;\n      const prompt = `Create ${maxArticles} brand new health news articles about ${categoryText}. \n      \n      Format each article exactly like this:\n      TITLE: [Engaging, specific title about recent health development]\n      SUMMARY: [Detailed 2-3 sentence summary with specific information]\n      SOURCE: [Realistic health publication name like \"Health Journal\" or \"Medical News Today\"]\n      ---\n      \n      Focus on current trends, breakthrough research, practical tips, and emerging health topics.\n      Make each article unique and newsworthy for ${categoryText}.`;\n      const response = await openaiAPI.searchHealthInfo(prompt);\n      if (response && (response.details || response.response)) {\n        const responseText = response.details || response.response || '';\n        const generatedArticles = parseOpenAINewsResponse(responseText);\n        setArticles(generatedArticles);\n        console.log('Generated fresh AI articles:', generatedArticles.length);\n      }\n    } catch (error) {\n      console.error('Error generating fresh news with AI:', error);\n      setArticles([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const formatTimeAgo = dateString => {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n  const getSourceIcon = source => {\n    switch (source.toLowerCase()) {\n      case 'yahoo health':\n        return 'ðŸŸ£';\n      case 'msn health':\n        return 'ðŸ”µ';\n      case 'bing news':\n        return 'ðŸŸ¢';\n      default:\n        return 'ðŸ“°';\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-feed-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"news-feed-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Latest Health News\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-news\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Generating latest health news...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this);\n  }\n  if (articles.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-feed-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"news-feed-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Latest Health News\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Stay updated with the latest health and wellness news\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-articles\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No articles available at the moment.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ai-refresh-btn\",\n          onClick: generateFreshNewsWithAI,\n          children: \"\\uD83E\\uDD16 Generate Health News\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news-feed-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-feed-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Latest Health News\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"AI-generated health news and insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ai-refresh-btn\",\n        onClick: generateFreshNewsWithAI,\n        disabled: loading,\n        children: \"\\uD83E\\uDD16 Generate Fresh Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-categories\",\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `category-btn ${selectedCategory === category.id ? 'active' : ''}`,\n        onClick: () => setSelectedCategory(category.id),\n        children: category.label\n      }, category.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-grid\",\n      children: articles.map(article => /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"news-card\",\n        children: [article.imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"news-image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: article.imageUrl,\n            alt: article.title,\n            onError: e => {\n              e.target.style.display = 'none';\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"news-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"news-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"news-source\",\n              children: [getSourceIcon(article.source), \" \", article.source]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"news-time\",\n              children: formatTimeAgo(article.publishedAt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"news-title\",\n            children: article.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"news-summary\",\n            children: article.summary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: article.url,\n            className: \"read-more-btn\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"Read Full Article \\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)]\n      }, article.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ai-generate-btn\",\n        onClick: generateFreshNewsWithAI,\n        children: \"\\uD83E\\uDD16 Generate More Articles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthNewsFeed, \"kktUbVx0z1iRAhAquNn2nVk+6To=\");\n_c = HealthNewsFeed;\nexport default HealthNewsFeed;\nvar _c;\n$RefreshReg$(_c, \"HealthNewsFeed\");","map":{"version":3,"names":["React","useState","useEffect","NewsService","openaiAPI","jsxDEV","_jsxDEV","HealthNewsFeed","maxArticles","_s","articles","setArticles","loading","setLoading","selectedCategory","setSelectedCategory","categories","id","label","fetchHealthNews","console","log","newsData","length","newsServiceError","fetchNewsWithOpenAI","error","categoryText","prompt","response","searchHealthInfo","details","responseText","generatedArticles","parseOpenAINewsResponse","openaiError","articleSections","split","filter","section","trim","forEach","index","lines","map","line","title","summary","source","toLowerCase","startsWith","match","replace","push","Date","now","url","publishedAt","toISOString","imageUrl","category","currentTitle","i","includes","j","Math","min","nextLine","slice","generateFreshNewsWithAI","formatTimeAgo","dateString","publishedDate","diffInHours","floor","getTime","diffInDays","getSourceIcon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","article","src","alt","onError","e","target","style","display","href","rel","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/HealthNewsFeed.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { NewsService } from '../services/newsService';\r\nimport openaiAPI from '../services/openaiAPI';\r\nimport './HealthNewsFeed.css';\r\n\r\ninterface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  publishedAt: string;\r\n  imageUrl?: string;\r\n  category: string;\r\n}\r\n\r\ninterface NewsFeedProps {\r\n  maxArticles?: number;\r\n}\r\n\r\nconst HealthNewsFeed: React.FC<NewsFeedProps> = ({ maxArticles = 6 }) => {\r\n  const [articles, setArticles] = useState<NewsArticle[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n\r\n  const categories = [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: 'nutrition', label: 'Nutrition' },\r\n    { id: 'fitness', label: 'Fitness' },\r\n    { id: 'mental-health', label: 'Mental Health' },\r\n    { id: 'medical', label: 'Medical Research' },\r\n    { id: 'wellness', label: 'Wellness' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchHealthNews();\r\n  }, [selectedCategory, maxArticles]);\r\n\r\n  const fetchHealthNews = async () => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Fetching health news for category:', selectedCategory);\r\n      \r\n      // Try NewsService first\r\n      try {\r\n        const newsData = await NewsService.fetchHealthNews(selectedCategory, maxArticles);\r\n        \r\n        if (newsData && newsData.length > 0) {\r\n          setArticles(newsData);\r\n          return;\r\n        }\r\n      } catch (newsServiceError) {\r\n        console.log('NewsService failed, trying OpenAI...', newsServiceError);\r\n      }\r\n      \r\n      // Use OpenAI to generate news\r\n      await fetchNewsWithOpenAI();\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching health news:', error);\r\n      setArticles([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchNewsWithOpenAI = async () => {\r\n    try {\r\n      const categoryText = selectedCategory === 'all' ? 'general health' : selectedCategory;\r\n      const prompt = `Generate ${maxArticles} recent health news articles about ${categoryText}. \r\n      \r\n      Please format each article as follows:\r\n      TITLE: [Clear, engaging title]\r\n      SUMMARY: [2-3 sentence informative summary]\r\n      SOURCE: [Realistic health news source name]\r\n      ---\r\n      \r\n      Focus on current trends, recent research, and practical health advice.\r\n      Make each article unique and informative.`;\r\n      \r\n      const response = await openaiAPI.searchHealthInfo(prompt);\r\n      console.log('OpenAI response for news:', response);\r\n      \r\n      if (response && (response.details || response.response)) {\r\n        const responseText = response.details || response.response || '';\r\n        const generatedArticles = parseOpenAINewsResponse(responseText);\r\n        \r\n        if (generatedArticles.length > 0) {\r\n          setArticles(generatedArticles);\r\n          console.log('Using OpenAI generated articles:', generatedArticles.length);\r\n        } else {\r\n          console.log('No articles parsed from OpenAI response');\r\n          setArticles([]);\r\n        }\r\n      } else {\r\n        console.log('No valid OpenAI response received');\r\n        setArticles([]);\r\n      }\r\n    } catch (openaiError) {\r\n      console.error('OpenAI error:', openaiError);\r\n      setArticles([]);\r\n    }\r\n  };\r\n\r\n  const parseOpenAINewsResponse = (responseText: string): NewsArticle[] => {\r\n    try {\r\n      const articles: NewsArticle[] = [];\r\n      \r\n      // Split by article separators or double newlines\r\n      const articleSections = responseText.split(/---|\\n\\n\\n/).filter(section => section.trim());\r\n      \r\n      articleSections.forEach((section, index) => {\r\n        const lines = section.split('\\n').map(line => line.trim()).filter(line => line);\r\n        \r\n        let title = '';\r\n        let summary = '';\r\n        let source = 'AI Health News';\r\n        \r\n        for (const line of lines) {\r\n          if (line.toLowerCase().startsWith('title:') || line.match(/^\\d+\\./)) {\r\n            title = line.replace(/^title:\\s*/i, '').replace(/^\\d+\\.\\s*/, '').trim();\r\n          } else if (line.toLowerCase().startsWith('summary:')) {\r\n            summary = line.replace(/^summary:\\s*/i, '').trim();\r\n          } else if (line.toLowerCase().startsWith('source:')) {\r\n            source = line.replace(/^source:\\s*/i, '').trim();\r\n          } else if (!title && line.length > 10) {\r\n            // First substantial line could be the title\r\n            title = line;\r\n          } else if (title && !summary && line.length > 20) {\r\n            // Second substantial line could be the summary\r\n            summary = line;\r\n          }\r\n        }\r\n        \r\n        // If we have at least a title, create an article\r\n        if (title) {\r\n          articles.push({\r\n            id: `openai-${Date.now()}-${index}`,\r\n            title: title || `Health News Update ${index + 1}`,\r\n            summary: summary || 'Stay informed with the latest health developments and research findings.',\r\n            url: '#',\r\n            source: source,\r\n            publishedAt: new Date().toISOString(),\r\n            imageUrl: `/assets/health-news-${(index % 6) + 1}.jpg`,\r\n            category: selectedCategory === 'all' ? 'wellness' : selectedCategory\r\n          });\r\n        }\r\n      });\r\n      \r\n      // If the structured parsing didn't work well, try a simpler approach\r\n      if (articles.length === 0) {\r\n        const lines = responseText.split('\\n').filter(line => line.trim());\r\n        let currentTitle = '';\r\n        \r\n        for (let i = 0; i < lines.length && articles.length < maxArticles; i++) {\r\n          const line = lines[i].trim();\r\n          \r\n          // Look for potential titles (numbered lists, bullets, or substantial lines)\r\n          if (line.match(/^\\d+\\./) || line.match(/^[-*â€¢]/) || \r\n              (line.length > 30 && !line.includes(':') && currentTitle === '')) {\r\n            \r\n            currentTitle = line.replace(/^\\d+\\.\\s*/, '').replace(/^[-*â€¢]\\s*/, '').trim();\r\n            \r\n            // Look for summary in next few lines\r\n            let summary = '';\r\n            for (let j = i + 1; j < Math.min(i + 3, lines.length); j++) {\r\n              const nextLine = lines[j].trim();\r\n              if (nextLine && nextLine.length > 20 && !nextLine.match(/^\\d+\\./)) {\r\n                summary = nextLine;\r\n                break;\r\n              }\r\n            }\r\n            \r\n            articles.push({\r\n              id: `openai-simple-${Date.now()}-${articles.length}`,\r\n              title: currentTitle,\r\n              summary: summary || 'Latest health news and research updates.',\r\n              url: '#',\r\n              source: 'AI Health News',\r\n              publishedAt: new Date().toISOString(),\r\n              imageUrl: `/assets/health-news-${(articles.length % 6) + 1}.jpg`,\r\n              category: selectedCategory === 'all' ? 'wellness' : selectedCategory\r\n            });\r\n            \r\n            currentTitle = '';\r\n          }\r\n        }\r\n      }\r\n      \r\n      return articles.slice(0, maxArticles);\r\n    } catch (error) {\r\n      console.error('Error parsing OpenAI response:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const generateFreshNewsWithAI = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const categoryText = selectedCategory === 'all' ? 'general health and wellness' : selectedCategory;\r\n      const prompt = `Create ${maxArticles} brand new health news articles about ${categoryText}. \r\n      \r\n      Format each article exactly like this:\r\n      TITLE: [Engaging, specific title about recent health development]\r\n      SUMMARY: [Detailed 2-3 sentence summary with specific information]\r\n      SOURCE: [Realistic health publication name like \"Health Journal\" or \"Medical News Today\"]\r\n      ---\r\n      \r\n      Focus on current trends, breakthrough research, practical tips, and emerging health topics.\r\n      Make each article unique and newsworthy for ${categoryText}.`;\r\n      \r\n      const response = await openaiAPI.searchHealthInfo(prompt);\r\n      \r\n      if (response && (response.details || response.response)) {\r\n        const responseText = response.details || response.response || '';\r\n        const generatedArticles = parseOpenAINewsResponse(responseText);\r\n        \r\n        setArticles(generatedArticles);\r\n        console.log('Generated fresh AI articles:', generatedArticles.length);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating fresh news with AI:', error);\r\n      setArticles([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatTimeAgo = (dateString: string) => {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    return `${diffInDays}d ago`;\r\n  };\r\n\r\n  const getSourceIcon = (source: string) => {\r\n    switch (source.toLowerCase()) {\r\n      case 'yahoo health':\r\n        return 'ðŸŸ£';\r\n      case 'msn health':\r\n        return 'ðŸ”µ';\r\n      case 'bing news':\r\n        return 'ðŸŸ¢';\r\n      default:\r\n        return 'ðŸ“°';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"news-feed-container\">\r\n        <div className=\"news-feed-header\">\r\n          <h2>Latest Health News</h2>\r\n        </div>\r\n        <div className=\"loading-news\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Generating latest health news...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (articles.length === 0) {\r\n    return (\r\n      <div className=\"news-feed-container\">\r\n        <div className=\"news-feed-header\">\r\n          <h2>Latest Health News</h2>\r\n          <p>Stay updated with the latest health and wellness news</p>\r\n        </div>\r\n        <div className=\"no-articles\">\r\n          <p>No articles available at the moment.</p>\r\n          <button \r\n            className=\"ai-refresh-btn\" \r\n            onClick={generateFreshNewsWithAI}\r\n          >\r\n            ðŸ¤– Generate Health News\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"news-feed-container\">\r\n      <div className=\"news-feed-header\">\r\n        <h2>Latest Health News</h2>\r\n        <p>AI-generated health news and insights</p>\r\n        <button \r\n          className=\"ai-refresh-btn\" \r\n          onClick={generateFreshNewsWithAI}\r\n          disabled={loading}\r\n        >\r\n          ðŸ¤– Generate Fresh Content\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"news-categories\">\r\n        {categories.map(category => (\r\n          <button\r\n            key={category.id}\r\n            className={`category-btn ${selectedCategory === category.id ? 'active' : ''}`}\r\n            onClick={() => setSelectedCategory(category.id)}\r\n          >\r\n            {category.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"news-grid\">\r\n        {articles.map((article) => (\r\n          <article key={article.id} className=\"news-card\">\r\n            {article.imageUrl && (\r\n              <div className=\"news-image\">\r\n                <img \r\n                  src={article.imageUrl} \r\n                  alt={article.title}\r\n                  onError={(e) => {\r\n                    (e.target as HTMLImageElement).style.display = 'none';\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            <div className=\"news-content\">\r\n              <div className=\"news-meta\">\r\n                <span className=\"news-source\">\r\n                  {getSourceIcon(article.source)} {article.source}\r\n                </span>\r\n                <span className=\"news-time\">{formatTimeAgo(article.publishedAt)}</span>\r\n              </div>\r\n              <h3 className=\"news-title\">{article.title}</h3>\r\n              <p className=\"news-summary\">{article.summary}</p>\r\n              <a \r\n                href={article.url} \r\n                className=\"read-more-btn\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Read Full Article â†’\r\n              </a>\r\n            </div>\r\n          </article>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"news-footer\">\r\n        <button className=\"ai-generate-btn\" onClick={generateFreshNewsWithAI}>\r\n          ðŸ¤– Generate More Articles\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthNewsFeed;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiB9B,MAAMC,cAAuC,GAAGA,CAAC;EAAEC,WAAW,GAAG;AAAE,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAgB,EAAE,CAAC;EAC3D,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMe,UAAU,GAAG,CACjB;IAAEC,EAAE,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAkB,CAAC,EACvC;IAAED,EAAE,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAY,CAAC,EACvC;IAAED,EAAE,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAU,CAAC,EACnC;IAAED,EAAE,EAAE,eAAe;IAAEC,KAAK,EAAE;EAAgB,CAAC,EAC/C;IAAED,EAAE,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAmB,CAAC,EAC5C;IAAED,EAAE,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAW,CAAC,CACtC;EAEDhB,SAAS,CAAC,MAAM;IACdiB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACL,gBAAgB,EAAEN,WAAW,CAAC,CAAC;EAEnC,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCN,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACFO,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEP,gBAAgB,CAAC;;MAEnE;MACA,IAAI;QACF,MAAMQ,QAAQ,GAAG,MAAMnB,WAAW,CAACgB,eAAe,CAACL,gBAAgB,EAAEN,WAAW,CAAC;QAEjF,IAAIc,QAAQ,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UACnCZ,WAAW,CAACW,QAAQ,CAAC;UACrB;QACF;MACF,CAAC,CAAC,OAAOE,gBAAgB,EAAE;QACzBJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEG,gBAAgB,CAAC;MACvE;;MAEA;MACA,MAAMC,mBAAmB,CAAC,CAAC;IAE7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDf,WAAW,CAAC,EAAE,CAAC;IACjB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAME,YAAY,GAAGb,gBAAgB,KAAK,KAAK,GAAG,gBAAgB,GAAGA,gBAAgB;MACrF,MAAMc,MAAM,GAAG,YAAYpB,WAAW,sCAAsCmB,YAAY;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;MAE1C,MAAME,QAAQ,GAAG,MAAMzB,SAAS,CAAC0B,gBAAgB,CAACF,MAAM,CAAC;MACzDR,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEQ,QAAQ,CAAC;MAElD,IAAIA,QAAQ,KAAKA,QAAQ,CAACE,OAAO,IAAIF,QAAQ,CAACA,QAAQ,CAAC,EAAE;QACvD,MAAMG,YAAY,GAAGH,QAAQ,CAACE,OAAO,IAAIF,QAAQ,CAACA,QAAQ,IAAI,EAAE;QAChE,MAAMI,iBAAiB,GAAGC,uBAAuB,CAACF,YAAY,CAAC;QAE/D,IAAIC,iBAAiB,CAACV,MAAM,GAAG,CAAC,EAAE;UAChCZ,WAAW,CAACsB,iBAAiB,CAAC;UAC9Bb,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEY,iBAAiB,CAACV,MAAM,CAAC;QAC3E,CAAC,MAAM;UACLH,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;UACtDV,WAAW,CAAC,EAAE,CAAC;QACjB;MACF,CAAC,MAAM;QACLS,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChDV,WAAW,CAAC,EAAE,CAAC;MACjB;IACF,CAAC,CAAC,OAAOwB,WAAW,EAAE;MACpBf,OAAO,CAACM,KAAK,CAAC,eAAe,EAAES,WAAW,CAAC;MAC3CxB,WAAW,CAAC,EAAE,CAAC;IACjB;EACF,CAAC;EAED,MAAMuB,uBAAuB,GAAIF,YAAoB,IAAoB;IACvE,IAAI;MACF,MAAMtB,QAAuB,GAAG,EAAE;;MAElC;MACA,MAAM0B,eAAe,GAAGJ,YAAY,CAACK,KAAK,CAAC,YAAY,CAAC,CAACC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;MAE1FJ,eAAe,CAACK,OAAO,CAAC,CAACF,OAAO,EAAEG,KAAK,KAAK;QAC1C,MAAMC,KAAK,GAAGJ,OAAO,CAACF,KAAK,CAAC,IAAI,CAAC,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAACF,MAAM,CAACO,IAAI,IAAIA,IAAI,CAAC;QAE/E,IAAIC,KAAK,GAAG,EAAE;QACd,IAAIC,OAAO,GAAG,EAAE;QAChB,IAAIC,MAAM,GAAG,gBAAgB;QAE7B,KAAK,MAAMH,IAAI,IAAIF,KAAK,EAAE;UACxB,IAAIE,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,QAAQ,CAAC,IAAIL,IAAI,CAACM,KAAK,CAAC,QAAQ,CAAC,EAAE;YACnEL,KAAK,GAAGD,IAAI,CAACO,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACZ,IAAI,CAAC,CAAC;UACzE,CAAC,MAAM,IAAIK,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;YACpDH,OAAO,GAAGF,IAAI,CAACO,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAACZ,IAAI,CAAC,CAAC;UACpD,CAAC,MAAM,IAAIK,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,SAAS,CAAC,EAAE;YACnDF,MAAM,GAAGH,IAAI,CAACO,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACZ,IAAI,CAAC,CAAC;UAClD,CAAC,MAAM,IAAI,CAACM,KAAK,IAAID,IAAI,CAACtB,MAAM,GAAG,EAAE,EAAE;YACrC;YACAuB,KAAK,GAAGD,IAAI;UACd,CAAC,MAAM,IAAIC,KAAK,IAAI,CAACC,OAAO,IAAIF,IAAI,CAACtB,MAAM,GAAG,EAAE,EAAE;YAChD;YACAwB,OAAO,GAAGF,IAAI;UAChB;QACF;;QAEA;QACA,IAAIC,KAAK,EAAE;UACTpC,QAAQ,CAAC2C,IAAI,CAAC;YACZpC,EAAE,EAAE,UAAUqC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIb,KAAK,EAAE;YACnCI,KAAK,EAAEA,KAAK,IAAI,sBAAsBJ,KAAK,GAAG,CAAC,EAAE;YACjDK,OAAO,EAAEA,OAAO,IAAI,0EAA0E;YAC9FS,GAAG,EAAE,GAAG;YACRR,MAAM,EAAEA,MAAM;YACdS,WAAW,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;YACrCC,QAAQ,EAAE,uBAAwBjB,KAAK,GAAG,CAAC,GAAI,CAAC,MAAM;YACtDkB,QAAQ,EAAE9C,gBAAgB,KAAK,KAAK,GAAG,UAAU,GAAGA;UACtD,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;;MAEF;MACA,IAAIJ,QAAQ,CAACa,MAAM,KAAK,CAAC,EAAE;QACzB,MAAMoB,KAAK,GAAGX,YAAY,CAACK,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACO,IAAI,IAAIA,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC;QAClE,IAAIqB,YAAY,GAAG,EAAE;QAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,KAAK,CAACpB,MAAM,IAAIb,QAAQ,CAACa,MAAM,GAAGf,WAAW,EAAEsD,CAAC,EAAE,EAAE;UACtE,MAAMjB,IAAI,GAAGF,KAAK,CAACmB,CAAC,CAAC,CAACtB,IAAI,CAAC,CAAC;;UAE5B;UACA,IAAIK,IAAI,CAACM,KAAK,CAAC,QAAQ,CAAC,IAAIN,IAAI,CAACM,KAAK,CAAC,QAAQ,CAAC,IAC3CN,IAAI,CAACtB,MAAM,GAAG,EAAE,IAAI,CAACsB,IAAI,CAACkB,QAAQ,CAAC,GAAG,CAAC,IAAIF,YAAY,KAAK,EAAG,EAAE;YAEpEA,YAAY,GAAGhB,IAAI,CAACO,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACZ,IAAI,CAAC,CAAC;;YAE5E;YACA,IAAIO,OAAO,GAAG,EAAE;YAChB,KAAK,IAAIiB,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,CAAC,GAAG,CAAC,EAAEnB,KAAK,CAACpB,MAAM,CAAC,EAAEyC,CAAC,EAAE,EAAE;cAC1D,MAAMG,QAAQ,GAAGxB,KAAK,CAACqB,CAAC,CAAC,CAACxB,IAAI,CAAC,CAAC;cAChC,IAAI2B,QAAQ,IAAIA,QAAQ,CAAC5C,MAAM,GAAG,EAAE,IAAI,CAAC4C,QAAQ,CAAChB,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACjEJ,OAAO,GAAGoB,QAAQ;gBAClB;cACF;YACF;YAEAzD,QAAQ,CAAC2C,IAAI,CAAC;cACZpC,EAAE,EAAE,iBAAiBqC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAI7C,QAAQ,CAACa,MAAM,EAAE;cACpDuB,KAAK,EAAEe,YAAY;cACnBd,OAAO,EAAEA,OAAO,IAAI,0CAA0C;cAC9DS,GAAG,EAAE,GAAG;cACRR,MAAM,EAAE,gBAAgB;cACxBS,WAAW,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;cACrCC,QAAQ,EAAE,uBAAwBjD,QAAQ,CAACa,MAAM,GAAG,CAAC,GAAI,CAAC,MAAM;cAChEqC,QAAQ,EAAE9C,gBAAgB,KAAK,KAAK,GAAG,UAAU,GAAGA;YACtD,CAAC,CAAC;YAEF+C,YAAY,GAAG,EAAE;UACnB;QACF;MACF;MAEA,OAAOnD,QAAQ,CAAC0D,KAAK,CAAC,CAAC,EAAE5D,WAAW,CAAC;IACvC,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,EAAE;IACX;EACF,CAAC;EAED,MAAM2C,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1CxD,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMc,YAAY,GAAGb,gBAAgB,KAAK,KAAK,GAAG,6BAA6B,GAAGA,gBAAgB;MAClG,MAAMc,MAAM,GAAG,UAAUpB,WAAW,yCAAyCmB,YAAY;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoDA,YAAY,GAAG;MAE7D,MAAME,QAAQ,GAAG,MAAMzB,SAAS,CAAC0B,gBAAgB,CAACF,MAAM,CAAC;MAEzD,IAAIC,QAAQ,KAAKA,QAAQ,CAACE,OAAO,IAAIF,QAAQ,CAACA,QAAQ,CAAC,EAAE;QACvD,MAAMG,YAAY,GAAGH,QAAQ,CAACE,OAAO,IAAIF,QAAQ,CAACA,QAAQ,IAAI,EAAE;QAChE,MAAMI,iBAAiB,GAAGC,uBAAuB,CAACF,YAAY,CAAC;QAE/DrB,WAAW,CAACsB,iBAAiB,CAAC;QAC9Bb,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEY,iBAAiB,CAACV,MAAM,CAAC;MACvE;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5Df,WAAW,CAAC,EAAE,CAAC;IACjB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMyD,aAAa,GAAIC,UAAkB,IAAK;IAC5C,MAAMhB,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAMkB,aAAa,GAAG,IAAIlB,IAAI,CAACiB,UAAU,CAAC;IAC1C,MAAME,WAAW,GAAGR,IAAI,CAACS,KAAK,CAAC,CAACnB,GAAG,CAACoB,OAAO,CAAC,CAAC,GAAGH,aAAa,CAACG,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAE5F,IAAIF,WAAW,GAAG,CAAC,EAAE,OAAO,UAAU;IACtC,IAAIA,WAAW,GAAG,EAAE,EAAE,OAAO,GAAGA,WAAW,OAAO;IAClD,MAAMG,UAAU,GAAGX,IAAI,CAACS,KAAK,CAACD,WAAW,GAAG,EAAE,CAAC;IAC/C,OAAO,GAAGG,UAAU,OAAO;EAC7B,CAAC;EAED,MAAMC,aAAa,GAAI7B,MAAc,IAAK;IACxC,QAAQA,MAAM,CAACC,WAAW,CAAC,CAAC;MAC1B,KAAK,cAAc;QACjB,OAAO,IAAI;MACb,KAAK,YAAY;QACf,OAAO,IAAI;MACb,KAAK,WAAW;QACd,OAAO,IAAI;MACb;QACE,OAAO,IAAI;IACf;EACF,CAAC;EAED,IAAIrC,OAAO,EAAE;IACX,oBACEN,OAAA;MAAKwE,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClCzE,OAAA;QAAKwE,SAAS,EAAC,kBAAkB;QAAAC,QAAA,eAC/BzE,OAAA;UAAAyE,QAAA,EAAI;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACN7E,OAAA;QAAKwE,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BzE,OAAA;UAAKwE,SAAS,EAAC;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACvC7E,OAAA;UAAAyE,QAAA,EAAG;QAAgC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,IAAIzE,QAAQ,CAACa,MAAM,KAAK,CAAC,EAAE;IACzB,oBACEjB,OAAA;MAAKwE,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClCzE,OAAA;QAAKwE,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BzE,OAAA;UAAAyE,QAAA,EAAI;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B7E,OAAA;UAAAyE,QAAA,EAAG;QAAqD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,eACN7E,OAAA;QAAKwE,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BzE,OAAA;UAAAyE,QAAA,EAAG;QAAoC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC3C7E,OAAA;UACEwE,SAAS,EAAC,gBAAgB;UAC1BM,OAAO,EAAEf,uBAAwB;UAAAU,QAAA,EAClC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACE7E,OAAA;IAAKwE,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCzE,OAAA;MAAKwE,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BzE,OAAA;QAAAyE,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3B7E,OAAA;QAAAyE,QAAA,EAAG;MAAqC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC5C7E,OAAA;QACEwE,SAAS,EAAC,gBAAgB;QAC1BM,OAAO,EAAEf,uBAAwB;QACjCgB,QAAQ,EAAEzE,OAAQ;QAAAmE,QAAA,EACnB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN7E,OAAA;MAAKwE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7B/D,UAAU,CAAC4B,GAAG,CAACgB,QAAQ,iBACtBtD,OAAA;QAEEwE,SAAS,EAAE,gBAAgBhE,gBAAgB,KAAK8C,QAAQ,CAAC3C,EAAE,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC9EmE,OAAO,EAAEA,CAAA,KAAMrE,mBAAmB,CAAC6C,QAAQ,CAAC3C,EAAE,CAAE;QAAA8D,QAAA,EAE/CnB,QAAQ,CAAC1C;MAAK,GAJV0C,QAAQ,CAAC3C,EAAE;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN7E,OAAA;MAAKwE,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBrE,QAAQ,CAACkC,GAAG,CAAE0C,OAAO,iBACpBhF,OAAA;QAA0BwE,SAAS,EAAC,WAAW;QAAAC,QAAA,GAC5CO,OAAO,CAAC3B,QAAQ,iBACfrD,OAAA;UAAKwE,SAAS,EAAC,YAAY;UAAAC,QAAA,eACzBzE,OAAA;YACEiF,GAAG,EAAED,OAAO,CAAC3B,QAAS;YACtB6B,GAAG,EAAEF,OAAO,CAACxC,KAAM;YACnB2C,OAAO,EAAGC,CAAC,IAAK;cACbA,CAAC,CAACC,MAAM,CAAsBC,KAAK,CAACC,OAAO,GAAG,MAAM;YACvD;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN,eACD7E,OAAA;UAAKwE,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3BzE,OAAA;YAAKwE,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBzE,OAAA;cAAMwE,SAAS,EAAC,aAAa;cAAAC,QAAA,GAC1BF,aAAa,CAACS,OAAO,CAACtC,MAAM,CAAC,EAAC,GAAC,EAACsC,OAAO,CAACtC,MAAM;YAAA;cAAAgC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC,eACP7E,OAAA;cAAMwE,SAAS,EAAC,WAAW;cAAAC,QAAA,EAAET,aAAa,CAACgB,OAAO,CAAC7B,WAAW;YAAC;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE,CAAC,eACN7E,OAAA;YAAIwE,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEO,OAAO,CAACxC;UAAK;YAAAkC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/C7E,OAAA;YAAGwE,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAEO,OAAO,CAACvC;UAAO;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjD7E,OAAA;YACEwF,IAAI,EAAER,OAAO,CAAC9B,GAAI;YAClBsB,SAAS,EAAC,eAAe;YACzBa,MAAM,EAAC,QAAQ;YACfI,GAAG,EAAC,qBAAqB;YAAAhB,QAAA,EAC1B;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA,GA7BMG,OAAO,CAACrE,EAAE;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA8Bf,CACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN7E,OAAA;MAAKwE,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BzE,OAAA;QAAQwE,SAAS,EAAC,iBAAiB;QAACM,OAAO,EAAEf,uBAAwB;QAAAU,QAAA,EAAC;MAEtE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1E,EAAA,CA/UIF,cAAuC;AAAAyF,EAAA,GAAvCzF,cAAuC;AAiV7C,eAAeA,cAAc;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}