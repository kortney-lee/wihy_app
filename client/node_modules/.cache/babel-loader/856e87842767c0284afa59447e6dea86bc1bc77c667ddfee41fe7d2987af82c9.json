{"ast":null,"code":"/**\r\n * Chat Service - Dedicated service for ChatWidget functionality\r\n * Connects to dynamic API endpoint that adapts to mobile/development environment\r\n * Sessions are optional and only used if they exist\r\n */import{API_CONFIG}from'../config/apiConfig';const CHAT_API_BASE=API_CONFIG.WIHY_API_URL;class ChatService{constructor(){this.currentSessionId=null;this.conversationId=null;this.userProfile=void 0;}/**\r\n   * Send a message using the direct chat endpoint (no session required)\r\n   * This is the primary method for simple health questions\r\n   */async sendDirectMessage(message,userProfile){try{var _analysis,_analysis2;console.log('üîç CHAT SERVICE: Sending message');// Add unique identifier to break backend caching while preserving message meaning\nconst timestamp=Date.now();const uniqueId=Math.random().toString(36).substring(7);// Add the unique elements at the end in a way that won't affect the AI's response\nconst uniqueMessage=\"\".concat(message,\"\\n\\n[System: Request ID \").concat(uniqueId,\" at \").concat(timestamp,\"]\");// Always use /chat endpoint for ChatWidget conversations\nconst endpoint='chat';const request={message:uniqueMessage,conversation_id:this.conversationId,user_profile:userProfile};console.log('üîç CHAT SERVICE: Sending unique message:',{originalMessage:message,uniqueMessage:uniqueMessage.substring(0,100)+'...',timestamp,uniqueId,endpoint:'chat'});const response=await fetch(\"\".concat(CHAT_API_BASE,\"/chat?t=\").concat(timestamp,\"&r=\").concat(uniqueId),{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},body:JSON.stringify(request)});if(!response.ok){throw new Error(\"Failed to send message: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();console.log('üîç CHAT SERVICE: Response received from /chat endpoint');console.log('üîç CHAT SERVICE: Backend response structure:',{hasAnalysis:!!data.analysis,hasSummary:!!((_analysis=data.analysis)!==null&&_analysis!==void 0&&_analysis.summary),hasRecommendations:!!((_analysis2=data.analysis)!==null&&_analysis2!==void 0&&_analysis2.recommendations),hasResponse:!!data.response,responseKeys:Object.keys(data),analysisKeys:data.analysis?Object.keys(data.analysis):[]});// Store conversation ID for continuity (if provided)\nif(data.session_token){this.conversationId=data.session_token;}return data;}catch(error){console.error('Chat service direct message error:',error);return{success:false,response:'Failed to send message',error:error instanceof Error?error.message:'Unknown error'};}}/**\r\n   * Send a message using session-based endpoint (optional, advanced features)\r\n   * Only used if a session already exists\r\n   */async sendSessionMessage(message){let messageType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'health_chat';let useCustomModel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!this.currentSessionId){console.log('üîç CHAT SERVICE: No session available, falling back to direct message');return null;}try{var _data$response;console.log('üîç CHAT SERVICE: Sending session message:',{sessionId:this.currentSessionId,message:message.substring(0,100)+'...',messageType,useCustomModel});const request={session_id:this.currentSessionId,message:message,message_type:messageType,use_custom_model:useCustomModel};const response=await fetch(\"\".concat(CHAT_API_BASE,\"/api/chat/send-message\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){throw new Error(\"Failed to send session message: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();console.log('üîç CHAT SERVICE: Session message response:',{success:data.success,messageId:data.message_id,modelUsed:data.model_used,confidenceScore:data.confidence_score,responseTime:data.response_time_ms,responsePreview:((_data$response=data.response)===null||_data$response===void 0?void 0:_data$response.substring(0,100))+'...'});return data;}catch(error){console.error('Chat service session message error:',error);return{success:false,message:'Failed to send session message',error:error instanceof Error?error.message:'Unknown error'};}}/**\r\n   * Primary send message method - tries session first, falls back to direct\r\n   */async sendMessage(message,userProfile){let useCustomModel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Try session-based chat first if session exists\nif(this.currentSessionId){const sessionResponse=await this.sendSessionMessage(message,'health_chat',useCustomModel);if(sessionResponse!==null&&sessionResponse!==void 0&&sessionResponse.success){return sessionResponse;}}// Fall back to direct chat (no session required)\nreturn await this.sendDirectMessage(message,userProfile);}/**\r\n   * Set an existing session ID (optional)\r\n   */setSessionId(sessionId){this.currentSessionId=sessionId;console.log('üîç CHAT SERVICE: Session ID set:',sessionId);}/**\r\n   * Clear current session - will use direct chat\r\n   */clearSession(){this.currentSessionId=null;this.conversationId=null;console.log('üîç CHAT SERVICE: Session cleared, using direct chat');}/**\r\n   * Get current session ID (may be null)\r\n   */getCurrentSessionId(){return this.currentSessionId;}/**\r\n   * Get current conversation ID for direct chat continuity\r\n   */getConversationId(){return this.conversationId;}/**\r\n   * Set user profile for personalized responses in direct chat\r\n   */setUserProfile(profile){this.userProfile=profile;}/**\r\n   * Send message with current user profile\r\n   */async sendMessageWithProfile(message){return await this.sendMessage(message,this.userProfile);}}// Create and export singleton instance\nexport const chatService=new ChatService();// Export for type usage\nexport default chatService;","map":{"version":3,"names":["API_CONFIG","CHAT_API_BASE","WIHY_API_URL","ChatService","constructor","currentSessionId","conversationId","userProfile","sendDirectMessage","message","_analysis","_analysis2","console","log","timestamp","Date","now","uniqueId","Math","random","toString","substring","uniqueMessage","concat","endpoint","request","conversation_id","user_profile","originalMessage","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","data","json","hasAnalysis","analysis","hasSummary","summary","hasRecommendations","recommendations","hasResponse","responseKeys","Object","keys","analysisKeys","session_token","error","success","sendSessionMessage","messageType","arguments","length","undefined","useCustomModel","_data$response","sessionId","session_id","message_type","use_custom_model","messageId","message_id","modelUsed","model_used","confidenceScore","confidence_score","responseTime","response_time_ms","responsePreview","sendMessage","sessionResponse","setSessionId","clearSession","getCurrentSessionId","getConversationId","setUserProfile","profile","sendMessageWithProfile","chatService"],"sources":["C:/repo/wihy_ui/client/src/services/chatService.ts"],"sourcesContent":["/**\r\n * Chat Service - Dedicated service for ChatWidget functionality\r\n * Connects to dynamic API endpoint that adapts to mobile/development environment\r\n * Sessions are optional and only used if they exist\r\n */\r\n\r\nimport { API_CONFIG } from '../config/apiConfig';\r\n\r\nconst CHAT_API_BASE = API_CONFIG.WIHY_API_URL;\r\n\r\nexport interface ChatRequest {\r\n  message: string;\r\n  conversation_id?: string;\r\n  user_profile?: Record<string, any>;\r\n}\r\n\r\nexport interface ChatResponse {\r\n  success: boolean;\r\n  response: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  session_token?: string;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ChatSession {\r\n  session_id: string;\r\n  session_name?: string;\r\n  created_at: string;\r\n  user_id: string;\r\n}\r\n\r\nexport interface ChatMessageRequest {\r\n  session_id: string;\r\n  message: string;\r\n  message_type?: string;\r\n  use_custom_model?: boolean;\r\n}\r\n\r\nexport interface ChatMessageResponse {\r\n  success: boolean;\r\n  message_id?: string;\r\n  response?: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\nclass ChatService {\r\n  private currentSessionId: string | null = null;\r\n  private conversationId: string | null = null;\r\n\r\n  /**\r\n   * Send a message using the direct chat endpoint (no session required)\r\n   * This is the primary method for simple health questions\r\n   */\r\n  async sendDirectMessage(\r\n    message: string, \r\n    userProfile?: Record<string, any>\r\n  ): Promise<ChatResponse | null> {\r\n    try {\r\n      console.log('üîç CHAT SERVICE: Sending message');\r\n\r\n      // Add unique identifier to break backend caching while preserving message meaning\r\n      const timestamp = Date.now();\r\n      const uniqueId = Math.random().toString(36).substring(7);\r\n      \r\n      // Add the unique elements at the end in a way that won't affect the AI's response\r\n      const uniqueMessage = `${message}\\n\\n[System: Request ID ${uniqueId} at ${timestamp}]`;\r\n      \r\n      // Always use /chat endpoint for ChatWidget conversations\r\n      const endpoint = 'chat';\r\n      \r\n      const request = {\r\n        message: uniqueMessage,\r\n        conversation_id: this.conversationId,\r\n        user_profile: userProfile\r\n      };\r\n\r\n      console.log('üîç CHAT SERVICE: Sending unique message:', {\r\n        originalMessage: message,\r\n        uniqueMessage: uniqueMessage.substring(0, 100) + '...',\r\n        timestamp,\r\n        uniqueId,\r\n        endpoint: 'chat'\r\n      });\r\n\r\n      const response = await fetch(`${CHAT_API_BASE}/chat?t=${timestamp}&r=${uniqueId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n          'Pragma': 'no-cache',\r\n          'Expires': '0'\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to send message: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Response received from /chat endpoint');\r\n      console.log('üîç CHAT SERVICE: Backend response structure:', {\r\n        hasAnalysis: !!(data as any).analysis,\r\n        hasSummary: !!(data as any).analysis?.summary,\r\n        hasRecommendations: !!(data as any).analysis?.recommendations,\r\n        hasResponse: !!data.response,\r\n        responseKeys: Object.keys(data),\r\n        analysisKeys: (data as any).analysis ? Object.keys((data as any).analysis) : []\r\n      });\r\n\r\n      // Store conversation ID for continuity (if provided)\r\n      if (data.session_token) {\r\n        this.conversationId = data.session_token;\r\n      }\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Chat service direct message error:', error);\r\n      return {\r\n        success: false,\r\n        response: 'Failed to send message',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message using session-based endpoint (optional, advanced features)\r\n   * Only used if a session already exists\r\n   */\r\n  async sendSessionMessage(\r\n    message: string, \r\n    messageType: string = 'health_chat',\r\n    useCustomModel: boolean = false\r\n  ): Promise<ChatMessageResponse | null> {\r\n    if (!this.currentSessionId) {\r\n      console.log('üîç CHAT SERVICE: No session available, falling back to direct message');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      console.log('üîç CHAT SERVICE: Sending session message:', {\r\n        sessionId: this.currentSessionId,\r\n        message: message.substring(0, 100) + '...',\r\n        messageType,\r\n        useCustomModel\r\n      });\r\n\r\n      const request: ChatMessageRequest = {\r\n        session_id: this.currentSessionId,\r\n        message: message,\r\n        message_type: messageType,\r\n        use_custom_model: useCustomModel\r\n      };\r\n\r\n      const response = await fetch(`${CHAT_API_BASE}/api/chat/send-message`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to send session message: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatMessageResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Session message response:', {\r\n        success: data.success,\r\n        messageId: data.message_id,\r\n        modelUsed: data.model_used,\r\n        confidenceScore: data.confidence_score,\r\n        responseTime: data.response_time_ms,\r\n        responsePreview: data.response?.substring(0, 100) + '...'\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Chat service session message error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to send session message',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Primary send message method - tries session first, falls back to direct\r\n   */\r\n  async sendMessage(\r\n    message: string, \r\n    userProfile?: Record<string, any>,\r\n    useCustomModel: boolean = false\r\n  ): Promise<ChatResponse | ChatMessageResponse | null> {\r\n    // Try session-based chat first if session exists\r\n    if (this.currentSessionId) {\r\n      const sessionResponse = await this.sendSessionMessage(message, 'health_chat', useCustomModel);\r\n      if (sessionResponse?.success) {\r\n        return sessionResponse;\r\n      }\r\n    }\r\n\r\n    // Fall back to direct chat (no session required)\r\n    return await this.sendDirectMessage(message, userProfile);\r\n  }\r\n\r\n  /**\r\n   * Set an existing session ID (optional)\r\n   */\r\n  setSessionId(sessionId: string): void {\r\n    this.currentSessionId = sessionId;\r\n    console.log('üîç CHAT SERVICE: Session ID set:', sessionId);\r\n  }\r\n\r\n  /**\r\n   * Clear current session - will use direct chat\r\n   */\r\n  clearSession(): void {\r\n    this.currentSessionId = null;\r\n    this.conversationId = null;\r\n    console.log('üîç CHAT SERVICE: Session cleared, using direct chat');\r\n  }\r\n\r\n  /**\r\n   * Get current session ID (may be null)\r\n   */\r\n  getCurrentSessionId(): string | null {\r\n    return this.currentSessionId;\r\n  }\r\n\r\n  /**\r\n   * Get current conversation ID for direct chat continuity\r\n   */\r\n  getConversationId(): string | null {\r\n    return this.conversationId;\r\n  }\r\n\r\n  /**\r\n   * Set user profile for personalized responses in direct chat\r\n   */\r\n  setUserProfile(profile: Record<string, any>): void {\r\n    this.userProfile = profile;\r\n  }\r\n\r\n  private userProfile?: Record<string, any>;\r\n\r\n  /**\r\n   * Send message with current user profile\r\n   */\r\n  async sendMessageWithProfile(message: string): Promise<ChatResponse | ChatMessageResponse | null> {\r\n    return await this.sendMessage(message, this.userProfile);\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const chatService = new ChatService();\r\n\r\n// Export for type usage\r\nexport default chatService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}