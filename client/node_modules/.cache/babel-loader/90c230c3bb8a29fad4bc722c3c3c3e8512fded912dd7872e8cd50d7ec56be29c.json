{"ast":null,"code":"import { API_CONFIG, WIHY_HEALTH_CHECK_URL, WIHY_SCAN_IMAGE_URL, WIHY_SCAN_BARCODE_URL } from '../config/apiConfig';\nimport { logger } from '../utils/logger';\n\n// Types for the WiHy Enhanced Model API (2,325 training examples)\n\n// Enhanced Model Response Structure\n\n// Image Scanner Response Structure\n\n// Barcode Scanner Response Structure  \n\n// Legacy interfaces for backward compatibility\n\n// Chart data structure from OpenAPI spec\n\n// Core response data structure from OpenAPI spec\n\n// Main response structure from OpenAPI spec\n\n// Keep the old interface for backward compatibility\n\n// Interface for the /scan endpoint\n\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj) {\n  return obj && typeof obj === 'object' && 'data' in obj && 'service_used' in obj;\n}\n\n// Legacy types for backward compatibility\n\nclass WihyEnhancedAPIService {\n  constructor() {\n    this.baseURL = void 0;\n    this.backupURLs = void 0;\n    this.isLocalDevelopment = void 0;\n    this.baseURL = API_CONFIG.WIHY_ENHANCED_API_URL;\n    this.backupURLs = [API_CONFIG.WIHY_ENHANCED_API_BACKUP, API_CONFIG.WIHY_ENHANCED_API_CONTAINER];\n    this.isLocalDevelopment = this.baseURL.includes('localhost');\n  }\n\n  /**\r\n   * Ask WiHy Enhanced Model a health-related question (2,325 training examples)\r\n   */\n  async askEnhancedHealthQuestion(request) {\n    try {\n      logger.apiRequest('Making WiHy Enhanced Model API request', request);\n      const endpoint = `${this.baseURL}/ask`;\n\n      // Use fetch API with timeout and retry logic\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await this.fetchWithRetry(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Enhanced Model API response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy Enhanced Model API error:', error);\n      throw this.handleEnhancedError(error);\n    }\n  }\n\n  /**\r\n   * Scan food image using enhanced vision analysis\r\n   */\n  async scanFoodImage(imageFile, context = '') {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      formData.append('context', context);\n      const endpoint = WIHY_SCAN_IMAGE_URL;\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for images\n\n      const response = await this.fetchWithRetry(endpoint, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Image Scanner response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy Image Scanner error:', error);\n      throw this.handleScannerError(error, 'image');\n    }\n  }\n\n  /**\r\n   * Scan barcode using enhanced nutrition database\r\n   */\n  async scanBarcode(barcode, context = {}) {\n    try {\n      const requestBody = {\n        query: barcode,\n        scan_location: context.scan_location || 'web_app',\n        device_type: context.device_type || 'desktop'\n      };\n      const endpoint = WIHY_SCAN_BARCODE_URL;\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\n\n      const response = await this.fetchWithRetry(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Barcode Scanner response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy Barcode Scanner error:', error);\n      throw this.handleScannerError(error, 'barcode');\n    }\n  }\n\n  /**\r\n   * Check API health and get status\r\n   */\n  async checkAPIHealth() {\n    try {\n      const response = await fetch(WIHY_HEALTH_CHECK_URL, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WiHy API health check failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Fetch with automatic retry logic and fallback endpoints\r\n   */\n  async fetchWithRetry(url, options, retries = 2) {\n    const endpoints = [this.baseURL, ...this.backupURLs];\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      for (const endpoint of endpoints) {\n        try {\n          const fullUrl = url.replace(this.baseURL, endpoint);\n          const response = await fetch(fullUrl, options);\n          if (response.ok) {\n            return response;\n          }\n\n          // If primary endpoint fails, try backup\n          if (endpoint === this.baseURL && response.status >= 500) {\n            continue;\n          }\n          return response; // Return even if not ok for error handling\n        } catch (error) {\n          logger.warn(`Attempt ${attempt + 1} failed for ${endpoint}:`, error);\n\n          // If this is the last endpoint and last attempt, throw error\n          if (endpoint === endpoints[endpoints.length - 1] && attempt === retries) {\n            throw error;\n          }\n        }\n      }\n    }\n    throw new Error('All endpoints and retries failed');\n  }\n\n  /**\r\n   * Enhanced error handling for API responses\r\n   */\n  handleEnhancedError(error) {\n    if (error instanceof Error) {\n      // Check for timeout/abort errors\n      if (error.name === 'AbortError') {\n        return new Error('TIMEOUT_ERROR: Enhanced model request timed out - services may be under heavy load');\n      }\n\n      // Check for CORS errors\n      if (error.message.includes('CORS') || error.message.includes('Access to fetch') || error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\n        return new Error('CORS_ERROR: Unable to connect to WiHy Enhanced Model from this domain');\n      }\n\n      // Check for network/connectivity issues\n      if (error.message.includes('fetch') || error.message.includes('network') || error.name === 'TypeError' || error.message.includes('Failed to fetch')) {\n        return new Error('NETWORK_ERROR: Unable to connect to WiHy Enhanced Model services');\n      }\n\n      // Check for server errors\n      if (error.message.includes('HTTP error! status: 5')) {\n        return new Error('SERVER_ERROR: WiHy Enhanced Model temporarily unavailable');\n      }\n      return new Error(error.message || 'WiHy Enhanced Model request failed');\n    }\n    return new Error('Unknown error occurred while contacting WiHy Enhanced Model');\n  }\n\n  /**\r\n   * Scanner-specific error handling\r\n   */\n  handleScannerError(error, scanType) {\n    const context = scanType === 'image' ? 'Image Scanner' : 'Barcode Scanner';\n    if (error instanceof Error) {\n      if (error.name === 'AbortError') {\n        return new Error(`TIMEOUT_ERROR: ${context} request timed out`);\n      }\n      if (error.message.includes('HTTP error! status: 400')) {\n        return new Error(`VALIDATION_ERROR: Invalid ${scanType} format or data`);\n      }\n      if (error.message.includes('HTTP error! status: 404')) {\n        return new Error(`NOT_FOUND: ${scanType === 'barcode' ? 'Product not found in nutrition databases' : 'Unable to analyze image'}`);\n      }\n      return new Error(`${context.toUpperCase()}_ERROR: ${error.message}`);\n    }\n    return new Error(`Unknown ${context.toLowerCase()} error occurred`);\n  }\n\n  /**\r\n   * Legacy compatibility method - Ask WiHy a health-related question\r\n   * Now routes to Enhanced Model for better responses\r\n   */\n  async askAnything(request) {\n    try {\n      // Convert legacy request to enhanced format\n      const enhancedRequest = {\n        query: request.query,\n        context: 'user_context' in request ? JSON.stringify(request.user_context) : '',\n        user_id: 'user_id' in request ? request.user_id : undefined\n      };\n\n      // Try enhanced model first\n      try {\n        const enhancedResponse = await this.askEnhancedHealthQuestion(enhancedRequest);\n\n        // Convert enhanced response to legacy format for backward compatibility\n        return this.convertEnhancedToLegacy(enhancedResponse, request.query);\n      } catch (enhancedError) {\n        logger.warn('Enhanced model failed, falling back to legacy format:', enhancedError);\n\n        // Fallback to legacy unified API if enhanced model fails\n        return this.askLegacyUnified(request);\n      }\n    } catch (error) {\n      logger.error('All WiHy API methods failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Fallback method for legacy unified API\r\n   */\n  async askLegacyUnified(request) {\n    logger.apiRequest('Making WiHy Legacy API request', request);\n    let requestBody;\n    let endpoint;\n\n    // Use legacy endpoints\n    endpoint = this.isLocalDevelopment ? `${API_CONFIG.WIHY_UNIFIED_API_URL}/ask` : `${API_CONFIG.WIHY_UNIFIED_API_URL}/ask`;\n\n    // Build HealthQuestion object according to legacy spec\n    if ('user_context' in request) {\n      requestBody = {\n        query: request.query,\n        user_context: request.user_context || {},\n        include_nutrition: true,\n        include_biblical_wisdom: false,\n        include_charts: true\n      };\n    } else {\n      const unifiedReq = request;\n      requestBody = {\n        query: unifiedReq.query,\n        user_context: unifiedReq.context || {},\n        include_nutrition: true,\n        include_biblical_wisdom: true,\n        include_charts: true\n      };\n    }\n\n    // Use fetch API to match the working example exactly with timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody),\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    logger.apiResponse('WiHy Legacy API response received', data);\n    return data;\n  }\n\n  /**\r\n   * Convert Enhanced Model response to legacy format for backward compatibility\r\n   */\n  convertEnhancedToLegacy(enhancedResponse, originalQuery) {\n    return {\n      success: true,\n      timestamp: enhancedResponse.timestamp || new Date().toISOString(),\n      response_type: 'enhanced_model',\n      query: originalQuery,\n      wihy_response: {\n        query_type: 'enhanced_model',\n        query: originalQuery,\n        core_principle: enhancedResponse.answer,\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [enhancedResponse.answer],\n          action_items: enhancedResponse.wihy_wisdom.map((wisdom, index) => ({\n            action: wisdom,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'enhanced_model',\n            mechanism: 'biblical_wisdom',\n            timeline: 'immediate'\n          })),\n          timeline: 'immediate'\n        },\n        research_foundation: enhancedResponse.research_citations.map(citation => ({\n          citation_text: citation,\n          study_type: 'enhanced_model_research',\n          key_finding: citation\n        })),\n        progress_tracking: {\n          key_metrics: ['enhanced_health_understanding'],\n          reassessment_period: '1 week'\n        },\n        biblical_wisdom: enhancedResponse.wihy_wisdom\n      },\n      message: enhancedResponse.answer\n    };\n  }\n\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\n  convertToLegacyFormat(unifiedResponse, originalQuery) {\n    var _unifiedResponse$data, _unifiedResponse$data2, _unifiedResponse$data3, _unifiedResponse$data4;\n    // Handle chat service response\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\n      return {\n        success: unifiedResponse.success,\n        timestamp: new Date().toISOString(),\n        response_type: unifiedResponse.request_type,\n        query: originalQuery,\n        wihy_response: {\n          query_type: unifiedResponse.request_type,\n          query: originalQuery,\n          core_principle: unifiedResponse.data.response,\n          personalized_analysis: {\n            identified_risk_factors: [],\n            priority_health_goals: [unifiedResponse.data.response],\n            action_items: [{\n              action: unifiedResponse.data.response,\n              priority: 'medium',\n              target_illness: 'general_health',\n              evidence_level: 'ai_generated',\n              mechanism: 'chat_response',\n              timeline: 'immediate'\n            }],\n            timeline: 'immediate'\n          },\n          research_foundation: [{\n            citation_text: 'WiHy AI Chat System',\n            study_type: 'ai_response',\n            key_finding: unifiedResponse.data.response\n          }],\n          progress_tracking: {\n            key_metrics: ['general_health'],\n            reassessment_period: '1 week'\n          },\n          biblical_wisdom: []\n        },\n        message: unifiedResponse.data.response\n      };\n    }\n\n    // Handle other service types (training, nutrition, etc.)\n    return {\n      success: unifiedResponse.success,\n      timestamp: new Date().toISOString(),\n      response_type: unifiedResponse.request_type,\n      query: originalQuery,\n      wihy_response: {\n        query_type: unifiedResponse.request_type,\n        query: originalQuery,\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [],\n          action_items: ((_unifiedResponse$data = unifiedResponse.data.recommendations) === null || _unifiedResponse$data === void 0 ? void 0 : (_unifiedResponse$data2 = _unifiedResponse$data.immediate_actions) === null || _unifiedResponse$data2 === void 0 ? void 0 : _unifiedResponse$data2.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || ((_unifiedResponse$data3 = unifiedResponse.data.legacy_recommendations) === null || _unifiedResponse$data3 === void 0 ? void 0 : _unifiedResponse$data3.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || [],\n          timeline: 'ongoing'\n        },\n        research_foundation: ((_unifiedResponse$data4 = unifiedResponse.data.sources) === null || _unifiedResponse$data4 === void 0 ? void 0 : _unifiedResponse$data4.map(source => ({\n          citation_text: source,\n          study_type: 'research',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['general_health'],\n          reassessment_period: '1 month'\n        },\n        biblical_wisdom: []\n      },\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\n    };\n  }\n\n  /**\r\n   * Get health news articles using the unified API\r\n   */\n  async getHealthNews(categories, limit) {\n    const query = categories && categories.length > 0 ? `Latest health news about ${categories.join(', ')}` : 'Latest health news';\n    const request = {\n      query: query,\n      request_type: 'health',\n      context: {\n        categories: categories,\n        limit: limit\n      }\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\n  async searchNutrition(foodQuery, userContext) {\n    const request = {\n      query: `Nutrition information for ${foodQuery}`,\n      request_type: 'nutrition',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, request.query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Legacy scan food images method - now uses enhanced scanner\r\n   */\n  async scanFood(file, scanOptions) {\n    try {\n      if (file) {\n        // Use enhanced image scanner\n        const enhancedResponse = await this.scanFoodImage(file, scanOptions !== null && scanOptions !== void 0 && scanOptions.user_context ? JSON.stringify(scanOptions.user_context) : '');\n\n        // Convert to legacy format\n        return this.convertImageScanToLegacy(enhancedResponse, 'Image scan analysis');\n      } else if (scanOptions !== null && scanOptions !== void 0 && scanOptions.barcode) {\n        // Use enhanced barcode scanner\n        const enhancedResponse = await this.scanBarcode(scanOptions.barcode, scanOptions.user_context);\n\n        // Convert to legacy format\n        return this.convertBarcodeScanToLegacy(enhancedResponse, `Barcode scan: ${scanOptions.barcode}`);\n      } else {\n        throw new Error('No file or barcode provided for scanning');\n      }\n    } catch (error) {\n      logger.error('WiHy Scan error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Convert Image Scanner response to legacy format\r\n   */\n  convertImageScanToLegacy(response, query) {\n    var _response$overall_ass, _response$data_source;\n    const recommendations = response.wihy_recommendations || [];\n    const warnings = response.carcinogen_warnings || [];\n    return {\n      success: response.success,\n      timestamp: new Date().toISOString(),\n      response_type: 'image_scan',\n      query: query,\n      wihy_response: {\n        query_type: 'image_scan',\n        query: query,\n        core_principle: ((_response$overall_ass = response.overall_assessment) === null || _response$overall_ass === void 0 ? void 0 : _response$overall_ass.verdict) || 'Image analysis complete',\n        personalized_analysis: {\n          identified_risk_factors: warnings.map(warning => ({\n            risk_factor: warning,\n            associated_illnesses: 'various',\n            prevalence_rate: 0,\n            preventability_score: 100\n          })),\n          priority_health_goals: recommendations,\n          action_items: recommendations.map(rec => ({\n            action: rec,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'image_analysis',\n            mechanism: 'food_choice',\n            timeline: 'immediate'\n          })),\n          timeline: 'immediate'\n        },\n        research_foundation: ((_response$data_source = response.data_sources) === null || _response$data_source === void 0 ? void 0 : _response$data_source.map(source => ({\n          citation_text: source,\n          study_type: 'database',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['food_quality_awareness'],\n          reassessment_period: '1 week'\n        },\n        biblical_wisdom: ['Choose foods that nourish your temple - 1 Corinthians 6:19']\n      },\n      message: this.formatImageScanResponse(response)\n    };\n  }\n\n  /**\r\n   * Convert Barcode Scanner response to legacy format\r\n   */\n  convertBarcodeScanToLegacy(response, query) {\n    var _response$health_anal, _response$health_anal2, _response$data_source2;\n    const recommendations = response.wihy_recommendations || [];\n    const warnings = [...(((_response$health_anal = response.health_analysis) === null || _response$health_anal === void 0 ? void 0 : _response$health_anal.carcinogen_alerts) || []), ...(((_response$health_anal2 = response.health_analysis) === null || _response$health_anal2 === void 0 ? void 0 : _response$health_anal2.toxic_additives) || [])];\n    return {\n      success: response.success,\n      timestamp: new Date().toISOString(),\n      response_type: 'barcode_scan',\n      query: query,\n      wihy_response: {\n        query_type: 'barcode_scan',\n        query: query,\n        core_principle: `Product Analysis: ${response.product_name}`,\n        personalized_analysis: {\n          identified_risk_factors: warnings.map(warning => ({\n            risk_factor: warning,\n            associated_illnesses: 'various',\n            prevalence_rate: 0,\n            preventability_score: 100\n          })),\n          priority_health_goals: recommendations,\n          action_items: recommendations.map(rec => ({\n            action: rec,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'product_analysis',\n            mechanism: 'ingredient_awareness',\n            timeline: 'immediate'\n          })),\n          timeline: 'immediate'\n        },\n        research_foundation: ((_response$data_source2 = response.data_sources) === null || _response$data_source2 === void 0 ? void 0 : _response$data_source2.map(source => ({\n          citation_text: source,\n          study_type: 'nutrition_database',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['product_awareness', 'nova_understanding'],\n          reassessment_period: '1 week'\n        },\n        biblical_wisdom: ['Real food doesn\\'t need complicated analysis - choose whole foods']\n      },\n      message: this.formatBarcodeScanResponse(response)\n    };\n  }\n\n  /**\r\n   * Convert File to base64 string\r\n   */\n  fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const result = reader.result;\n        // Remove the data:image/jpeg;base64, prefix\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  /**\r\n   * General health search using the unified API\r\n   */\n  async searchHealth(query, userContext) {\n    const request = {\n      query: query,\n      request_type: 'auto',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\n    return response;\n  }\n\n  /**\r\n   * Format Enhanced Model response for display in the UI\r\n   */\n  formatEnhancedResponse(response) {\n    let formatted = `# WiHy Enhanced Health Intelligence\\n\\n`;\n\n    // Main response content\n    formatted += response.answer;\n\n    // Add research citations if available\n    if (response.research_citations && response.research_citations.length > 0) {\n      formatted += `\\n\\n## 📚 Research Citations\\n`;\n      response.research_citations.forEach((citation, index) => {\n        formatted += `${index + 1}. ${citation}\\n`;\n      });\n    }\n\n    // Add biblical wisdom if available\n    if (response.wihy_wisdom && response.wihy_wisdom.length > 0) {\n      formatted += `\\n\\n## ✝️ Biblical Wisdom\\n`;\n      response.wihy_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n\n    // Add enhanced model info\n    formatted += `\\n\\n---\\n\\n`;\n    formatted += `*Enhanced Model Response (${response.training_examples_used} training examples)*\\n`;\n    formatted += `*Confidence Score: ${Math.round(response.confidence_score * 100)}%*\\n`;\n    formatted += `*Model Version: ${response.model_version}*`;\n    return formatted;\n  }\n\n  /**\r\n   * Format Image Scanner response for display\r\n   */\n  formatImageScanResponse(response) {\n    let formatted = `# 📷 WiHy Image Analysis Results\\n\\n`;\n    if (response.success && response.overall_assessment) {\n      var _response$nova_chart_;\n      const {\n        health_score,\n        verdict,\n        nova_group\n      } = response.overall_assessment;\n      const guidance = (_response$nova_chart_ = response.nova_chart_reference) === null || _response$nova_chart_ === void 0 ? void 0 : _response$nova_chart_.client_guidance;\n      formatted += `## Health Assessment\\n`;\n      formatted += `**Health Score:** ${health_score}/100\\n`;\n      formatted += `**Verdict:** ${verdict}\\n`;\n      formatted += `**NOVA Group:** ${nova_group} (${this.getNovaLabel(nova_group)})\\n`;\n      if (guidance) {\n        formatted += `**Recommendation:** ${guidance.action} - ${guidance.message}\\n\\n`;\n      }\n\n      // Detected foods\n      if (response.detected_foods && response.detected_foods.length > 0) {\n        formatted += `## 🍽️ Detected Foods\\n`;\n        response.detected_foods.forEach(food => {\n          formatted += `- **${food.name}** (Confidence: ${Math.round(food.confidence * 100)}%, NOVA: ${food.nova_group})\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // WIHY recommendations\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\n        formatted += `## 💡 WIHY Recommendations\\n`;\n        response.wihy_recommendations.forEach(rec => {\n          formatted += `- ${rec}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Health warnings\n      if (response.carcinogen_warnings && response.carcinogen_warnings.length > 0) {\n        formatted += `## ⚠️ Health Warnings\\n`;\n        response.carcinogen_warnings.forEach(warning => {\n          formatted += `- ${warning}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Family safety\n      if (response.family_safety) {\n        formatted += `## 👨‍👩‍👧‍👦 Family Safety\\n`;\n        formatted += `**Status:** ${response.family_safety.family_safe ? '✅ Safe' : '❌ Not Recommended'}\\n`;\n        formatted += `**Verdict:** ${response.family_safety.family_verdict}\\n\\n`;\n      }\n    } else {\n      formatted += `Analysis failed. Please try again or choose whole foods when in doubt.\\n\\n`;\n    }\n\n    // Data sources\n    if (response.data_sources && response.data_sources.length > 0) {\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\n    }\n    return formatted;\n  }\n\n  /**\r\n   * Format Barcode Scanner response for display\r\n   */\n  formatBarcodeScanResponse(response) {\n    let formatted = `# 🔍 WiHy Barcode Analysis\\n\\n`;\n    if (response.success) {\n      formatted += `## Product Information\\n`;\n      formatted += `**Product:** ${response.product_name}\\n`;\n      formatted += `**Health Score:** ${response.health_score}/100\\n`;\n      formatted += `**NOVA Group:** ${response.nova_group} (${this.getNovaLabel(response.nova_group)})\\n\\n`;\n\n      // Nutritional data\n      if (response.nutritional_data) {\n        const nutrition = response.nutritional_data;\n        formatted += `## 📊 Nutrition Facts (per 100g)\\n`;\n        formatted += `- **Calories:** ${nutrition.calories_per_100g}\\n`;\n        formatted += `- **Protein:** ${nutrition.protein_g}g\\n`;\n        formatted += `- **Carbohydrates:** ${nutrition.carbs_g}g\\n`;\n        formatted += `- **Fat:** ${nutrition.fat_g}g\\n`;\n        formatted += `- **Fiber:** ${nutrition.fiber_g}g\\n`;\n        formatted += `- **Sodium:** ${nutrition.sodium_mg}mg\\n\\n`;\n      }\n\n      // Health analysis\n      if (response.health_analysis) {\n        const analysis = response.health_analysis;\n        formatted += `## 🔬 Health Analysis\\n`;\n        formatted += `**Processing Level:** ${analysis.processing_level}\\n`;\n        if (analysis.carcinogen_alerts && analysis.carcinogen_alerts.length > 0) {\n          formatted += `**⚠️ Carcinogen Alerts:**\\n`;\n          analysis.carcinogen_alerts.forEach(alert => {\n            formatted += `- ${alert}\\n`;\n          });\n        }\n        if (analysis.toxic_additives && analysis.toxic_additives.length > 0) {\n          formatted += `**🧪 Toxic Additives:**\\n`;\n          analysis.toxic_additives.forEach(additive => {\n            formatted += `- ${additive}\\n`;\n          });\n        }\n        formatted += '\\n';\n      }\n\n      // WIHY recommendations\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\n        formatted += `## 💡 WIHY Recommendations\\n`;\n        response.wihy_recommendations.forEach(rec => {\n          formatted += `- ${rec}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Ingredients\n      if (response.ingredients && response.ingredients.length > 0) {\n        formatted += `## 🧾 Ingredients\\n`;\n        formatted += response.ingredients.join(', ') + '\\n\\n';\n      }\n    } else {\n      formatted += `Product not found or analysis failed. Choose foods with 5 or fewer ingredients when in doubt.\\n\\n`;\n    }\n\n    // Data sources\n    if (response.data_sources && response.data_sources.length > 0) {\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\n    }\n    return formatted;\n  }\n\n  /**\r\n   * Get NOVA group label\r\n   */\n  getNovaLabel(novaGroup) {\n    const labels = {\n      1: 'Natural/Unprocessed',\n      2: 'Processed Culinary Ingredients',\n      3: 'Processed Foods',\n      4: 'Ultra-Processed Foods'\n    };\n    return labels[novaGroup] || 'Unknown';\n  }\n\n  /**\r\n   * Get NOVA guidance for UI display\r\n   */\n  getNovaGuidance(novaGroup) {\n    const guidance = {\n      1: {\n        action: 'CHOOSE',\n        color: 'green',\n        message: 'Real food as God intended'\n      },\n      2: {\n        action: 'MODERATE',\n        color: 'yellow',\n        message: 'Use sparingly'\n      },\n      3: {\n        action: 'LIMIT',\n        color: 'orange',\n        message: 'Find alternatives'\n      },\n      4: {\n        action: 'AVOID',\n        color: 'red',\n        message: 'Your family deserves better'\n      }\n    };\n    return guidance[novaGroup] || guidance[4];\n  }\n  formatWihyResponse(response) {\n    var _wihy_response$resear, _wihy_response$biblic;\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\n      const healthResp = response;\n      const data = healthResp.data;\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\n\n      // Main response content\n      formatted += data.response;\n\n      // Add health insights if available\n      if (data.health_insights) {\n        var _data$health_insights, _data$health_insights2, _data$health_insights3;\n        if ((_data$health_insights = data.health_insights.key_benefits) !== null && _data$health_insights !== void 0 && _data$health_insights.length) {\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\n          data.health_insights.key_benefits.forEach(benefit => {\n            formatted += `- ${benefit}\\n`;\n          });\n        }\n        if ((_data$health_insights2 = data.health_insights.potential_risks) !== null && _data$health_insights2 !== void 0 && _data$health_insights2.length) {\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\n          data.health_insights.potential_risks.forEach(risk => {\n            formatted += `- ${risk}\\n`;\n          });\n        }\n        if ((_data$health_insights3 = data.health_insights.recommendations) !== null && _data$health_insights3 !== void 0 && _data$health_insights3.length) {\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\n          data.health_insights.recommendations.forEach(rec => {\n            formatted += `- ${rec}\\n`;\n          });\n        }\n      }\n\n      // Add processing info\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\n      return formatted;\n    }\n\n    // Handle UnifiedResponse format (legacy API)\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\n      var _unifiedResp$data$ai_;\n      const unifiedResp = response;\n      let formatted = `# WiHy Health Assistant\\n\\n`;\n\n      // Use the ai_response.response field which contains the actual response\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\n        formatted += unifiedResp.data.ai_response.response;\n      } else {\n        // Fallback to showing raw data if ai_response is not available\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\n      }\n\n      // Add service information if available\n      if ((_unifiedResp$data$ai_ = unifiedResp.data.ai_response) !== null && _unifiedResp$data$ai_ !== void 0 && _unifiedResp$data$ai_.service) {\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\n        if (unifiedResp.data.ai_response.confidence) {\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\n        }\n      }\n      return formatted;\n    }\n\n    // Handle legacy WihyResponse format\n    const legacyResp = response;\n    const {\n      wihy_response\n    } = legacyResp;\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\n\n    // Personalized Analysis\n    if (wihy_response.personalized_analysis) {\n      var _wihy_response$person, _wihy_response$person2, _wihy_response$person3;\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\n\n      // Risk Factors\n      if (((_wihy_response$person = wihy_response.personalized_analysis.identified_risk_factors) === null || _wihy_response$person === void 0 ? void 0 : _wihy_response$person.length) > 0) {\n        formatted += `### Identified Risk Factors:\\n`;\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\n        });\n      }\n\n      // Priority Goals\n      if (((_wihy_response$person2 = wihy_response.personalized_analysis.priority_health_goals) === null || _wihy_response$person2 === void 0 ? void 0 : _wihy_response$person2.length) > 0) {\n        formatted += `### 🎯 Priority Health Goals:\\n`;\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\n          formatted += `- ${goal}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Action Items\n      if (((_wihy_response$person3 = wihy_response.personalized_analysis.action_items) === null || _wihy_response$person3 === void 0 ? void 0 : _wihy_response$person3.length) > 0) {\n        formatted += `### 📋 Action Items:\\n`;\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\n          formatted += `- **Priority:** ${action.priority}\\n`;\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\n        });\n      }\n\n      // Timeline\n      if (wihy_response.personalized_analysis.timeline) {\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\n      }\n    }\n\n    // Research Foundation\n    if (((_wihy_response$resear = wihy_response.research_foundation) === null || _wihy_response$resear === void 0 ? void 0 : _wihy_response$resear.length) > 0) {\n      formatted += `## 📚 Research Foundation\\n\\n`;\n      wihy_response.research_foundation.forEach(research => {\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\n        formatted += `  ${research.key_finding}\\n\\n`;\n      });\n    }\n\n    // Progress Tracking\n    if (wihy_response.progress_tracking) {\n      formatted += `## 📊 Progress Tracking\\n\\n`;\n      formatted += `**Key Metrics to Track:**\\n`;\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\n        formatted += `- ${metric}\\n`;\n      });\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\n    }\n\n    // Biblical Wisdom\n    if (((_wihy_response$biblic = wihy_response.biblical_wisdom) === null || _wihy_response$biblic === void 0 ? void 0 : _wihy_response$biblic.length) > 0) {\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\n      wihy_response.biblical_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n\n    // Add timestamp if available (different field names in different response formats)\n    const timestamp = response.timestamp || response.created_at || new Date().toISOString();\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\n    return formatted;\n  }\n\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\n  extractRecommendations(response) {\n    const recommendations = [];\n\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\n      const healthResp = response;\n      if (healthResp.data.health_insights.recommendations) {\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\n      }\n      return recommendations;\n    }\n    if (isUnifiedResponse(response)) {\n      // Handle new structured recommendations\n      if (response.data.recommendations) {\n        const recs = response.data.recommendations;\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\n      }\n      // Handle legacy recommendations\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\n        response.data.legacy_recommendations.forEach(r => recommendations.push(r));\n      }\n    } else {\n      var _legacyResp$wihy_resp;\n      // Handle legacy WihyResponse format\n      const legacyResp = response;\n      if ((_legacyResp$wihy_resp = legacyResp.wihy_response.personalized_analysis) !== null && _legacyResp$wihy_resp !== void 0 && _legacyResp$wihy_resp.action_items) {\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\n          recommendations.push(`${action.action} (${action.priority} priority)`);\n        });\n      }\n    }\n    return recommendations;\n  }\n\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\n  extractCitations(response) {\n    const citations = [];\n\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\n      // For now, the new API doesn't include specific citation fields in the schema\n      // We could parse citations from the response text if needed\n      return citations;\n    }\n    if (isUnifiedResponse(response)) {\n      // Unified API may include sources array\n      if (response.data.sources && response.data.sources.length > 0) {\n        response.data.sources.forEach(s => citations.push(s));\n      }\n    } else {\n      // Handle legacy WihyResponse format\n      const legacyResp = response;\n      if (legacyResp.wihy_response.research_foundation) {\n        legacyResp.wihy_response.research_foundation.forEach(research => {\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\n        });\n      }\n    }\n    return citations;\n  }\n\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\n  formatUnifiedResponseForChat(response) {\n    // Handle chat service responses\n    if (response.service_used === 'chat' && response.data.response) {\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n      // We should provide more helpful information to the user\n      const briefResponse = response.data.response;\n      if (briefResponse.includes('AI Chat response to:')) {\n        // The API gave us a placeholder response, provide something more useful\n        const query = response.data.query || 'your question';\n        return `I received your question about \"${query}\" and I'm here to help! \n\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\n\n• Understanding health and nutrition concepts\n• Providing general wellness guidance  \n• Explaining health data and metrics\n• Offering evidence-based health insights\n\nWhat specific aspect of health would you like to explore further?`;\n      }\n      return briefResponse;\n    }\n\n    // Handle other response types\n    if (response.data.response) {\n      return response.data.response;\n    }\n    if (response.data.analysis) {\n      return response.data.analysis;\n    }\n    if (response.data.training_status) {\n      let message = `🔄 ${response.data.training_status}`;\n      if (response.data.available_models && response.data.available_models.length > 0) {\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\n      }\n      return message;\n    }\n\n    // Fallback - show the raw data in a readable format\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\n  }\n}\n\n// Export a singleton instance of the enhanced API service\nexport const wihyAPI = new WihyEnhancedAPIService();\nexport default wihyAPI;","map":{"version":3,"names":["API_CONFIG","WIHY_HEALTH_CHECK_URL","WIHY_SCAN_IMAGE_URL","WIHY_SCAN_BARCODE_URL","logger","isUnifiedResponse","obj","WihyEnhancedAPIService","constructor","baseURL","backupURLs","isLocalDevelopment","WIHY_ENHANCED_API_URL","WIHY_ENHANCED_API_BACKUP","WIHY_ENHANCED_API_CONTAINER","includes","askEnhancedHealthQuestion","request","apiRequest","endpoint","controller","AbortController","timeoutId","setTimeout","abort","response","fetchWithRetry","method","headers","body","JSON","stringify","signal","clearTimeout","ok","Error","status","data","json","apiResponse","error","handleEnhancedError","scanFoodImage","imageFile","context","formData","FormData","append","handleScannerError","scanBarcode","barcode","requestBody","query","scan_location","device_type","checkAPIHealth","fetch","url","options","retries","endpoints","attempt","fullUrl","replace","warn","length","name","message","scanType","toUpperCase","toLowerCase","askAnything","enhancedRequest","user_context","user_id","undefined","enhancedResponse","convertEnhancedToLegacy","enhancedError","askLegacyUnified","WIHY_UNIFIED_API_URL","include_nutrition","include_biblical_wisdom","include_charts","unifiedReq","originalQuery","success","timestamp","Date","toISOString","response_type","wihy_response","query_type","core_principle","answer","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","wihy_wisdom","map","wisdom","index","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","research_citations","citation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","convertToLegacyFormat","unifiedResponse","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","request_type","analysis","recommendations","immediate_actions","rec","legacy_recommendations","sources","source","getHealthNews","categories","limit","join","searchNutrition","foodQuery","userContext","scanFood","file","scanOptions","convertImageScanToLegacy","convertBarcodeScanToLegacy","_response$overall_ass","_response$data_source","wihy_recommendations","warnings","carcinogen_warnings","overall_assessment","verdict","warning","risk_factor","associated_illnesses","prevalence_rate","preventability_score","data_sources","formatImageScanResponse","_response$health_anal","_response$health_anal2","_response$data_source2","health_analysis","carcinogen_alerts","toxic_additives","product_name","formatBarcodeScanResponse","fileToBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","base64","split","onerror","searchHealth","formatEnhancedResponse","formatted","forEach","training_examples_used","Math","round","confidence_score","model_version","_response$nova_chart_","health_score","nova_group","guidance","nova_chart_reference","client_guidance","getNovaLabel","detected_foods","food","confidence","family_safety","family_safe","family_verdict","nutritional_data","nutrition","calories_per_100g","protein_g","carbs_g","fat_g","fiber_g","sodium_mg","processing_level","alert","additive","ingredients","novaGroup","labels","getNovaGuidance","color","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","healthResp","health_insights","_data$health_insights","_data$health_insights2","_data$health_insights3","key_benefits","benefit","potential_risks","risk","processor_used","processing_time","toFixed","_unifiedResp$data$ai_","unifiedResp","ai_response","service","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","goal","research","metric","created_at","toLocaleString","extractRecommendations","r","push","recs","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_legacyResp$wihy_resp","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","training_status","available_models","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, WIHY_API_ENDPOINT, getEnhancedWihyEndpoint, WIHY_HEALTH_CHECK_URL, WIHY_SCAN_IMAGE_URL, WIHY_SCAN_BARCODE_URL } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Types for the WiHy Enhanced Model API (2,325 training examples)\r\nexport interface EnhancedHealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  context?: string;                       // OPTIONAL: Additional context for the question\r\n  user_id?: string;                       // OPTIONAL: User identifier for personalization\r\n}\r\n\r\n// Enhanced Model Response Structure\r\nexport interface EnhancedHealthResponse {\r\n  question: string;\r\n  answer: string;\r\n  research_citations: string[];\r\n  wihy_wisdom: string[];\r\n  confidence_score: number;\r\n  model_version: string;\r\n  training_examples_used: number;\r\n  timestamp: string;\r\n}\r\n\r\n// Image Scanner Response Structure\r\nexport interface ImageScanResponse {\r\n  success: boolean;\r\n  overall_assessment: {\r\n    health_score: number;\r\n    verdict: string;\r\n    nova_group: number;\r\n  };\r\n  google_vision_analysis: {\r\n    vision_api_success: boolean;\r\n    detected_text: string[];\r\n    labels: string[];\r\n  };\r\n  detected_foods: Array<{\r\n    name: string;\r\n    confidence: number;\r\n    nova_group: number;\r\n  }>;\r\n  nova_chart_reference: {\r\n    client_guidance: {\r\n      color_coding: 'green' | 'yellow' | 'orange' | 'red';\r\n      action: 'CHOOSE' | 'MODERATE' | 'LIMIT' | 'AVOID';\r\n      message: string;\r\n    };\r\n  };\r\n  wihy_recommendations: string[];\r\n  carcinogen_warnings: string[];\r\n  family_safety: {\r\n    family_safe: boolean;\r\n    family_verdict: string;\r\n  };\r\n  data_sources: string[];\r\n}\r\n\r\n// Barcode Scanner Response Structure  \r\nexport interface BarcodeScanResponse {\r\n  success: boolean;\r\n  nova_group: number;\r\n  health_score: number;\r\n  product_name: string;\r\n  ingredients: string[];\r\n  nutritional_data: {\r\n    calories_per_100g: number;\r\n    protein_g: number;\r\n    carbs_g: number;\r\n    fat_g: number;\r\n    fiber_g: number;\r\n    sodium_mg: number;\r\n  };\r\n  health_analysis: {\r\n    carcinogen_alerts: string[];\r\n    toxic_additives: string[];\r\n    processing_level: string;\r\n  };\r\n  wihy_recommendations: string[];\r\n  data_sources: string[];\r\n}\r\n\r\n// Legacy interfaces for backward compatibility\r\nexport interface HealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n  include_nutrition?: boolean;            // OPTIONAL: Include nutrition analysis (default: true)\r\n  include_biblical_wisdom?: boolean;      // OPTIONAL: Include biblical wisdom (default: true)\r\n  include_charts?: boolean;               // OPTIONAL: Include chart data (default: true)\r\n}\r\n\r\n// Chart data structure from OpenAPI spec\r\nexport interface ChartData {\r\n  chart_type: string;\r\n  labels: string[];\r\n  values: number[];\r\n  colors: string[];\r\n  verdict?: string;\r\n  reasons?: string[];\r\n}\r\n\r\nexport interface ChartsData {\r\n  nutrition_breakdown?: ChartData;\r\n  health_quality?: ChartData;\r\n}\r\n\r\nexport interface HealthInsights {\r\n  key_benefits?: string[];\r\n  potential_risks?: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\n// Core response data structure from OpenAPI spec\r\nexport interface ProcessedHealthData {\r\n  query: string;\r\n  timestamp: number;\r\n  processor_used: string;\r\n  processing_time: number;\r\n  response: string;\r\n  nutrition_data: Record<string, any>;\r\n  health_insights: HealthInsights;\r\n  biblical_wisdom: Record<string, any>;\r\n  charts_data: ChartsData;\r\n}\r\n\r\n// Main response structure from OpenAPI spec\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ProcessedHealthData;\r\n}\r\n\r\n// Keep the old interface for backward compatibility\r\nexport interface UnifiedRequest extends HealthQuestion {\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train';\r\n  context?: Record<string, any>;\r\n  user_id?: string;\r\n  session_id?: string;\r\n}\r\n\r\n// Interface for the /scan endpoint\r\nexport interface ScanRequest {\r\n  image_url?: string;                     // OPTIONAL: URL to image\r\n  image_base64?: string;                  // OPTIONAL: Base64 encoded image\r\n  product_name?: string;                  // OPTIONAL: Product name to scan\r\n  barcode?: string;                       // OPTIONAL: Barcode/UPC to scan  \r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyEnhancedAPIService {\r\n  private baseURL: string;\r\n  private backupURLs: string[];\r\n  private isLocalDevelopment: boolean;\r\n\r\n  constructor() {\r\n    this.baseURL = API_CONFIG.WIHY_ENHANCED_API_URL;\r\n    this.backupURLs = [\r\n      API_CONFIG.WIHY_ENHANCED_API_BACKUP,\r\n      API_CONFIG.WIHY_ENHANCED_API_CONTAINER\r\n    ];\r\n    this.isLocalDevelopment = this.baseURL.includes('localhost');\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy Enhanced Model a health-related question (2,325 training examples)\r\n   */\r\n  async askEnhancedHealthQuestion(request: EnhancedHealthQuestion): Promise<EnhancedHealthResponse> {\r\n    try {\r\n      logger.apiRequest('Making WiHy Enhanced Model API request', request);\r\n      \r\n      const endpoint = `${this.baseURL}/ask`;\r\n      \r\n      // Use fetch API with timeout and retry logic\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(request),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Enhanced Model API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Enhanced Model API error:', error);\r\n      throw this.handleEnhancedError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan food image using enhanced vision analysis\r\n   */\r\n  async scanFoodImage(imageFile: File, context: string = ''): Promise<ImageScanResponse> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', imageFile);\r\n      formData.append('context', context);\r\n      \r\n      const endpoint = WIHY_SCAN_IMAGE_URL;\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for images\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        body: formData,\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Image Scanner response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Image Scanner error:', error);\r\n      throw this.handleScannerError(error, 'image');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using enhanced nutrition database\r\n   */\r\n  async scanBarcode(barcode: string, context: any = {}): Promise<BarcodeScanResponse> {\r\n    try {\r\n      const requestBody = {\r\n        query: barcode,\r\n        scan_location: context.scan_location || 'web_app',\r\n        device_type: context.device_type || 'desktop'\r\n      };\r\n      \r\n      const endpoint = WIHY_SCAN_BARCODE_URL;\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Barcode Scanner response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Barcode Scanner error:', error);\r\n      throw this.handleScannerError(error, 'barcode');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API health and get status\r\n   */\r\n  async checkAPIHealth(): Promise<{ status: string; model_version: string; training_examples: number }> {\r\n    try {\r\n      const response = await fetch(WIHY_HEALTH_CHECK_URL, {\r\n        method: 'GET',\r\n        headers: { 'Accept': 'application/json' }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WiHy API health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch with automatic retry logic and fallback endpoints\r\n   */\r\n  private async fetchWithRetry(url: string, options: RequestInit, retries: number = 2): Promise<Response> {\r\n    const endpoints = [this.baseURL, ...this.backupURLs];\r\n    \r\n    for (let attempt = 0; attempt <= retries; attempt++) {\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          const fullUrl = url.replace(this.baseURL, endpoint);\r\n          const response = await fetch(fullUrl, options);\r\n          \r\n          if (response.ok) {\r\n            return response;\r\n          }\r\n          \r\n          // If primary endpoint fails, try backup\r\n          if (endpoint === this.baseURL && response.status >= 500) {\r\n            continue;\r\n          }\r\n          \r\n          return response; // Return even if not ok for error handling\r\n          \r\n        } catch (error) {\r\n          logger.warn(`Attempt ${attempt + 1} failed for ${endpoint}:`, error);\r\n          \r\n          // If this is the last endpoint and last attempt, throw error\r\n          if (endpoint === endpoints[endpoints.length - 1] && attempt === retries) {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    throw new Error('All endpoints and retries failed');\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling for API responses\r\n   */\r\n  private handleEnhancedError(error: any): Error {\r\n    if (error instanceof Error) {\r\n      // Check for timeout/abort errors\r\n      if (error.name === 'AbortError') {\r\n        return new Error('TIMEOUT_ERROR: Enhanced model request timed out - services may be under heavy load');\r\n      }\r\n      \r\n      // Check for CORS errors\r\n      if (error.message.includes('CORS') || \r\n          error.message.includes('Access to fetch') ||\r\n          error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n        return new Error('CORS_ERROR: Unable to connect to WiHy Enhanced Model from this domain');\r\n      }\r\n      \r\n      // Check for network/connectivity issues\r\n      if (error.message.includes('fetch') || \r\n          error.message.includes('network') || \r\n          error.name === 'TypeError' ||\r\n          error.message.includes('Failed to fetch')) {\r\n        return new Error('NETWORK_ERROR: Unable to connect to WiHy Enhanced Model services');\r\n      }\r\n      \r\n      // Check for server errors\r\n      if (error.message.includes('HTTP error! status: 5')) {\r\n        return new Error('SERVER_ERROR: WiHy Enhanced Model temporarily unavailable');\r\n      }\r\n      \r\n      return new Error(error.message || 'WiHy Enhanced Model request failed');\r\n    }\r\n    \r\n    return new Error('Unknown error occurred while contacting WiHy Enhanced Model');\r\n  }\r\n\r\n  /**\r\n   * Scanner-specific error handling\r\n   */\r\n  private handleScannerError(error: any, scanType: 'image' | 'barcode'): Error {\r\n    const context = scanType === 'image' ? 'Image Scanner' : 'Barcode Scanner';\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.name === 'AbortError') {\r\n        return new Error(`TIMEOUT_ERROR: ${context} request timed out`);\r\n      }\r\n      \r\n      if (error.message.includes('HTTP error! status: 400')) {\r\n        return new Error(`VALIDATION_ERROR: Invalid ${scanType} format or data`);\r\n      }\r\n      \r\n      if (error.message.includes('HTTP error! status: 404')) {\r\n        return new Error(`NOT_FOUND: ${scanType === 'barcode' ? 'Product not found in nutrition databases' : 'Unable to analyze image'}`);\r\n      }\r\n      \r\n      return new Error(`${context.toUpperCase()}_ERROR: ${error.message}`);\r\n    }\r\n    \r\n    return new Error(`Unknown ${context.toLowerCase()} error occurred`);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - Ask WiHy a health-related question\r\n   * Now routes to Enhanced Model for better responses\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    try {\r\n      // Convert legacy request to enhanced format\r\n      const enhancedRequest: EnhancedHealthQuestion = {\r\n        query: request.query,\r\n        context: 'user_context' in request ? JSON.stringify(request.user_context) : '',\r\n        user_id: 'user_id' in request ? request.user_id : undefined\r\n      };\r\n      \r\n      // Try enhanced model first\r\n      try {\r\n        const enhancedResponse = await this.askEnhancedHealthQuestion(enhancedRequest);\r\n        \r\n        // Convert enhanced response to legacy format for backward compatibility\r\n        return this.convertEnhancedToLegacy(enhancedResponse, request.query);\r\n        \r\n      } catch (enhancedError) {\r\n        logger.warn('Enhanced model failed, falling back to legacy format:', enhancedError);\r\n        \r\n        // Fallback to legacy unified API if enhanced model fails\r\n        return this.askLegacyUnified(request);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('All WiHy API methods failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fallback method for legacy unified API\r\n   */\r\n  private async askLegacyUnified(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    logger.apiRequest('Making WiHy Legacy API request', request);\r\n    \r\n    let requestBody: any;\r\n    let endpoint: string;\r\n    \r\n    // Use legacy endpoints\r\n    endpoint = this.isLocalDevelopment ? \r\n      `${API_CONFIG.WIHY_UNIFIED_API_URL}/ask` : \r\n      `${API_CONFIG.WIHY_UNIFIED_API_URL}/ask`;\r\n    \r\n    // Build HealthQuestion object according to legacy spec\r\n    if ('user_context' in request) {\r\n      requestBody = {\r\n        query: request.query,\r\n        user_context: request.user_context || {},\r\n        include_nutrition: true,\r\n        include_biblical_wisdom: false,\r\n        include_charts: true\r\n      };\r\n    } else {\r\n      const unifiedReq = request as UnifiedRequest;\r\n      requestBody = {\r\n        query: unifiedReq.query,\r\n        user_context: unifiedReq.context || {},\r\n        include_nutrition: true,\r\n        include_biblical_wisdom: true,\r\n        include_charts: true\r\n      };\r\n    }\r\n    \r\n    // Use fetch API to match the working example exactly with timeout\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n    \r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(requestBody),\r\n      signal: controller.signal\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    logger.apiResponse('WiHy Legacy API response received', data);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Convert Enhanced Model response to legacy format for backward compatibility\r\n   */\r\n  private convertEnhancedToLegacy(enhancedResponse: EnhancedHealthResponse, originalQuery: string): WihyResponse {\r\n    return {\r\n      success: true,\r\n      timestamp: enhancedResponse.timestamp || new Date().toISOString(),\r\n      response_type: 'enhanced_model',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: 'enhanced_model',\r\n        query: originalQuery,\r\n        core_principle: enhancedResponse.answer,\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [enhancedResponse.answer],\r\n          action_items: enhancedResponse.wihy_wisdom.map((wisdom: string, index: number) => ({\r\n            action: wisdom,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'enhanced_model',\r\n            mechanism: 'biblical_wisdom',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: enhancedResponse.research_citations.map((citation: string) => ({\r\n          citation_text: citation,\r\n          study_type: 'enhanced_model_research',\r\n          key_finding: citation\r\n        })),\r\n        progress_tracking: {\r\n          key_metrics: ['enhanced_health_understanding'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: enhancedResponse.wihy_wisdom\r\n      },\r\n      message: enhancedResponse.answer\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type,\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type,\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Legacy scan food images method - now uses enhanced scanner\r\n   */\r\n  async scanFood(file?: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      if (file) {\r\n        // Use enhanced image scanner\r\n        const enhancedResponse = await this.scanFoodImage(file, scanOptions?.user_context ? JSON.stringify(scanOptions.user_context) : '');\r\n        \r\n        // Convert to legacy format\r\n        return this.convertImageScanToLegacy(enhancedResponse, 'Image scan analysis');\r\n        \r\n      } else if (scanOptions?.barcode) {\r\n        // Use enhanced barcode scanner\r\n        const enhancedResponse = await this.scanBarcode(scanOptions.barcode, scanOptions.user_context);\r\n        \r\n        // Convert to legacy format\r\n        return this.convertBarcodeScanToLegacy(enhancedResponse, `Barcode scan: ${scanOptions.barcode}`);\r\n        \r\n      } else {\r\n        throw new Error('No file or barcode provided for scanning');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('WiHy Scan error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Image Scanner response to legacy format\r\n   */\r\n  private convertImageScanToLegacy(response: ImageScanResponse, query: string): WihyResponse {\r\n    const recommendations = response.wihy_recommendations || [];\r\n    const warnings = response.carcinogen_warnings || [];\r\n    \r\n    return {\r\n      success: response.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: 'image_scan',\r\n      query: query,\r\n      wihy_response: {\r\n        query_type: 'image_scan',\r\n        query: query,\r\n        core_principle: response.overall_assessment?.verdict || 'Image analysis complete',\r\n        personalized_analysis: {\r\n          identified_risk_factors: warnings.map(warning => ({\r\n            risk_factor: warning,\r\n            associated_illnesses: 'various',\r\n            prevalence_rate: 0,\r\n            preventability_score: 100\r\n          })),\r\n          priority_health_goals: recommendations,\r\n          action_items: recommendations.map(rec => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'image_analysis',\r\n            mechanism: 'food_choice',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: response.data_sources?.map(source => ({\r\n          citation_text: source,\r\n          study_type: 'database',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['food_quality_awareness'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: ['Choose foods that nourish your temple - 1 Corinthians 6:19']\r\n      },\r\n      message: this.formatImageScanResponse(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert Barcode Scanner response to legacy format\r\n   */\r\n  private convertBarcodeScanToLegacy(response: BarcodeScanResponse, query: string): WihyResponse {\r\n    const recommendations = response.wihy_recommendations || [];\r\n    const warnings = [...(response.health_analysis?.carcinogen_alerts || []), ...(response.health_analysis?.toxic_additives || [])];\r\n    \r\n    return {\r\n      success: response.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: 'barcode_scan',\r\n      query: query,\r\n      wihy_response: {\r\n        query_type: 'barcode_scan',\r\n        query: query,\r\n        core_principle: `Product Analysis: ${response.product_name}`,\r\n        personalized_analysis: {\r\n          identified_risk_factors: warnings.map(warning => ({\r\n            risk_factor: warning,\r\n            associated_illnesses: 'various',\r\n            prevalence_rate: 0,\r\n            preventability_score: 100\r\n          })),\r\n          priority_health_goals: recommendations,\r\n          action_items: recommendations.map(rec => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'product_analysis',\r\n            mechanism: 'ingredient_awareness',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: response.data_sources?.map(source => ({\r\n          citation_text: source,\r\n          study_type: 'nutrition_database',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['product_awareness', 'nova_understanding'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: ['Real food doesn\\'t need complicated analysis - choose whole foods']\r\n      },\r\n      message: this.formatBarcodeScanResponse(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert File to base64 string\r\n   */\r\n  private fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        // Remove the data:image/jpeg;base64, prefix\r\n        const base64 = result.split(',')[1];\r\n        resolve(base64);\r\n      };\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Format Enhanced Model response for display in the UI\r\n   */\r\n  formatEnhancedResponse(response: EnhancedHealthResponse): string {\r\n    let formatted = `# WiHy Enhanced Health Intelligence\\n\\n`;\r\n    \r\n    // Main response content\r\n    formatted += response.answer;\r\n    \r\n    // Add research citations if available\r\n    if (response.research_citations && response.research_citations.length > 0) {\r\n      formatted += `\\n\\n## 📚 Research Citations\\n`;\r\n      response.research_citations.forEach((citation, index) => {\r\n        formatted += `${index + 1}. ${citation}\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add biblical wisdom if available\r\n    if (response.wihy_wisdom && response.wihy_wisdom.length > 0) {\r\n      formatted += `\\n\\n## ✝️ Biblical Wisdom\\n`;\r\n      response.wihy_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add enhanced model info\r\n    formatted += `\\n\\n---\\n\\n`;\r\n    formatted += `*Enhanced Model Response (${response.training_examples_used} training examples)*\\n`;\r\n    formatted += `*Confidence Score: ${Math.round(response.confidence_score * 100)}%*\\n`;\r\n    formatted += `*Model Version: ${response.model_version}*`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format Image Scanner response for display\r\n   */\r\n  formatImageScanResponse(response: ImageScanResponse): string {\r\n    let formatted = `# 📷 WiHy Image Analysis Results\\n\\n`;\r\n    \r\n    if (response.success && response.overall_assessment) {\r\n      const { health_score, verdict, nova_group } = response.overall_assessment;\r\n      const guidance = response.nova_chart_reference?.client_guidance;\r\n      \r\n      formatted += `## Health Assessment\\n`;\r\n      formatted += `**Health Score:** ${health_score}/100\\n`;\r\n      formatted += `**Verdict:** ${verdict}\\n`;\r\n      formatted += `**NOVA Group:** ${nova_group} (${this.getNovaLabel(nova_group)})\\n`;\r\n      \r\n      if (guidance) {\r\n        formatted += `**Recommendation:** ${guidance.action} - ${guidance.message}\\n\\n`;\r\n      }\r\n      \r\n      // Detected foods\r\n      if (response.detected_foods && response.detected_foods.length > 0) {\r\n        formatted += `## 🍽️ Detected Foods\\n`;\r\n        response.detected_foods.forEach(food => {\r\n          formatted += `- **${food.name}** (Confidence: ${Math.round(food.confidence * 100)}%, NOVA: ${food.nova_group})\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // WIHY recommendations\r\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\r\n        formatted += `## 💡 WIHY Recommendations\\n`;\r\n        response.wihy_recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Health warnings\r\n      if (response.carcinogen_warnings && response.carcinogen_warnings.length > 0) {\r\n        formatted += `## ⚠️ Health Warnings\\n`;\r\n        response.carcinogen_warnings.forEach(warning => {\r\n          formatted += `- ${warning}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Family safety\r\n      if (response.family_safety) {\r\n        formatted += `## 👨‍👩‍👧‍👦 Family Safety\\n`;\r\n        formatted += `**Status:** ${response.family_safety.family_safe ? '✅ Safe' : '❌ Not Recommended'}\\n`;\r\n        formatted += `**Verdict:** ${response.family_safety.family_verdict}\\n\\n`;\r\n      }\r\n      \r\n    } else {\r\n      formatted += `Analysis failed. Please try again or choose whole foods when in doubt.\\n\\n`;\r\n    }\r\n    \r\n    // Data sources\r\n    if (response.data_sources && response.data_sources.length > 0) {\r\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\r\n    }\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format Barcode Scanner response for display\r\n   */\r\n  formatBarcodeScanResponse(response: BarcodeScanResponse): string {\r\n    let formatted = `# 🔍 WiHy Barcode Analysis\\n\\n`;\r\n    \r\n    if (response.success) {\r\n      formatted += `## Product Information\\n`;\r\n      formatted += `**Product:** ${response.product_name}\\n`;\r\n      formatted += `**Health Score:** ${response.health_score}/100\\n`;\r\n      formatted += `**NOVA Group:** ${response.nova_group} (${this.getNovaLabel(response.nova_group)})\\n\\n`;\r\n      \r\n      // Nutritional data\r\n      if (response.nutritional_data) {\r\n        const nutrition = response.nutritional_data;\r\n        formatted += `## 📊 Nutrition Facts (per 100g)\\n`;\r\n        formatted += `- **Calories:** ${nutrition.calories_per_100g}\\n`;\r\n        formatted += `- **Protein:** ${nutrition.protein_g}g\\n`;\r\n        formatted += `- **Carbohydrates:** ${nutrition.carbs_g}g\\n`;\r\n        formatted += `- **Fat:** ${nutrition.fat_g}g\\n`;\r\n        formatted += `- **Fiber:** ${nutrition.fiber_g}g\\n`;\r\n        formatted += `- **Sodium:** ${nutrition.sodium_mg}mg\\n\\n`;\r\n      }\r\n      \r\n      // Health analysis\r\n      if (response.health_analysis) {\r\n        const analysis = response.health_analysis;\r\n        formatted += `## 🔬 Health Analysis\\n`;\r\n        formatted += `**Processing Level:** ${analysis.processing_level}\\n`;\r\n        \r\n        if (analysis.carcinogen_alerts && analysis.carcinogen_alerts.length > 0) {\r\n          formatted += `**⚠️ Carcinogen Alerts:**\\n`;\r\n          analysis.carcinogen_alerts.forEach(alert => {\r\n            formatted += `- ${alert}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (analysis.toxic_additives && analysis.toxic_additives.length > 0) {\r\n          formatted += `**🧪 Toxic Additives:**\\n`;\r\n          analysis.toxic_additives.forEach(additive => {\r\n            formatted += `- ${additive}\\n`;\r\n          });\r\n        }\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // WIHY recommendations\r\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\r\n        formatted += `## 💡 WIHY Recommendations\\n`;\r\n        response.wihy_recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Ingredients\r\n      if (response.ingredients && response.ingredients.length > 0) {\r\n        formatted += `## 🧾 Ingredients\\n`;\r\n        formatted += response.ingredients.join(', ') + '\\n\\n';\r\n      }\r\n      \r\n    } else {\r\n      formatted += `Product not found or analysis failed. Choose foods with 5 or fewer ingredients when in doubt.\\n\\n`;\r\n    }\r\n    \r\n    // Data sources\r\n    if (response.data_sources && response.data_sources.length > 0) {\r\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\r\n    }\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group label\r\n   */\r\n  private getNovaLabel(novaGroup: number): string {\r\n    const labels = {\r\n      1: 'Natural/Unprocessed',\r\n      2: 'Processed Culinary Ingredients', \r\n      3: 'Processed Foods',\r\n      4: 'Ultra-Processed Foods'\r\n    };\r\n    return labels[novaGroup as keyof typeof labels] || 'Unknown';\r\n  }\r\n\r\n  /**\r\n   * Get NOVA guidance for UI display\r\n   */\r\n  getNovaGuidance(novaGroup: number): { action: string; color: string; message: string } {\r\n    const guidance = {\r\n      1: { action: 'CHOOSE', color: 'green', message: 'Real food as God intended' },\r\n      2: { action: 'MODERATE', color: 'yellow', message: 'Use sparingly' },\r\n      3: { action: 'LIMIT', color: 'orange', message: 'Find alternatives' },\r\n      4: { action: 'AVOID', color: 'red', message: 'Your family deserves better' }\r\n    };\r\n    \r\n    return guidance[novaGroup as keyof typeof guidance] || guidance[4];\r\n  }\r\n  formatWihyResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const data = healthResp.data;\r\n      \r\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n      \r\n      // Main response content\r\n      formatted += data.response;\r\n      \r\n      // Add health insights if available\r\n      if (data.health_insights) {\r\n        if (data.health_insights.key_benefits?.length) {\r\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n          data.health_insights.key_benefits.forEach(benefit => {\r\n            formatted += `- ${benefit}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.potential_risks?.length) {\r\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n          data.health_insights.potential_risks.forEach(risk => {\r\n            formatted += `- ${risk}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.recommendations?.length) {\r\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n          data.health_insights.recommendations.forEach(rec => {\r\n            formatted += `- ${rec}\\n`;\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Add processing info\r\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle UnifiedResponse format (legacy API)\r\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      // Use the ai_response.response field which contains the actual response\r\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\r\n        formatted += unifiedResp.data.ai_response.response;\r\n      } else {\r\n        // Fallback to showing raw data if ai_response is not available\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      // Add service information if available\r\n      if (unifiedResp.data.ai_response?.service) {\r\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\r\n        if (unifiedResp.data.ai_response.confidence) {\r\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\r\n        }\r\n      }\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add timestamp if available (different field names in different response formats)\r\n    const timestamp = (response as any).timestamp || (response as any).created_at || new Date().toISOString();\r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\r\n      }\r\n      return recommendations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.personalized_analysis?.action_items) {\r\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\r\n      // For now, the new API doesn't include specific citation fields in the schema\r\n      // We could parse citations from the response text if needed\r\n      return citations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.research_foundation) {\r\n        legacyResp.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance of the enhanced API service\r\nexport const wihyAPI = new WihyEnhancedAPIService();\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}