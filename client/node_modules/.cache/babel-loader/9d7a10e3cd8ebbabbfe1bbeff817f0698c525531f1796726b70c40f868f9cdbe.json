{"ast":null,"code":"// src/services/foodAnalysisService.ts\n\nclass FoodAnalysisService {\n  constructor() {\n    this.API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\n  }\n  // Analyze food image via API\n  async analyzeFoodImage(imageFile) {\n    // Mock analysis result for demo/testing\n    const mockResult = {\n      classification: {\n        foodName: \"Grilled Chicken Salad\",\n        confidence: 0.97,\n        category: \"Salad\",\n        portionSize: \"1 bowl\",\n        alternatives: [\"Caesar Salad\", \"Greek Salad\"]\n      },\n      nutrition: {\n        calories: 320,\n        macros: {\n          protein: 28,\n          carbs: 12,\n          fat: 14,\n          saturatedFat: 3,\n          sugar: 4,\n          fiber: 5,\n          sodium: 420\n        },\n        healthScore: 88,\n        novaClassification: 2,\n        allergens: [\"Egg\"],\n        snapEligible: true\n      },\n      healthInsight: \"A healthy, high-protein meal with moderate carbs and low saturated fat.\",\n      recommendations: [\"Add more vegetables for extra fiber.\", \"Use olive oil-based dressing for healthier fats.\"]\n    };\n\n    // Simulate async operation\n    await new Promise(res => setTimeout(res, 400));\n    return this.formatFoodAnalysisResults(mockResult);\n  }\n\n  // Format food analysis results for display\n  formatFoodAnalysisResults(analysis) {\n    const {\n      classification,\n      nutrition,\n      healthInsight,\n      recommendations\n    } = analysis;\n    return `🍽️ **Food Analysis Results**\n\n**📸 Detected Item:** ${classification.foodName}\n**🎯 Confidence:** ${classification.confidence}%\n**📂 Category:** ${classification.category}\n${classification.portionSize ? `**📏 Portion Size:** ${classification.portionSize}` : ''}\n\n**📊 Nutrition Facts (per serving):**\n• **Calories:** ${nutrition.calories} kcal\n• **Protein:** ${nutrition.macros.protein}g\n• **Carbs:** ${nutrition.macros.carbs}g (${nutrition.macros.sugar}g sugar)\n• **Fat:** ${nutrition.macros.fat}g (${nutrition.macros.saturatedFat}g saturated)\n• **Fiber:** ${nutrition.macros.fiber}g\n• **Sodium:** ${nutrition.macros.sodium}mg\n\n**🎯 Health Score:** ${nutrition.healthScore}/100\n**🏷️ Processing Level:** NOVA ${nutrition.novaClassification}\n${nutrition.allergens.length > 0 ? `**⚠️ Potential Allergens:** ${nutrition.allergens.join(', ')}` : ''}\n**💳 SNAP Eligible:** ${nutrition.snapEligible ? 'Yes ✅' : 'No ❌'}\n\n**💡 Health Insight:**\n${healthInsight}\n\n**📋 Recommendations:**\n${recommendations.map(rec => `• ${rec}`).join('\\n')}\n\n**🔬 Sources:** AI Image Recognition, USDA FoodData Central, Nutritionix Database\n*This analysis is for educational purposes. Consult healthcare professionals for medical advice.*`;\n  }\n}\nexport const foodAnalysisService = new FoodAnalysisService();","map":{"version":3,"names":["FoodAnalysisService","constructor","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","analyzeFoodImage","imageFile","mockResult","classification","foodName","confidence","category","portionSize","alternatives","nutrition","calories","macros","protein","carbs","fat","saturatedFat","sugar","fiber","sodium","healthScore","novaClassification","allergens","snapEligible","healthInsight","recommendations","Promise","res","setTimeout","formatFoodAnalysisResults","analysis","length","join","map","rec","foodAnalysisService"],"sources":["C:/vHealth/vhealth/client/src/components/foodAnalysisService.tsx"],"sourcesContent":["// src/services/foodAnalysisService.ts\r\ninterface FoodAnalysisResult {\r\n  classification: {\r\n    foodName: string;\r\n    confidence: number;\r\n    category: string;\r\n    portionSize?: string;\r\n    alternatives?: string[];\r\n  };\r\n  nutrition: {\r\n    calories: number;\r\n    macros: {\r\n      protein: number;\r\n      carbs: number;\r\n      fat: number;\r\n      saturatedFat: number;\r\n      sugar: number;\r\n      fiber: number;\r\n      sodium: number;\r\n    };\r\n    healthScore: number;\r\n    novaClassification: 1 | 2 | 3 | 4;\r\n    allergens: string[];\r\n    snapEligible: boolean;\r\n  };\r\n  healthInsight: string;\r\n  recommendations: string[];\r\n}\r\n\r\nclass FoodAnalysisService {\r\n  private readonly API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\r\n\r\n  // Analyze food image via API\r\n  async analyzeFoodImage(imageFile: File): Promise<string | null> {\r\n    // Mock analysis result for demo/testing\r\n    const mockResult: FoodAnalysisResult = {\r\n      classification: {\r\n        foodName: \"Grilled Chicken Salad\",\r\n        confidence: 0.97,\r\n        category: \"Salad\",\r\n        portionSize: \"1 bowl\",\r\n        alternatives: [\"Caesar Salad\", \"Greek Salad\"]\r\n      },\r\n      nutrition: {\r\n        calories: 320,\r\n        macros: {\r\n          protein: 28,\r\n          carbs: 12,\r\n          fat: 14,\r\n          saturatedFat: 3,\r\n          sugar: 4,\r\n          fiber: 5,\r\n          sodium: 420\r\n        },\r\n        healthScore: 88,\r\n        novaClassification: 2,\r\n        allergens: [\"Egg\"],\r\n        snapEligible: true\r\n      },\r\n      healthInsight: \"A healthy, high-protein meal with moderate carbs and low saturated fat.\",\r\n      recommendations: [\r\n        \"Add more vegetables for extra fiber.\",\r\n        \"Use olive oil-based dressing for healthier fats.\"\r\n      ]\r\n    };\r\n\r\n    // Simulate async operation\r\n    await new Promise(res => setTimeout(res, 400));\r\n    return this.formatFoodAnalysisResults(mockResult);\r\n  }\r\n\r\n  // Format food analysis results for display\r\n  private formatFoodAnalysisResults(analysis: FoodAnalysisResult): string {\r\n    const { classification, nutrition, healthInsight, recommendations } = analysis;\r\n    \r\n    return `🍽️ **Food Analysis Results**\r\n\r\n**📸 Detected Item:** ${classification.foodName}\r\n**🎯 Confidence:** ${classification.confidence}%\r\n**📂 Category:** ${classification.category}\r\n${classification.portionSize ? `**📏 Portion Size:** ${classification.portionSize}` : ''}\r\n\r\n**📊 Nutrition Facts (per serving):**\r\n• **Calories:** ${nutrition.calories} kcal\r\n• **Protein:** ${nutrition.macros.protein}g\r\n• **Carbs:** ${nutrition.macros.carbs}g (${nutrition.macros.sugar}g sugar)\r\n• **Fat:** ${nutrition.macros.fat}g (${nutrition.macros.saturatedFat}g saturated)\r\n• **Fiber:** ${nutrition.macros.fiber}g\r\n• **Sodium:** ${nutrition.macros.sodium}mg\r\n\r\n**🎯 Health Score:** ${nutrition.healthScore}/100\r\n**🏷️ Processing Level:** NOVA ${nutrition.novaClassification}\r\n${nutrition.allergens.length > 0 ? `**⚠️ Potential Allergens:** ${nutrition.allergens.join(', ')}` : ''}\r\n**💳 SNAP Eligible:** ${nutrition.snapEligible ? 'Yes ✅' : 'No ❌'}\r\n\r\n**💡 Health Insight:**\r\n${healthInsight}\r\n\r\n**📋 Recommendations:**\r\n${recommendations.map((rec: string) => `• ${rec}`).join('\\n')}\r\n\r\n**🔬 Sources:** AI Image Recognition, USDA FoodData Central, Nutritionix Database\r\n*This analysis is for educational purposes. Consult healthcare professionals for medical advice.*`;\r\n  }\r\n}\r\n\r\nexport const foodAnalysisService = new FoodAnalysisService();"],"mappings":"AAAA;;AA6BA,MAAMA,mBAAmB,CAAC;EAAAC,YAAA;IAAA,KACPC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;EAAA;EAE7F;EACA,MAAMC,gBAAgBA,CAACC,SAAe,EAA0B;IAC9D;IACA,MAAMC,UAA8B,GAAG;MACrCC,cAAc,EAAE;QACdC,QAAQ,EAAE,uBAAuB;QACjCC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE,OAAO;QACjBC,WAAW,EAAE,QAAQ;QACrBC,YAAY,EAAE,CAAC,cAAc,EAAE,aAAa;MAC9C,CAAC;MACDC,SAAS,EAAE;QACTC,QAAQ,EAAE,GAAG;QACbC,MAAM,EAAE;UACNC,OAAO,EAAE,EAAE;UACXC,KAAK,EAAE,EAAE;UACTC,GAAG,EAAE,EAAE;UACPC,YAAY,EAAE,CAAC;UACfC,KAAK,EAAE,CAAC;UACRC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE;QACV,CAAC;QACDC,WAAW,EAAE,EAAE;QACfC,kBAAkB,EAAE,CAAC;QACrBC,SAAS,EAAE,CAAC,KAAK,CAAC;QAClBC,YAAY,EAAE;MAChB,CAAC;MACDC,aAAa,EAAE,yEAAyE;MACxFC,eAAe,EAAE,CACf,sCAAsC,EACtC,kDAAkD;IAEtD,CAAC;;IAED;IACA,MAAM,IAAIC,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9C,OAAO,IAAI,CAACE,yBAAyB,CAAC1B,UAAU,CAAC;EACnD;;EAEA;EACQ0B,yBAAyBA,CAACC,QAA4B,EAAU;IACtE,MAAM;MAAE1B,cAAc;MAAEM,SAAS;MAAEc,aAAa;MAAEC;IAAgB,CAAC,GAAGK,QAAQ;IAE9E,OAAO;AACX;AACA,wBAAwB1B,cAAc,CAACC,QAAQ;AAC/C,qBAAqBD,cAAc,CAACE,UAAU;AAC9C,mBAAmBF,cAAc,CAACG,QAAQ;AAC1C,EAAEH,cAAc,CAACI,WAAW,GAAG,wBAAwBJ,cAAc,CAACI,WAAW,EAAE,GAAG,EAAE;AACxF;AACA;AACA,kBAAkBE,SAAS,CAACC,QAAQ;AACpC,iBAAiBD,SAAS,CAACE,MAAM,CAACC,OAAO;AACzC,eAAeH,SAAS,CAACE,MAAM,CAACE,KAAK,MAAMJ,SAAS,CAACE,MAAM,CAACK,KAAK;AACjE,aAAaP,SAAS,CAACE,MAAM,CAACG,GAAG,MAAML,SAAS,CAACE,MAAM,CAACI,YAAY;AACpE,eAAeN,SAAS,CAACE,MAAM,CAACM,KAAK;AACrC,gBAAgBR,SAAS,CAACE,MAAM,CAACO,MAAM;AACvC;AACA,uBAAuBT,SAAS,CAACU,WAAW;AAC5C,iCAAiCV,SAAS,CAACW,kBAAkB;AAC7D,EAAEX,SAAS,CAACY,SAAS,CAACS,MAAM,GAAG,CAAC,GAAG,+BAA+BrB,SAAS,CAACY,SAAS,CAACU,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE;AACvG,wBAAwBtB,SAAS,CAACa,YAAY,GAAG,OAAO,GAAG,MAAM;AACjE;AACA;AACA,EAAEC,aAAa;AACf;AACA;AACA,EAAEC,eAAe,CAACQ,GAAG,CAAEC,GAAW,IAAK,KAAKA,GAAG,EAAE,CAAC,CAACF,IAAI,CAAC,IAAI,CAAC;AAC7D;AACA;AACA,kGAAkG;EAChG;AACF;AAEA,OAAO,MAAMG,mBAAmB,GAAG,IAAIxC,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}