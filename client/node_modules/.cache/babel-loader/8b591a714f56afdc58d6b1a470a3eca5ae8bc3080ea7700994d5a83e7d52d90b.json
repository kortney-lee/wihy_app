{"ast":null,"code":"class PhotoStorageService {\n  constructor() {\n    this.storageKey = 'vhealth_photos';\n  }\n  // Save photo silently in background\n  async savePhoto(file, searchQuery, userId) {\n    try {\n      const photoId = this.generatePhotoId();\n      const base64Data = await this.fileToBase64(file);\n      const photoRecord = {\n        id: photoId,\n        filename: `photo_${photoId}`,\n        originalName: file.name,\n        uploadDate: new Date().toISOString(),\n        fileSize: file.size,\n        mimeType: file.type,\n        base64Data,\n        searchQuery,\n        userId,\n        sessionId: this.getSessionId()\n      };\n\n      // Save to localStorage (replace with API call for production)\n      await this.saveToStorage(photoRecord);\n      console.log('Photo saved silently for AI analysis:', photoId);\n      return photoId;\n    } catch (error) {\n      console.error('Error saving photo:', error);\n      throw new Error('Failed to save photo');\n    }\n  }\n\n  // Update photo with AI analysis results\n  async updatePhotoAnalysis(photoId, analysisResults) {\n    try {\n      const photos = await this.getAllPhotos();\n      const photoIndex = photos.findIndex(photo => photo.id === photoId);\n      if (photoIndex === -1) return false;\n      photos[photoIndex].analysisResults = analysisResults;\n      localStorage.setItem(this.storageKey, JSON.stringify(photos));\n      console.log('AI analysis saved for photo:', photoId);\n      return true;\n    } catch (error) {\n      console.error('Error updating photo analysis:', error);\n      return false;\n    }\n  }\n\n  // Get photos for AI processing (admin/backend use)\n  async getAllPhotos() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error getting photos:', error);\n      return [];\n    }\n  }\n\n  // Get photos by user for AI analysis\n  async getPhotosByUser(userId) {\n    try {\n      const photos = await this.getAllPhotos();\n      return photos.filter(photo => photo.userId === userId);\n    } catch (error) {\n      console.error('Error getting user photos:', error);\n      return [];\n    }\n  }\n\n  // Get photos that need AI analysis\n  async getPhotosForAnalysis() {\n    try {\n      const photos = await this.getAllPhotos();\n      return photos.filter(photo => !photo.analysisResults);\n    } catch (error) {\n      console.error('Error getting photos for analysis:', error);\n      return [];\n    }\n  }\n\n  // Helper methods\n  generatePhotoId() {\n    return `photo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  async fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n  async saveToStorage(photoRecord) {\n    const photos = await this.getAllPhotos();\n    photos.push(photoRecord);\n    localStorage.setItem(this.storageKey, JSON.stringify(photos));\n  }\n  getSessionId() {\n    let sessionId = sessionStorage.getItem('vhealth_session');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('vhealth_session', sessionId);\n    }\n    return sessionId;\n  }\n\n  // For development/debugging - clean up old photos\n  async cleanup(daysOld = 30) {\n    try {\n      const photos = await this.getAllPhotos();\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n      const recentPhotos = photos.filter(photo => new Date(photo.uploadDate) > cutoffDate);\n      localStorage.setItem(this.storageKey, JSON.stringify(recentPhotos));\n      console.log(`Cleaned up photos older than ${daysOld} days`);\n    } catch (error) {\n      console.error('Error cleaning up photos:', error);\n    }\n  }\n}\nexport const photoStorageService = new PhotoStorageService();","map":{"version":3,"names":["PhotoStorageService","constructor","storageKey","savePhoto","file","searchQuery","userId","photoId","generatePhotoId","base64Data","fileToBase64","photoRecord","id","filename","originalName","name","uploadDate","Date","toISOString","fileSize","size","mimeType","type","sessionId","getSessionId","saveToStorage","console","log","error","Error","updatePhotoAnalysis","analysisResults","photos","getAllPhotos","photoIndex","findIndex","photo","localStorage","setItem","JSON","stringify","stored","getItem","parse","getPhotosByUser","filter","getPhotosForAnalysis","now","Math","random","toString","substr","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","push","sessionStorage","cleanup","daysOld","cutoffDate","setDate","getDate","recentPhotos","photoStorageService"],"sources":["C:/vHealth/vhealth/client/src/services/photoStorageService.ts"],"sourcesContent":["interface PhotoRecord {\r\n  id: string;\r\n  filename: string;\r\n  originalName: string;\r\n  uploadDate: string;\r\n  fileSize: number;\r\n  mimeType: string;\r\n  base64Data: string;\r\n  searchQuery?: string;\r\n  analysisResults?: string;\r\n  userId?: string; // For multi-user support\r\n  sessionId?: string; // For tracking user sessions\r\n}\r\n\r\nclass PhotoStorageService {\r\n  private storageKey = 'vhealth_photos';\r\n\r\n  // Save photo silently in background\r\n  async savePhoto(file: File, searchQuery?: string, userId?: string): Promise<string> {\r\n    try {\r\n      const photoId = this.generatePhotoId();\r\n      const base64Data = await this.fileToBase64(file);\r\n      \r\n      const photoRecord: PhotoRecord = {\r\n        id: photoId,\r\n        filename: `photo_${photoId}`,\r\n        originalName: file.name,\r\n        uploadDate: new Date().toISOString(),\r\n        fileSize: file.size,\r\n        mimeType: file.type,\r\n        base64Data,\r\n        searchQuery,\r\n        userId,\r\n        sessionId: this.getSessionId()\r\n      };\r\n\r\n      // Save to localStorage (replace with API call for production)\r\n      await this.saveToStorage(photoRecord);\r\n      \r\n      console.log('Photo saved silently for AI analysis:', photoId);\r\n      return photoId;\r\n    } catch (error) {\r\n      console.error('Error saving photo:', error);\r\n      throw new Error('Failed to save photo');\r\n    }\r\n  }\r\n\r\n  // Update photo with AI analysis results\r\n  async updatePhotoAnalysis(photoId: string, analysisResults: string): Promise<boolean> {\r\n    try {\r\n      const photos = await this.getAllPhotos();\r\n      const photoIndex = photos.findIndex(photo => photo.id === photoId);\r\n      \r\n      if (photoIndex === -1) return false;\r\n      \r\n      photos[photoIndex].analysisResults = analysisResults;\r\n      localStorage.setItem(this.storageKey, JSON.stringify(photos));\r\n      console.log('AI analysis saved for photo:', photoId);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating photo analysis:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get photos for AI processing (admin/backend use)\r\n  async getAllPhotos(): Promise<PhotoRecord[]> {\r\n    try {\r\n      const stored = localStorage.getItem(this.storageKey);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Error getting photos:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get photos by user for AI analysis\r\n  async getPhotosByUser(userId: string): Promise<PhotoRecord[]> {\r\n    try {\r\n      const photos = await this.getAllPhotos();\r\n      return photos.filter(photo => photo.userId === userId);\r\n    } catch (error) {\r\n      console.error('Error getting user photos:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get photos that need AI analysis\r\n  async getPhotosForAnalysis(): Promise<PhotoRecord[]> {\r\n    try {\r\n      const photos = await this.getAllPhotos();\r\n      return photos.filter(photo => !photo.analysisResults);\r\n    } catch (error) {\r\n      console.error('Error getting photos for analysis:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  private generatePhotoId(): string {\r\n    return `photo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private async fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n  private async saveToStorage(photoRecord: PhotoRecord): Promise<void> {\r\n    const photos = await this.getAllPhotos();\r\n    photos.push(photoRecord);\r\n    localStorage.setItem(this.storageKey, JSON.stringify(photos));\r\n  }\r\n\r\n  private getSessionId(): string {\r\n    let sessionId = sessionStorage.getItem('vhealth_session');\r\n    if (!sessionId) {\r\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      sessionStorage.setItem('vhealth_session', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n\r\n  // For development/debugging - clean up old photos\r\n  async cleanup(daysOld: number = 30): Promise<void> {\r\n    try {\r\n      const photos = await this.getAllPhotos();\r\n      const cutoffDate = new Date();\r\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\r\n      \r\n      const recentPhotos = photos.filter(photo => \r\n        new Date(photo.uploadDate) > cutoffDate\r\n      );\r\n      \r\n      localStorage.setItem(this.storageKey, JSON.stringify(recentPhotos));\r\n      console.log(`Cleaned up photos older than ${daysOld} days`);\r\n    } catch (error) {\r\n      console.error('Error cleaning up photos:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const photoStorageService = new PhotoStorageService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}