{"ast":null,"code":"class OpenAIHealthService {\n  constructor() {\n    this.apiKey = void 0;\n    this.model = void 0;\n    this.queryLog = void 0;\n    // Add the isConfigured method\n    this.isConfigured = () => {\n      return Boolean(this.apiKey && this.apiKey.trim().length > 0);\n    };\n    this.searchHealthInfo = async query => {\n      console.log(`Searching for health info: ${query}`);\n      if (!this.isConfigured()) {\n        console.error(\"OpenAI API key not configured\");\n        throw new Error(\"OpenAI API key not configured\");\n      }\n      try {\n        // Initial log with just the query\n        this.logQuery(query);\n\n        // For now, return mock data while we debug the API connection\n        return {\n          summary: `Health information about ${query}`,\n          details: `Detailed information about ${query} would be retrieved from OpenAI in production.`,\n          sources: [\"OpenAI API\", \"Medical knowledge base\"],\n          relatedTopics: [`${query} nutrition`, `${query} health benefits`, `${query} risks`],\n          recommendations: [`Consider adding ${query} to your diet in moderation`, `Consult with a healthcare professional about ${query}`],\n          medicalDisclaimer: \"This information is for educational purposes only and not intended as medical advice.\"\n        };\n\n        // TODO: Implement actual OpenAI API call here\n      } catch (error) {\n        console.error(\"Error calling OpenAI API:\", error);\n        throw error;\n      }\n    };\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\n    this.model = 'gpt-4';\n    this.queryLog = [];\n    console.log(\"OpenAI API Service initialized\");\n    console.log(\"API Key configured:\", this.apiKey ? \"Yes\" : \"No\");\n  }\n  async moderateQuery(query) {\n    try {\n      var _data$results, _data$results$;\n      const response = await fetch('https://api.openai.com/v1/moderations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          input: query\n        })\n      });\n      const data = await response.json();\n      const flagged = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : _data$results$.flagged) || false;\n      if (flagged) {\n        console.warn('üö® Query flagged by moderation:', query);\n      }\n      return !flagged;\n    } catch (error) {\n      console.error('Moderation check failed:', error);\n      return true;\n    }\n  }\n  logQuery(query, rawResponse = '', citations = []) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      query: query,\n      rawResponse: rawResponse,\n      citationsExtracted: citations\n    };\n    try {\n      const existingLogs = JSON.parse(localStorage.getItem('healthQueryLogs') || '[]');\n      existingLogs.push(logEntry);\n      if (existingLogs.length > 100) {\n        existingLogs.splice(0, existingLogs.length - 100);\n      }\n      localStorage.setItem('healthQueryLogs', JSON.stringify(existingLogs));\n      console.log('üìù Query logged for audit trail');\n    } catch (error) {\n      console.warn('Failed to log query:', error);\n    }\n  }\n  // Extract citations from OpenAI response\n  extractRealCitations(text) {\n    // Simple extraction of citations - improve as needed\n    const citations = [];\n    const lines = text.split('\\n');\n    for (const line of lines) {\n      if (line.match(/^\\d+\\.\\s/) || line.includes('Source:') || line.includes('Reference:')) {\n        citations.push(line.trim());\n      }\n    }\n    return citations;\n  }\n}\nexport default new OpenAIHealthService();","map":{"version":3,"names":["OpenAIHealthService","constructor","apiKey","model","queryLog","isConfigured","Boolean","trim","length","searchHealthInfo","query","console","log","error","Error","logQuery","summary","details","sources","relatedTopics","recommendations","medicalDisclaimer","process","env","REACT_APP_OPENAI_API_KEY","moderateQuery","_data$results","_data$results$","response","fetch","method","headers","body","JSON","stringify","input","data","json","flagged","results","warn","rawResponse","citations","logEntry","timestamp","Date","toISOString","citationsExtracted","existingLogs","parse","localStorage","getItem","push","splice","setItem","extractRealCitations","text","lines","split","line","match","includes"],"sources":["C:/vHealth/vhealth/client/src/services/openaiAPI.ts"],"sourcesContent":["interface ChatGPTResponse {\r\n  summary: string;\r\n  details: string;\r\n  sources: string[];\r\n  relatedTopics: string[];\r\n  recommendations: string[];\r\n  medicalDisclaimer: string;\r\n}\r\n\r\ninterface QueryLog {\r\n  timestamp: string;\r\n  query: string;\r\n  rawResponse?: string;\r\n  citationsExtracted?: string[];\r\n}\r\n\r\nclass OpenAIHealthService {\r\n  private apiKey: string;\r\n  private model: string;\r\n  private queryLog: QueryLog[];\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\r\n    this.model = 'gpt-4';\r\n    this.queryLog = [];\r\n    console.log(\"OpenAI API Service initialized\");\r\n    console.log(\"API Key configured:\", this.apiKey ? \"Yes\" : \"No\");\r\n  }\r\n\r\n  // Add the isConfigured method\r\n  isConfigured = (): boolean => {\r\n    return Boolean(this.apiKey && this.apiKey.trim().length > 0);\r\n  };\r\n\r\n  private async moderateQuery(query: string): Promise<boolean> {\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/moderations', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          input: query\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      const flagged = data.results?.[0]?.flagged || false;\r\n      \r\n      if (flagged) {\r\n        console.warn('üö® Query flagged by moderation:', query);\r\n      }\r\n      \r\n      return !flagged;\r\n    } catch (error) {\r\n      console.error('Moderation check failed:', error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private logQuery(query: string, rawResponse: string = '', citations: string[] = []): void {\r\n    const logEntry: QueryLog = {\r\n      timestamp: new Date().toISOString(),\r\n      query: query,\r\n      rawResponse: rawResponse,\r\n      citationsExtracted: citations\r\n    };\r\n    \r\n    try {\r\n      const existingLogs = JSON.parse(localStorage.getItem('healthQueryLogs') || '[]');\r\n      existingLogs.push(logEntry);\r\n      \r\n      if (existingLogs.length > 100) {\r\n        existingLogs.splice(0, existingLogs.length - 100);\r\n      }\r\n      \r\n      localStorage.setItem('healthQueryLogs', JSON.stringify(existingLogs));\r\n      console.log('üìù Query logged for audit trail');\r\n    } catch (error) {\r\n      console.warn('Failed to log query:', error);\r\n    }\r\n  }\r\n\r\n  searchHealthInfo = async (query: string): Promise<ChatGPTResponse> => {\r\n    console.log(`Searching for health info: ${query}`);\r\n\r\n    if (!this.isConfigured()) {\r\n      console.error(\"OpenAI API key not configured\");\r\n      throw new Error(\"OpenAI API key not configured\");\r\n    }\r\n\r\n    try {\r\n      // Initial log with just the query\r\n      this.logQuery(query);\r\n      \r\n      // For now, return mock data while we debug the API connection\r\n      return {\r\n        summary: `Health information about ${query}`,\r\n        details: `Detailed information about ${query} would be retrieved from OpenAI in production.`,\r\n        sources: [\"OpenAI API\", \"Medical knowledge base\"],\r\n        relatedTopics: [`${query} nutrition`, `${query} health benefits`, `${query} risks`],\r\n        recommendations: [`Consider adding ${query} to your diet in moderation`, `Consult with a healthcare professional about ${query}`],\r\n        medicalDisclaimer: \"This information is for educational purposes only and not intended as medical advice.\"\r\n      };\r\n      \r\n      // TODO: Implement actual OpenAI API call here\r\n    } catch (error) {\r\n      console.error(\"Error calling OpenAI API:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  // Extract citations from OpenAI response\r\n  private extractRealCitations(text: string): string[] {\r\n    // Simple extraction of citations - improve as needed\r\n    const citations: string[] = [];\r\n    const lines = text.split('\\n');\r\n    \r\n    for (const line of lines) {\r\n      if (line.match(/^\\d+\\.\\s/) || line.includes('Source:') || line.includes('Reference:')) {\r\n        citations.push(line.trim());\r\n      }\r\n    }\r\n    \r\n    return citations;\r\n  }\r\n}\r\n\r\nexport default new OpenAIHealthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}