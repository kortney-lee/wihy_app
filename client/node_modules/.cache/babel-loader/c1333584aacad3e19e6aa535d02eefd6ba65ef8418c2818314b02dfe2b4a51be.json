{"ast":null,"code":"// src/services/foodAnalysisService.ts\n\n// Add a type for the API response\n\nimport { API_CONFIG } from '../config/apiConfig';\nconst API_URL = API_CONFIG.BASE_URL;\n\n// Create or update this file to properly send images to your backend\n\nclass FoodAnalysisService {\n  async analyzeFoodImage(file) {\n    try {\n      console.log('Using WiHy Scan API for food image analysis...');\n\n      // Import wihyAPI to use the new scan endpoint\n      const {\n        wihyAPI\n      } = await import('../services/wihyAPI');\n      const result = await wihyAPI.scanFood(file);\n      console.log('WiHy Scan API result:', result);\n\n      // Extract food name from the scan result using unified format\n      let foodName = 'Unknown food item';\n\n      // Type-safe check for unified response format\n      if (result.success && 'data' in result && result.data) {\n        var _unifiedResult$data$a;\n        const unifiedResult = result; // Use any to handle type checking\n\n        // Primary: Get health advice from AI response\n        if ((_unifiedResult$data$a = unifiedResult.data.ai_response) !== null && _unifiedResult$data$a !== void 0 && _unifiedResult$data$a.response) {\n          foodName = unifiedResult.data.ai_response.response;\n          console.log('üìä Using AI response for food name:', foodName);\n        }\n        // Fallback: Try to get product name or other analysis\n        else if (unifiedResult.data.product_name) {\n          foodName = unifiedResult.data.product_name;\n          console.log('üìä Using product name:', foodName);\n        } else if (unifiedResult.data.analysis) {\n          foodName = unifiedResult.data.analysis;\n          console.log('üìä Using analysis:', foodName);\n        } else {\n          foodName = 'Food item analyzed';\n          console.log('üìä Using fallback name');\n        }\n      } else {\n        console.log('‚ùå No valid response data found in food analysis');\n        foodName = 'Food analysis unavailable';\n      }\n      return foodName;\n    } catch (error) {\n      console.error('Error analyzing food image:', error);\n      throw error;\n    }\n  }\n}\nexport const foodAnalysisService = new FoodAnalysisService();","map":{"version":3,"names":["API_CONFIG","API_URL","BASE_URL","FoodAnalysisService","analyzeFoodImage","file","console","log","wihyAPI","result","scanFood","foodName","success","data","_unifiedResult$data$a","unifiedResult","ai_response","response","product_name","analysis","error","foodAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/components/foodAnalysisService.tsx"],"sourcesContent":["// src/services/foodAnalysisService.ts\r\nimport axios from 'axios';\r\n\r\ninterface FoodAnalysisResult {\r\n  classification: {\r\n    foodName: string;\r\n    confidence: number;\r\n    category: string;\r\n    portionSize?: string;\r\n    alternatives?: string[];\r\n  };\r\n  nutrition: {\r\n    calories: number;\r\n    macros: {\r\n      protein: number;\r\n      carbs: number;\r\n      fat: number;\r\n      saturatedFat: number;\r\n      sugar: number;\r\n      fiber: number;\r\n      sodium: number;\r\n    };\r\n    healthScore: number;\r\n    novaClassification: 1 | 2 | 3 | 4;\r\n    allergens: string[];\r\n    snapEligible: boolean;\r\n  };\r\n  healthInsight: string;\r\n  recommendations: string[];\r\n}\r\n\r\n// Add a type for the API response\r\ninterface AnalyzeImageResponse {\r\n  foodName: string;\r\n  name?: string;  // Alternative field name\r\n  nutrition?: any;\r\n  confidence?: number;\r\n  // Add other fields as needed\r\n}\r\n\r\nimport { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\r\n\r\nconst API_URL = API_CONFIG.BASE_URL;\r\n\r\n// Create or update this file to properly send images to your backend\r\n\r\nclass FoodAnalysisService {\r\n  async analyzeFoodImage(file: File): Promise<string> {\r\n    try {\r\n      console.log('Using WiHy Scan API for food image analysis...');\r\n      \r\n      // Import wihyAPI to use the new scan endpoint\r\n      const { wihyAPI } = await import('../services/wihyAPI');\r\n      \r\n      const result = await wihyAPI.scanFood(file);\r\n      console.log('WiHy Scan API result:', result);\r\n      \r\n      // Extract food name from the scan result using unified format\r\n      let foodName = 'Unknown food item';\r\n      \r\n      // Type-safe check for unified response format\r\n      if (result.success && 'data' in result && result.data) {\r\n        const unifiedResult = result as any; // Use any to handle type checking\r\n        \r\n        // Primary: Get health advice from AI response\r\n        if (unifiedResult.data.ai_response?.response) {\r\n          foodName = unifiedResult.data.ai_response.response;\r\n          console.log('üìä Using AI response for food name:', foodName);\r\n        }\r\n        // Fallback: Try to get product name or other analysis\r\n        else if (unifiedResult.data.product_name) {\r\n          foodName = unifiedResult.data.product_name;\r\n          console.log('üìä Using product name:', foodName);\r\n        }\r\n        else if (unifiedResult.data.analysis) {\r\n          foodName = unifiedResult.data.analysis;\r\n          console.log('üìä Using analysis:', foodName);\r\n        }\r\n        else {\r\n          foodName = 'Food item analyzed';\r\n          console.log('üìä Using fallback name');\r\n        }\r\n      } else {\r\n        console.log('‚ùå No valid response data found in food analysis');\r\n        foodName = 'Food analysis unavailable';\r\n      }\r\n      \r\n      return foodName;\r\n      \r\n    } catch (error) {\r\n      console.error('Error analyzing food image:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const foodAnalysisService = new FoodAnalysisService();"],"mappings":"AAAA;;AA+BA;;AASA,SAASA,UAAU,QAAwB,qBAAqB;AAEhE,MAAMC,OAAO,GAAGD,UAAU,CAACE,QAAQ;;AAEnC;;AAEA,MAAMC,mBAAmB,CAAC;EACxB,MAAMC,gBAAgBA,CAACC,IAAU,EAAmB;IAClD,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;;MAE7D;MACA,MAAM;QAAEC;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC;MAEvD,MAAMC,MAAM,GAAG,MAAMD,OAAO,CAACE,QAAQ,CAACL,IAAI,CAAC;MAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,MAAM,CAAC;;MAE5C;MACA,IAAIE,QAAQ,GAAG,mBAAmB;;MAElC;MACA,IAAIF,MAAM,CAACG,OAAO,IAAI,MAAM,IAAIH,MAAM,IAAIA,MAAM,CAACI,IAAI,EAAE;QAAA,IAAAC,qBAAA;QACrD,MAAMC,aAAa,GAAGN,MAAa,CAAC,CAAC;;QAErC;QACA,KAAAK,qBAAA,GAAIC,aAAa,CAACF,IAAI,CAACG,WAAW,cAAAF,qBAAA,eAA9BA,qBAAA,CAAgCG,QAAQ,EAAE;UAC5CN,QAAQ,GAAGI,aAAa,CAACF,IAAI,CAACG,WAAW,CAACC,QAAQ;UAClDX,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEI,QAAQ,CAAC;QAC9D;QACA;QAAA,KACK,IAAII,aAAa,CAACF,IAAI,CAACK,YAAY,EAAE;UACxCP,QAAQ,GAAGI,aAAa,CAACF,IAAI,CAACK,YAAY;UAC1CZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEI,QAAQ,CAAC;QACjD,CAAC,MACI,IAAII,aAAa,CAACF,IAAI,CAACM,QAAQ,EAAE;UACpCR,QAAQ,GAAGI,aAAa,CAACF,IAAI,CAACM,QAAQ;UACtCb,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,QAAQ,CAAC;QAC7C,CAAC,MACI;UACHA,QAAQ,GAAG,oBAAoB;UAC/BL,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACvC;MACF,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAC9DI,QAAQ,GAAG,2BAA2B;MACxC;MAEA,OAAOA,QAAQ;IAEjB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMC,mBAAmB,GAAG,IAAIlB,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}