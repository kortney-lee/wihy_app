{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// RSS API response types\n\n// NEW: Feed Priority Constants\nexport const FEED_PRIORITIES = {\n  TOP_PRIORITY: {\n    min: 8,\n    max: 10,\n    label: 'Top Priority'\n  },\n  HIGH_PRIORITY: {\n    min: 6,\n    max: 7,\n    label: 'High Priority'\n  },\n  MEDIUM_PRIORITY: {\n    min: 4,\n    max: 5,\n    label: 'Medium Priority'\n  },\n  LOW_PRIORITY: {\n    min: 1,\n    max: 3,\n    label: 'Low Priority'\n  },\n  EXTRA_FEEDS: {\n    value: 0,\n    label: 'Extra Content'\n  }\n};\n\n// NEW: Priority-based fetching options\n\n// Add simple cache to prevent duplicate calls\nlet newsCache = {\n  data: null,\n  timestamp: 0\n};\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Helper functions\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname;\n  } catch {\n    return '';\n  }\n};\nconst formatTimeAgo = dateString => {\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    if (diffDays > 0) return `${diffDays} days ago`;\n    if (diffHours > 0) return `${diffHours} hours ago`;\n    return 'Just now';\n  } catch {\n    return 'Recently';\n  }\n};\nconst extractTags = (title, description) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const keywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health'];\n  return keywords.filter(keyword => content.includes(keyword));\n};\nconst mapFrontendToBackendCategory = category => {\n  const mapping = {\n    'health': 'health',\n    'technology': 'tech',\n    'business': 'business',\n    'science': 'science',\n    'sports': 'sports',\n    'entertainment': 'entertainment',\n    'politics': 'political',\n    'world': 'world'\n  };\n  return mapping[category] || category;\n};\nconst mapBackendCategory = category => {\n  if (!category) return 'general';\n  const mapping = {\n    'health': 'health',\n    'tech': 'technology',\n    'business': 'business',\n    'science': 'science',\n    'sports': 'sports',\n    'entertainment': 'entertainment',\n    'political': 'politics',\n    'world': 'world'\n  };\n  return mapping[category] || category;\n};\nconst isTrustedDomain = url => {\n  const trustedDomains = ['nih.gov', 'cdc.gov', 'who.int', 'mayoclinic.org', 'webmd.com', 'healthline.com', 'medicalnewstoday.com', 'reuters.com', 'bbc.com', 'technologyreview.com', 'nature.com', 'sciencedaily.com'];\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return trustedDomains.some(trusted => domain.includes(trusted));\n  } catch {\n    return false;\n  }\n};\nconst calculateQualityScore = article => {\n  let score = 0.5;\n  if (article.hasAuthor) score += 0.1;\n  if (article.hasMedia) score += 0.1;\n  if (article.wordCount && article.wordCount > 200) score += 0.1;\n  if (isTrustedDomain(article.url)) score += 0.2;\n  if (article.feedPriority && article.feedPriority > 5) score += 0.1;\n  return Math.min(score, 1.0);\n};\nconst getFallbackNews = async () => {\n  return {\n    success: true,\n    articles: [{\n      id: 'fallback-1',\n      title: 'Health News Service Temporarily Unavailable',\n      summary: 'We are working to restore the health news feed. Please try again later.',\n      url: '#',\n      source: 'vHealth System',\n      domain: 'vhealth.com',\n      category: 'health',\n      publishedDate: new Date().toISOString(),\n      relevanceScore: 0.5,\n      tags: ['health', 'system'],\n      hasMedia: false,\n      hasAuthor: false,\n      feedPriority: 5\n    }],\n    categories: {},\n    lastUpdated: new Date().toISOString(),\n    count: 1,\n    message: 'Fallback news provided'\n  };\n};\n\n// UPDATED: Main function renamed to avoid conflicts\nconst fetchNewsWithOptions = async (options = {}) => {\n  try {\n    var _data$articles;\n    const {\n      categories,\n      limit = 100,\n      priority,\n      country = 'US',\n      includeExtra = false\n    } = options;\n\n    // Check cache first to prevent duplicate calls\n    const now = Date.now();\n    if (newsCache.data && newsCache.data.articles && newsCache.data.articles.length >= limit && now - newsCache.timestamp < CACHE_DURATION) {\n      console.log('📦 Using cached RSS data');\n      return newsCache.data;\n    }\n    console.log('🔍 Fetching RSS articles with priority filtering...', {\n      categories,\n      limit,\n      priority,\n      country\n    });\n\n    // Build API parameters with priority filtering\n    const params = {\n      limit,\n      flat: true,\n      country\n    };\n\n    // Handle priority filtering\n    if (priority) {\n      if (typeof priority === 'number') {\n        // Specific priority level\n        params.feed_priority = priority;\n      } else {\n        // Priority range mapping\n        switch (priority) {\n          case 'top':\n            params.feed_priority = 9; // Get feeds with priority 9-10\n            break;\n          case 'high':\n            params.feed_priority = 7; // Get feeds with priority 6-7\n            break;\n          case 'medium':\n            params.feed_priority = 5; // Get feeds with priority 4-5\n            break;\n          case 'low':\n            params.feed_priority = 2; // Get feeds with priority 1-3\n            break;\n          case 'extra':\n            params.feed_priority = 0; // Get extra feeds\n            break;\n        }\n      }\n    } else if (!includeExtra) {\n      // Default: exclude extra feeds (priority 0), show only priority 1-10\n      // Don't set feed_priority param to get all priority feeds 1-10\n    }\n\n    // Handle category filtering\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\n      if (mappedCategory) {\n        params.category = mappedCategory;\n      }\n    } else {\n      // Default to health category for better relevance\n      params.category = 'health';\n    }\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params,\n      timeout: 10000\n    });\n    const data = response.data;\n    console.log('✅ RSS API response:', {\n      success: data.success,\n      articleCount: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n      count: data.count,\n      filtersApplied: data.filters_applied\n    });\n    if (!data.success) {\n      console.warn('⚠️ RSS API returned success=false, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Convert RSS articles to NewsArticle format\n    const articles = (data.articles || []).filter(article => article.title && article.title.trim() !== '').map((article, index) => {\n      var _article$id;\n      // Enhanced image URL extraction with better validation\n      const extractValidImageUrl = url => {\n        if (!url) return '';\n        const trimmed = url.trim();\n        if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\n        if (trimmed.startsWith('http') || trimmed.startsWith('//')) {\n          // Validate it's actually an image URL\n          const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n          const hasImageExtension = imageExtensions.some(ext => trimmed.toLowerCase().includes(ext));\n          // Accept if it has image extension or contains image-related path\n          if (hasImageExtension || trimmed.includes('/image') || trimmed.includes('/photo')) {\n            return trimmed;\n          }\n        }\n        return '';\n      };\n      const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\n      const imageUrl = extractValidImageUrl(article.media_url);\n\n      // Better summary handling - ensure we have actual content\n      let summary = article.description || article.content_encoded || '';\n\n      // Clean up HTML tags and decode entities if present\n      summary = summary.replace(/<[^>]*>/g, '').trim();\n      summary = summary.replace(/&[^;]+;/g, ' ').trim();\n\n      // If still empty, create a meaningful fallback\n      if (!summary || summary.length < 10) {\n        summary = `Read about ${article.title} from ${article.feed_name}`;\n      }\n      const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\n      return {\n        id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || article.guid || `rss_${Date.now()}_${index}`,\n        title: article.title || 'No title',\n        summary: cleanSummary,\n        url: article.link || '#',\n        source: article.feed_name || 'Unknown Source',\n        domain: article.domain || extractDomain(article.link || ''),\n        category: mapBackendCategory(article.category),\n        publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description, article.feed_priority),\n        tags: extractTags(article.title, article.description),\n        // RSS enhanced fields\n        thumbnailUrl,\n        imageUrl,\n        mediaType: article.media_type || '',\n        mediaDescription: article.media_description || '',\n        author: article.author || '',\n        fullContent: article.content_encoded || '',\n        wordCount: article.word_count || 0,\n        readingTime: article.reading_time || Math.ceil((article.word_count || 200) / 200),\n        hasMedia: !!(thumbnailUrl || imageUrl),\n        hasAuthor: !!(article.author && article.author.trim()),\n        contentLength: article.content_length || 0,\n        feedTitle: article.feed_name || '',\n        guid: article.guid || '',\n        commentsUrl: article.comments_url || '',\n        language: article.language || '',\n        rights: article.rights || '',\n        extractedAt: article.extracted_at || '',\n        lastModified: article.last_modified || '',\n        // RSS API specific fields\n        timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\n        isRecent: article.is_recent || false,\n        contentQuality: article.content_quality || 'medium',\n        completeness: article.completeness || 'partial',\n        country: article.country || '',\n        feedName: article.feed_name || '',\n        feedId: article.feed_id || 0,\n        feedPriority: article.feed_priority || 0 // NEW: Include feed priority\n      };\n    });\n    console.log('📰 Processed RSS articles:', {\n      total: articles.length,\n      withImages: articles.filter(a => a.hasMedia).length,\n      withAuthors: articles.filter(a => a.hasAuthor).length,\n      withSummaries: articles.filter(a => a.summary !== 'Click to read full article').length,\n      categories: [...new Set(articles.map(a => a.category))],\n      priorityDistribution: {\n        topPriority: articles.filter(a => (a.feedPriority || 0) >= 8).length,\n        highPriority: articles.filter(a => (a.feedPriority || 0) >= 6 && (a.feedPriority || 0) < 8).length,\n        mediumPriority: articles.filter(a => (a.feedPriority || 0) >= 4 && (a.feedPriority || 0) < 6).length,\n        lowPriority: articles.filter(a => (a.feedPriority || 0) >= 1 && (a.feedPriority || 0) < 4).length,\n        extraFeeds: articles.filter(a => (a.feedPriority || 0) === 0).length\n      }\n    });\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      const category = article.category;\n      if (!categorizedArticles[category]) {\n        categorizedArticles[category] = [];\n      }\n      categorizedArticles[category].push(article);\n    });\n    const result = {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      filtersApplied: data.filters_applied,\n      message: 'Health news fetched successfully from RSS feeds with priority filtering'\n    };\n\n    // Cache the result\n    newsCache = {\n      data: result,\n      timestamp: now\n    };\n    return result;\n  } catch (error) {\n    console.error('❌ Error fetching RSS feed:', error);\n\n    // If we have cached data, use it even if it's old\n    if (newsCache.data) {\n      console.log('📦 Using stale cached data due to error');\n      return newsCache.data;\n    }\n    const fallback = await getFallbackNews();\n    return {\n      ...fallback,\n      message: `RSS service error (${error.message}). Showing sample news.`\n    };\n  }\n};\n\n// NEW: Overloaded function to handle both signatures\n\nexport function fetchNewsFeed(optionsOrCategories, limit) {\n  // Handle both old and new function signatures\n  if (Array.isArray(optionsOrCategories)) {\n    // Old signature: fetchNewsFeed(categories, limit)\n    return fetchNewsWithOptions({\n      categories: optionsOrCategories,\n      limit: limit || 50\n    });\n  } else {\n    // New signature: fetchNewsFeed(options)\n    return fetchNewsWithOptions(optionsOrCategories || {});\n  }\n}\n\n// NEW: Priority-specific fetch functions\nexport const fetchTopPriorityNews = async (limit = 20) => {\n  return fetchNewsFeed({\n    priority: 'top',\n    limit\n  });\n};\nexport const fetchHighPriorityNews = async (limit = 30) => {\n  return fetchNewsFeed({\n    priority: 'high',\n    limit\n  });\n};\nexport const fetchExtraNews = async (limit = 10) => {\n  return fetchNewsFeed({\n    priority: 'extra',\n    limit\n  });\n};\nexport const fetchMixedPriorityNews = async (limit = 50) => {\n  return fetchNewsFeed({\n    includeExtra: true,\n    limit\n  });\n};\n\n// Clear cache function\nexport const clearNewsCache = () => {\n  newsCache = {\n    data: null,\n    timestamp: 0\n  };\n  console.log('🗑️ News cache cleared');\n};\n\n// UPDATED: Trigger RSS polling with priority support\nexport const triggerRSSPolling = async (force, feedId, priority) => {\n  try {\n    console.log('🔄 Triggering RSS polling...', {\n      force,\n      feedId,\n      priority\n    });\n    const params = {};\n    if (force) params.force = 'true';\n    if (feedId) params.feed_id = feedId.toString();\n    if (priority !== undefined) params.feed_priority = priority.toString();\n    const response = await axios.post(`${API_URL}/news/fetch`, {}, {\n      params,\n      timeout: 30000 // Longer timeout for polling\n    });\n    const data = response.data;\n    console.log('✅ RSS polling response:', data);\n    return {\n      success: data.success,\n      results: data.results,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('❌ Error triggering RSS polling:', error);\n    return {\n      success: false,\n      message: `Failed to trigger polling: ${error.message}`\n    };\n  }\n};\n\n// UPDATED: Get articles by category with priority support\nexport const getArticlesByCategory = async (category, limit, priority) => {\n  try {\n    console.log('📂 Fetching RSS articles for category with priority:', {\n      category,\n      priority,\n      limit\n    });\n    return await fetchNewsFeed({\n      categories: [category],\n      limit,\n      priority\n    });\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\n\n// UPDATED: Enhanced relevance calculation with priority weighting\nconst calculateRelevanceScore = (title = '', description = '', feedPriority) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n  let score = 0.5;\n  score += matchingKeywords.length * 0.08;\n\n  // NEW: Boost score based on feed priority\n  if (feedPriority && feedPriority > 0) {\n    const priorityBoost = Math.min(feedPriority / 10 * 0.2, 0.2); // Max 0.2 boost for priority 10\n    score += priorityBoost;\n  }\n  return Math.min(score, 1.0);\n};\n\n// NEW: Priority-aware formatting\nexport const formatArticleForDisplay = article => {\n  const priorityLevel = getPriorityLevel(article.feedPriority || 0);\n  return {\n    ...article,\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary,\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\n    qualityScore: calculateQualityScore(article),\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read',\n    priorityLevel,\n    priorityLabel: priorityLevel.label,\n    isPriorityFeed: (article.feedPriority || 0) >= 1\n  };\n};\n\n// NEW: Get priority level information\nexport const getPriorityLevel = priority => {\n  if (priority >= 8) return FEED_PRIORITIES.TOP_PRIORITY;\n  if (priority >= 6) return FEED_PRIORITIES.HIGH_PRIORITY;\n  if (priority >= 4) return FEED_PRIORITIES.MEDIUM_PRIORITY;\n  if (priority >= 1) return FEED_PRIORITIES.LOW_PRIORITY;\n  return FEED_PRIORITIES.EXTRA_FEEDS;\n};\n\n// NEW: Filter articles by priority\nexport const filterArticlesByPriority = (articles, minPriority = 1, maxPriority = 10) => {\n  return articles.filter(article => {\n    const priority = article.feedPriority || 0;\n    return priority >= minPriority && priority <= maxPriority;\n  });\n};\n\n// Legacy function for backward compatibility - UPDATED to use new options interface\nexport const refreshNewsFeed = async () => {\n  clearNewsCache();\n  return fetchNewsFeed({\n    limit: 50\n  });\n};\n\n// Legacy function for search articles\nexport const searchNewsArticles = async query => {\n  const newsResponse = await fetchNewsFeed({\n    limit: 100\n  });\n  if (!newsResponse.success || !newsResponse.articles) {\n    return [];\n  }\n  const lowerQuery = query.toLowerCase();\n  return newsResponse.articles.filter(article => article.title.toLowerCase().includes(lowerQuery) || article.summary.toLowerCase().includes(lowerQuery) || article.tags.some(tag => tag.toLowerCase().includes(lowerQuery)));\n};\n\n// UPDATED: Enhanced stats with priority breakdown\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed({\n      includeExtra: true\n    });\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const priorityCounts = {};\n    const sourcesCounts = {};\n    let totalWordCount = 0;\n    let totalReadingTime = 0;\n    let articlesWithImages = 0;\n    let articlesWithAuthors = 0;\n    let trustedSources = 0;\n    const priorityDistribution = {\n      topPriority: 0,\n      highPriority: 0,\n      mediumPriority: 0,\n      lowPriority: 0,\n      extraFeeds: 0\n    };\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n      const priority = article.feedPriority || 0;\n      const priorityLevel = getPriorityLevel(priority);\n      priorityCounts[priorityLevel.label] = (priorityCounts[priorityLevel.label] || 0) + 1;\n\n      // Update priority distribution\n      if (priority >= 8) priorityDistribution.topPriority++;else if (priority >= 6) priorityDistribution.highPriority++;else if (priority >= 4) priorityDistribution.mediumPriority++;else if (priority >= 1) priorityDistribution.lowPriority++;else priorityDistribution.extraFeeds++;\n      if (article.hasMedia) articlesWithImages++;\n      if (article.hasAuthor) articlesWithAuthors++;\n      if (isTrustedDomain(article.url)) trustedSources++;\n      if (article.wordCount) totalWordCount += article.wordCount;\n      if (article.readingTime) totalReadingTime += article.readingTime;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        priorityCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts,\n        articlesWithImages,\n        articlesWithAuthors,\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\n        trustedSources,\n        priorityDistribution\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// NEW: Export priority-based functions for easy use\nexport const NewsServiceWithPriority = {\n  fetchTopPriority: fetchTopPriorityNews,\n  fetchHighPriority: fetchHighPriorityNews,\n  fetchExtra: fetchExtraNews,\n  fetchMixed: fetchMixedPriorityNews,\n  filterByPriority: filterArticlesByPriority,\n  getPriorityLevel,\n  formatForDisplay: formatArticleForDisplay\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","FEED_PRIORITIES","TOP_PRIORITY","min","max","label","HIGH_PRIORITY","MEDIUM_PRIORITY","LOW_PRIORITY","EXTRA_FEEDS","value","newsCache","data","timestamp","CACHE_DURATION","extractDomain","url","URL","hostname","formatTimeAgo","dateString","date","Date","now","diffMs","getTime","diffHours","Math","floor","diffDays","extractTags","title","description","content","toLowerCase","keywords","filter","keyword","includes","mapFrontendToBackendCategory","category","mapping","mapBackendCategory","isTrustedDomain","trustedDomains","domain","some","trusted","calculateQualityScore","article","score","hasAuthor","hasMedia","wordCount","feedPriority","getFallbackNews","success","articles","id","summary","source","publishedDate","toISOString","relevanceScore","tags","categories","lastUpdated","count","message","fetchNewsWithOptions","options","_data$articles","limit","priority","country","includeExtra","length","console","log","params","flat","feed_priority","mappedCategory","response","get","timeout","articleCount","filtersApplied","filters_applied","warn","trim","map","index","_article$id","extractValidImageUrl","trimmed","startsWith","imageExtensions","hasImageExtension","ext","thumbnailUrl","media_thumb_url","imageUrl","media_url","content_encoded","replace","feed_name","cleanSummary","substring","toString","guid","link","published_date","extracted_at","calculateRelevanceScore","mediaType","media_type","mediaDescription","media_description","author","fullContent","word_count","readingTime","reading_time","ceil","contentLength","content_length","feedTitle","commentsUrl","comments_url","language","rights","extractedAt","lastModified","last_modified","timeAgo","time_ago","isRecent","is_recent","contentQuality","content_quality","completeness","feedName","feedId","feed_id","total","withImages","a","withAuthors","withSummaries","Set","priorityDistribution","topPriority","highPriority","mediumPriority","lowPriority","extraFeeds","categorizedArticles","forEach","push","result","error","fallback","fetchNewsFeed","optionsOrCategories","Array","isArray","fetchTopPriorityNews","fetchHighPriorityNews","fetchExtraNews","fetchMixedPriorityNews","clearNewsCache","triggerRSSPolling","force","undefined","post","results","getArticlesByCategory","healthKeywords","matchingKeywords","priorityBoost","formatArticleForDisplay","priorityLevel","getPriorityLevel","formattedDate","isTrusted","relevancePercentage","round","shortSummary","displayImage","feedThumbnailUrl","feedImageUrl","hasValidImage","qualityScore","readingTimeText","priorityLabel","isPriorityFeed","filterArticlesByPriority","minPriority","maxPriority","refreshNewsFeed","searchNewsArticles","query","newsResponse","lowerQuery","tag","getNewsFeedStats","feedResponse","categoryCounts","priorityCounts","sourcesCounts","totalWordCount","totalReadingTime","articlesWithImages","articlesWithAuthors","trustedSources","stats","totalArticles","averageWordCount","averageReadingTime","NewsServiceWithPriority","fetchTopPriority","fetchHighPriority","fetchExtra","fetchMixed","filterByPriority","formatForDisplay"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n  // Enhanced RSS fields\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  mediaType?: string;\r\n  mediaDescription?: string;\r\n  author?: string;\r\n  fullContent?: string;\r\n  wordCount?: number;\r\n  readingTime?: number;\r\n  hasMedia: boolean;\r\n  hasAuthor: boolean;\r\n  contentLength?: number;\r\n  feedTitle?: string;\r\n  feedImageUrl?: string;\r\n  feedThumbnailUrl?: string;\r\n  guid?: string;\r\n  commentsUrl?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  extractedAt?: string;\r\n  lastModified?: string;\r\n  // RSS API enhanced fields\r\n  timeAgo?: string;\r\n  isRecent?: boolean;\r\n  contentQuality?: 'low' | 'medium' | 'high';\r\n  completeness?: 'minimal' | 'partial' | 'complete';\r\n  country?: string;\r\n  feedName?: string;\r\n  feedId?: number;\r\n  feedPriority?: number; // NEW: Feed priority (1-10 = top priority, 0 = extra)\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n  filtersApplied?: {\r\n    category?: string | null;\r\n    country?: string | null;\r\n    feed_id?: string | null;\r\n    feed_priority?: number | null; // NEW: Priority filter\r\n    limit?: number;\r\n  };\r\n}\r\n\r\n// RSS API response types\r\ninterface RSSArticleResponse {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  published_date: string;\r\n  author?: string;\r\n  category?: string;\r\n  country?: string;\r\n  feed_name: string;\r\n  feed_id: number;\r\n  feed_priority?: number; // NEW: Feed priority\r\n  time_ago: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  is_recent: boolean;\r\n  content_quality: 'low' | 'medium' | 'high';\r\n  completeness: 'minimal' | 'partial' | 'complete';\r\n  domain: string;\r\n  extracted_at: string;\r\n  // Additional possible fields\r\n  media_thumb_url?: string;\r\n  media_url?: string;\r\n  media_type?: string;\r\n  media_description?: string;\r\n  content_encoded?: string;\r\n  guid?: string;\r\n  comments_url?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  last_modified?: string;\r\n  has_media?: boolean;\r\n  has_author?: boolean;\r\n  content_length?: number;\r\n}\r\n\r\ninterface RSSResponse {\r\n  success: boolean;\r\n  articles: RSSArticleResponse[];\r\n  count: number;\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: string | null;\r\n    feed_priority: number | null; // NEW: Priority filter\r\n    limit: number;\r\n  };\r\n  message?: string;\r\n}\r\n\r\ninterface RSSPollingResponse {\r\n  success: boolean;\r\n  message: string;\r\n  results?: any;\r\n}\r\n\r\n// NEW: Feed Priority Constants\r\nexport const FEED_PRIORITIES = {\r\n  TOP_PRIORITY: { min: 8, max: 10, label: 'Top Priority' },\r\n  HIGH_PRIORITY: { min: 6, max: 7, label: 'High Priority' },\r\n  MEDIUM_PRIORITY: { min: 4, max: 5, label: 'Medium Priority' },\r\n  LOW_PRIORITY: { min: 1, max: 3, label: 'Low Priority' },\r\n  EXTRA_FEEDS: { value: 0, label: 'Extra Content' }\r\n} as const;\r\n\r\n// NEW: Priority-based fetching options\r\nexport interface NewsFetchOptions {\r\n  categories?: string[];\r\n  limit?: number;\r\n  priority?: 'top' | 'high' | 'medium' | 'low' | 'extra' | number;\r\n  country?: string;\r\n  includeExtra?: boolean;\r\n}\r\n\r\n// Add simple cache to prevent duplicate calls\r\nlet newsCache: { data: NewsFeedResponse | null; timestamp: number } = {\r\n  data: null,\r\n  timestamp: 0\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\n// Helper functions\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname;\r\n  } catch {\r\n    return '';\r\n  }\r\n};\r\n\r\nconst formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - date.getTime();\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffDays = Math.floor(diffHours / 24);\r\n    \r\n    if (diffDays > 0) return `${diffDays} days ago`;\r\n    if (diffHours > 0) return `${diffHours} hours ago`;\r\n    return 'Just now';\r\n  } catch {\r\n    return 'Recently';\r\n  }\r\n};\r\n\r\nconst extractTags = (title: string, description: string): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const keywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health'];\r\n  return keywords.filter(keyword => content.includes(keyword));\r\n};\r\n\r\nconst mapFrontendToBackendCategory = (category: string): string => {\r\n  const mapping: Record<string, string> = {\r\n    'health': 'health',\r\n    'technology': 'tech',\r\n    'business': 'business',\r\n    'science': 'science',\r\n    'sports': 'sports',\r\n    'entertainment': 'entertainment',\r\n    'politics': 'political',\r\n    'world': 'world'\r\n  };\r\n  return mapping[category] || category;\r\n};\r\n\r\nconst mapBackendCategory = (category?: string): string => {\r\n  if (!category) return 'general';\r\n  const mapping: Record<string, string> = {\r\n    'health': 'health',\r\n    'tech': 'technology',\r\n    'business': 'business',\r\n    'science': 'science',\r\n    'sports': 'sports',\r\n    'entertainment': 'entertainment',\r\n    'political': 'politics',\r\n    'world': 'world'\r\n  };\r\n  return mapping[category] || category;\r\n};\r\n\r\nconst isTrustedDomain = (url: string): boolean => {\r\n  const trustedDomains = [\r\n    'nih.gov', 'cdc.gov', 'who.int', 'mayoclinic.org', 'webmd.com',\r\n    'healthline.com', 'medicalnewstoday.com', 'reuters.com', 'bbc.com',\r\n    'technologyreview.com', 'nature.com', 'sciencedaily.com'\r\n  ];\r\n  \r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return trustedDomains.some(trusted => domain.includes(trusted));\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst calculateQualityScore = (article: NewsArticle): number => {\r\n  let score = 0.5;\r\n  \r\n  if (article.hasAuthor) score += 0.1;\r\n  if (article.hasMedia) score += 0.1;\r\n  if (article.wordCount && article.wordCount > 200) score += 0.1;\r\n  if (isTrustedDomain(article.url)) score += 0.2;\r\n  if (article.feedPriority && article.feedPriority > 5) score += 0.1;\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  return {\r\n    success: true,\r\n    articles: [\r\n      {\r\n        id: 'fallback-1',\r\n        title: 'Health News Service Temporarily Unavailable',\r\n        summary: 'We are working to restore the health news feed. Please try again later.',\r\n        url: '#',\r\n        source: 'vHealth System',\r\n        domain: 'vhealth.com',\r\n        category: 'health',\r\n        publishedDate: new Date().toISOString(),\r\n        relevanceScore: 0.5,\r\n        tags: ['health', 'system'],\r\n        hasMedia: false,\r\n        hasAuthor: false,\r\n        feedPriority: 5\r\n      }\r\n    ],\r\n    categories: {},\r\n    lastUpdated: new Date().toISOString(),\r\n    count: 1,\r\n    message: 'Fallback news provided'\r\n  };\r\n};\r\n\r\n// UPDATED: Main function renamed to avoid conflicts\r\nconst fetchNewsWithOptions = async (options: NewsFetchOptions = {}): Promise<NewsFeedResponse> => {\r\n  try {\r\n    const {\r\n      categories,\r\n      limit = 100,\r\n      priority,\r\n      country = 'US',\r\n      includeExtra = false\r\n    } = options;\r\n\r\n    // Check cache first to prevent duplicate calls\r\n    const now = Date.now();\r\n    \r\n    if (newsCache.data && \r\n        newsCache.data.articles && \r\n        newsCache.data.articles.length >= limit &&\r\n        (now - newsCache.timestamp) < CACHE_DURATION) {\r\n      console.log('📦 Using cached RSS data');\r\n      return newsCache.data;\r\n    }\r\n    \r\n    console.log('🔍 Fetching RSS articles with priority filtering...', { categories, limit, priority, country });\r\n    \r\n    // Build API parameters with priority filtering\r\n    const params: any = {\r\n      limit,\r\n      flat: true,\r\n      country\r\n    };\r\n\r\n    // Handle priority filtering\r\n    if (priority) {\r\n      if (typeof priority === 'number') {\r\n        // Specific priority level\r\n        params.feed_priority = priority;\r\n      } else {\r\n        // Priority range mapping\r\n        switch (priority) {\r\n          case 'top':\r\n            params.feed_priority = 9; // Get feeds with priority 9-10\r\n            break;\r\n          case 'high':\r\n            params.feed_priority = 7; // Get feeds with priority 6-7\r\n            break;\r\n          case 'medium':\r\n            params.feed_priority = 5; // Get feeds with priority 4-5\r\n            break;\r\n          case 'low':\r\n            params.feed_priority = 2; // Get feeds with priority 1-3\r\n            break;\r\n          case 'extra':\r\n            params.feed_priority = 0; // Get extra feeds\r\n            break;\r\n        }\r\n      }\r\n    } else if (!includeExtra) {\r\n      // Default: exclude extra feeds (priority 0), show only priority 1-10\r\n      // Don't set feed_priority param to get all priority feeds 1-10\r\n    }\r\n    \r\n    // Handle category filtering\r\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\r\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\r\n      if (mappedCategory) {\r\n        params.category = mappedCategory;\r\n      }\r\n    } else {\r\n      // Default to health category for better relevance\r\n      params.category = 'health';\r\n    }\r\n    \r\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\r\n    \r\n    const response = await axios.get<RSSResponse>(`${API_URL}/news/articles`, {\r\n      params,\r\n      timeout: 10000\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    console.log('✅ RSS API response:', {\r\n      success: data.success,\r\n      articleCount: data.articles?.length || 0,\r\n      count: data.count,\r\n      filtersApplied: data.filters_applied\r\n    });\r\n\r\n    if (!data.success) {\r\n      console.warn('⚠️ RSS API returned success=false, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n\r\n    // Convert RSS articles to NewsArticle format\r\n    const articles: NewsArticle[] = (data.articles || [])\r\n      .filter(article => article.title && article.title.trim() !== '')\r\n      .map((article: RSSArticleResponse, index: number) => {\r\n        \r\n        // Enhanced image URL extraction with better validation\r\n        const extractValidImageUrl = (url: string | undefined): string => {\r\n          if (!url) return '';\r\n          const trimmed = url.trim();\r\n          if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\r\n          if (trimmed.startsWith('http') || trimmed.startsWith('//')) {\r\n            // Validate it's actually an image URL\r\n            const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\r\n            const hasImageExtension = imageExtensions.some(ext => \r\n              trimmed.toLowerCase().includes(ext)\r\n            );\r\n            // Accept if it has image extension or contains image-related path\r\n            if (hasImageExtension || trimmed.includes('/image') || trimmed.includes('/photo')) {\r\n              return trimmed;\r\n            }\r\n          }\r\n          return '';\r\n        };\r\n        \r\n        const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\r\n        const imageUrl = extractValidImageUrl(article.media_url);\r\n        \r\n        // Better summary handling - ensure we have actual content\r\n        let summary = article.description || article.content_encoded || '';\r\n        \r\n        // Clean up HTML tags and decode entities if present\r\n        summary = summary.replace(/<[^>]*>/g, '').trim();\r\n        summary = summary.replace(/&[^;]+;/g, ' ').trim();\r\n        \r\n        // If still empty, create a meaningful fallback\r\n        if (!summary || summary.length < 10) {\r\n          summary = `Read about ${article.title} from ${article.feed_name}`;\r\n        }\r\n        \r\n        const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\r\n        \r\n        return {\r\n          id: article.id?.toString() || article.guid || `rss_${Date.now()}_${index}`,\r\n          title: article.title || 'No title',\r\n          summary: cleanSummary,\r\n          url: article.link || '#',\r\n          source: article.feed_name || 'Unknown Source',\r\n          domain: article.domain || extractDomain(article.link || ''),\r\n          category: mapBackendCategory(article.category),\r\n          publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\r\n          relevanceScore: calculateRelevanceScore(article.title, article.description, article.feed_priority),\r\n          tags: extractTags(article.title, article.description),\r\n          \r\n          // RSS enhanced fields\r\n          thumbnailUrl,\r\n          imageUrl,\r\n          mediaType: article.media_type || '',\r\n          mediaDescription: article.media_description || '',\r\n          author: article.author || '',\r\n          fullContent: article.content_encoded || '',\r\n          wordCount: article.word_count || 0,\r\n          readingTime: article.reading_time || Math.ceil((article.word_count || 200) / 200),\r\n          hasMedia: !!(thumbnailUrl || imageUrl),\r\n          hasAuthor: !!(article.author && article.author.trim()),\r\n          contentLength: article.content_length || 0,\r\n          feedTitle: article.feed_name || '',\r\n          guid: article.guid || '',\r\n          commentsUrl: article.comments_url || '',\r\n          language: article.language || '',\r\n          rights: article.rights || '',\r\n          extractedAt: article.extracted_at || '',\r\n          lastModified: article.last_modified || '',\r\n          \r\n          // RSS API specific fields\r\n          timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\r\n          isRecent: article.is_recent || false,\r\n          contentQuality: article.content_quality || 'medium',\r\n          completeness: article.completeness || 'partial',\r\n          country: article.country || '',\r\n          feedName: article.feed_name || '',\r\n          feedId: article.feed_id || 0,\r\n          feedPriority: article.feed_priority || 0 // NEW: Include feed priority\r\n        };\r\n      });\r\n    \r\n    console.log('📰 Processed RSS articles:', {\r\n      total: articles.length,\r\n      withImages: articles.filter(a => a.hasMedia).length,\r\n      withAuthors: articles.filter(a => a.hasAuthor).length,\r\n      withSummaries: articles.filter(a => a.summary !== 'Click to read full article').length,\r\n      categories: [...new Set(articles.map(a => a.category))],\r\n      priorityDistribution: {\r\n        topPriority: articles.filter(a => (a.feedPriority || 0) >= 8).length,\r\n        highPriority: articles.filter(a => (a.feedPriority || 0) >= 6 && (a.feedPriority || 0) < 8).length,\r\n        mediumPriority: articles.filter(a => (a.feedPriority || 0) >= 4 && (a.feedPriority || 0) < 6).length,\r\n        lowPriority: articles.filter(a => (a.feedPriority || 0) >= 1 && (a.feedPriority || 0) < 4).length,\r\n        extraFeeds: articles.filter(a => (a.feedPriority || 0) === 0).length\r\n      }\r\n    });\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      const category = article.category;\r\n      if (!categorizedArticles[category]) {\r\n        categorizedArticles[category] = [];\r\n      }\r\n      categorizedArticles[category].push(article);\r\n    });\r\n    \r\n    const result = {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      filtersApplied: data.filters_applied,\r\n      message: 'Health news fetched successfully from RSS feeds with priority filtering'\r\n    };\r\n    \r\n    // Cache the result\r\n    newsCache = {\r\n      data: result,\r\n      timestamp: now\r\n    };\r\n    \r\n    return result;\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS feed:', error);\r\n    \r\n    // If we have cached data, use it even if it's old\r\n    if (newsCache.data) {\r\n      console.log('📦 Using stale cached data due to error');\r\n      return newsCache.data;\r\n    }\r\n    \r\n    const fallback = await getFallbackNews();\r\n    return {\r\n      ...fallback,\r\n      message: `RSS service error (${error.message}). Showing sample news.`\r\n    };\r\n  }\r\n};\r\n\r\n// NEW: Overloaded function to handle both signatures\r\nexport function fetchNewsFeed(options: NewsFetchOptions): Promise<NewsFeedResponse>;\r\nexport function fetchNewsFeed(categories: string[], limit: number): Promise<NewsFeedResponse>;\r\nexport function fetchNewsFeed(\r\n  optionsOrCategories?: NewsFetchOptions | string[], \r\n  limit?: number\r\n): Promise<NewsFeedResponse> {\r\n  // Handle both old and new function signatures\r\n  if (Array.isArray(optionsOrCategories)) {\r\n    // Old signature: fetchNewsFeed(categories, limit)\r\n    return fetchNewsWithOptions({ \r\n      categories: optionsOrCategories, \r\n      limit: limit || 50 \r\n    });\r\n  } else {\r\n    // New signature: fetchNewsFeed(options)\r\n    return fetchNewsWithOptions(optionsOrCategories || {});\r\n  }\r\n}\r\n\r\n// NEW: Priority-specific fetch functions\r\nexport const fetchTopPriorityNews = async (limit = 20): Promise<NewsFeedResponse> => {\r\n  return fetchNewsFeed({ priority: 'top', limit });\r\n};\r\n\r\nexport const fetchHighPriorityNews = async (limit = 30): Promise<NewsFeedResponse> => {\r\n  return fetchNewsFeed({ priority: 'high', limit });\r\n};\r\n\r\nexport const fetchExtraNews = async (limit = 10): Promise<NewsFeedResponse> => {\r\n  return fetchNewsFeed({ priority: 'extra', limit });\r\n};\r\n\r\nexport const fetchMixedPriorityNews = async (limit = 50): Promise<NewsFeedResponse> => {\r\n  return fetchNewsFeed({ includeExtra: true, limit });\r\n};\r\n\r\n// Clear cache function\r\nexport const clearNewsCache = () => {\r\n  newsCache = { data: null, timestamp: 0 };\r\n  console.log('🗑️ News cache cleared');\r\n};\r\n\r\n// UPDATED: Trigger RSS polling with priority support\r\nexport const triggerRSSPolling = async (force?: boolean, feedId?: number, priority?: number): Promise<{\r\n  success: boolean;\r\n  results?: any;\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🔄 Triggering RSS polling...', { force, feedId, priority });\r\n    \r\n    const params: any = {};\r\n    if (force) params.force = 'true';\r\n    if (feedId) params.feed_id = feedId.toString();\r\n    if (priority !== undefined) params.feed_priority = priority.toString();\r\n    \r\n    const response = await axios.post<RSSPollingResponse>(`${API_URL}/news/fetch`, {}, {\r\n      params,\r\n      timeout: 30000 // Longer timeout for polling\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS polling response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      results: data.results,\r\n      message: data.message\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error triggering RSS polling:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to trigger polling: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// UPDATED: Get articles by category with priority support\r\nexport const getArticlesByCategory = async (\r\n  category: string, \r\n  limit?: number, \r\n  priority?: 'top' | 'high' | 'medium' | 'low' | 'extra'\r\n): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching RSS articles for category with priority:', { category, priority, limit });\r\n    return await fetchNewsFeed({ \r\n      categories: [category], \r\n      limit, \r\n      priority \r\n    });\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\n// UPDATED: Enhanced relevance calculation with priority weighting\r\nconst calculateRelevanceScore = (title: string = '', description: string = '', feedPriority?: number): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.08);\r\n  \r\n  // NEW: Boost score based on feed priority\r\n  if (feedPriority && feedPriority > 0) {\r\n    const priorityBoost = Math.min(feedPriority / 10 * 0.2, 0.2); // Max 0.2 boost for priority 10\r\n    score += priorityBoost;\r\n  }\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\n// NEW: Priority-aware formatting\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  const priorityLevel = getPriorityLevel(article.feedPriority || 0);\r\n  \r\n  return {\r\n    ...article,\r\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary,\r\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\r\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\r\n    qualityScore: calculateQualityScore(article),\r\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read',\r\n    priorityLevel,\r\n    priorityLabel: priorityLevel.label,\r\n    isPriorityFeed: (article.feedPriority || 0) >= 1\r\n  };\r\n};\r\n\r\n// NEW: Get priority level information\r\nexport const getPriorityLevel = (priority: number) => {\r\n  if (priority >= 8) return FEED_PRIORITIES.TOP_PRIORITY;\r\n  if (priority >= 6) return FEED_PRIORITIES.HIGH_PRIORITY;\r\n  if (priority >= 4) return FEED_PRIORITIES.MEDIUM_PRIORITY;\r\n  if (priority >= 1) return FEED_PRIORITIES.LOW_PRIORITY;\r\n  return FEED_PRIORITIES.EXTRA_FEEDS;\r\n};\r\n\r\n// NEW: Filter articles by priority\r\nexport const filterArticlesByPriority = (\r\n  articles: NewsArticle[], \r\n  minPriority = 1, \r\n  maxPriority = 10\r\n): NewsArticle[] => {\r\n  return articles.filter(article => {\r\n    const priority = article.feedPriority || 0;\r\n    return priority >= minPriority && priority <= maxPriority;\r\n  });\r\n};\r\n\r\n// Legacy function for backward compatibility - UPDATED to use new options interface\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  clearNewsCache();\r\n  return fetchNewsFeed({ limit: 50 });\r\n};\r\n\r\n// Legacy function for search articles\r\nexport const searchNewsArticles = async (query: string): Promise<NewsArticle[]> => {\r\n  const newsResponse = await fetchNewsFeed({ limit: 100 });\r\n  if (!newsResponse.success || !newsResponse.articles) {\r\n    return [];\r\n  }\r\n  \r\n  const lowerQuery = query.toLowerCase();\r\n  return newsResponse.articles.filter(article => \r\n    article.title.toLowerCase().includes(lowerQuery) ||\r\n    article.summary.toLowerCase().includes(lowerQuery) ||\r\n    article.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\r\n  );\r\n};\r\n\r\n// UPDATED: Enhanced stats with priority breakdown\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    priorityCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n    articlesWithImages: number;\r\n    articlesWithAuthors: number;\r\n    averageWordCount: number;\r\n    averageReadingTime: number;\r\n    trustedSources: number;\r\n    priorityDistribution: {\r\n      topPriority: number;\r\n      highPriority: number;\r\n      mediumPriority: number;\r\n      lowPriority: number;\r\n      extraFeeds: number;\r\n    };\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed({ includeExtra: true });\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const priorityCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    let totalWordCount = 0;\r\n    let totalReadingTime = 0;\r\n    let articlesWithImages = 0;\r\n    let articlesWithAuthors = 0;\r\n    let trustedSources = 0;\r\n    \r\n    const priorityDistribution = {\r\n      topPriority: 0,\r\n      highPriority: 0,\r\n      mediumPriority: 0,\r\n      lowPriority: 0,\r\n      extraFeeds: 0\r\n    };\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n      \r\n      const priority = article.feedPriority || 0;\r\n      const priorityLevel = getPriorityLevel(priority);\r\n      priorityCounts[priorityLevel.label] = (priorityCounts[priorityLevel.label] || 0) + 1;\r\n      \r\n      // Update priority distribution\r\n      if (priority >= 8) priorityDistribution.topPriority++;\r\n      else if (priority >= 6) priorityDistribution.highPriority++;\r\n      else if (priority >= 4) priorityDistribution.mediumPriority++;\r\n      else if (priority >= 1) priorityDistribution.lowPriority++;\r\n      else priorityDistribution.extraFeeds++;\r\n      \r\n      if (article.hasMedia) articlesWithImages++;\r\n      if (article.hasAuthor) articlesWithAuthors++;\r\n      if (isTrustedDomain(article.url)) trustedSources++;\r\n      if (article.wordCount) totalWordCount += article.wordCount;\r\n      if (article.readingTime) totalReadingTime += article.readingTime;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        priorityCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts,\r\n        articlesWithImages,\r\n        articlesWithAuthors,\r\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\r\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\r\n        trustedSources,\r\n        priorityDistribution\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// NEW: Export priority-based functions for easy use\r\nexport const NewsServiceWithPriority = {\r\n  fetchTopPriority: fetchTopPriorityNews,\r\n  fetchHighPriority: fetchHighPriorityNews,\r\n  fetchExtra: fetchExtraNews,\r\n  fetchMixed: fetchMixedPriorityNews,\r\n  filterByPriority: filterArticlesByPriority,\r\n  getPriorityLevel,\r\n  formatForDisplay: formatArticleForDisplay\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}