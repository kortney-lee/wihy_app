{"ast":null,"code":"import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\nimport { logger } from '../utils/logger';\n\n// ==================== WIHY API v4.0.0 INTERFACES ====================\n\n// Chat System v4.0.0 Interfaces\n\n// Public Chat v4.0.0 Interfaces\n\n// Training & Analytics v4.0.0 Interfaces\n\n// Chart Data v4.0.0 (from OpenAPI spec)\n\n// Core Health Processing v4.0.0\n\n// Scan Analysis v4.0.0\n\n// Request Interfaces v4.0.0\n\n// System Health Check v4.0.0\n\n// ==================== WIHY API v4.0.0 ENDPOINTS ====================\n\nexport const WIHY_ENDPOINTS = {\n  // Core Health Intelligence\n  ASK: '/ask',\n  SCAN: '/scan',\n  CHAT: '/chat',\n  // Chat System v4.0.0\n  CHAT_START_SESSION: '/api/chat/start-session',\n  CHAT_SEND_MESSAGE: '/api/chat/send-message',\n  CHAT_SESSION_HISTORY: '/api/chat/session/{session_id}/history',\n  CHAT_USER_SESSIONS: '/api/chat/user/{user_id}/sessions',\n  CHAT_HEALTH: '/api/chat/health',\n  CHAT_PUBLIC_ASK: '/api/chat/public/ask',\n  // Training & Analytics v4.0.0\n  TRAINING_SAVE_QUESTIONS: '/api/chat/training-questions/save',\n  TRAINING_GET_QUESTIONS: '/api/chat/training-questions/{user_id}',\n  MODELS_GET_USER: '/api/chat/models/{user_id}',\n  ANALYTICS_OPENAI: '/api/chat/analytics/openai-responses',\n  STORAGE_STATS: '/api/chat/storage/stats',\n  // System\n  ROOT: '/',\n  HEALTH: '/health'\n};\n\n// Chat system endpoint helpers\nexport const getChatSessionHistoryEndpoint = sessionId => {\n  return getApiEndpoint(WIHY_ENDPOINTS.CHAT_SESSION_HISTORY.replace('{session_id}', sessionId));\n};\nexport const getUserSessionsEndpoint = userId => {\n  return getApiEndpoint(WIHY_ENDPOINTS.CHAT_USER_SESSIONS.replace('{user_id}', userId));\n};\nexport const getUserTrainingQuestionsEndpoint = userId => {\n  return getApiEndpoint(WIHY_ENDPOINTS.TRAINING_GET_QUESTIONS.replace('{user_id}', userId));\n};\nexport const getUserModelsEndpoint = userId => {\n  return getApiEndpoint(WIHY_ENDPOINTS.MODELS_GET_USER.replace('{user_id}', userId));\n};\n\n// ==================== WIHY API v4.0.0 SERVICE ====================\n\nexport class WihyAPIService {\n  constructor() {\n    this.apiKey = void 0;\n    this.baseUrl = void 0;\n    this.apiKey = process.env.REACT_APP_WIHY_API_KEY || '';\n    this.baseUrl = API_CONFIG.WIHY_API_URL;\n  }\n\n  // Core Health Intelligence Methods\n  async ask(request) {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.ASK), {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY ask request failed:', error);\n      throw error;\n    }\n  }\n  async scan(request) {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.SCAN), {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY scan request failed:', error);\n      throw error;\n    }\n  }\n  async chat(request) {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY chat request failed:', error);\n      throw error;\n    }\n  }\n\n  // Chat System v4.0.0 Methods\n  async startChatSession(request) {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_START_SESSION), {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY start chat session failed:', error);\n      throw error;\n    }\n  }\n  async sendChatMessage(request) {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_SEND_MESSAGE), {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY send chat message failed:', error);\n      throw error;\n    }\n  }\n  async getChatHistory(sessionId, limit = 50) {\n    try {\n      const url = `${getChatSessionHistoryEndpoint(sessionId)}?limit=${limit}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get chat history failed:', error);\n      throw error;\n    }\n  }\n  async getUserChatSessions(userId, limit = 20) {\n    try {\n      const url = `${getUserSessionsEndpoint(userId)}?limit=${limit}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get user chat sessions failed:', error);\n      throw error;\n    }\n  }\n  async chatServiceHealth() {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_HEALTH), {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY chat service health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Public Chat v4.0.0 Methods\n  async publicChatAsk(request) {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_PUBLIC_ASK), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY public chat ask failed:', error);\n      throw error;\n    }\n  }\n\n  // Training & Analytics v4.0.0 Methods\n  async saveTrainingQuestions(userId, collectionName, questions) {\n    try {\n      const url = `${getApiEndpoint(WIHY_ENDPOINTS.TRAINING_SAVE_QUESTIONS)}?user_id=${userId}&collection_name=${encodeURIComponent(collectionName)}`;\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(questions)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY save training questions failed:', error);\n      throw error;\n    }\n  }\n  async getUserTrainingQuestions(userId) {\n    try {\n      const url = getUserTrainingQuestionsEndpoint(userId);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get user training questions failed:', error);\n      throw error;\n    }\n  }\n  async getUserTrainedModels(userId) {\n    try {\n      const url = getUserModelsEndpoint(userId);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get user trained models failed:', error);\n      throw error;\n    }\n  }\n  async getOpenAIAnalytics(params = {}) {\n    try {\n      const queryParams = new URLSearchParams();\n      if (params.user_id) queryParams.append('user_id', params.user_id);\n      if (params.start_date) queryParams.append('start_date', params.start_date);\n      if (params.end_date) queryParams.append('end_date', params.end_date);\n      if (params.limit) queryParams.append('limit', params.limit.toString());\n      const url = `${getApiEndpoint(WIHY_ENDPOINTS.ANALYTICS_OPENAI)}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get OpenAI analytics failed:', error);\n      throw error;\n    }\n  }\n  async getStorageStatistics() {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.STORAGE_STATS), {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get storage statistics failed:', error);\n      throw error;\n    }\n  }\n\n  // System Methods v4.0.0\n  async getSystemStatus() {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.ROOT), {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY get system status failed:', error);\n      throw error;\n    }\n  }\n  async healthCheck() {\n    try {\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.HEALTH), {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WIHY health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Legacy compatibility methods for existing code\n  async scanBarcode(barcode) {\n    const scanRequest = {\n      barcode\n    };\n    const scanResponse = await this.scan(scanRequest);\n    return {\n      success: scanResponse.success,\n      data: scanResponse.data,\n      healthScore: scanResponse.data.health_score,\n      recommendations: scanResponse.data.recommendations,\n      warnings: scanResponse.data.warnings\n    };\n  }\n  async scanImage(imageBase64) {\n    const scanRequest = {\n      image_base64: imageBase64\n    };\n    const scanResponse = await this.scan(scanRequest);\n    return {\n      success: scanResponse.success,\n      data: scanResponse.data,\n      healthScore: scanResponse.data.health_score,\n      recommendations: scanResponse.data.recommendations,\n      warnings: scanResponse.data.warnings\n    };\n  }\n}\n\n// Export API service instance\nexport const wihyAPI = new WihyAPIService();\nexport default wihyAPI;","map":{"version":3,"names":["API_CONFIG","getApiEndpoint","logger","WIHY_ENDPOINTS","ASK","SCAN","CHAT","CHAT_START_SESSION","CHAT_SEND_MESSAGE","CHAT_SESSION_HISTORY","CHAT_USER_SESSIONS","CHAT_HEALTH","CHAT_PUBLIC_ASK","TRAINING_SAVE_QUESTIONS","TRAINING_GET_QUESTIONS","MODELS_GET_USER","ANALYTICS_OPENAI","STORAGE_STATS","ROOT","HEALTH","getChatSessionHistoryEndpoint","sessionId","replace","getUserSessionsEndpoint","userId","getUserTrainingQuestionsEndpoint","getUserModelsEndpoint","WihyAPIService","constructor","apiKey","baseUrl","process","env","REACT_APP_WIHY_API_KEY","WIHY_API_URL","ask","request","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","json","error","scan","chat","startChatSession","sendChatMessage","getChatHistory","limit","url","getUserChatSessions","chatServiceHealth","publicChatAsk","saveTrainingQuestions","collectionName","questions","encodeURIComponent","getUserTrainingQuestions","getUserTrainedModels","getOpenAIAnalytics","params","queryParams","URLSearchParams","user_id","append","start_date","end_date","toString","getStorageStatistics","getSystemStatus","healthCheck","scanBarcode","barcode","scanRequest","scanResponse","success","data","healthScore","health_score","recommendations","warnings","scanImage","imageBase64","image_base64","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// ==================== WIHY API v4.0.0 INTERFACES ====================\r\n\r\n// Chat System v4.0.0 Interfaces\r\nexport interface ChatSessionRequest {\r\n  user_id: string;\r\n  session_name?: string;\r\n  context?: Record<string, any>;\r\n}\r\n\r\nexport interface ChatSessionResponse {\r\n  success: boolean;\r\n  session_id?: string;\r\n  session_name?: string;\r\n  created_at?: string;\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ChatMessageRequest {\r\n  session_id: string;\r\n  message: string;\r\n  message_type?: string;\r\n  use_custom_model?: boolean;\r\n}\r\n\r\nexport interface ChatMessageResponse {\r\n  success: boolean;\r\n  message_id?: string;\r\n  response?: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ChatHistoryResponse {\r\n  success: boolean;\r\n  session_id: string;\r\n  messages: Record<string, any>[];\r\n  total_messages: number;\r\n  error?: string;\r\n}\r\n\r\nexport interface UserSessionsResponse {\r\n  success: boolean;\r\n  user_id: string;\r\n  sessions: Record<string, any>[];\r\n  total_sessions: number;\r\n  error?: string;\r\n}\r\n\r\n// Public Chat v4.0.0 Interfaces\r\nexport interface PublicChatRequest {\r\n  message: string;\r\n  context?: Record<string, any>;\r\n}\r\n\r\nexport interface PublicChatResponse {\r\n  success: boolean;\r\n  response: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  session_token?: string;\r\n  message?: string;\r\n}\r\n\r\n// Training & Analytics v4.0.0 Interfaces\r\nexport interface TrainingQuestion {\r\n  question: string;\r\n  answer: string;\r\n  category: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface AnalyticsQueryParams {\r\n  user_id?: string;\r\n  start_date?: string;\r\n  end_date?: string;\r\n  limit?: number;\r\n}\r\n\r\nexport interface StorageStats {\r\n  containers: Record<string, any>;\r\n  total_size: number;\r\n  total_files: number;\r\n}\r\n\r\n// Chart Data v4.0.0 (from OpenAPI spec)\r\nexport interface ChartData {\r\n  chart_type: string;\r\n  labels: string[];\r\n  values: number[];\r\n  colors: string[];\r\n  verdict?: string;\r\n  reasons?: string[];\r\n}\r\n\r\nexport interface ChartsData {\r\n  nutrition_breakdown?: ChartData;\r\n  health_quality?: ChartData;\r\n}\r\n\r\nexport interface HealthInsights {\r\n  key_benefits?: string[];\r\n  potential_risks?: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\n// Core Health Processing v4.0.0\r\nexport interface ProcessedHealthData {\r\n  query: string;\r\n  timestamp: number;\r\n  processor_used: string;\r\n  processing_time: number;\r\n  response: string;\r\n  nutrition_data: Record<string, any>;\r\n  health_insights: HealthInsights;\r\n  biblical_wisdom: Record<string, any>;\r\n  charts_data: ChartsData;\r\n}\r\n\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ProcessedHealthData;\r\n}\r\n\r\n// Scan Analysis v4.0.0\r\nexport interface ScanAnalysis {\r\n  scan_type: string;\r\n  timestamp: number;\r\n  processing_time: number;\r\n  analysis: Record<string, any>;\r\n  nutrition_facts: Record<string, any>;\r\n  health_score: number;\r\n  recommendations: string[];\r\n  warnings: string[];\r\n  alternatives: string[];\r\n  charts_data: ChartsData;\r\n}\r\n\r\nexport interface ScanResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ScanAnalysis;\r\n}\r\n\r\n// Request Interfaces v4.0.0\r\nexport interface HealthQuestion {\r\n  query?: string;\r\n  message?: string;\r\n  user_context?: Record<string, any>;\r\n  include_nutrition?: boolean;\r\n  include_biblical_wisdom?: boolean;\r\n  include_charts?: boolean;\r\n}\r\n\r\nexport interface ScanRequest {\r\n  image_url?: string;\r\n  image_base64?: string;\r\n  product_name?: string;\r\n  barcode?: string;\r\n  user_context?: Record<string, any>;\r\n}\r\n\r\nexport interface ChatRequest {\r\n  message: string;\r\n  context?: Record<string, any>;\r\n}\r\n\r\nexport interface ChatResponse {\r\n  success: boolean;\r\n  response: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  session_token?: string;\r\n  message?: string;\r\n}\r\n\r\n// System Health Check v4.0.0\r\nexport interface HealthCheck {\r\n  status: string;\r\n  timestamp: string;\r\n  services: Record<string, string>;\r\n  service_descriptions?: Record<string, string>;\r\n  uptime: string;\r\n}\r\n\r\nexport interface SystemStatus {\r\n  message: string;\r\n  status: string;\r\n  version: string;\r\n  architecture: string;\r\n  endpoints: Record<string, string>;\r\n  services: Record<string, boolean>;\r\n  capabilities: string[];\r\n  documentation: string;\r\n}\r\n\r\n// ==================== WIHY API v4.0.0 ENDPOINTS ====================\r\n\r\nexport const WIHY_ENDPOINTS = {\r\n  // Core Health Intelligence\r\n  ASK: '/ask',\r\n  SCAN: '/scan',\r\n  CHAT: '/chat',\r\n  \r\n  // Chat System v4.0.0\r\n  CHAT_START_SESSION: '/api/chat/start-session',\r\n  CHAT_SEND_MESSAGE: '/api/chat/send-message',\r\n  CHAT_SESSION_HISTORY: '/api/chat/session/{session_id}/history',\r\n  CHAT_USER_SESSIONS: '/api/chat/user/{user_id}/sessions',\r\n  CHAT_HEALTH: '/api/chat/health',\r\n  CHAT_PUBLIC_ASK: '/api/chat/public/ask',\r\n  \r\n  // Training & Analytics v4.0.0\r\n  TRAINING_SAVE_QUESTIONS: '/api/chat/training-questions/save',\r\n  TRAINING_GET_QUESTIONS: '/api/chat/training-questions/{user_id}',\r\n  MODELS_GET_USER: '/api/chat/models/{user_id}',\r\n  ANALYTICS_OPENAI: '/api/chat/analytics/openai-responses',\r\n  STORAGE_STATS: '/api/chat/storage/stats',\r\n  \r\n  // System\r\n  ROOT: '/',\r\n  HEALTH: '/health',\r\n} as const;\r\n\r\n// Chat system endpoint helpers\r\nexport const getChatSessionHistoryEndpoint = (sessionId: string) => {\r\n  return getApiEndpoint(WIHY_ENDPOINTS.CHAT_SESSION_HISTORY.replace('{session_id}', sessionId));\r\n};\r\n\r\nexport const getUserSessionsEndpoint = (userId: string) => {\r\n  return getApiEndpoint(WIHY_ENDPOINTS.CHAT_USER_SESSIONS.replace('{user_id}', userId));\r\n};\r\n\r\nexport const getUserTrainingQuestionsEndpoint = (userId: string) => {\r\n  return getApiEndpoint(WIHY_ENDPOINTS.TRAINING_GET_QUESTIONS.replace('{user_id}', userId));\r\n};\r\n\r\nexport const getUserModelsEndpoint = (userId: string) => {\r\n  return getApiEndpoint(WIHY_ENDPOINTS.MODELS_GET_USER.replace('{user_id}', userId));\r\n};\r\n\r\n// ==================== WIHY API v4.0.0 SERVICE ====================\r\n\r\nexport class WihyAPIService {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_WIHY_API_KEY || '';\r\n    this.baseUrl = API_CONFIG.WIHY_API_URL;\r\n  }\r\n\r\n  // Core Health Intelligence Methods\r\n  async ask(request: HealthQuestion): Promise<HealthQuestionResponse> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.ASK), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY ask request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async scan(request: ScanRequest): Promise<ScanResponse> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.SCAN), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY scan request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async chat(request: ChatRequest): Promise<ChatResponse> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY chat request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Chat System v4.0.0 Methods\r\n  async startChatSession(request: ChatSessionRequest): Promise<ChatSessionResponse> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_START_SESSION), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY start chat session failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async sendChatMessage(request: ChatMessageRequest): Promise<ChatMessageResponse> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_SEND_MESSAGE), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY send chat message failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getChatHistory(sessionId: string, limit: number = 50): Promise<ChatHistoryResponse> {\r\n    try {\r\n      const url = `${getChatSessionHistoryEndpoint(sessionId)}?limit=${limit}`;\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get chat history failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserChatSessions(userId: string, limit: number = 20): Promise<UserSessionsResponse> {\r\n    try {\r\n      const url = `${getUserSessionsEndpoint(userId)}?limit=${limit}`;\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get user chat sessions failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async chatServiceHealth(): Promise<any> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_HEALTH), {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY chat service health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Public Chat v4.0.0 Methods\r\n  async publicChatAsk(request: PublicChatRequest): Promise<PublicChatResponse> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.CHAT_PUBLIC_ASK), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY public chat ask failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Training & Analytics v4.0.0 Methods\r\n  async saveTrainingQuestions(userId: string, collectionName: string, questions: TrainingQuestion[]): Promise<any> {\r\n    try {\r\n      const url = `${getApiEndpoint(WIHY_ENDPOINTS.TRAINING_SAVE_QUESTIONS)}?user_id=${userId}&collection_name=${encodeURIComponent(collectionName)}`;\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(questions),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY save training questions failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserTrainingQuestions(userId: string): Promise<any> {\r\n    try {\r\n      const url = getUserTrainingQuestionsEndpoint(userId);\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get user training questions failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getUserTrainedModels(userId: string): Promise<any> {\r\n    try {\r\n      const url = getUserModelsEndpoint(userId);\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get user trained models failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getOpenAIAnalytics(params: AnalyticsQueryParams = {}): Promise<any> {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      if (params.user_id) queryParams.append('user_id', params.user_id);\r\n      if (params.start_date) queryParams.append('start_date', params.start_date);\r\n      if (params.end_date) queryParams.append('end_date', params.end_date);\r\n      if (params.limit) queryParams.append('limit', params.limit.toString());\r\n\r\n      const url = `${getApiEndpoint(WIHY_ENDPOINTS.ANALYTICS_OPENAI)}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get OpenAI analytics failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getStorageStatistics(): Promise<StorageStats> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.STORAGE_STATS), {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get storage statistics failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // System Methods v4.0.0\r\n  async getSystemStatus(): Promise<SystemStatus> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.ROOT), {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY get system status failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async healthCheck(): Promise<HealthCheck> {\r\n    try {\r\n      const response = await fetch(getApiEndpoint(WIHY_ENDPOINTS.HEALTH), {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WIHY health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Legacy compatibility methods for existing code\r\n  async scanBarcode(barcode: string): Promise<any> {\r\n    const scanRequest: ScanRequest = { barcode };\r\n    const scanResponse = await this.scan(scanRequest);\r\n    \r\n    return {\r\n      success: scanResponse.success,\r\n      data: scanResponse.data,\r\n      healthScore: scanResponse.data.health_score,\r\n      recommendations: scanResponse.data.recommendations,\r\n      warnings: scanResponse.data.warnings,\r\n    };\r\n  }\r\n\r\n  async scanImage(imageBase64: string): Promise<any> {\r\n    const scanRequest: ScanRequest = { image_base64: imageBase64 };\r\n    const scanResponse = await this.scan(scanRequest);\r\n    \r\n    return {\r\n      success: scanResponse.success,\r\n      data: scanResponse.data,\r\n      healthScore: scanResponse.data.health_score,\r\n      recommendations: scanResponse.data.recommendations,\r\n      warnings: scanResponse.data.warnings,\r\n    };\r\n  }\r\n}\r\n\r\n// Export API service instance\r\nexport const wihyAPI = new WihyAPIService();\r\n\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}