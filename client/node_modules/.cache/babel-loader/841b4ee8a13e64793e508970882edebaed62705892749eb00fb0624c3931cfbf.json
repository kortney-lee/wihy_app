{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport openaiAPI from './services/openaiAPI';\nimport './VHealthSearch.css';\n\n// Define a type for the allowed data sources that matches SearchResults requirements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Results page wrapper to handle URL parameters\nconst ResultsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('q') || '';\n  const [isLoading, setIsLoading] = useState(true);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query) return;\n      setIsLoading(true);\n      try {\n        console.log(\"Performing search for:\", query);\n        if (query.toLowerCase() === 'test') {\n          setResults(`# Search Results for \"${query}\"\\n\\nThis is a test search result.`);\n          setDataSource('test');\n        } else {\n          const result = await openaiAPI.searchHealthInfo(query);\n          setResults(result);\n          setDataSource('openai');\n        }\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        setResults(`# Error\\n\\nSorry, there was an error processing your search. Please try again.`);\n        setDataSource('error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchResults();\n  }, [query]);\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: query,\n    results: results,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App component\n_s(ResultsPage, \"FCEE12lyyIeSahcPg6t63fDXtxY=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = ResultsPage;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/results\",\n          element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","jsxDEV","_jsxDEV","ResultsPage","_s","navigate","searchParams","query","get","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","fetchResults","console","log","toLowerCase","result","searchHealthInfo","error","handleBackToSearch","handleNewSearch","newQuery","encodeURIComponent","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","className","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport './VHealthSearch.css';\r\n\r\n// Define a type for the allowed data sources that matches SearchResults requirements\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"test\";\r\n\r\n// Results page wrapper to handle URL parameters\r\nconst ResultsPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const query = searchParams.get('q') || '';\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) return;\r\n      \r\n      setIsLoading(true);\r\n      try {\r\n        console.log(\"Performing search for:\", query);\r\n        \r\n        if (query.toLowerCase() === 'test') {\r\n          setResults(`# Search Results for \"${query}\"\\n\\nThis is a test search result.`);\r\n          setDataSource('test');\r\n        } else {\r\n          const result = await openaiAPI.searchHealthInfo(query);\r\n          setResults(result);\r\n          setDataSource('openai');\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        setResults(`# Error\\n\\nSorry, there was an error processing your search. Please try again.`);\r\n        setDataSource('error');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query]);\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={query}\r\n      results={results}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n    />\r\n  );\r\n};\r\n\r\n// Main App component\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<VHealthSearch />} />\r\n          <Route path=\"/results\" element={<ResultsPage />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}