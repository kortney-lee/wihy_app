{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\ResultQualityPie.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n// --- Quality Scoring Logic (moved from SearchResults.tsx) ---\n\n/** Lightweight domain trust map (adjust anytime). */\nconst TRUSTED_DOMAINS = {\n  'nih.gov': 1.0,\n  'ncbi.nlm.nih.gov': 1.0,\n  // PubMed\n  'who.int': 0.95,\n  'cdc.gov': 0.95,\n  'fda.gov': 0.9,\n  'usda.gov': 0.85,\n  'nature.com': 0.85,\n  'science.org': 0.85,\n  'thelancet.com': 0.85,\n  'bmj.com': 0.8,\n  'jamanetwork.com': 0.9,\n  'nejm.org': 0.9,\n  'mayoclinic.org': 0.8,\n  'harvard.edu': 0.8,\n  'ox.ac.uk': 0.8,\n  'stanford.edu': 0.8,\n  'clevelandclinic.org': 0.75,\n  'uptodate.com': 0.8\n};\n\n/** Extract all URLs from text. */\nconst extractUrls = text => {\n  const urlRegex = /(https?:\\/\\/[^\\s)]+)(?=\\)|\\s|$)/g;\n  return [...text.matchAll(urlRegex)].map(m => m[1]);\n};\n\n/** Get eTLD+1 (very rough) for trust mapping. */\nconst getDomainKey = url => {\n  try {\n    const u = new URL(url);\n    const parts = u.hostname.split('.').slice(-2); // naive eTLD+1\n    return parts.join('.');\n  } catch {\n    return null;\n  }\n};\n\n/** Count presence of evidence-y phrases. */\nconst evidenceSignals = lower => {\n  const positives = ['systematic review', 'meta-analysis', 'randomized', 'randomised', 'controlled trial', 'cohort study', 'case-control', 'guideline', 'consensus statement', 'grade recommendations', 'confidence interval', 'relative risk', 'odds ratio', 'hazard ratio', 'pmid', 'doi', 'pubmed'];\n  const negatives = ['miracle', 'cure-all', '100% guaranteed', 'secret', 'detox scam', 'instantly', 'no evidence', 'not supported', 'debunked'];\n  const pos = positives.reduce((n, p) => n + (lower.includes(p) ? 1 : 0), 0);\n  const neg = negatives.reduce((n, p) => n + (lower.includes(p) ? 1 : 0), 0);\n  return {\n    pos,\n    neg\n  };\n};\n\n/** Numeric + unit density (specificity proxy). */\nconst numericSpecificity = lower => {\n  const unitRegex = /\\b\\d+(\\.\\d+)?\\s?(mg|g|mcg|iu|kcal|calories|%)\\b/g;\n  const nUnits = (lower.match(unitRegex) || []).length;\n  const nPerc = (lower.match(/\\b\\d+(\\.\\d+)?%/g) || []).length;\n  return nUnits + nPerc;\n};\n\n/** Simple recency: look for a 4-digit year; decay older items gently. */\nconst recencyBoost = lower => {\n  const yearMatches = lower.match(/\\b(20\\d{2}|19\\d{2})\\b/g) || [];\n  if (yearMatches.length === 0) return 0;\n  const years = yearMatches.map(y => parseInt(y, 10));\n  const mostRecent = Math.max(...years);\n  const NOW = new Date().getFullYear();\n  const age = Math.max(0, NOW - mostRecent); // years\n  if (age <= 2) return 0.12;\n  if (age <= 5) return 0.06;\n  if (age <= 10) return 0.02;\n  return 0;\n};\n\n/** Penalize hollow disclaimers if there is no substance. */\nconst hollowDisclaimerPenalty = lower => {\n  const hasDisclaimer = lower.includes('consult') && (lower.includes('doctor') || lower.includes('healthcare'));\n  const hasSubstance = numericSpecificity(lower) > 0 || evidenceSignals(lower).pos > 0 || extractUrls(lower).length > 0;\n  return hasDisclaimer && !hasSubstance ? 0.08 : 0;\n};\n\n/** Soft-penalize contradiction language / uncertainty without references. */\nconst contradictionPenalty = lower => {\n  const flags = ['contradictory', 'unclear', 'no consensus', 'insufficient evidence'];\n  const mentions = flags.some(f => lower.includes(f));\n  const hasRefs = extractUrls(lower).length > 0 || evidenceSignals(lower).pos > 0;\n  return mentions && !hasRefs ? 0.06 : 0;\n};\n\n/** Aggregate domain trust from links + citations[] prop. */\nconst domainTrustScore = (text, citations) => {\n  const urls = new Set([...extractUrls(text), ...(citations || [])]);\n  if (urls.size === 0) return {\n    score: 0,\n    count: 0,\n    strongIds: 0\n  };\n  let acc = 0;\n  let strongIds = 0;\n  urls.forEach(u => {\n    if (/doi\\.org\\/10\\./i.test(u) || /pubmed\\.ncbi\\.nlm\\.nih\\.gov\\/\\d+/.test(u)) {\n      acc += 1.0;\n      strongIds += 1;\n      return;\n    }\n    const key = getDomainKey(u);\n    if (key && TRUSTED_DOMAINS[key] != null) acc += TRUSTED_DOMAINS[key];\n  });\n\n  // Normalize by link count but keep some benefit to more links\n  const base = acc / Math.max(1, urls.size);\n  const quantityBoost = Math.min(0.08, urls.size * 0.01);\n  return {\n    score: Math.min(1, base + quantityBoost),\n    count: urls.size,\n    strongIds\n  };\n};\n\n/** BS/hype penalty */\nconst hypePenalty = lower => {\n  const hype = ['revolutionary', 'breakthrough', 'unbelievable', 'shocking', 'click here'];\n  const hits = hype.reduce((n, h) => n + (lower.includes(h) ? 1 : 0), 0);\n  return Math.min(0.06, hits * 0.02);\n};\n\n/** Main quality scoring function */\nconst calculateQualityScore = (query, results, dataSource, citations) => {\n  // Guard rails for \"bad query/answer\"\n  if (!results || /please (provide|clarify)/i.test(results)) return 0;\n  if (/not (a|the) recognized|could not find|no information found|doesn'?t seem/i.test(results)) return 0;\n\n  // Gibberish queries drop to zero (except common abbreviations)\n  if (/^[a-z0-9]{1,7}$/i.test(query) && !/^(hiv|flu|cold|covid|bp|bmi|gerd|ibs|std|uti)$/i.test(query)) {\n    return 0;\n  }\n  const lower = results.toLowerCase();\n\n  // Baseline by data source (can tune later)\n  let score = dataSource === 'vnutrition' ? 0.65 : dataSource === 'local' ? 0.50 : dataSource === 'openai' ? 0.40 : /* error */0.10;\n\n  // Evidence language\n  const ev = evidenceSignals(lower);\n  score += Math.min(0.18, ev.pos * 0.04);\n  score -= Math.min(0.10, ev.neg * 0.05);\n\n  // Numeric specificity\n  const spec = numericSpecificity(lower);\n  score += Math.min(0.16, spec * 0.02);\n\n  // Domains & identifiers\n  const trust = domainTrustScore(results, citations);\n  score += trust.score * 0.35; // heavy weight for good sources\n  if (trust.strongIds > 0) score += 0.06; // bonus for DOI/PMID/PubMed\n\n  // Recency\n  score += recencyBoost(lower);\n\n  // Structure helps (lists, headings, tables)\n  if (/\\n[-*]\\s|\\n\\d+\\.\\s|^\\s*#{1,6}\\s|\\*\\*.+\\*\\*/m.test(results)) score += 0.04;\n\n  // Penalize hollow disclaimers & contradictions without refs\n  score -= hollowDisclaimerPenalty(lower);\n  score -= contradictionPenalty(lower);\n\n  // Penalize hype\n  score -= hypePenalty(lower);\n\n  // Clamp\n  return Math.max(0, Math.min(0.98, score));\n};\n\n// --- Component Logic ---\n\nconst ResultQualityPie = ({\n  query,\n  results,\n  dataSource,\n  citations\n}) => {\n  // Calculate quality score using the internal logic\n  const qualityScore = calculateQualityScore(query, results, dataSource, citations);\n\n  // Convert score to percentage\n  const percentage = Math.round(qualityScore * 100);\n  const remaining = 100 - percentage;\n\n  // Determine colors based on quality score\n  const getQualityColor = score => {\n    if (score >= 0.8) return '#10B981'; // Green - Excellent\n    if (score >= 0.6) return '#F59E0B'; // Yellow - Good  \n    if (score >= 0.4) return '#F97316'; // Orange - Fair\n    return '#EF4444'; // Red - Poor\n  };\n\n  // Determine quality label\n  const getQualityLabel = score => {\n    if (score >= 0.8) return 'Excellent';\n    if (score >= 0.6) return 'Good';\n    if (score >= 0.4) return 'Fair';\n    return 'Needs Review';\n  };\n\n  // Determine status colors for legend\n  const getStatusColors = score => {\n    if (score >= 0.6) {\n      // Good quality - show mostly green\n      return {\n        good: percentage,\n        bad: remaining,\n        goodColor: '#10B981',\n        badColor: '#E5E7EB'\n      };\n    } else {\n      // Poor quality - show mostly red\n      return {\n        good: percentage,\n        bad: remaining,\n        goodColor: '#E5E7EB',\n        badColor: '#EF4444'\n      };\n    }\n  };\n  const statusColors = getStatusColors(qualityScore);\n  const qualityColor = getQualityColor(qualityScore);\n  const qualityLabel = getQualityLabel(qualityScore);\n  const data = {\n    datasets: [{\n      data: [percentage, remaining],\n      backgroundColor: [qualityColor, '#E5E7EB'],\n      borderWidth: 0,\n      cutout: '70%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '2rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: [percentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.875rem',\n            color: '#6B7280'\n          },\n          children: \"Quality\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '1.2rem',\n            marginRight: '0.5rem'\n          },\n          children: qualityScore >= 0.8 ? '✅' : qualityScore >= 0.6 ? '⚡' : qualityScore >= 0.4 ? '⚠️' : '⚠️'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '500',\n            color: qualityColor,\n            fontSize: '1rem'\n          },\n          children: qualityLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '1rem',\n          fontSize: '0.875rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: statusColors.goodColor,\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Good: \", statusColors.good, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: statusColors.badColor,\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Bad: \", statusColors.bad, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_c = ResultQualityPie;\nexport default ResultQualityPie;\nvar _c;\n$RefreshReg$(_c, \"ResultQualityPie\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","TRUSTED_DOMAINS","extractUrls","text","urlRegex","matchAll","map","m","getDomainKey","url","u","URL","parts","hostname","split","slice","join","evidenceSignals","lower","positives","negatives","pos","reduce","n","p","includes","neg","numericSpecificity","unitRegex","nUnits","match","length","nPerc","recencyBoost","yearMatches","years","y","parseInt","mostRecent","Math","max","NOW","Date","getFullYear","age","hollowDisclaimerPenalty","hasDisclaimer","hasSubstance","contradictionPenalty","flags","mentions","some","f","hasRefs","domainTrustScore","citations","urls","Set","size","score","count","strongIds","acc","forEach","test","key","base","quantityBoost","min","hypePenalty","hype","hits","h","calculateQualityScore","query","results","dataSource","toLowerCase","ev","spec","trust","ResultQualityPie","qualityScore","percentage","round","remaining","getQualityColor","getQualityLabel","getStatusColors","good","bad","goodColor","badColor","statusColors","qualityColor","qualityLabel","data","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","style","textAlign","children","position","height","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","marginRight","gap","borderRadius","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/ResultQualityPie.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface ResultQualityPieProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n  citations?: string[];\r\n}\r\n\r\n// --- Quality Scoring Logic (moved from SearchResults.tsx) ---\r\n\r\n/** Lightweight domain trust map (adjust anytime). */\r\nconst TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1.0,\r\n  'ncbi.nlm.nih.gov': 1.0, // PubMed\r\n  'who.int': 0.95,\r\n  'cdc.gov': 0.95,\r\n  'fda.gov': 0.9,\r\n  'usda.gov': 0.85,\r\n  'nature.com': 0.85,\r\n  'science.org': 0.85,\r\n  'thelancet.com': 0.85,\r\n  'bmj.com': 0.8,\r\n  'jamanetwork.com': 0.9,\r\n  'nejm.org': 0.9,\r\n  'mayoclinic.org': 0.8,\r\n  'harvard.edu': 0.8,\r\n  'ox.ac.uk': 0.8,\r\n  'stanford.edu': 0.8,\r\n  'clevelandclinic.org': 0.75,\r\n  'uptodate.com': 0.8,\r\n};\r\n\r\n/** Extract all URLs from text. */\r\nconst extractUrls = (text: string): string[] => {\r\n  const urlRegex = /(https?:\\/\\/[^\\s)]+)(?=\\)|\\s|$)/g;\r\n  return [...text.matchAll(urlRegex)].map(m => m[1]);\r\n};\r\n\r\n/** Get eTLD+1 (very rough) for trust mapping. */\r\nconst getDomainKey = (url: string): string | null => {\r\n  try {\r\n    const u = new URL(url);\r\n    const parts = u.hostname.split('.').slice(-2); // naive eTLD+1\r\n    return parts.join('.');\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\n/** Count presence of evidence-y phrases. */\r\nconst evidenceSignals = (lower: string) => {\r\n  const positives = [\r\n    'systematic review',\r\n    'meta-analysis',\r\n    'randomized',\r\n    'randomised',\r\n    'controlled trial',\r\n    'cohort study',\r\n    'case-control',\r\n    'guideline',\r\n    'consensus statement',\r\n    'grade recommendations',\r\n    'confidence interval',\r\n    'relative risk',\r\n    'odds ratio',\r\n    'hazard ratio',\r\n    'pmid',\r\n    'doi',\r\n    'pubmed',\r\n  ];\r\n  const negatives = [\r\n    'miracle', 'cure-all', '100% guaranteed', 'secret', 'detox scam',\r\n    'instantly', 'no evidence', 'not supported', 'debunked',\r\n  ];\r\n  const pos = positives.reduce((n, p) => n + (lower.includes(p) ? 1 : 0), 0);\r\n  const neg = negatives.reduce((n, p) => n + (lower.includes(p) ? 1 : 0), 0);\r\n  return { pos, neg };\r\n};\r\n\r\n/** Numeric + unit density (specificity proxy). */\r\nconst numericSpecificity = (lower: string) => {\r\n  const unitRegex = /\\b\\d+(\\.\\d+)?\\s?(mg|g|mcg|iu|kcal|calories|%)\\b/g;\r\n  const nUnits = (lower.match(unitRegex) || []).length;\r\n  const nPerc  = (lower.match(/\\b\\d+(\\.\\d+)?%/g) || []).length;\r\n  return nUnits + nPerc;\r\n};\r\n\r\n/** Simple recency: look for a 4-digit year; decay older items gently. */\r\nconst recencyBoost = (lower: string) => {\r\n  const yearMatches = lower.match(/\\b(20\\d{2}|19\\d{2})\\b/g) || [];\r\n  if (yearMatches.length === 0) return 0;\r\n  const years = yearMatches.map(y => parseInt(y, 10));\r\n  const mostRecent = Math.max(...years);\r\n  const NOW = new Date().getFullYear();\r\n  const age = Math.max(0, NOW - mostRecent); // years\r\n  if (age <= 2) return 0.12;\r\n  if (age <= 5) return 0.06;\r\n  if (age <= 10) return 0.02;\r\n  return 0;\r\n};\r\n\r\n/** Penalize hollow disclaimers if there is no substance. */\r\nconst hollowDisclaimerPenalty = (lower: string) => {\r\n  const hasDisclaimer =\r\n    lower.includes('consult') && (lower.includes('doctor') || lower.includes('healthcare'));\r\n  const hasSubstance =\r\n    numericSpecificity(lower) > 0 ||\r\n    evidenceSignals(lower).pos > 0 ||\r\n    extractUrls(lower).length > 0;\r\n  return hasDisclaimer && !hasSubstance ? 0.08 : 0;\r\n};\r\n\r\n/** Soft-penalize contradiction language / uncertainty without references. */\r\nconst contradictionPenalty = (lower: string) => {\r\n  const flags = ['contradictory', 'unclear', 'no consensus', 'insufficient evidence'];\r\n  const mentions = flags.some(f => lower.includes(f));\r\n  const hasRefs = extractUrls(lower).length > 0 || evidenceSignals(lower).pos > 0;\r\n  return mentions && !hasRefs ? 0.06 : 0;\r\n};\r\n\r\n/** Aggregate domain trust from links + citations[] prop. */\r\nconst domainTrustScore = (text: string, citations?: string[]) => {\r\n  const urls = new Set<string>([\r\n    ...extractUrls(text),\r\n    ...(citations || []),\r\n  ]);\r\n  if (urls.size === 0) return { score: 0, count: 0, strongIds: 0 };\r\n\r\n  let acc = 0;\r\n  let strongIds = 0;\r\n  urls.forEach(u => {\r\n    if (/doi\\.org\\/10\\./i.test(u) || /pubmed\\.ncbi\\.nlm\\.nih\\.gov\\/\\d+/.test(u)) {\r\n      acc += 1.0;\r\n      strongIds += 1;\r\n      return;\r\n    }\r\n    const key = getDomainKey(u);\r\n    if (key && TRUSTED_DOMAINS[key] != null) acc += TRUSTED_DOMAINS[key];\r\n  });\r\n\r\n  // Normalize by link count but keep some benefit to more links\r\n  const base = acc / Math.max(1, urls.size);\r\n  const quantityBoost = Math.min(0.08, urls.size * 0.01);\r\n  return { score: Math.min(1, base + quantityBoost), count: urls.size, strongIds };\r\n};\r\n\r\n/** BS/hype penalty */\r\nconst hypePenalty = (lower: string) => {\r\n  const hype = ['revolutionary', 'breakthrough', 'unbelievable', 'shocking', 'click here'];\r\n  const hits = hype.reduce((n, h) => n + (lower.includes(h) ? 1 : 0), 0);\r\n  return Math.min(0.06, hits * 0.02);\r\n};\r\n\r\n/** Main quality scoring function */\r\nconst calculateQualityScore = (\r\n  query: string,\r\n  results: string,\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\",\r\n  citations?: string[]\r\n): number => {\r\n  // Guard rails for \"bad query/answer\"\r\n  if (!results || /please (provide|clarify)/i.test(results)) return 0;\r\n  if (/not (a|the) recognized|could not find|no information found|doesn'?t seem/i.test(results)) return 0;\r\n\r\n  // Gibberish queries drop to zero (except common abbreviations)\r\n  if (/^[a-z0-9]{1,7}$/i.test(query) && !/^(hiv|flu|cold|covid|bp|bmi|gerd|ibs|std|uti)$/i.test(query)) {\r\n    return 0;\r\n  }\r\n\r\n  const lower = results.toLowerCase();\r\n\r\n  // Baseline by data source (can tune later)\r\n  let score =\r\n    dataSource === 'vnutrition' ? 0.65 :\r\n    dataSource === 'local'      ? 0.50 :\r\n    dataSource === 'openai'     ? 0.40 :\r\n    /* error */                   0.10;\r\n\r\n  // Evidence language\r\n  const ev = evidenceSignals(lower);\r\n  score += Math.min(0.18, ev.pos * 0.04);\r\n  score -= Math.min(0.10, ev.neg * 0.05);\r\n\r\n  // Numeric specificity\r\n  const spec = numericSpecificity(lower);\r\n  score += Math.min(0.16, spec * 0.02);\r\n\r\n  // Domains & identifiers\r\n  const trust = domainTrustScore(results, citations);\r\n  score += trust.score * 0.35;                // heavy weight for good sources\r\n  if (trust.strongIds > 0) score += 0.06;     // bonus for DOI/PMID/PubMed\r\n\r\n  // Recency\r\n  score += recencyBoost(lower);\r\n\r\n  // Structure helps (lists, headings, tables)\r\n  if (/\\n[-*]\\s|\\n\\d+\\.\\s|^\\s*#{1,6}\\s|\\*\\*.+\\*\\*/m.test(results)) score += 0.04;\r\n\r\n  // Penalize hollow disclaimers & contradictions without refs\r\n  score -= hollowDisclaimerPenalty(lower);\r\n  score -= contradictionPenalty(lower);\r\n\r\n  // Penalize hype\r\n  score -= hypePenalty(lower);\r\n\r\n  // Clamp\r\n  return Math.max(0, Math.min(0.98, score));\r\n};\r\n\r\n// --- Component Logic ---\r\n\r\nconst ResultQualityPie: React.FC<ResultQualityPieProps> = ({ \r\n  query, \r\n  results, \r\n  dataSource, \r\n  citations \r\n}) => {\r\n  // Calculate quality score using the internal logic\r\n  const qualityScore = calculateQualityScore(query, results, dataSource, citations);\r\n  \r\n  // Convert score to percentage\r\n  const percentage = Math.round(qualityScore * 100);\r\n  const remaining = 100 - percentage;\r\n\r\n  // Determine colors based on quality score\r\n  const getQualityColor = (score: number) => {\r\n    if (score >= 0.8) return '#10B981'; // Green - Excellent\r\n    if (score >= 0.6) return '#F59E0B'; // Yellow - Good  \r\n    if (score >= 0.4) return '#F97316'; // Orange - Fair\r\n    return '#EF4444'; // Red - Poor\r\n  };\r\n\r\n  // Determine quality label\r\n  const getQualityLabel = (score: number) => {\r\n    if (score >= 0.8) return 'Excellent';\r\n    if (score >= 0.6) return 'Good';\r\n    if (score >= 0.4) return 'Fair';\r\n    return 'Needs Review';\r\n  };\r\n\r\n  // Determine status colors for legend\r\n  const getStatusColors = (score: number) => {\r\n    if (score >= 0.6) {\r\n      // Good quality - show mostly green\r\n      return {\r\n        good: percentage,\r\n        bad: remaining,\r\n        goodColor: '#10B981',\r\n        badColor: '#E5E7EB'\r\n      };\r\n    } else {\r\n      // Poor quality - show mostly red\r\n      return {\r\n        good: percentage,\r\n        bad: remaining,\r\n        goodColor: '#E5E7EB',\r\n        badColor: '#EF4444'\r\n      };\r\n    }\r\n  };\r\n\r\n  const statusColors = getStatusColors(qualityScore);\r\n  const qualityColor = getQualityColor(qualityScore);\r\n  const qualityLabel = getQualityLabel(qualityScore);\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [percentage, remaining],\r\n        backgroundColor: [qualityColor, '#E5E7EB'],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        enabled: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {percentage}%\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            Quality\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            {qualityScore >= 0.8 ? '✅' : \r\n             qualityScore >= 0.6 ? '⚡' : \r\n             qualityScore >= 0.4 ? '⚠️' : '⚠️'}\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: qualityColor,\r\n            fontSize: '1rem'\r\n          }}>\r\n            {qualityLabel}\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: statusColors.goodColor,\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Good: {statusColors.good}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: statusColors.badColor,\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Bad: {statusColors.bad}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultQualityPie;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}