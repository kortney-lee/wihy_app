{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/services/visionAnalysisService.ts\nimport{BrowserMultiFormatReader,NotFoundException}from'@zxing/library';// WIHY Scanner API Configuration with dev flag support\nconst getWihyMLApiUrl=()=>{// Check for explicit environment variable first (highest priority)\nif(process.env.REACT_APP_WIHY_ML_API_URL){return process.env.REACT_APP_WIHY_ML_API_URL;}// Development flag - set to true to use local ML dev server, false for production\nconst USE_LOCAL_ML=process.env.REACT_APP_USE_LOCAL_ML==='true';// Check if we're on localhost (local development)\nconst isLocalhost=window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1';if(isLocalhost&&USE_LOCAL_ML){// Local development with dev flag enabled - use localhost ML API\nreturn'http://localhost:8001';// Assuming ML service runs on different port\n}else{// Production/deployed OR dev flag disabled - use production ML API\nreturn'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';}};const WIHY_API_BASE=getWihyMLApiUrl();// Debug logging for ML API\nconsole.log('🔍 ML API CONFIG DEBUG:',{NODE_ENV:process.env.NODE_ENV,REACT_APP_WIHY_ML_API_URL:process.env.REACT_APP_WIHY_ML_API_URL,FINAL_ML_URL:WIHY_API_BASE,HOSTNAME:window.location.hostname,IS_LOCALHOST:window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1',USE_LOCAL_ML:process.env.REACT_APP_USE_LOCAL_ML==='true',DETECTION_REASON:process.env.REACT_APP_WIHY_ML_API_URL?'ENV_VAR':(window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1')&&process.env.REACT_APP_USE_LOCAL_ML==='true'?'LOCAL_ML_DEV':'PRODUCTION_ML_API'});class VisionAnalysisService{constructor(){this.barcodeReader=void 0;this.barcodeReader=new BrowserMultiFormatReader();}/**\r\n   * Detect barcodes in an image file\r\n   */async detectBarcodes(imageFile){try{console.log('🔍 Detecting barcodes in image...');// Create an image element from the file\nconst imageUrl=URL.createObjectURL(imageFile);const img=new Image();return new Promise(resolve=>{img.onload=async()=>{try{// Try to decode barcode from the image\nconst result=await this.barcodeReader.decodeFromImageElement(img);console.log('✅ Barcode detected:',result.getText());URL.revokeObjectURL(imageUrl);resolve([result.getText()]);}catch(error){if(error instanceof NotFoundException){console.log('ℹ️ No barcodes found in image');}else{console.error('Barcode detection error:',error);}URL.revokeObjectURL(imageUrl);resolve([]);}};img.onerror=()=>{console.error('Failed to load image for barcode detection');URL.revokeObjectURL(imageUrl);resolve([]);};img.src=imageUrl;});}catch(error){console.error('Barcode detection failed:',error);return[];}}/**\r\n   * Analyze image using WIHY Scanner API\r\n   */async analyzeImage(imageFile){try{console.log('🔍 Starting WIHY image analysis...');// Get basic image information\nconst imageInfo=this.getImageInfo(imageFile);console.log('Image info:',imageInfo);// First, try to detect barcodes in the image\nconst detectedBarcodes=await this.detectBarcodes(imageFile);// If we found barcodes, scan them instead of doing image analysis\nif(detectedBarcodes.length>0){console.log('🎯 Barcodes detected, performing barcode scan:',detectedBarcodes);try{// Scan the first detected barcode\nconst barcodeResult=await this.scanBarcode(detectedBarcodes[0]);// Add the detected barcodes to the result\nif(barcodeResult.success&&barcodeResult.data){barcodeResult.data.barcodes=detectedBarcodes;return barcodeResult;}}catch(barcodeError){console.log('Barcode scan failed, falling back to image analysis:',barcodeError);}}// Use WIHY Scanner API for comprehensive food analysis\nlet wihyResult=null;try{console.log('Analyzing with WIHY Scanner API...');wihyResult=await this.analyzeWithWihyAPI(imageFile,{user_context:'web_upload',image_name:imageFile.name});console.log('WIHY Scanner analysis result:',wihyResult);}catch(error){console.log('WIHY Scanner API not available, falling back to legacy analysis');return this.fallbackAnalysis(imageFile,imageInfo);}if(wihyResult&&wihyResult.success){const processedResult=this.processWihyImageResponse(wihyResult,imageInfo);// Add any detected barcodes to the image analysis result\nif(processedResult.data&&detectedBarcodes.length>0){processedResult.data.barcodes=detectedBarcodes;}return processedResult;}else{const fallbackResult=await this.fallbackAnalysis(imageFile,imageInfo);// Add any detected barcodes to the fallback result\nif(fallbackResult.data&&detectedBarcodes.length>0){fallbackResult.data.barcodes=detectedBarcodes;}return fallbackResult;}}catch(error){console.error('Vision analysis error:',error);return{success:false,error:error instanceof Error?error.message:'Analysis failed'};}}/**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */async analyzeWithWihyAPI(input){let userContext=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let response;if(typeof input==='string'){// URL analysis\nconsole.log('🌐 Analyzing image from URL:',input);response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-image\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({image_url:input,context:JSON.stringify(_objectSpread({analysis_type:'food_health',user_location:'web_app',input_type:'url'},userContext))})});}else{// File upload analysis\nconsole.log('📁 Analyzing uploaded file:',input.name);const formData=new FormData();formData.append('image',input);formData.append('context',JSON.stringify(_objectSpread({analysis_type:'food_health',user_location:'web_app',input_type:'file_upload',file_name:input.name,file_size:input.size},userContext)));response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-image\"),{method:'POST',body:formData});}if(!response.ok){throw new Error(\"WIHY API Error: \".concat(response.status));}return await response.json();}/**\r\n   * Analyze image from URL\r\n   */async analyzeImageUrl(imageUrl){let userContext=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{console.log('🔍 Analyzing image from URL with WIHY Scanner API');const wihyResult=await this.analyzeWithWihyAPI(imageUrl,_objectSpread(_objectSpread({},userContext),{},{source:'url_input'}));if(wihyResult&&wihyResult.success){return this.processWihyImageResponse(wihyResult,{name:'Image from URL',size:'Unknown',type:'url',dimensions:'Unknown'});}else{return this.handleUrlAnalysisError(imageUrl);}}catch(error){console.error('URL image analysis failed:',error);return this.handleUrlAnalysisError(imageUrl,error);}}/**\r\n   * Handle URL analysis errors\r\n   */handleUrlAnalysisError(imageUrl,error){return{success:false,error:(error===null||error===void 0?void 0:error.message)||'URL analysis failed',data:{description:'Could not analyze image from URL',foodItems:[],brands:[],nutritionText:'Analysis failed',barcodes:[],qrCodes:[],text:'',imageInfo:{name:'Image from URL',size:'Unknown',type:'url',dimensions:'Unknown'},healthScore:0,novaGroup:4,novaDescription:'Unknown - Analysis failed',isHealthy:false,recommendations:['URL Error - When in doubt, choose whole foods','Real food doesn\\'t need complex analysis'],warnings:['Could not analyze image from URL'],familySafe:false,colorCode:'red',verdict:'Choose whole foods when uncertain',dataSources:['Error - No data available']}};}/**\r\n   * Process WIHY Scanner API response\r\n   */processWihyImageResponse(wihyResult,imageInfo){var _nova_chart_reference,_wihy_analysis$family;const{success,overall_assessment,google_vision_analysis,detected_foods,nova_chart_reference,wihy_recommendations,wihy_analysis}=wihyResult;const healthScore=(overall_assessment===null||overall_assessment===void 0?void 0:overall_assessment.health_score)||0;const novaGroup=(overall_assessment===null||overall_assessment===void 0?void 0:overall_assessment.nova_group)||4;const verdict=(overall_assessment===null||overall_assessment===void 0?void 0:overall_assessment.verdict)||'Analysis completed';const colorCode=(nova_chart_reference===null||nova_chart_reference===void 0?void 0:(_nova_chart_reference=nova_chart_reference.client_guidance)===null||_nova_chart_reference===void 0?void 0:_nova_chart_reference.color_coding)||'red';// Extract detected foods\nconst foodItems=(detected_foods===null||detected_foods===void 0?void 0:detected_foods.map(food=>food.name||food))||[];// Extract recommendations and warnings\nconst recommendations=wihy_recommendations||[];const warnings=(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.carcinogen_warnings)||[];// Determine if healthy based on NOVA group and health score\nconst isHealthy=novaGroup<=2&&healthScore>=60;const familySafe=(wihy_analysis===null||wihy_analysis===void 0?void 0:(_wihy_analysis$family=wihy_analysis.family_safety)===null||_wihy_analysis$family===void 0?void 0:_wihy_analysis$family.safety_score)>=60;return{success:true,data:{description:verdict,foodItems:foodItems,brands:[],// Could extract from vision analysis\nnutritionText:\"Health Score: \".concat(healthScore,\"/100 | NOVA Group: \").concat(novaGroup),barcodes:[],qrCodes:[],text:(google_vision_analysis===null||google_vision_analysis===void 0?void 0:google_vision_analysis.detected_text)||'',imageInfo,// WIHY Scanner specific data\nhealthScore,novaGroup,novaDescription:this.getNovaDescription(novaGroup),isHealthy,recommendations,warnings,familySafe,colorCode,verdict,dataSources:wihyResult.data_sources||['WIHY Scanner','Google Vision']}};}/**\r\n   * Fallback analysis when WIHY API is not available\r\n   */async fallbackAnalysis(imageFile,imageInfo){console.log('Using fallback analysis...');// Try legacy WiHy API as fallback\nlet wihyAnalysis='';try{const{wihyAPI}=await import('./wihyAPI');const wihyResult=await wihyAPI.scanFood(imageFile);if('success'in wihyResult&&wihyResult.success||!('success'in wihyResult)){const message='message'in wihyResult?wihyResult.message:'data'in wihyResult&&wihyResult.data.ai_response?wihyResult.data.ai_response.response:null;if(message){wihyAnalysis=message;}}}catch(error){console.log('Legacy WiHy API also unavailable');}// Extract potential nutrition and food information\nconst foodAnalysis=this.analyzeFoodContent(wihyAnalysis,imageInfo);return{success:true,data:{description:wihyAnalysis||'Image analyzed - choose whole foods when in doubt',foodItems:foodAnalysis.foodItems,brands:foodAnalysis.brands,nutritionText:foodAnalysis.nutritionText,barcodes:[],qrCodes:[],text:'',imageInfo,// Default WIHY values for fallback\nhealthScore:50,novaGroup:4,novaDescription:'Unknown processing level',isHealthy:false,recommendations:['Choose whole foods when uncertain','Real food doesn\\'t need complicated analysis'],warnings:['Could not analyze product completely'],familySafe:false,colorCode:'orange',verdict:'Analysis limited - choose natural foods',dataSources:['Local Analysis']}};}/**\r\n   * Get NOVA group description\r\n   */getNovaDescription(novaGroup){const descriptions={1:'Natural - Real food as God intended',2:'Processed - Use sparingly',3:'Highly Processed - Find alternatives',4:'Ultra-Processed - Your family deserves better'};return descriptions[novaGroup]||descriptions[4];}/**\r\n   * Get basic image file information\r\n   */getImageInfo(file){const sizeInMB=(file.size/(1024*1024)).toFixed(2);return{name:file.name,size:\"\".concat(sizeInMB,\" MB\"),type:file.type,dimensions:'Analyzing...'// Could load image to get actual dimensions\n};}/**\r\n   * Analyze food-related content from text and AI response\r\n   */analyzeFoodContent(analysisText,imageInfo){const text=analysisText.toLowerCase();// Common food keywords\nconst foodKeywords=['apple','banana','orange','bread','milk','cheese','chicken','beef','rice','pasta','salad','sandwich','pizza','burger','fruit','vegetable','cereal','yogurt','soup','snack','cookie','chocolate','candy'];// Common brand keywords\nconst brandKeywords=['coca cola','pepsi','nestlé','kraft','kellogs','general mills','unilever','procter','johnson','mars','ferrero','danone'];// Nutrition-related keywords\nconst nutritionKeywords=['calories','protein','carbs','fat','sugar','sodium','fiber','vitamin','mineral','organic','natural','healthy','nutrition'];const detectedFood=foodKeywords.filter(keyword=>text.includes(keyword));const detectedBrands=brandKeywords.filter(keyword=>text.includes(keyword));const nutritionMentions=nutritionKeywords.filter(keyword=>text.includes(keyword));return{foodItems:detectedFood,brands:detectedBrands,nutritionText:nutritionMentions.length>0?\"Nutrition-related content detected: \".concat(nutritionMentions.join(', ')):''};}/**\r\n   * Scan barcode using WIHY Scanner API\r\n   */async scanBarcode(barcode){let userContext=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{console.log('🔍 Scanning barcode with WIHY Scanner API:',barcode);const response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-barcode\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:barcode,user_context:_objectSpread({scan_location:'web_app',device_type:'browser'},userContext)})});if(!response.ok){throw new Error(\"WIHY Barcode API Error: \".concat(response.status));}const result=await response.json();return this.processWihyBarcodeResponse(result,barcode);}catch(error){console.error('Barcode scan failed:',error);return this.handleBarcodeError(error,barcode);}}/**\r\n   * Process WIHY barcode scan response\r\n   */processWihyBarcodeResponse(result,barcode){var _nova_chart_reference2,_wihy_analysis$family2;const{success,nova_group,nova_description,nova_chart_reference,health_score,wihy_analysis,data_sources,product_name}=result;const isHealthy=nova_group<=2&&health_score>=60;const colorCode=(nova_chart_reference===null||nova_chart_reference===void 0?void 0:(_nova_chart_reference2=nova_chart_reference.client_guidance)===null||_nova_chart_reference2===void 0?void 0:_nova_chart_reference2.color_coding)||'red';const familySafe=(wihy_analysis===null||wihy_analysis===void 0?void 0:(_wihy_analysis$family2=wihy_analysis.family_safety)===null||_wihy_analysis$family2===void 0?void 0:_wihy_analysis$family2.safety_score)>=60;return{success:true,data:{description:product_name||\"Product \".concat(barcode),foodItems:product_name?[product_name]:[],brands:[],nutritionText:\"Health Score: \".concat(health_score,\"/100 | NOVA Group: \").concat(nova_group),barcodes:[barcode],qrCodes:[],text:'',imageInfo:{name:\"Barcode-\".concat(barcode),size:'N/A',type:'barcode',dimensions:'N/A'},// WIHY Scanner specific data\nhealthScore:health_score,novaGroup:nova_group,novaDescription:nova_description||this.getNovaDescription(nova_group),isHealthy,recommendations:(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.wihy_recommendations)||[],warnings:(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.carcinogen_warnings)||[],familySafe,colorCode,verdict:(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.verdict)||this.getHealthVerdict(health_score,nova_group),dataSources:data_sources||['WIHY Enhanced DB']}};}/**\r\n   * Handle barcode scan errors\r\n   */handleBarcodeError(error,barcode){return{success:false,error:error.message||'Barcode scan failed',data:{description:'Could not analyze product',foodItems:[],brands:[],nutritionText:'Analysis failed',barcodes:[barcode],qrCodes:[],text:'',imageInfo:{name:\"Barcode-\".concat(barcode),size:'N/A',type:'barcode',dimensions:'N/A'},healthScore:0,novaGroup:4,novaDescription:'Unknown - Analysis failed',isHealthy:false,recommendations:['API Error - When in doubt, choose whole foods','Real food doesn\\'t need barcodes'],warnings:['Could not analyze product'],familySafe:false,colorCode:'red',verdict:'Choose whole foods when uncertain',dataSources:['Error - No data available']}};}/**\r\n   * Get health verdict based on scores\r\n   */getHealthVerdict(healthScore,novaGroup){if(novaGroup===1&&healthScore>=80)return'Excellent choice - natural and healthy!';if(novaGroup<=2&&healthScore>=60)return'Good choice - moderately processed';if(novaGroup===3)return'Caution - highly processed food';if(novaGroup===4)return'Avoid - ultra-processed food';return'Choose whole foods for better health';}/**\r\n   * Format analysis results for display\r\n   */formatForDisplay(result){if(!result.success||!result.data){return result.error||'Analysis failed';}const{data}=result;const parts=[];// Barcode detection info\nif(data.barcodes&&data.barcodes.length>0){parts.push(\"\\uD83D\\uDCF1 Barcode detected: \".concat(data.barcodes[0]));}// WIHY Scanner results\nif(data.verdict){parts.push(\"\\uD83C\\uDFAF \".concat(data.verdict));}// Health information\nif(data.healthScore!==undefined&&data.novaGroup!==undefined){parts.push(\"\\uD83D\\uDCCA Health Score: \".concat(data.healthScore,\"/100\"));parts.push(\"\\uD83C\\uDFF7\\uFE0F \".concat(data.novaDescription));}// Detected foods\nif(data.foodItems&&data.foodItems.length>0){parts.push(\"\\uD83C\\uDF4E Detected: \".concat(data.foodItems.join(', ')));}// Recommendations\nif(data.recommendations&&data.recommendations.length>0){parts.push(\"\\uD83D\\uDCA1 Recommendations:\");data.recommendations.forEach(rec=>parts.push(\"  \\u2022 \".concat(rec)));}// Warnings\nif(data.warnings&&data.warnings.length>0){parts.push(\"\\u26A0\\uFE0F Warnings:\");data.warnings.forEach(warning=>parts.push(\"  \\u2022 \".concat(warning)));}// Data sources\nif(data.dataSources&&data.dataSources.length>0){parts.push(\"\\uD83D\\uDCCB Data from: \".concat(data.dataSources.join(' • ')));}// Fallback to basic info\nif(parts.length===0){if(data.description){parts.push(data.description);}if(data.imageInfo){parts.push(\"\\uD83D\\uDCC1 \".concat(data.imageInfo.name,\" (\").concat(data.imageInfo.size,\")\"));}}return parts.length>0?parts.join('\\n\\n'):'Image analyzed - choose whole foods for better health';}/**\r\n   * Get color coding for UI display\r\n   */getColorCoding(result){var _result$data;if(!result.success||!((_result$data=result.data)!==null&&_result$data!==void 0&&_result$data.colorCode)){return{color:'red',label:'ERROR',action:'TRY AGAIN'};}const colorMap={'green':{color:'#4CAF50',label:'CHOOSE',action:'Great choice!'},'yellow':{color:'#FFEB3B',label:'MODERATE',action:'Use sparingly'},'orange':{color:'#FF9800',label:'LIMIT',action:'Find alternatives'},'red':{color:'#F44336',label:'AVOID',action:'Choose whole foods instead'}};return colorMap[result.data.colorCode]||colorMap.red;}/**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */async analyzeAnyImage(input){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Handle different input types\nif(input instanceof Blob&&!(input instanceof File)){// Convert Blob to File for camera captures\nconst file=new File([input],'camera-capture.jpg',{type:'image/jpeg'});return this.analyzeImage(file);}else if(typeof input==='string'){// Handle URLs\nreturn this.analyzeImageUrl(input,context);}else{// Handle File objects\nreturn this.analyzeImage(input);}}catch(error){console.error('Image analysis failed:',error);return this.handleGenericError(error);}}/**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */handleGenericError(error){return{success:false,error:(error===null||error===void 0?void 0:error.message)||'Analysis failed',data:{description:'Image analysis failed',foodItems:[],brands:[],nutritionText:'Choose whole foods when technology fails',barcodes:[],qrCodes:[],text:'',imageInfo:{name:'Analysis Failed',size:'N/A',type:'error',dimensions:'N/A'},healthScore:0,novaGroup:4,novaDescription:'Unknown - Technical error',isHealthy:false,recommendations:['Technical error - When in doubt, choose whole foods','Real food doesn\\'t need complex analysis','Shop the perimeter of the grocery store','If it has more than 5 ingredients, consider alternatives'],warnings:['Analysis system temporarily unavailable'],familySafe:false,colorCode:'red',verdict:'Choose whole foods - they\\'re always the safest bet',dataSources:['WIHY Health Guidance']}};}/**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */async testApiHealth(){try{const startTime=Date.now();// Test with a simple barcode scan\nconst response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-barcode\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:'3017620422003',// Nutella test barcode\nuser_context:{test:true}})});const latency=Date.now()-startTime;if(response.ok){const result=await response.json();const hasRequired=result.nova_group&&result.health_score!==undefined;return{healthy:hasRequired,message:hasRequired?'✅ WIHY Scanner API is healthy':'⚠️ API missing required fields',latency};}else{return{healthy:false,message:\"\\u274C API Error: \".concat(response.status),latency};}}catch(error){return{healthy:false,message:\"\\u274C Connection failed: \".concat(error instanceof Error?error.message:'Unknown error')};}}}export const visionAnalysisService=new VisionAnalysisService();","map":{"version":3,"names":["BrowserMultiFormatReader","NotFoundException","getWihyMLApiUrl","process","env","REACT_APP_WIHY_ML_API_URL","USE_LOCAL_ML","REACT_APP_USE_LOCAL_ML","isLocalhost","window","location","hostname","WIHY_API_BASE","console","log","NODE_ENV","FINAL_ML_URL","HOSTNAME","IS_LOCALHOST","DETECTION_REASON","VisionAnalysisService","constructor","barcodeReader","detectBarcodes","imageFile","imageUrl","URL","createObjectURL","img","Image","Promise","resolve","onload","result","decodeFromImageElement","getText","revokeObjectURL","error","onerror","src","analyzeImage","imageInfo","getImageInfo","detectedBarcodes","length","barcodeResult","scanBarcode","success","data","barcodes","barcodeError","wihyResult","analyzeWithWihyAPI","user_context","image_name","name","fallbackAnalysis","processedResult","processWihyImageResponse","fallbackResult","Error","message","input","userContext","arguments","undefined","response","fetch","concat","method","headers","body","JSON","stringify","image_url","context","_objectSpread","analysis_type","user_location","input_type","formData","FormData","append","file_name","file_size","size","ok","status","json","analyzeImageUrl","source","type","dimensions","handleUrlAnalysisError","description","foodItems","brands","nutritionText","qrCodes","text","healthScore","novaGroup","novaDescription","isHealthy","recommendations","warnings","familySafe","colorCode","verdict","dataSources","_nova_chart_reference","_wihy_analysis$family","overall_assessment","google_vision_analysis","detected_foods","nova_chart_reference","wihy_recommendations","wihy_analysis","health_score","nova_group","client_guidance","color_coding","map","food","carcinogen_warnings","family_safety","safety_score","detected_text","getNovaDescription","data_sources","wihyAnalysis","wihyAPI","scanFood","ai_response","foodAnalysis","analyzeFoodContent","descriptions","file","sizeInMB","toFixed","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","join","barcode","query","scan_location","device_type","processWihyBarcodeResponse","handleBarcodeError","_nova_chart_reference2","_wihy_analysis$family2","nova_description","product_name","getHealthVerdict","formatForDisplay","parts","push","forEach","rec","warning","getColorCoding","_result$data","color","label","action","colorMap","red","analyzeAnyImage","Blob","File","handleGenericError","testApiHealth","startTime","Date","now","test","latency","hasRequired","healthy","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\nimport { BrowserMultiFormatReader, NotFoundException } from '@zxing/library';\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n    // WIHY Scanner API fields\r\n    healthScore?: number;\r\n    novaGroup?: number;\r\n    novaDescription?: string;\r\n    isHealthy?: boolean;\r\n    recommendations?: string[];\r\n    warnings?: string[];\r\n    familySafe?: boolean;\r\n    colorCode?: string;\r\n    verdict?: string;\r\n    dataSources?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\n// WIHY Scanner API Configuration with dev flag support\r\nconst getWihyMLApiUrl = () => {\r\n  // Check for explicit environment variable first (highest priority)\r\n  if (process.env.REACT_APP_WIHY_ML_API_URL) {\r\n    return process.env.REACT_APP_WIHY_ML_API_URL;\r\n  }\r\n  \r\n  // Development flag - set to true to use local ML dev server, false for production\r\n  const USE_LOCAL_ML = process.env.REACT_APP_USE_LOCAL_ML === 'true';\r\n  \r\n  // Check if we're on localhost (local development)\r\n  const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n  \r\n  if (isLocalhost && USE_LOCAL_ML) {\r\n    // Local development with dev flag enabled - use localhost ML API\r\n    return 'http://localhost:8001'; // Assuming ML service runs on different port\r\n  } else {\r\n    // Production/deployed OR dev flag disabled - use production ML API\r\n    return 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\r\n  }\r\n};\r\n\r\nconst WIHY_API_BASE = getWihyMLApiUrl();\r\n\r\n// Debug logging for ML API\r\nconsole.log('🔍 ML API CONFIG DEBUG:', {\r\n  NODE_ENV: process.env.NODE_ENV,\r\n  REACT_APP_WIHY_ML_API_URL: process.env.REACT_APP_WIHY_ML_API_URL,\r\n  FINAL_ML_URL: WIHY_API_BASE,\r\n  HOSTNAME: window.location.hostname,\r\n  IS_LOCALHOST: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1',\r\n  USE_LOCAL_ML: process.env.REACT_APP_USE_LOCAL_ML === 'true',\r\n  DETECTION_REASON: process.env.REACT_APP_WIHY_ML_API_URL ? 'ENV_VAR' : \r\n    (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') && process.env.REACT_APP_USE_LOCAL_ML === 'true' ? 'LOCAL_ML_DEV' : 'PRODUCTION_ML_API'\r\n});\r\n\r\nclass VisionAnalysisService {\r\n  private barcodeReader: BrowserMultiFormatReader;\r\n  \r\n  constructor() {\r\n    this.barcodeReader = new BrowserMultiFormatReader();\r\n  }\r\n\r\n  /**\r\n   * Detect barcodes in an image file\r\n   */\r\n  private async detectBarcodes(imageFile: File): Promise<string[]> {\r\n    try {\r\n      console.log('🔍 Detecting barcodes in image...');\r\n      \r\n      // Create an image element from the file\r\n      const imageUrl = URL.createObjectURL(imageFile);\r\n      const img = new Image();\r\n      \r\n      return new Promise((resolve) => {\r\n        img.onload = async () => {\r\n          try {\r\n            // Try to decode barcode from the image\r\n            const result = await this.barcodeReader.decodeFromImageElement(img);\r\n            console.log('✅ Barcode detected:', result.getText());\r\n            URL.revokeObjectURL(imageUrl);\r\n            resolve([result.getText()]);\r\n          } catch (error) {\r\n            if (error instanceof NotFoundException) {\r\n              console.log('ℹ️ No barcodes found in image');\r\n            } else {\r\n              console.error('Barcode detection error:', error);\r\n            }\r\n            URL.revokeObjectURL(imageUrl);\r\n            resolve([]);\r\n          }\r\n        };\r\n        \r\n        img.onerror = () => {\r\n          console.error('Failed to load image for barcode detection');\r\n          URL.revokeObjectURL(imageUrl);\r\n          resolve([]);\r\n        };\r\n        \r\n        img.src = imageUrl;\r\n      });\r\n    } catch (error) {\r\n      console.error('Barcode detection failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Starting WIHY image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // First, try to detect barcodes in the image\r\n      const detectedBarcodes = await this.detectBarcodes(imageFile);\r\n      \r\n      // If we found barcodes, scan them instead of doing image analysis\r\n      if (detectedBarcodes.length > 0) {\r\n        console.log('🎯 Barcodes detected, performing barcode scan:', detectedBarcodes);\r\n        \r\n        try {\r\n          // Scan the first detected barcode\r\n          const barcodeResult = await this.scanBarcode(detectedBarcodes[0]);\r\n          \r\n          // Add the detected barcodes to the result\r\n          if (barcodeResult.success && barcodeResult.data) {\r\n            barcodeResult.data.barcodes = detectedBarcodes;\r\n            return barcodeResult;\r\n          }\r\n        } catch (barcodeError) {\r\n          console.log('Barcode scan failed, falling back to image analysis:', barcodeError);\r\n        }\r\n      }\r\n\r\n      // Use WIHY Scanner API for comprehensive food analysis\r\n      let wihyResult: any = null;\r\n      \r\n      try {\r\n        console.log('Analyzing with WIHY Scanner API...');\r\n        wihyResult = await this.analyzeWithWihyAPI(imageFile, {\r\n          user_context: 'web_upload',\r\n          image_name: imageFile.name\r\n        });\r\n        console.log('WIHY Scanner analysis result:', wihyResult);\r\n      } catch (error) {\r\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n      if (wihyResult && wihyResult.success) {\r\n        const processedResult = this.processWihyImageResponse(wihyResult, imageInfo);\r\n        // Add any detected barcodes to the image analysis result\r\n        if (processedResult.data && detectedBarcodes.length > 0) {\r\n          processedResult.data.barcodes = detectedBarcodes;\r\n        }\r\n        return processedResult;\r\n      } else {\r\n        const fallbackResult = await this.fallbackAnalysis(imageFile, imageInfo);\r\n        // Add any detected barcodes to the fallback result\r\n        if (fallbackResult.data && detectedBarcodes.length > 0) {\r\n          fallbackResult.data.barcodes = detectedBarcodes;\r\n        }\r\n        return fallbackResult;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */\r\n  private async analyzeWithWihyAPI(input: File | string, userContext = {}): Promise<any> {\r\n    let response: Response;\r\n    \r\n    if (typeof input === 'string') {\r\n      // URL analysis\r\n      console.log('🌐 Analyzing image from URL:', input);\r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          image_url: input,\r\n          context: JSON.stringify({\r\n            analysis_type: 'food_health',\r\n            user_location: 'web_app',\r\n            input_type: 'url',\r\n            ...userContext\r\n          })\r\n        })\r\n      });\r\n    } else {\r\n      // File upload analysis\r\n      console.log('📁 Analyzing uploaded file:', input.name);\r\n      const formData = new FormData();\r\n      formData.append('image', input);\r\n      formData.append('context', JSON.stringify({\r\n        analysis_type: 'food_health',\r\n        user_location: 'web_app',\r\n        input_type: 'file_upload',\r\n        file_name: input.name,\r\n        file_size: input.size,\r\n        ...userContext\r\n      }));\r\n      \r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`WIHY API Error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Analyze image from URL\r\n   */\r\n  async analyzeImageUrl(imageUrl: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Analyzing image from URL with WIHY Scanner API');\r\n      \r\n      const wihyResult = await this.analyzeWithWihyAPI(imageUrl, {\r\n        ...userContext,\r\n        source: 'url_input'\r\n      });\r\n      \r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        });\r\n      } else {\r\n        return this.handleUrlAnalysisError(imageUrl);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('URL image analysis failed:', error);\r\n      return this.handleUrlAnalysisError(imageUrl, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle URL analysis errors\r\n   */\r\n  private handleUrlAnalysisError(imageUrl: string, error?: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'URL analysis failed',\r\n      data: {\r\n        description: 'Could not analyze image from URL',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'URL Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis'\r\n        ],\r\n        warnings: ['Could not analyze image from URL'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\r\n  private processWihyImageResponse(wihyResult: any, imageInfo: any): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      overall_assessment,\r\n      google_vision_analysis,\r\n      detected_foods,\r\n      nova_chart_reference,\r\n      wihy_recommendations,\r\n      wihy_analysis\r\n    } = wihyResult;\r\n\r\n    const healthScore = overall_assessment?.health_score || 0;\r\n    const novaGroup = overall_assessment?.nova_group || 4;\r\n    const verdict = overall_assessment?.verdict || 'Analysis completed';\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    \r\n    // Extract detected foods\r\n    const foodItems = detected_foods?.map((food: any) => food.name || food) || [];\r\n    \r\n    // Extract recommendations and warnings\r\n    const recommendations = wihy_recommendations || [];\r\n    const warnings = wihy_analysis?.carcinogen_warnings || [];\r\n    \r\n    // Determine if healthy based on NOVA group and health score\r\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: verdict,\r\n        foodItems: foodItems,\r\n        brands: [], // Could extract from vision analysis\r\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: google_vision_analysis?.detected_text || '',\r\n        imageInfo,\r\n        // WIHY Scanner specific data\r\n        healthScore,\r\n        novaGroup,\r\n        novaDescription: this.getNovaDescription(novaGroup),\r\n        isHealthy,\r\n        recommendations,\r\n        warnings,\r\n        familySafe,\r\n        colorCode,\r\n        verdict,\r\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\r\n  private async fallbackAnalysis(imageFile: File, imageInfo: any): Promise<VisionAnalysisResult> {\r\n    console.log('Using fallback analysis...');\r\n    \r\n    // Try legacy WiHy API as fallback\r\n    let wihyAnalysis = '';\r\n    \r\n    try {\r\n      const { wihyAPI } = await import('./wihyAPI');\r\n      const wihyResult = await wihyAPI.scanFood(imageFile);\r\n      \r\n      if (('success' in wihyResult && wihyResult.success) || !('success' in wihyResult)) {\r\n        const message = ('message' in wihyResult) ? wihyResult.message : \r\n                       ('data' in wihyResult && wihyResult.data.ai_response) ? wihyResult.data.ai_response.response : \r\n                       null;\r\n        if (message) {\r\n          wihyAnalysis = message;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Legacy WiHy API also unavailable');\r\n    }\r\n\r\n    // Extract potential nutrition and food information\r\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\r\n        foodItems: foodAnalysis.foodItems,\r\n        brands: foodAnalysis.brands,\r\n        nutritionText: foodAnalysis.nutritionText,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo,\r\n        // Default WIHY values for fallback\r\n        healthScore: 50,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown processing level',\r\n        isHealthy: false,\r\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\r\n        warnings: ['Could not analyze product completely'],\r\n        familySafe: false,\r\n        colorCode: 'orange',\r\n        verdict: 'Analysis limited - choose natural foods',\r\n        dataSources: ['Local Analysis']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group description\r\n   */\r\n  private getNovaDescription(novaGroup: number): string {\r\n    const descriptions = {\r\n      1: 'Natural - Real food as God intended',\r\n      2: 'Processed - Use sparingly',\r\n      3: 'Highly Processed - Find alternatives',\r\n      4: 'Ultra-Processed - Your family deserves better'\r\n    };\r\n    \r\n    return descriptions[novaGroup as keyof typeof descriptions] || descriptions[4];\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\r\n  async scanBarcode(barcode: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Scanning barcode with WIHY Scanner API:', barcode);\r\n      \r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: barcode,\r\n          user_context: {\r\n            scan_location: 'web_app',\r\n            device_type: 'browser',\r\n            ...userContext\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      return this.processWihyBarcodeResponse(result, barcode);\r\n      \r\n    } catch (error) {\r\n      console.error('Barcode scan failed:', error);\r\n      return this.handleBarcodeError(error, barcode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\r\n  private processWihyBarcodeResponse(result: any, barcode: string): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      nova_group,\r\n      nova_description,\r\n      nova_chart_reference,\r\n      health_score,\r\n      wihy_analysis,\r\n      data_sources,\r\n      product_name\r\n    } = result;\r\n    \r\n    const isHealthy = nova_group <= 2 && health_score >= 60;\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: product_name || `Product ${barcode}`,\r\n        foodItems: product_name ? [product_name] : [],\r\n        brands: [],\r\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        // WIHY Scanner specific data\r\n        healthScore: health_score,\r\n        novaGroup: nova_group,\r\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\r\n        isHealthy,\r\n        recommendations: wihy_analysis?.wihy_recommendations || [],\r\n        warnings: wihy_analysis?.carcinogen_warnings || [],\r\n        familySafe,\r\n        colorCode,\r\n        verdict: wihy_analysis?.verdict || this.getHealthVerdict(health_score, nova_group),\r\n        dataSources: data_sources || ['WIHY Enhanced DB']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle barcode scan errors\r\n   */\r\n  private handleBarcodeError(error: any, barcode: string): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Barcode scan failed',\r\n      data: {\r\n        description: 'Could not analyze product',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'API Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need barcodes'\r\n        ],\r\n        warnings: ['Could not analyze product'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health verdict based on scores\r\n   */\r\n  private getHealthVerdict(healthScore: number, novaGroup: number): string {\r\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\r\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\r\n    if (novaGroup === 3) return 'Caution - highly processed food';\r\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\r\n    return 'Choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // Barcode detection info\r\n    if (data.barcodes && data.barcodes.length > 0) {\r\n      parts.push(`📱 Barcode detected: ${data.barcodes[0]}`);\r\n    }\r\n\r\n    // WIHY Scanner results\r\n    if (data.verdict) {\r\n      parts.push(`🎯 ${data.verdict}`);\r\n    }\r\n\r\n    // Health information\r\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\r\n      parts.push(`📊 Health Score: ${data.healthScore}/100`);\r\n      parts.push(`🏷️ ${data.novaDescription}`);\r\n    }\r\n\r\n    // Detected foods\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`🍎 Detected: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Recommendations\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      parts.push(`💡 Recommendations:`);\r\n      data.recommendations.forEach(rec => parts.push(`  • ${rec}`));\r\n    }\r\n\r\n    // Warnings\r\n    if (data.warnings && data.warnings.length > 0) {\r\n      parts.push(`⚠️ Warnings:`);\r\n      data.warnings.forEach(warning => parts.push(`  • ${warning}`));\r\n    }\r\n\r\n    // Data sources\r\n    if (data.dataSources && data.dataSources.length > 0) {\r\n      parts.push(`📋 Data from: ${data.dataSources.join(' • ')}`);\r\n    }\r\n\r\n    // Fallback to basic info\r\n    if (parts.length === 0) {\r\n      if (data.description) {\r\n        parts.push(data.description);\r\n      }\r\n      if (data.imageInfo) {\r\n        parts.push(`📁 ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n      }\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Get color coding for UI display\r\n   */\r\n  getColorCoding(result: VisionAnalysisResult): { color: string; label: string; action: string } {\r\n    if (!result.success || !result.data?.colorCode) {\r\n      return { color: 'red', label: 'ERROR', action: 'TRY AGAIN' };\r\n    }\r\n\r\n    const colorMap = {\r\n      'green': { color: '#4CAF50', label: 'CHOOSE', action: 'Great choice!' },\r\n      'yellow': { color: '#FFEB3B', label: 'MODERATE', action: 'Use sparingly' },\r\n      'orange': { color: '#FF9800', label: 'LIMIT', action: 'Find alternatives' },\r\n      'red': { color: '#F44336', label: 'AVOID', action: 'Choose whole foods instead' }\r\n    };\r\n\r\n    return colorMap[result.data.colorCode as keyof typeof colorMap] || colorMap.red;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */\r\n  async analyzeAnyImage(input: File | string | Blob, context = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      // Handle different input types\r\n      if (input instanceof Blob && !(input instanceof File)) {\r\n        // Convert Blob to File for camera captures\r\n        const file = new File([input], 'camera-capture.jpg', { type: 'image/jpeg' });\r\n        return this.analyzeImage(file);\r\n      } else if (typeof input === 'string') {\r\n        // Handle URLs\r\n        return this.analyzeImageUrl(input, context);\r\n      } else {\r\n        // Handle File objects\r\n        return this.analyzeImage(input);\r\n      }\r\n    } catch (error) {\r\n      console.error('Image analysis failed:', error);\r\n      return this.handleGenericError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */\r\n  private handleGenericError(error: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'Analysis failed',\r\n      data: {\r\n        description: 'Image analysis failed',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Choose whole foods when technology fails',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Analysis Failed',\r\n          size: 'N/A',\r\n          type: 'error',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Technical error',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'Technical error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis',\r\n          'Shop the perimeter of the grocery store',\r\n          'If it has more than 5 ingredients, consider alternatives'\r\n        ],\r\n        warnings: ['Analysis system temporarily unavailable'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods - they\\'re always the safest bet',\r\n        dataSources: ['WIHY Health Guidance']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */\r\n  async testApiHealth(): Promise<{ healthy: boolean; message: string; latency?: number }> {\r\n    try {\r\n      const startTime = Date.now();\r\n      \r\n      // Test with a simple barcode scan\r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: '3017620422003', // Nutella test barcode\r\n          user_context: { test: true }\r\n        })\r\n      });\r\n      \r\n      const latency = Date.now() - startTime;\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const hasRequired = result.nova_group && result.health_score !== undefined;\r\n        \r\n        return {\r\n          healthy: hasRequired,\r\n          message: hasRequired ? '✅ WIHY Scanner API is healthy' : '⚠️ API missing required fields',\r\n          latency\r\n        };\r\n      } else {\r\n        return {\r\n          healthy: false,\r\n          message: `❌ API Error: ${response.status}`,\r\n          latency\r\n        };\r\n      }\r\n      \r\n    } catch (error) {\r\n      return {\r\n        healthy: false,\r\n        message: `❌ Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}