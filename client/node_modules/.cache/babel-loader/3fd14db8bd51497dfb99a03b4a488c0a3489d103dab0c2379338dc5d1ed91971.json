{"ast":null,"code":"import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\nimport { logger } from '../utils/logger';\n\n// ==================== WIHY API CORRECT INTERFACES ====================\n\n// Chart Data Structures based on documentation\n\n// NOVA Classification\n\n// Ask Endpoint Interfaces\n\n// Scan Endpoint Interfaces\n\n// Chat Endpoint Interfaces\n\n// Request Interfaces\n\n// Main Response Wrapper\n\n// Interface for processed scan results following integration guide\n\n// Types for the WiHy Enhanced Model API (2,325 training examples)\n\n// Enhanced Model Response Structure\n\n// Image Scanner Response Structure\n\n// Barcode Scanner Response Structure  \n\n// Legacy interfaces for backward compatibility\n\n// Chart data structure from OpenAPI spec\n\n// Core response data structure from OpenAPI spec\n\n// Main response structure from OpenAPI spec\n\n// Keep the old interface for backward compatibility\n\n// Interface for the /scan endpoint\n\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj) {\n  return obj && typeof obj === 'object' && 'data' in obj && 'service_used' in obj;\n}\n\n// Legacy types for backward compatibility\n\nclass WihyEnhancedAPIService {\n  constructor() {\n    this.baseURL = void 0;\n    this.isLocalDevelopment = void 0;\n    this.baseURL = API_CONFIG.WIHY_API_URL;\n    this.isLocalDevelopment = this.baseURL.includes('localhost');\n  }\n\n  /**\r\n   * Ask WiHy Enhanced Model a health-related question (2,325 training examples)\r\n   */\n  async askEnhancedHealthQuestion(request) {\n    try {\n      logger.apiRequest('Making WiHy Enhanced Model API request', request);\n      const endpoint = `${this.baseURL}/ask`;\n\n      // Use fetch API with timeout and retry logic\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await this.fetchWithRetry(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Enhanced Model API response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy Enhanced Model API error:', error);\n      throw this.handleEnhancedError(error);\n    }\n  }\n\n  /**\r\n   * Scan food image using enhanced vision analysis\r\n   */\n  async scanFoodImage(imageFile, context = '') {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      formData.append('context', context);\n      const endpoint = getApiEndpoint('scan');\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for images\n\n      const response = await this.fetchWithRetry(endpoint, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Image Scanner response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy Image Scanner error:', error);\n      throw this.handleScannerError(error, 'image');\n    }\n  }\n\n  /**\r\n   * Scan barcode using enhanced nutrition database (via /ask endpoint)\r\n   */\n  async scanBarcode(barcode, context = {}) {\n    try {\n      // Use the /ask endpoint with barcode-specific query format (per integration guide)\n      const requestBody = {\n        query: `Analyze barcode: ${barcode}`,\n        user_context: {\n          scan_location: context.scan_location || 'web_app',\n          device_type: context.device_type || 'desktop',\n          user_type: context.user_type || 'general'\n        }\n      };\n      const endpoint = getApiEndpoint('ask'); // Points to /ask endpoint\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\n\n      const response = await this.fetchWithRetry(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Barcode Scanner response received', data);\n\n      // Process the response to extract NOVA and health data\n      return this.processBarcodeScanResponse(data, barcode);\n    } catch (error) {\n      logger.error('WiHy Barcode Scanner error:', error);\n      throw this.handleScannerError(error, 'barcode');\n    }\n  }\n\n  /**\r\n   * Process barcode scan response to extract NOVA and health data (per integration guide)\r\n   */\n  processBarcodeScanResponse(result, barcode) {\n    const analysis = result.analysis || result;\n    const {\n      nova_group,\n      nova_classification,\n      food_quality_score,\n      research_quality_score,\n      health_verdict,\n      addiction_analysis,\n      ingredient_analysis\n    } = analysis;\n    return {\n      success: true,\n      nova_group: nova_group || 4,\n      health_score: food_quality_score || 0,\n      product_name: analysis.product_name || `Product ${barcode}`,\n      ingredients: analysis.ingredients || [],\n      nutritional_data: {\n        calories_per_100g: analysis.calories_per_100g || 0,\n        protein_g: analysis.protein_g || 0,\n        carbs_g: analysis.carbs_g || 0,\n        fat_g: analysis.fat_g || 0,\n        fiber_g: analysis.fiber_g || 0,\n        sodium_mg: analysis.sodium_mg || 0\n      },\n      health_analysis: {\n        carcinogen_alerts: (addiction_analysis === null || addiction_analysis === void 0 ? void 0 : addiction_analysis.addictive_components) || [],\n        toxic_additives: analysis.toxic_additives || [],\n        processing_level: nova_classification || 'Ultra-processed'\n      },\n      wihy_recommendations: analysis.recommendations || [],\n      data_sources: result.research_citations || ['WiHy Enhanced Database', 'OpenFoodFacts v2']\n    };\n  }\n\n  /**\r\n   * Check API health and get status\r\n   */\n  async checkAPIHealth() {\n    try {\n      const response = await fetch(WIHY_HEALTH_CHECK_URL, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WiHy API health check failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Fetch with simple retry logic (single endpoint only)\r\n   */\n  async fetchWithRetry(url, options, retries = 2) {\n    let lastError;\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const response = await fetch(url, options);\n        return response; // Return response for error handling upstream\n      } catch (error) {\n        lastError = error;\n        logger.warn(`Attempt ${attempt + 1} failed for ${this.baseURL}:`, error);\n\n        // If this is the last attempt, throw error\n        if (attempt === retries) {\n          throw lastError;\n        }\n\n        // Wait before retry (exponential backoff)\n        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));\n      }\n    }\n    throw lastError;\n  }\n\n  /**\r\n   * Enhanced error handling for API responses\r\n   */\n  handleEnhancedError(error) {\n    if (error instanceof Error) {\n      // Check for timeout/abort errors\n      if (error.name === 'AbortError') {\n        return new Error('TIMEOUT_ERROR: Enhanced model request timed out - services may be under heavy load');\n      }\n\n      // Check for CORS errors\n      if (error.message.includes('CORS') || error.message.includes('Access to fetch') || error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\n        return new Error('CORS_ERROR: Unable to connect to WiHy Enhanced Model from this domain');\n      }\n\n      // Check for network/connectivity issues\n      if (error.message.includes('fetch') || error.message.includes('network') || error.name === 'TypeError' || error.message.includes('Failed to fetch')) {\n        return new Error('NETWORK_ERROR: Unable to connect to WiHy Enhanced Model services');\n      }\n\n      // Check for server errors\n      if (error.message.includes('HTTP error! status: 5')) {\n        return new Error('SERVER_ERROR: WiHy Enhanced Model temporarily unavailable');\n      }\n      return new Error(error.message || 'WiHy Enhanced Model request failed');\n    }\n    return new Error('Unknown error occurred while contacting WiHy Enhanced Model');\n  }\n\n  /**\r\n   * Scanner-specific error handling\r\n   */\n  handleScannerError(error, scanType) {\n    const context = scanType === 'image' ? 'Image Scanner' : 'Barcode Scanner';\n    if (error instanceof Error) {\n      if (error.name === 'AbortError') {\n        return new Error(`TIMEOUT_ERROR: ${context} request timed out`);\n      }\n      if (error.message.includes('HTTP error! status: 400')) {\n        return new Error(`VALIDATION_ERROR: Invalid ${scanType} format or data`);\n      }\n      if (error.message.includes('HTTP error! status: 404')) {\n        return new Error(`NOT_FOUND: ${scanType === 'barcode' ? 'Product not found in nutrition databases' : 'Unable to analyze image'}`);\n      }\n      return new Error(`${context.toUpperCase()}_ERROR: ${error.message}`);\n    }\n    return new Error(`Unknown ${context.toLowerCase()} error occurred`);\n  }\n\n  /**\r\n   * Legacy compatibility method - Ask WiHy a health-related question\r\n   * Now routes to Enhanced Model ONLY (no fallbacks)\r\n   */\n  async askAnything(request) {\n    try {\n      // Convert legacy request to enhanced format\n      const enhancedRequest = {\n        query: request.query,\n        context: 'user_context' in request ? JSON.stringify(request.user_context) : '',\n        user_id: 'user_id' in request ? request.user_id : undefined\n      };\n\n      // Use enhanced model ONLY\n      const enhancedResponse = await this.askEnhancedHealthQuestion(enhancedRequest);\n\n      // Convert enhanced response to legacy format for backward compatibility\n      return this.convertEnhancedToLegacy(enhancedResponse, request.query);\n    } catch (error) {\n      logger.error('Enhanced WiHy API failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Convert Enhanced Model response to legacy format for backward compatibility\r\n   */\n  convertEnhancedToLegacy(enhancedResponse, originalQuery) {\n    return {\n      success: true,\n      timestamp: enhancedResponse.timestamp || new Date().toISOString(),\n      response_type: 'enhanced_model',\n      query: originalQuery,\n      wihy_response: {\n        query_type: 'enhanced_model',\n        query: originalQuery,\n        core_principle: enhancedResponse.answer,\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [enhancedResponse.answer],\n          action_items: enhancedResponse.wihy_wisdom.map((wisdom, index) => ({\n            action: wisdom,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'enhanced_model',\n            mechanism: 'biblical_wisdom',\n            timeline: 'immediate'\n          })),\n          timeline: 'immediate'\n        },\n        research_foundation: enhancedResponse.research_citations.map(citation => ({\n          citation_text: citation,\n          study_type: 'enhanced_model_research',\n          key_finding: citation\n        })),\n        progress_tracking: {\n          key_metrics: ['enhanced_health_understanding'],\n          reassessment_period: '1 week'\n        },\n        biblical_wisdom: enhancedResponse.wihy_wisdom\n      },\n      message: enhancedResponse.answer\n    };\n  }\n\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\n  convertToLegacyFormat(unifiedResponse, originalQuery) {\n    var _unifiedResponse$data, _unifiedResponse$data2, _unifiedResponse$data3, _unifiedResponse$data4;\n    // Handle chat service response\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\n      return {\n        success: unifiedResponse.success,\n        timestamp: new Date().toISOString(),\n        response_type: unifiedResponse.request_type,\n        query: originalQuery,\n        wihy_response: {\n          query_type: unifiedResponse.request_type,\n          query: originalQuery,\n          core_principle: unifiedResponse.data.response,\n          personalized_analysis: {\n            identified_risk_factors: [],\n            priority_health_goals: [unifiedResponse.data.response],\n            action_items: [{\n              action: unifiedResponse.data.response,\n              priority: 'medium',\n              target_illness: 'general_health',\n              evidence_level: 'ai_generated',\n              mechanism: 'chat_response',\n              timeline: 'immediate'\n            }],\n            timeline: 'immediate'\n          },\n          research_foundation: [{\n            citation_text: 'WiHy AI Chat System',\n            study_type: 'ai_response',\n            key_finding: unifiedResponse.data.response\n          }],\n          progress_tracking: {\n            key_metrics: ['general_health'],\n            reassessment_period: '1 week'\n          },\n          biblical_wisdom: []\n        },\n        message: unifiedResponse.data.response\n      };\n    }\n\n    // Handle other service types (training, nutrition, etc.)\n    return {\n      success: unifiedResponse.success,\n      timestamp: new Date().toISOString(),\n      response_type: unifiedResponse.request_type,\n      query: originalQuery,\n      wihy_response: {\n        query_type: unifiedResponse.request_type,\n        query: originalQuery,\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [],\n          action_items: ((_unifiedResponse$data = unifiedResponse.data.recommendations) === null || _unifiedResponse$data === void 0 ? void 0 : (_unifiedResponse$data2 = _unifiedResponse$data.immediate_actions) === null || _unifiedResponse$data2 === void 0 ? void 0 : _unifiedResponse$data2.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || ((_unifiedResponse$data3 = unifiedResponse.data.legacy_recommendations) === null || _unifiedResponse$data3 === void 0 ? void 0 : _unifiedResponse$data3.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || [],\n          timeline: 'ongoing'\n        },\n        research_foundation: ((_unifiedResponse$data4 = unifiedResponse.data.sources) === null || _unifiedResponse$data4 === void 0 ? void 0 : _unifiedResponse$data4.map(source => ({\n          citation_text: source,\n          study_type: 'research',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['general_health'],\n          reassessment_period: '1 month'\n        },\n        biblical_wisdom: []\n      },\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\n    };\n  }\n\n  /**\r\n   * Get health news articles using the unified API\r\n   */\n  async getHealthNews(categories, limit) {\n    const query = categories && categories.length > 0 ? `Latest health news about ${categories.join(', ')}` : 'Latest health news';\n    const request = {\n      query: query,\n      request_type: 'health',\n      context: {\n        categories: categories,\n        limit: limit\n      }\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\n  async searchNutrition(foodQuery, userContext) {\n    const request = {\n      query: `Nutrition information for ${foodQuery}`,\n      request_type: 'nutrition',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, request.query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Legacy scan food images method - now uses enhanced scanner\r\n   */\n  async scanFood(file, scanOptions) {\n    try {\n      if (file) {\n        // Use enhanced image scanner\n        const enhancedResponse = await this.scanFoodImage(file, scanOptions !== null && scanOptions !== void 0 && scanOptions.user_context ? JSON.stringify(scanOptions.user_context) : '');\n\n        // Convert to legacy format\n        return this.convertImageScanToLegacy(enhancedResponse, 'Image scan analysis');\n      } else if (scanOptions !== null && scanOptions !== void 0 && scanOptions.barcode) {\n        // Use enhanced barcode scanner\n        const enhancedResponse = await this.scanBarcode(scanOptions.barcode, scanOptions.user_context);\n\n        // Convert to legacy format\n        return this.convertBarcodeScanToLegacy(enhancedResponse, `Barcode scan: ${scanOptions.barcode}`);\n      } else {\n        throw new Error('No file or barcode provided for scanning');\n      }\n    } catch (error) {\n      logger.error('WiHy Scan error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Convert Image Scanner response to legacy format\r\n   */\n  convertImageScanToLegacy(response, query) {\n    var _response$overall_ass, _response$data_source;\n    const recommendations = response.wihy_recommendations || [];\n    const warnings = response.carcinogen_warnings || [];\n    return {\n      success: response.success,\n      timestamp: new Date().toISOString(),\n      response_type: 'image_scan',\n      query: query,\n      wihy_response: {\n        query_type: 'image_scan',\n        query: query,\n        core_principle: ((_response$overall_ass = response.overall_assessment) === null || _response$overall_ass === void 0 ? void 0 : _response$overall_ass.verdict) || 'Image analysis complete',\n        personalized_analysis: {\n          identified_risk_factors: warnings.map(warning => ({\n            risk_factor: warning,\n            associated_illnesses: 'various',\n            prevalence_rate: 0,\n            preventability_score: 100\n          })),\n          priority_health_goals: recommendations,\n          action_items: recommendations.map(rec => ({\n            action: rec,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'image_analysis',\n            mechanism: 'food_choice',\n            timeline: 'immediate'\n          })),\n          timeline: 'immediate'\n        },\n        research_foundation: ((_response$data_source = response.data_sources) === null || _response$data_source === void 0 ? void 0 : _response$data_source.map(source => ({\n          citation_text: source,\n          study_type: 'database',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['food_quality_awareness'],\n          reassessment_period: '1 week'\n        },\n        biblical_wisdom: ['Choose foods that nourish your temple - 1 Corinthians 6:19']\n      },\n      message: this.formatImageScanResponse(response)\n    };\n  }\n\n  /**\r\n   * Convert Barcode Scanner response to legacy format\r\n   */\n  convertBarcodeScanToLegacy(response, query) {\n    var _response$health_anal, _response$health_anal2, _response$data_source2;\n    const recommendations = response.wihy_recommendations || [];\n    const warnings = [...(((_response$health_anal = response.health_analysis) === null || _response$health_anal === void 0 ? void 0 : _response$health_anal.carcinogen_alerts) || []), ...(((_response$health_anal2 = response.health_analysis) === null || _response$health_anal2 === void 0 ? void 0 : _response$health_anal2.toxic_additives) || [])];\n    return {\n      success: response.success,\n      timestamp: new Date().toISOString(),\n      response_type: 'barcode_scan',\n      query: query,\n      wihy_response: {\n        query_type: 'barcode_scan',\n        query: query,\n        core_principle: `Product Analysis: ${response.product_name}`,\n        personalized_analysis: {\n          identified_risk_factors: warnings.map(warning => ({\n            risk_factor: warning,\n            associated_illnesses: 'various',\n            prevalence_rate: 0,\n            preventability_score: 100\n          })),\n          priority_health_goals: recommendations,\n          action_items: recommendations.map(rec => ({\n            action: rec,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'product_analysis',\n            mechanism: 'ingredient_awareness',\n            timeline: 'immediate'\n          })),\n          timeline: 'immediate'\n        },\n        research_foundation: ((_response$data_source2 = response.data_sources) === null || _response$data_source2 === void 0 ? void 0 : _response$data_source2.map(source => ({\n          citation_text: source,\n          study_type: 'nutrition_database',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['product_awareness', 'nova_understanding'],\n          reassessment_period: '1 week'\n        },\n        biblical_wisdom: ['Real food doesn\\'t need complicated analysis - choose whole foods']\n      },\n      message: this.formatBarcodeScanResponse(response)\n    };\n  }\n\n  /**\r\n   * Convert File to base64 string\r\n   */\n  fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const result = reader.result;\n        // Remove the data:image/jpeg;base64, prefix\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  /**\r\n   * General health search using the unified API (single call only)\r\n   */\n  async searchHealth(query, userContext) {\n    var _Error$stack;\n    const timestamp = new Date().toISOString();\n    const callId = Math.random().toString(36).substr(2, 9);\n    logger.info(`🔍 [${callId}] WiHy searchHealth called at ${timestamp}`, {\n      query,\n      userContext,\n      stack: (_Error$stack = new Error().stack) === null || _Error$stack === void 0 ? void 0 : _Error$stack.split('\\n').slice(1, 4).map(line => line.trim())\n    });\n    const request = {\n      query: query,\n      request_type: 'auto',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    logger.info(`✅ [${callId}] WiHy searchHealth completed at ${new Date().toISOString()}`, {\n      query,\n      responseType: response.constructor.name,\n      success: response.success,\n      duration: `${Date.now() - new Date(timestamp).getTime()}ms`\n    });\n\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\n    return response;\n  }\n\n  /**\r\n   * Get NOVA classification guidance (per integration guide)\r\n   */\n  getNovaGuidance(novaGroup) {\n    const guidance = {\n      1: {\n        action: 'CHOOSE',\n        color: 'green',\n        message: 'Real food as God intended'\n      },\n      2: {\n        action: 'MODERATE',\n        color: 'yellow',\n        message: 'Use sparingly'\n      },\n      3: {\n        action: 'LIMIT',\n        color: 'orange',\n        message: 'Find alternatives'\n      },\n      4: {\n        action: 'AVOID',\n        color: 'red',\n        message: 'Your family deserves better'\n      }\n    };\n    return guidance[novaGroup] || guidance[4];\n  }\n\n  /**\r\n   * Process WiHy response following integration guide patterns\r\n   */\n  processWihyResponse(result) {\n    const analysis = result.analysis || result;\n    const {\n      nova_group,\n      nova_classification,\n      food_quality_score,\n      research_quality_score,\n      health_verdict,\n      addiction_analysis,\n      recommendations\n    } = analysis;\n    const novaGroup = nova_group || 4;\n    const guidance = this.getNovaGuidance(novaGroup);\n    return {\n      isHealthy: novaGroup <= 2 && (food_quality_score || 0) >= 60,\n      novaGroup: novaGroup,\n      healthScore: food_quality_score || 0,\n      researchQuality: research_quality_score || 0,\n      verdict: health_verdict || 'Unknown',\n      addictionScore: (addiction_analysis === null || addiction_analysis === void 0 ? void 0 : addiction_analysis.addiction_score) || 0,\n      recommendations: recommendations || [],\n      warnings: (addiction_analysis === null || addiction_analysis === void 0 ? void 0 : addiction_analysis.addictive_components) || [],\n      familySafe: (food_quality_score || 0) >= 60,\n      colorCode: guidance.color,\n      rawResponse: result\n    };\n  }\n\n  /**\r\n   * Format Enhanced Model response for display in the UI\r\n   */\n  formatEnhancedResponse(response) {\n    let formatted = `# WiHy Enhanced Health Intelligence\\n\\n`;\n\n    // Main response content\n    formatted += response.answer;\n\n    // Add research citations if available\n    if (response.research_citations && response.research_citations.length > 0) {\n      formatted += `\\n\\n## 📚 Research Citations\\n`;\n      response.research_citations.forEach((citation, index) => {\n        formatted += `${index + 1}. ${citation}\\n`;\n      });\n    }\n\n    // Add biblical wisdom if available\n    if (response.wihy_wisdom && response.wihy_wisdom.length > 0) {\n      formatted += `\\n\\n## ✝️ Biblical Wisdom\\n`;\n      response.wihy_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n\n    // Add enhanced model info\n    formatted += `\\n\\n---\\n\\n`;\n    formatted += `*Enhanced Model Response (${response.training_examples_used} training examples)*\\n`;\n    formatted += `*Confidence Score: ${Math.round(response.confidence_score * 100)}%*\\n`;\n    formatted += `*Model Version: ${response.model_version}*`;\n    return formatted;\n  }\n\n  /**\r\n   * Format Image Scanner response for display\r\n   */\n  formatImageScanResponse(response) {\n    let formatted = `# 📷 WiHy Image Analysis Results\\n\\n`;\n    if (response.success && response.overall_assessment) {\n      var _response$nova_chart_;\n      const {\n        health_score,\n        verdict,\n        nova_group\n      } = response.overall_assessment;\n      const guidance = (_response$nova_chart_ = response.nova_chart_reference) === null || _response$nova_chart_ === void 0 ? void 0 : _response$nova_chart_.client_guidance;\n      formatted += `## Health Assessment\\n`;\n      formatted += `**Health Score:** ${health_score}/100\\n`;\n      formatted += `**Verdict:** ${verdict}\\n`;\n      formatted += `**NOVA Group:** ${nova_group} (${this.getNovaLabel(nova_group)})\\n`;\n      if (guidance) {\n        formatted += `**Recommendation:** ${guidance.action} - ${guidance.message}\\n\\n`;\n      }\n\n      // Detected foods\n      if (response.detected_foods && response.detected_foods.length > 0) {\n        formatted += `## 🍽️ Detected Foods\\n`;\n        response.detected_foods.forEach(food => {\n          formatted += `- **${food.name}** (Confidence: ${Math.round(food.confidence * 100)}%, NOVA: ${food.nova_group})\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // WIHY recommendations\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\n        formatted += `## 💡 WIHY Recommendations\\n`;\n        response.wihy_recommendations.forEach(rec => {\n          formatted += `- ${rec}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Health warnings\n      if (response.carcinogen_warnings && response.carcinogen_warnings.length > 0) {\n        formatted += `## ⚠️ Health Warnings\\n`;\n        response.carcinogen_warnings.forEach(warning => {\n          formatted += `- ${warning}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Family safety\n      if (response.family_safety) {\n        formatted += `## 👨‍👩‍👧‍👦 Family Safety\\n`;\n        formatted += `**Status:** ${response.family_safety.family_safe ? '✅ Safe' : '❌ Not Recommended'}\\n`;\n        formatted += `**Verdict:** ${response.family_safety.family_verdict}\\n\\n`;\n      }\n    } else {\n      formatted += `Analysis failed. Please try again or choose whole foods when in doubt.\\n\\n`;\n    }\n\n    // Data sources\n    if (response.data_sources && response.data_sources.length > 0) {\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\n    }\n    return formatted;\n  }\n\n  /**\r\n   * Format Barcode Scanner response for display\r\n   */\n  formatBarcodeScanResponse(response) {\n    let formatted = `# 🔍 WiHy Barcode Analysis\\n\\n`;\n    if (response.success) {\n      formatted += `## Product Information\\n`;\n      formatted += `**Product:** ${response.product_name}\\n`;\n      formatted += `**Health Score:** ${response.health_score}/100\\n`;\n      formatted += `**NOVA Group:** ${response.nova_group} (${this.getNovaLabel(response.nova_group)})\\n\\n`;\n\n      // Nutritional data\n      if (response.nutritional_data) {\n        const nutrition = response.nutritional_data;\n        formatted += `## 📊 Nutrition Facts (per 100g)\\n`;\n        formatted += `- **Calories:** ${nutrition.calories_per_100g}\\n`;\n        formatted += `- **Protein:** ${nutrition.protein_g}g\\n`;\n        formatted += `- **Carbohydrates:** ${nutrition.carbs_g}g\\n`;\n        formatted += `- **Fat:** ${nutrition.fat_g}g\\n`;\n        formatted += `- **Fiber:** ${nutrition.fiber_g}g\\n`;\n        formatted += `- **Sodium:** ${nutrition.sodium_mg}mg\\n\\n`;\n      }\n\n      // Health analysis\n      if (response.health_analysis) {\n        const analysis = response.health_analysis;\n        formatted += `## 🔬 Health Analysis\\n`;\n        formatted += `**Processing Level:** ${analysis.processing_level}\\n`;\n        if (analysis.carcinogen_alerts && analysis.carcinogen_alerts.length > 0) {\n          formatted += `**⚠️ Carcinogen Alerts:**\\n`;\n          analysis.carcinogen_alerts.forEach(alert => {\n            formatted += `- ${alert}\\n`;\n          });\n        }\n        if (analysis.toxic_additives && analysis.toxic_additives.length > 0) {\n          formatted += `**🧪 Toxic Additives:**\\n`;\n          analysis.toxic_additives.forEach(additive => {\n            formatted += `- ${additive}\\n`;\n          });\n        }\n        formatted += '\\n';\n      }\n\n      // WIHY recommendations\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\n        formatted += `## 💡 WIHY Recommendations\\n`;\n        response.wihy_recommendations.forEach(rec => {\n          formatted += `- ${rec}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Ingredients\n      if (response.ingredients && response.ingredients.length > 0) {\n        formatted += `## 🧾 Ingredients\\n`;\n        formatted += response.ingredients.join(', ') + '\\n\\n';\n      }\n    } else {\n      formatted += `Product not found or analysis failed. Choose foods with 5 or fewer ingredients when in doubt.\\n\\n`;\n    }\n\n    // Data sources\n    if (response.data_sources && response.data_sources.length > 0) {\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\n    }\n    return formatted;\n  }\n\n  /**\r\n   * Get NOVA group label\r\n   */\n  getNovaLabel(novaGroup) {\n    const labels = {\n      1: 'Natural/Unprocessed',\n      2: 'Processed Culinary Ingredients',\n      3: 'Processed Foods',\n      4: 'Ultra-Processed Foods'\n    };\n    return labels[novaGroup] || 'Unknown';\n  }\n\n  /**\r\n   * Format WiHy Response in user-friendly format for display\r\n   */\n  formatWihyResponse(response) {\n    var _wihy_response$resear, _wihy_response$biblic;\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\n      const healthResp = response;\n      const data = healthResp.data;\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\n\n      // Main response content\n      formatted += data.response;\n\n      // Add health insights if available\n      if (data.health_insights) {\n        var _data$health_insights, _data$health_insights2, _data$health_insights3;\n        if ((_data$health_insights = data.health_insights.key_benefits) !== null && _data$health_insights !== void 0 && _data$health_insights.length) {\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\n          data.health_insights.key_benefits.forEach(benefit => {\n            formatted += `- ${benefit}\\n`;\n          });\n        }\n        if ((_data$health_insights2 = data.health_insights.potential_risks) !== null && _data$health_insights2 !== void 0 && _data$health_insights2.length) {\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\n          data.health_insights.potential_risks.forEach(risk => {\n            formatted += `- ${risk}\\n`;\n          });\n        }\n        if ((_data$health_insights3 = data.health_insights.recommendations) !== null && _data$health_insights3 !== void 0 && _data$health_insights3.length) {\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\n          data.health_insights.recommendations.forEach(rec => {\n            formatted += `- ${rec}\\n`;\n          });\n        }\n      }\n\n      // Add processing info\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\n      return formatted;\n    }\n\n    // Handle UnifiedResponse format (legacy API)\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\n      var _unifiedResp$data$ai_;\n      const unifiedResp = response;\n      let formatted = `# WiHy Health Assistant\\n\\n`;\n\n      // Use the ai_response.response field which contains the actual response\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\n        formatted += unifiedResp.data.ai_response.response;\n      } else {\n        // Fallback to showing raw data if ai_response is not available\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\n      }\n\n      // Add service information if available\n      if ((_unifiedResp$data$ai_ = unifiedResp.data.ai_response) !== null && _unifiedResp$data$ai_ !== void 0 && _unifiedResp$data$ai_.service) {\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\n        if (unifiedResp.data.ai_response.confidence) {\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\n        }\n      }\n      return formatted;\n    }\n\n    // Handle legacy WihyResponse format\n    const legacyResp = response;\n    const {\n      wihy_response\n    } = legacyResp;\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\n\n    // Personalized Analysis\n    if (wihy_response.personalized_analysis) {\n      var _wihy_response$person, _wihy_response$person2, _wihy_response$person3;\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\n\n      // Risk Factors\n      if (((_wihy_response$person = wihy_response.personalized_analysis.identified_risk_factors) === null || _wihy_response$person === void 0 ? void 0 : _wihy_response$person.length) > 0) {\n        formatted += `### Identified Risk Factors:\\n`;\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\n        });\n      }\n\n      // Priority Goals\n      if (((_wihy_response$person2 = wihy_response.personalized_analysis.priority_health_goals) === null || _wihy_response$person2 === void 0 ? void 0 : _wihy_response$person2.length) > 0) {\n        formatted += `### 🎯 Priority Health Goals:\\n`;\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\n          formatted += `- ${goal}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Action Items\n      if (((_wihy_response$person3 = wihy_response.personalized_analysis.action_items) === null || _wihy_response$person3 === void 0 ? void 0 : _wihy_response$person3.length) > 0) {\n        formatted += `### 📋 Action Items:\\n`;\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\n          formatted += `- **Priority:** ${action.priority}\\n`;\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\n        });\n      }\n\n      // Timeline\n      if (wihy_response.personalized_analysis.timeline) {\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\n      }\n    }\n\n    // Research Foundation\n    if (((_wihy_response$resear = wihy_response.research_foundation) === null || _wihy_response$resear === void 0 ? void 0 : _wihy_response$resear.length) > 0) {\n      formatted += `## 📚 Research Foundation\\n\\n`;\n      wihy_response.research_foundation.forEach(research => {\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\n        formatted += `  ${research.key_finding}\\n\\n`;\n      });\n    }\n\n    // Progress Tracking\n    if (wihy_response.progress_tracking) {\n      formatted += `## 📊 Progress Tracking\\n\\n`;\n      formatted += `**Key Metrics to Track:**\\n`;\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\n        formatted += `- ${metric}\\n`;\n      });\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\n    }\n\n    // Biblical Wisdom\n    if (((_wihy_response$biblic = wihy_response.biblical_wisdom) === null || _wihy_response$biblic === void 0 ? void 0 : _wihy_response$biblic.length) > 0) {\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\n      wihy_response.biblical_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n\n    // Add timestamp if available (different field names in different response formats)\n    const timestamp = response.timestamp || response.created_at || new Date().toISOString();\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\n    return formatted;\n  }\n\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\n  extractRecommendations(response) {\n    const recommendations = [];\n\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\n      const healthResp = response;\n      if (healthResp.data.health_insights.recommendations) {\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\n      }\n      return recommendations;\n    }\n    if (isUnifiedResponse(response)) {\n      // Handle new structured recommendations\n      if (response.data.recommendations) {\n        const recs = response.data.recommendations;\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\n      }\n      // Handle legacy recommendations\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\n        response.data.legacy_recommendations.forEach(r => recommendations.push(r));\n      }\n    } else {\n      var _legacyResp$wihy_resp;\n      // Handle legacy WihyResponse format\n      const legacyResp = response;\n      if ((_legacyResp$wihy_resp = legacyResp.wihy_response.personalized_analysis) !== null && _legacyResp$wihy_resp !== void 0 && _legacyResp$wihy_resp.action_items) {\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\n          recommendations.push(`${action.action} (${action.priority} priority)`);\n        });\n      }\n    }\n    return recommendations;\n  }\n\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\n  extractCitations(response) {\n    const citations = [];\n\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\n      // For now, the new API doesn't include specific citation fields in the schema\n      // We could parse citations from the response text if needed\n      return citations;\n    }\n    if (isUnifiedResponse(response)) {\n      // Unified API may include sources array\n      if (response.data.sources && response.data.sources.length > 0) {\n        response.data.sources.forEach(s => citations.push(s));\n      }\n    } else {\n      // Handle legacy WihyResponse format\n      const legacyResp = response;\n      if (legacyResp.wihy_response.research_foundation) {\n        legacyResp.wihy_response.research_foundation.forEach(research => {\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\n        });\n      }\n    }\n    return citations;\n  }\n\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\n  formatUnifiedResponseForChat(response) {\n    // Handle chat service responses\n    if (response.service_used === 'chat' && response.data.response) {\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n      // We should provide more helpful information to the user\n      const briefResponse = response.data.response;\n      if (briefResponse.includes('AI Chat response to:')) {\n        // The API gave us a placeholder response, provide something more useful\n        const query = response.data.query || 'your question';\n        return `I received your question about \"${query}\" and I'm here to help! \n\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\n\n• Understanding health and nutrition concepts\n• Providing general wellness guidance  \n• Explaining health data and metrics\n• Offering evidence-based health insights\n\nWhat specific aspect of health would you like to explore further?`;\n      }\n      return briefResponse;\n    }\n\n    // Handle other response types\n    if (response.data.response) {\n      return response.data.response;\n    }\n    if (response.data.analysis) {\n      return response.data.analysis;\n    }\n    if (response.data.training_status) {\n      let message = `🔄 ${response.data.training_status}`;\n      if (response.data.available_models && response.data.available_models.length > 0) {\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\n      }\n      return message;\n    }\n\n    // Fallback - show the raw data in a readable format\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\n  }\n}\n\n// Export a singleton instance of the enhanced API service\nexport const wihyAPI = new WihyEnhancedAPIService();\nexport default wihyAPI;","map":{"version":3,"names":["API_CONFIG","getApiEndpoint","logger","isUnifiedResponse","obj","WihyEnhancedAPIService","constructor","baseURL","isLocalDevelopment","WIHY_API_URL","includes","askEnhancedHealthQuestion","request","apiRequest","endpoint","controller","AbortController","timeoutId","setTimeout","abort","response","fetchWithRetry","method","headers","body","JSON","stringify","signal","clearTimeout","ok","Error","status","data","json","apiResponse","error","handleEnhancedError","scanFoodImage","imageFile","context","formData","FormData","append","handleScannerError","scanBarcode","barcode","requestBody","query","user_context","scan_location","device_type","user_type","processBarcodeScanResponse","result","analysis","nova_group","nova_classification","food_quality_score","research_quality_score","health_verdict","addiction_analysis","ingredient_analysis","success","health_score","product_name","ingredients","nutritional_data","calories_per_100g","protein_g","carbs_g","fat_g","fiber_g","sodium_mg","health_analysis","carcinogen_alerts","addictive_components","toxic_additives","processing_level","wihy_recommendations","recommendations","data_sources","research_citations","checkAPIHealth","fetch","WIHY_HEALTH_CHECK_URL","url","options","retries","lastError","attempt","warn","Promise","resolve","Math","pow","name","message","scanType","toUpperCase","toLowerCase","askAnything","enhancedRequest","user_id","undefined","enhancedResponse","convertEnhancedToLegacy","originalQuery","timestamp","Date","toISOString","response_type","wihy_response","query_type","core_principle","answer","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","wihy_wisdom","map","wisdom","index","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","convertToLegacyFormat","unifiedResponse","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","request_type","immediate_actions","rec","legacy_recommendations","sources","source","getHealthNews","categories","limit","length","join","searchNutrition","foodQuery","userContext","scanFood","file","scanOptions","convertImageScanToLegacy","convertBarcodeScanToLegacy","_response$overall_ass","_response$data_source","warnings","carcinogen_warnings","overall_assessment","verdict","warning","risk_factor","associated_illnesses","prevalence_rate","preventability_score","formatImageScanResponse","_response$health_anal","_response$health_anal2","_response$data_source2","formatBarcodeScanResponse","fileToBase64","reject","reader","FileReader","readAsDataURL","onload","base64","split","onerror","searchHealth","_Error$stack","callId","random","toString","substr","info","stack","slice","line","trim","responseType","duration","now","getTime","getNovaGuidance","novaGroup","guidance","color","processWihyResponse","isHealthy","healthScore","researchQuality","addictionScore","addiction_score","familySafe","colorCode","rawResponse","formatEnhancedResponse","formatted","forEach","training_examples_used","round","confidence_score","model_version","_response$nova_chart_","nova_chart_reference","client_guidance","getNovaLabel","detected_foods","food","confidence","family_safety","family_safe","family_verdict","nutrition","alert","additive","labels","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","healthResp","health_insights","_data$health_insights","_data$health_insights2","_data$health_insights3","key_benefits","benefit","potential_risks","risk","processor_used","processing_time","toFixed","_unifiedResp$data$ai_","unifiedResp","ai_response","service","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","replace","goal","research","metric","created_at","toLocaleString","extractRecommendations","r","push","recs","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_legacyResp$wihy_resp","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","training_status","available_models","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// ==================== WIHY API CORRECT INTERFACES ====================\r\n\r\n// Chart Data Structures based on documentation\r\nexport interface ChartDataPoint {\r\n  label?: string;\r\n  value?: number;\r\n  percentage?: number;\r\n  color: string;\r\n  category?: string;\r\n  source?: string;\r\n  grain?: string;\r\n  ingredient?: string;\r\n  food_group?: string;\r\n  score?: number;\r\n  impact_score?: number;\r\n  servings?: string;\r\n}\r\n\r\nexport interface PieChartData {\r\n  type: 'pie_chart' | 'donut_chart';\r\n  title: string;\r\n  data: ChartDataPoint[];\r\n}\r\n\r\nexport interface RadarChartData {\r\n  type: 'radar_chart';\r\n  title: string;\r\n  data: {\r\n    categories: string[];\r\n    values: number[];\r\n    max_value: number;\r\n  };\r\n}\r\n\r\nexport interface BarChartData {\r\n  type: 'bar_chart' | 'horizontal_bar_chart';\r\n  title: string;\r\n  data: ChartDataPoint[];\r\n  scale?: string;\r\n}\r\n\r\nexport interface LineChartData {\r\n  type: 'line_chart';\r\n  title: string;\r\n  data: {\r\n    x_axis: string[];\r\n    systolic?: number[];\r\n    diastolic?: number[];\r\n    target_systolic?: number;\r\n    target_diastolic?: number;\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\nexport interface GaugeChartData {\r\n  type: 'gauge_chart';\r\n  title: string;\r\n  data: {\r\n    current_value: number;\r\n    recommended_max: number;\r\n    units: string;\r\n    warning_threshold: number;\r\n    danger_threshold: number;\r\n    colors: {\r\n      safe: string;\r\n      warning: string;\r\n      danger: string;\r\n    };\r\n  };\r\n}\r\n\r\n// NOVA Classification\r\nexport interface NovaClassification {\r\n  group: number;\r\n  description: string;\r\n  explanation: string;\r\n}\r\n\r\n// Ask Endpoint Interfaces\r\nexport interface NutritionalProfile {\r\n  protein: string;\r\n  fiber: string;\r\n  carbohydrates: string;\r\n  fat: string;\r\n  micronutrients: string[];\r\n}\r\n\r\nexport interface AskDetailedAnalysis {\r\n  nova_classification: NovaClassification;\r\n  nutritional_profile?: NutritionalProfile;\r\n  health_benefits?: string[];\r\n  considerations?: string[];\r\n}\r\n\r\nexport interface AskResponse {\r\n  summary: string;\r\n  detailed_analysis: AskDetailedAnalysis;\r\n  recommendations: string[];\r\n  charts: {\r\n    nutritional_breakdown?: PieChartData;\r\n    health_score_radar?: RadarChartData;\r\n    comparison_bar?: BarChartData;\r\n    [key: string]: any;\r\n  };\r\n  confidence_score: number;\r\n}\r\n\r\n// Scan Endpoint Interfaces\r\nexport interface IngredientAnalysis {\r\n  ingredient: string;\r\n  amount: string;\r\n  health_impact: string;\r\n  concerns: string[];\r\n}\r\n\r\nexport interface NutritionalConcerns {\r\n  sugar_content: string;\r\n  empty_calories: string;\r\n  sodium: string;\r\n}\r\n\r\nexport interface ScanMetadata {\r\n  barcode?: string;\r\n  product_name?: string;\r\n  brand?: string;\r\n  categories?: string[];\r\n  data_source?: string;\r\n  last_updated?: string;\r\n}\r\n\r\nexport interface ScanDetailedAnalysis {\r\n  nova_classification: NovaClassification;\r\n  ingredients_analysis?: IngredientAnalysis[];\r\n  nutritional_concerns?: NutritionalConcerns;\r\n  health_risks?: string[];\r\n  scan_metadata?: ScanMetadata;\r\n}\r\n\r\nexport interface ScanResponse {\r\n  summary: string;\r\n  detailed_analysis: ScanDetailedAnalysis;\r\n  recommendations: string[];\r\n  charts: {\r\n    ingredient_health_impact?: BarChartData;\r\n    nova_classification_breakdown?: PieChartData;\r\n    daily_intake_warning?: GaugeChartData;\r\n    [key: string]: any;\r\n  };\r\n  confidence_score: number;\r\n}\r\n\r\n// Chat Endpoint Interfaces\r\nexport interface FoodCategory {\r\n  category: string;\r\n  examples: string[];\r\n  benefit?: string;\r\n  reason?: string;\r\n}\r\n\r\nexport interface ConversationMetadata {\r\n  conversation_id?: string;\r\n  message_id?: string;\r\n  user_context?: {\r\n    health_condition?: string;\r\n    dietary_preferences?: string[];\r\n    previous_topics?: string[];\r\n    [key: string]: any;\r\n  };\r\n  follow_up_questions?: string[];\r\n}\r\n\r\nexport interface ChatDetailedAnalysis {\r\n  dietary_approach?: string;\r\n  foods_to_include?: FoodCategory[];\r\n  foods_to_avoid?: FoodCategory[];\r\n  lifestyle_factors?: string[];\r\n}\r\n\r\nexport interface ChatResponse {\r\n  summary: string;\r\n  detailed_analysis: ChatDetailedAnalysis;\r\n  recommendations: string[];\r\n  charts: {\r\n    dash_diet_pyramid?: any;\r\n    blood_pressure_impact?: LineChartData;\r\n    sodium_sources?: PieChartData;\r\n    potassium_vs_sodium?: any;\r\n    [key: string]: any;\r\n  };\r\n  conversation_metadata?: ConversationMetadata;\r\n  confidence_score: number;\r\n}\r\n\r\n// Request Interfaces\r\nexport interface WiHyAskRequest {\r\n  query: string;\r\n  user_id?: string;\r\n  context?: string;\r\n}\r\n\r\nexport interface WiHyScanRequest {\r\n  barcode?: string;\r\n  image?: string;\r\n  product_name?: string;\r\n  user_context?: {\r\n    include_charts?: boolean;\r\n    include_ingredients?: boolean;\r\n    enhanced_analysis?: boolean;\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\nexport interface WiHyChatRequest {\r\n  message: string;\r\n  user_id?: string;\r\n  conversation_id?: string;\r\n  context?: {\r\n    health_condition?: string;\r\n    age?: number;\r\n    dietary_preferences?: string[];\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\n// Main Response Wrapper\r\nexport interface WiHyApiResponse {\r\n  response: AskResponse | ScanResponse | ChatResponse;\r\n  timestamp: string;\r\n  processing_time: number;\r\n}\r\n\r\n// Interface for processed scan results following integration guide\r\ninterface ProcessedScanResult {\r\n  isHealthy: boolean;\r\n  novaGroup: number;\r\n  healthScore: number;\r\n  researchQuality: number;\r\n  verdict: string;\r\n  addictionScore: number;\r\n  recommendations: string[];\r\n  warnings: string[];\r\n  familySafe: boolean;\r\n  colorCode: 'green' | 'yellow' | 'orange' | 'red';\r\n  rawResponse: any;\r\n}\r\n\r\n// Types for the WiHy Enhanced Model API (2,325 training examples)\r\nexport interface EnhancedHealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  context?: string;                       // OPTIONAL: Additional context for the question\r\n  user_id?: string;                       // OPTIONAL: User identifier for personalization\r\n}\r\n\r\n// Enhanced Model Response Structure\r\nexport interface EnhancedHealthResponse {\r\n  question: string;\r\n  answer: string;\r\n  research_citations: string[];\r\n  wihy_wisdom: string[];\r\n  confidence_score: number;\r\n  model_version: string;\r\n  training_examples_used: number;\r\n  timestamp: string;\r\n}\r\n\r\n// Image Scanner Response Structure\r\nexport interface ImageScanResponse {\r\n  success: boolean;\r\n  overall_assessment: {\r\n    health_score: number;\r\n    verdict: string;\r\n    nova_group: number;\r\n  };\r\n  google_vision_analysis: {\r\n    vision_api_success: boolean;\r\n    detected_text: string[];\r\n    labels: string[];\r\n  };\r\n  detected_foods: Array<{\r\n    name: string;\r\n    confidence: number;\r\n    nova_group: number;\r\n  }>;\r\n  nova_chart_reference: {\r\n    client_guidance: {\r\n      color_coding: 'green' | 'yellow' | 'orange' | 'red';\r\n      action: 'CHOOSE' | 'MODERATE' | 'LIMIT' | 'AVOID';\r\n      message: string;\r\n    };\r\n  };\r\n  wihy_recommendations: string[];\r\n  carcinogen_warnings: string[];\r\n  family_safety: {\r\n    family_safe: boolean;\r\n    family_verdict: string;\r\n  };\r\n  data_sources: string[];\r\n}\r\n\r\n// Barcode Scanner Response Structure  \r\nexport interface BarcodeScanResponse {\r\n  success: boolean;\r\n  nova_group: number;\r\n  health_score: number;\r\n  product_name: string;\r\n  ingredients: string[];\r\n  nutritional_data: {\r\n    calories_per_100g: number;\r\n    protein_g: number;\r\n    carbs_g: number;\r\n    fat_g: number;\r\n    fiber_g: number;\r\n    sodium_mg: number;\r\n  };\r\n  health_analysis: {\r\n    carcinogen_alerts: string[];\r\n    toxic_additives: string[];\r\n    processing_level: string;\r\n  };\r\n  wihy_recommendations: string[];\r\n  data_sources: string[];\r\n}\r\n\r\n// Legacy interfaces for backward compatibility\r\nexport interface HealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n  include_nutrition?: boolean;            // OPTIONAL: Include nutrition analysis (default: true)\r\n  include_biblical_wisdom?: boolean;      // OPTIONAL: Include biblical wisdom (default: true)\r\n  include_charts?: boolean;               // OPTIONAL: Include chart data (default: true)\r\n}\r\n\r\n// Chart data structure from OpenAPI spec\r\nexport interface ChartData {\r\n  chart_type: string;\r\n  labels: string[];\r\n  values: number[];\r\n  colors: string[];\r\n  verdict?: string;\r\n  reasons?: string[];\r\n}\r\n\r\nexport interface ChartsData {\r\n  nutrition_breakdown?: ChartData;\r\n  health_quality?: ChartData;\r\n}\r\n\r\nexport interface HealthInsights {\r\n  key_benefits?: string[];\r\n  potential_risks?: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\n// Core response data structure from OpenAPI spec\r\nexport interface ProcessedHealthData {\r\n  query: string;\r\n  timestamp: number;\r\n  processor_used: string;\r\n  processing_time: number;\r\n  response: string;\r\n  nutrition_data: Record<string, any>;\r\n  health_insights: HealthInsights;\r\n  biblical_wisdom: Record<string, any>;\r\n  charts_data: ChartsData;\r\n}\r\n\r\n// Main response structure from OpenAPI spec\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ProcessedHealthData;\r\n}\r\n\r\n// Keep the old interface for backward compatibility\r\nexport interface UnifiedRequest extends HealthQuestion {\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train';\r\n  context?: Record<string, any>;\r\n  user_id?: string;\r\n  session_id?: string;\r\n}\r\n\r\n// Interface for the /scan endpoint\r\nexport interface ScanRequest {\r\n  image_url?: string;                     // OPTIONAL: URL to image\r\n  image_base64?: string;                  // OPTIONAL: Base64 encoded image\r\n  product_name?: string;                  // OPTIONAL: Product name to scan\r\n  barcode?: string;                       // OPTIONAL: Barcode/UPC to scan  \r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyEnhancedAPIService {\r\n  private baseURL: string;\r\n  private isLocalDevelopment: boolean;\r\n\r\n  constructor() {\r\n    this.baseURL = API_CONFIG.WIHY_API_URL;\r\n    this.isLocalDevelopment = this.baseURL.includes('localhost');\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy Enhanced Model a health-related question (2,325 training examples)\r\n   */\r\n  async askEnhancedHealthQuestion(request: EnhancedHealthQuestion): Promise<EnhancedHealthResponse> {\r\n    try {\r\n      logger.apiRequest('Making WiHy Enhanced Model API request', request);\r\n      \r\n      const endpoint = `${this.baseURL}/ask`;\r\n      \r\n      // Use fetch API with timeout and retry logic\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(request),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Enhanced Model API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Enhanced Model API error:', error);\r\n      throw this.handleEnhancedError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan food image using enhanced vision analysis\r\n   */\r\n  async scanFoodImage(imageFile: File, context: string = ''): Promise<ImageScanResponse> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', imageFile);\r\n      formData.append('context', context);\r\n      \r\n      const endpoint = getApiEndpoint('scan');\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for images\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        body: formData,\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Image Scanner response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Image Scanner error:', error);\r\n      throw this.handleScannerError(error, 'image');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using enhanced nutrition database (via /ask endpoint)\r\n   */\r\n  async scanBarcode(barcode: string, context: any = {}): Promise<BarcodeScanResponse> {\r\n    try {\r\n      // Use the /ask endpoint with barcode-specific query format (per integration guide)\r\n      const requestBody = {\r\n        query: `Analyze barcode: ${barcode}`,\r\n        user_context: {\r\n          scan_location: context.scan_location || 'web_app',\r\n          device_type: context.device_type || 'desktop',\r\n          user_type: context.user_type || 'general'\r\n        }\r\n      };\r\n      \r\n      const endpoint = getApiEndpoint('ask'); // Points to /ask endpoint\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Barcode Scanner response received', data);\r\n      \r\n      // Process the response to extract NOVA and health data\r\n      return this.processBarcodeScanResponse(data, barcode);\r\n    } catch (error) {\r\n      logger.error('WiHy Barcode Scanner error:', error);\r\n      throw this.handleScannerError(error, 'barcode');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process barcode scan response to extract NOVA and health data (per integration guide)\r\n   */\r\n  private processBarcodeScanResponse(result: any, barcode: string): BarcodeScanResponse {\r\n    const analysis = result.analysis || result;\r\n    const {\r\n      nova_group,\r\n      nova_classification,\r\n      food_quality_score,\r\n      research_quality_score,\r\n      health_verdict,\r\n      addiction_analysis,\r\n      ingredient_analysis\r\n    } = analysis;\r\n\r\n    return {\r\n      success: true,\r\n      nova_group: nova_group || 4,\r\n      health_score: food_quality_score || 0,\r\n      product_name: analysis.product_name || `Product ${barcode}`,\r\n      ingredients: analysis.ingredients || [],\r\n      nutritional_data: {\r\n        calories_per_100g: analysis.calories_per_100g || 0,\r\n        protein_g: analysis.protein_g || 0,\r\n        carbs_g: analysis.carbs_g || 0,\r\n        fat_g: analysis.fat_g || 0,\r\n        fiber_g: analysis.fiber_g || 0,\r\n        sodium_mg: analysis.sodium_mg || 0,\r\n      },\r\n      health_analysis: {\r\n        carcinogen_alerts: addiction_analysis?.addictive_components || [],\r\n        toxic_additives: analysis.toxic_additives || [],\r\n        processing_level: nova_classification || 'Ultra-processed',\r\n      },\r\n      wihy_recommendations: analysis.recommendations || [],\r\n      data_sources: result.research_citations || ['WiHy Enhanced Database', 'OpenFoodFacts v2']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check API health and get status\r\n   */\r\n  async checkAPIHealth(): Promise<{ status: string; model_version: string; training_examples: number }> {\r\n    try {\r\n      const response = await fetch(WIHY_HEALTH_CHECK_URL, {\r\n        method: 'GET',\r\n        headers: { 'Accept': 'application/json' }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WiHy API health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch with simple retry logic (single endpoint only)\r\n   */\r\n  private async fetchWithRetry(url: string, options: RequestInit, retries: number = 2): Promise<Response> {\r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 0; attempt <= retries; attempt++) {\r\n      try {\r\n        const response = await fetch(url, options);\r\n        return response; // Return response for error handling upstream\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        logger.warn(`Attempt ${attempt + 1} failed for ${this.baseURL}:`, error);\r\n        \r\n        // If this is the last attempt, throw error\r\n        if (attempt === retries) {\r\n          throw lastError;\r\n        }\r\n        \r\n        // Wait before retry (exponential backoff)\r\n        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));\r\n      }\r\n    }\r\n    \r\n    throw lastError!;\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling for API responses\r\n   */\r\n  private handleEnhancedError(error: any): Error {\r\n    if (error instanceof Error) {\r\n      // Check for timeout/abort errors\r\n      if (error.name === 'AbortError') {\r\n        return new Error('TIMEOUT_ERROR: Enhanced model request timed out - services may be under heavy load');\r\n      }\r\n      \r\n      // Check for CORS errors\r\n      if (error.message.includes('CORS') || \r\n          error.message.includes('Access to fetch') ||\r\n          error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n        return new Error('CORS_ERROR: Unable to connect to WiHy Enhanced Model from this domain');\r\n      }\r\n      \r\n      // Check for network/connectivity issues\r\n      if (error.message.includes('fetch') || \r\n          error.message.includes('network') || \r\n          error.name === 'TypeError' ||\r\n          error.message.includes('Failed to fetch')) {\r\n        return new Error('NETWORK_ERROR: Unable to connect to WiHy Enhanced Model services');\r\n      }\r\n      \r\n      // Check for server errors\r\n      if (error.message.includes('HTTP error! status: 5')) {\r\n        return new Error('SERVER_ERROR: WiHy Enhanced Model temporarily unavailable');\r\n      }\r\n      \r\n      return new Error(error.message || 'WiHy Enhanced Model request failed');\r\n    }\r\n    \r\n    return new Error('Unknown error occurred while contacting WiHy Enhanced Model');\r\n  }\r\n\r\n  /**\r\n   * Scanner-specific error handling\r\n   */\r\n  private handleScannerError(error: any, scanType: 'image' | 'barcode'): Error {\r\n    const context = scanType === 'image' ? 'Image Scanner' : 'Barcode Scanner';\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.name === 'AbortError') {\r\n        return new Error(`TIMEOUT_ERROR: ${context} request timed out`);\r\n      }\r\n      \r\n      if (error.message.includes('HTTP error! status: 400')) {\r\n        return new Error(`VALIDATION_ERROR: Invalid ${scanType} format or data`);\r\n      }\r\n      \r\n      if (error.message.includes('HTTP error! status: 404')) {\r\n        return new Error(`NOT_FOUND: ${scanType === 'barcode' ? 'Product not found in nutrition databases' : 'Unable to analyze image'}`);\r\n      }\r\n      \r\n      return new Error(`${context.toUpperCase()}_ERROR: ${error.message}`);\r\n    }\r\n    \r\n    return new Error(`Unknown ${context.toLowerCase()} error occurred`);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - Ask WiHy a health-related question\r\n   * Now routes to Enhanced Model ONLY (no fallbacks)\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    try {\r\n      // Convert legacy request to enhanced format\r\n      const enhancedRequest: EnhancedHealthQuestion = {\r\n        query: request.query,\r\n        context: 'user_context' in request ? JSON.stringify(request.user_context) : '',\r\n        user_id: 'user_id' in request ? request.user_id : undefined\r\n      };\r\n      \r\n      // Use enhanced model ONLY\r\n      const enhancedResponse = await this.askEnhancedHealthQuestion(enhancedRequest);\r\n      \r\n      // Convert enhanced response to legacy format for backward compatibility\r\n      return this.convertEnhancedToLegacy(enhancedResponse, request.query);\r\n      \r\n    } catch (error) {\r\n      logger.error('Enhanced WiHy API failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Enhanced Model response to legacy format for backward compatibility\r\n   */\r\n  private convertEnhancedToLegacy(enhancedResponse: EnhancedHealthResponse, originalQuery: string): WihyResponse {\r\n    return {\r\n      success: true,\r\n      timestamp: enhancedResponse.timestamp || new Date().toISOString(),\r\n      response_type: 'enhanced_model',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: 'enhanced_model',\r\n        query: originalQuery,\r\n        core_principle: enhancedResponse.answer,\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [enhancedResponse.answer],\r\n          action_items: enhancedResponse.wihy_wisdom.map((wisdom: string, index: number) => ({\r\n            action: wisdom,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'enhanced_model',\r\n            mechanism: 'biblical_wisdom',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: enhancedResponse.research_citations.map((citation: string) => ({\r\n          citation_text: citation,\r\n          study_type: 'enhanced_model_research',\r\n          key_finding: citation\r\n        })),\r\n        progress_tracking: {\r\n          key_metrics: ['enhanced_health_understanding'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: enhancedResponse.wihy_wisdom\r\n      },\r\n      message: enhancedResponse.answer\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type,\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type,\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Legacy scan food images method - now uses enhanced scanner\r\n   */\r\n  async scanFood(file?: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      if (file) {\r\n        // Use enhanced image scanner\r\n        const enhancedResponse = await this.scanFoodImage(file, scanOptions?.user_context ? JSON.stringify(scanOptions.user_context) : '');\r\n        \r\n        // Convert to legacy format\r\n        return this.convertImageScanToLegacy(enhancedResponse, 'Image scan analysis');\r\n        \r\n      } else if (scanOptions?.barcode) {\r\n        // Use enhanced barcode scanner\r\n        const enhancedResponse = await this.scanBarcode(scanOptions.barcode, scanOptions.user_context);\r\n        \r\n        // Convert to legacy format\r\n        return this.convertBarcodeScanToLegacy(enhancedResponse, `Barcode scan: ${scanOptions.barcode}`);\r\n        \r\n      } else {\r\n        throw new Error('No file or barcode provided for scanning');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('WiHy Scan error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Image Scanner response to legacy format\r\n   */\r\n  private convertImageScanToLegacy(response: ImageScanResponse, query: string): WihyResponse {\r\n    const recommendations = response.wihy_recommendations || [];\r\n    const warnings = response.carcinogen_warnings || [];\r\n    \r\n    return {\r\n      success: response.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: 'image_scan',\r\n      query: query,\r\n      wihy_response: {\r\n        query_type: 'image_scan',\r\n        query: query,\r\n        core_principle: response.overall_assessment?.verdict || 'Image analysis complete',\r\n        personalized_analysis: {\r\n          identified_risk_factors: warnings.map(warning => ({\r\n            risk_factor: warning,\r\n            associated_illnesses: 'various',\r\n            prevalence_rate: 0,\r\n            preventability_score: 100\r\n          })),\r\n          priority_health_goals: recommendations,\r\n          action_items: recommendations.map(rec => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'image_analysis',\r\n            mechanism: 'food_choice',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: response.data_sources?.map(source => ({\r\n          citation_text: source,\r\n          study_type: 'database',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['food_quality_awareness'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: ['Choose foods that nourish your temple - 1 Corinthians 6:19']\r\n      },\r\n      message: this.formatImageScanResponse(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert Barcode Scanner response to legacy format\r\n   */\r\n  private convertBarcodeScanToLegacy(response: BarcodeScanResponse, query: string): WihyResponse {\r\n    const recommendations = response.wihy_recommendations || [];\r\n    const warnings = [...(response.health_analysis?.carcinogen_alerts || []), ...(response.health_analysis?.toxic_additives || [])];\r\n    \r\n    return {\r\n      success: response.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: 'barcode_scan',\r\n      query: query,\r\n      wihy_response: {\r\n        query_type: 'barcode_scan',\r\n        query: query,\r\n        core_principle: `Product Analysis: ${response.product_name}`,\r\n        personalized_analysis: {\r\n          identified_risk_factors: warnings.map(warning => ({\r\n            risk_factor: warning,\r\n            associated_illnesses: 'various',\r\n            prevalence_rate: 0,\r\n            preventability_score: 100\r\n          })),\r\n          priority_health_goals: recommendations,\r\n          action_items: recommendations.map(rec => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'product_analysis',\r\n            mechanism: 'ingredient_awareness',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: response.data_sources?.map(source => ({\r\n          citation_text: source,\r\n          study_type: 'nutrition_database',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['product_awareness', 'nova_understanding'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: ['Real food doesn\\'t need complicated analysis - choose whole foods']\r\n      },\r\n      message: this.formatBarcodeScanResponse(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert File to base64 string\r\n   */\r\n  private fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        // Remove the data:image/jpeg;base64, prefix\r\n        const base64 = result.split(',')[1];\r\n        resolve(base64);\r\n      };\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API (single call only)\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const timestamp = new Date().toISOString();\r\n    const callId = Math.random().toString(36).substr(2, 9);\r\n    \r\n    logger.info(`🔍 [${callId}] WiHy searchHealth called at ${timestamp}`, { \r\n      query, \r\n      userContext,\r\n      stack: new Error().stack?.split('\\n').slice(1, 4).map(line => line.trim())\r\n    });\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    \r\n    logger.info(`✅ [${callId}] WiHy searchHealth completed at ${new Date().toISOString()}`, { \r\n      query, \r\n      responseType: response.constructor.name,\r\n      success: (response as any).success,\r\n      duration: `${Date.now() - new Date(timestamp).getTime()}ms`\r\n    });\r\n    \r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Get NOVA classification guidance (per integration guide)\r\n   */\r\n  getNovaGuidance(novaGroup: number): { action: string; color: string; message: string } {\r\n    const guidance = {\r\n      1: { action: 'CHOOSE', color: 'green', message: 'Real food as God intended' },\r\n      2: { action: 'MODERATE', color: 'yellow', message: 'Use sparingly' },\r\n      3: { action: 'LIMIT', color: 'orange', message: 'Find alternatives' },\r\n      4: { action: 'AVOID', color: 'red', message: 'Your family deserves better' }\r\n    };\r\n    \r\n    return guidance[novaGroup as keyof typeof guidance] || guidance[4];\r\n  }\r\n\r\n  /**\r\n   * Process WiHy response following integration guide patterns\r\n   */\r\n  processWihyResponse(result: any): ProcessedScanResult {\r\n    const analysis = result.analysis || result;\r\n    const {\r\n      nova_group,\r\n      nova_classification,\r\n      food_quality_score,\r\n      research_quality_score,\r\n      health_verdict,\r\n      addiction_analysis,\r\n      recommendations\r\n    } = analysis;\r\n\r\n    const novaGroup = nova_group || 4;\r\n    const guidance = this.getNovaGuidance(novaGroup);\r\n\r\n    return {\r\n      isHealthy: novaGroup <= 2 && (food_quality_score || 0) >= 60,\r\n      novaGroup: novaGroup,\r\n      healthScore: food_quality_score || 0,\r\n      researchQuality: research_quality_score || 0,\r\n      verdict: health_verdict || 'Unknown',\r\n      addictionScore: addiction_analysis?.addiction_score || 0,\r\n      recommendations: recommendations || [],\r\n      warnings: addiction_analysis?.addictive_components || [],\r\n      familySafe: (food_quality_score || 0) >= 60,\r\n      colorCode: guidance.color as 'green' | 'yellow' | 'orange' | 'red',\r\n      rawResponse: result\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format Enhanced Model response for display in the UI\r\n   */\r\n  formatEnhancedResponse(response: EnhancedHealthResponse): string {\r\n    let formatted = `# WiHy Enhanced Health Intelligence\\n\\n`;\r\n    \r\n    // Main response content\r\n    formatted += response.answer;\r\n    \r\n    // Add research citations if available\r\n    if (response.research_citations && response.research_citations.length > 0) {\r\n      formatted += `\\n\\n## 📚 Research Citations\\n`;\r\n      response.research_citations.forEach((citation, index) => {\r\n        formatted += `${index + 1}. ${citation}\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add biblical wisdom if available\r\n    if (response.wihy_wisdom && response.wihy_wisdom.length > 0) {\r\n      formatted += `\\n\\n## ✝️ Biblical Wisdom\\n`;\r\n      response.wihy_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add enhanced model info\r\n    formatted += `\\n\\n---\\n\\n`;\r\n    formatted += `*Enhanced Model Response (${response.training_examples_used} training examples)*\\n`;\r\n    formatted += `*Confidence Score: ${Math.round(response.confidence_score * 100)}%*\\n`;\r\n    formatted += `*Model Version: ${response.model_version}*`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format Image Scanner response for display\r\n   */\r\n  formatImageScanResponse(response: ImageScanResponse): string {\r\n    let formatted = `# 📷 WiHy Image Analysis Results\\n\\n`;\r\n    \r\n    if (response.success && response.overall_assessment) {\r\n      const { health_score, verdict, nova_group } = response.overall_assessment;\r\n      const guidance = response.nova_chart_reference?.client_guidance;\r\n      \r\n      formatted += `## Health Assessment\\n`;\r\n      formatted += `**Health Score:** ${health_score}/100\\n`;\r\n      formatted += `**Verdict:** ${verdict}\\n`;\r\n      formatted += `**NOVA Group:** ${nova_group} (${this.getNovaLabel(nova_group)})\\n`;\r\n      \r\n      if (guidance) {\r\n        formatted += `**Recommendation:** ${guidance.action} - ${guidance.message}\\n\\n`;\r\n      }\r\n      \r\n      // Detected foods\r\n      if (response.detected_foods && response.detected_foods.length > 0) {\r\n        formatted += `## 🍽️ Detected Foods\\n`;\r\n        response.detected_foods.forEach(food => {\r\n          formatted += `- **${food.name}** (Confidence: ${Math.round(food.confidence * 100)}%, NOVA: ${food.nova_group})\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // WIHY recommendations\r\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\r\n        formatted += `## 💡 WIHY Recommendations\\n`;\r\n        response.wihy_recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Health warnings\r\n      if (response.carcinogen_warnings && response.carcinogen_warnings.length > 0) {\r\n        formatted += `## ⚠️ Health Warnings\\n`;\r\n        response.carcinogen_warnings.forEach(warning => {\r\n          formatted += `- ${warning}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Family safety\r\n      if (response.family_safety) {\r\n        formatted += `## 👨‍👩‍👧‍👦 Family Safety\\n`;\r\n        formatted += `**Status:** ${response.family_safety.family_safe ? '✅ Safe' : '❌ Not Recommended'}\\n`;\r\n        formatted += `**Verdict:** ${response.family_safety.family_verdict}\\n\\n`;\r\n      }\r\n      \r\n    } else {\r\n      formatted += `Analysis failed. Please try again or choose whole foods when in doubt.\\n\\n`;\r\n    }\r\n    \r\n    // Data sources\r\n    if (response.data_sources && response.data_sources.length > 0) {\r\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\r\n    }\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format Barcode Scanner response for display\r\n   */\r\n  formatBarcodeScanResponse(response: BarcodeScanResponse): string {\r\n    let formatted = `# 🔍 WiHy Barcode Analysis\\n\\n`;\r\n    \r\n    if (response.success) {\r\n      formatted += `## Product Information\\n`;\r\n      formatted += `**Product:** ${response.product_name}\\n`;\r\n      formatted += `**Health Score:** ${response.health_score}/100\\n`;\r\n      formatted += `**NOVA Group:** ${response.nova_group} (${this.getNovaLabel(response.nova_group)})\\n\\n`;\r\n      \r\n      // Nutritional data\r\n      if (response.nutritional_data) {\r\n        const nutrition = response.nutritional_data;\r\n        formatted += `## 📊 Nutrition Facts (per 100g)\\n`;\r\n        formatted += `- **Calories:** ${nutrition.calories_per_100g}\\n`;\r\n        formatted += `- **Protein:** ${nutrition.protein_g}g\\n`;\r\n        formatted += `- **Carbohydrates:** ${nutrition.carbs_g}g\\n`;\r\n        formatted += `- **Fat:** ${nutrition.fat_g}g\\n`;\r\n        formatted += `- **Fiber:** ${nutrition.fiber_g}g\\n`;\r\n        formatted += `- **Sodium:** ${nutrition.sodium_mg}mg\\n\\n`;\r\n      }\r\n      \r\n      // Health analysis\r\n      if (response.health_analysis) {\r\n        const analysis = response.health_analysis;\r\n        formatted += `## 🔬 Health Analysis\\n`;\r\n        formatted += `**Processing Level:** ${analysis.processing_level}\\n`;\r\n        \r\n        if (analysis.carcinogen_alerts && analysis.carcinogen_alerts.length > 0) {\r\n          formatted += `**⚠️ Carcinogen Alerts:**\\n`;\r\n          analysis.carcinogen_alerts.forEach(alert => {\r\n            formatted += `- ${alert}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (analysis.toxic_additives && analysis.toxic_additives.length > 0) {\r\n          formatted += `**🧪 Toxic Additives:**\\n`;\r\n          analysis.toxic_additives.forEach(additive => {\r\n            formatted += `- ${additive}\\n`;\r\n          });\r\n        }\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // WIHY recommendations\r\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\r\n        formatted += `## 💡 WIHY Recommendations\\n`;\r\n        response.wihy_recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Ingredients\r\n      if (response.ingredients && response.ingredients.length > 0) {\r\n        formatted += `## 🧾 Ingredients\\n`;\r\n        formatted += response.ingredients.join(', ') + '\\n\\n';\r\n      }\r\n      \r\n    } else {\r\n      formatted += `Product not found or analysis failed. Choose foods with 5 or fewer ingredients when in doubt.\\n\\n`;\r\n    }\r\n    \r\n    // Data sources\r\n    if (response.data_sources && response.data_sources.length > 0) {\r\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\r\n    }\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group label\r\n   */\r\n  private getNovaLabel(novaGroup: number): string {\r\n    const labels = {\r\n      1: 'Natural/Unprocessed',\r\n      2: 'Processed Culinary Ingredients', \r\n      3: 'Processed Foods',\r\n      4: 'Ultra-Processed Foods'\r\n    };\r\n    return labels[novaGroup as keyof typeof labels] || 'Unknown';\r\n  }\r\n\r\n  /**\r\n   * Format WiHy Response in user-friendly format for display\r\n   */\r\n  formatWihyResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const data = healthResp.data;\r\n      \r\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n      \r\n      // Main response content\r\n      formatted += data.response;\r\n      \r\n      // Add health insights if available\r\n      if (data.health_insights) {\r\n        if (data.health_insights.key_benefits?.length) {\r\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n          data.health_insights.key_benefits.forEach(benefit => {\r\n            formatted += `- ${benefit}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.potential_risks?.length) {\r\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n          data.health_insights.potential_risks.forEach(risk => {\r\n            formatted += `- ${risk}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.recommendations?.length) {\r\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n          data.health_insights.recommendations.forEach(rec => {\r\n            formatted += `- ${rec}\\n`;\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Add processing info\r\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle UnifiedResponse format (legacy API)\r\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      // Use the ai_response.response field which contains the actual response\r\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\r\n        formatted += unifiedResp.data.ai_response.response;\r\n      } else {\r\n        // Fallback to showing raw data if ai_response is not available\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      // Add service information if available\r\n      if (unifiedResp.data.ai_response?.service) {\r\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\r\n        if (unifiedResp.data.ai_response.confidence) {\r\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\r\n        }\r\n      }\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add timestamp if available (different field names in different response formats)\r\n    const timestamp = (response as any).timestamp || (response as any).created_at || new Date().toISOString();\r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\r\n      }\r\n      return recommendations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.personalized_analysis?.action_items) {\r\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\r\n      // For now, the new API doesn't include specific citation fields in the schema\r\n      // We could parse citations from the response text if needed\r\n      return citations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.research_foundation) {\r\n        legacyResp.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance of the enhanced API service\r\nexport const wihyAPI = new WihyEnhancedAPIService();\r\nexport default wihyAPI;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,cAAc,QAAQ,qBAAqB;AAChE,SAASC,MAAM,QAAQ,iBAAiB;;AAExC;;AAEA;;AAqEA;;AAOA;;AA6BA;;AA4CA;;AA0CA;;AA+BA;;AAOA;;AAeA;;AAOA;;AAYA;;AAkCA;;AAwBA;;AASA;;AAqBA;;AAaA;;AAQA;;AAQA;;AAkIA;AACA,OAAO,SAASC,iBAAiBA,CAACC,GAAQ,EAA0B;EAClE,OAAOA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAK,MAAM,IAAIA,GAAI,IAAK,cAAc,IAAIA,GAAI;AACrF;;AAEA;;AA0EA,MAAMC,sBAAsB,CAAC;EAI3BC,WAAWA,CAAA,EAAG;IAAA,KAHNC,OAAO;IAAA,KACPC,kBAAkB;IAGxB,IAAI,CAACD,OAAO,GAAGP,UAAU,CAACS,YAAY;IACtC,IAAI,CAACD,kBAAkB,GAAG,IAAI,CAACD,OAAO,CAACG,QAAQ,CAAC,WAAW,CAAC;EAC9D;;EAEA;AACF;AACA;EACE,MAAMC,yBAAyBA,CAACC,OAA+B,EAAmC;IAChG,IAAI;MACFV,MAAM,CAACW,UAAU,CAAC,wCAAwC,EAAED,OAAO,CAAC;MAEpE,MAAME,QAAQ,GAAG,GAAG,IAAI,CAACP,OAAO,MAAM;;MAEtC;MACA,MAAMQ,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAE/D,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,cAAc,CAACP,QAAQ,EAAE;QACnDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,OAAO,CAAC;QAC7Be,MAAM,EAAEZ,UAAU,CAACY;MACrB,CAAC,CAAC;MAEFC,YAAY,CAACX,SAAS,CAAC;MAEvB,IAAI,CAACG,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClC/B,MAAM,CAACgC,WAAW,CAAC,2CAA2C,EAAEF,IAAI,CAAC;MACrE,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdjC,MAAM,CAACiC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACrD,MAAM,IAAI,CAACC,mBAAmB,CAACD,KAAK,CAAC;IACvC;EACF;;EAEA;AACF;AACA;EACE,MAAME,aAAaA,CAACC,SAAe,EAAEC,OAAe,GAAG,EAAE,EAA8B;IACrF,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,CAAC;MACnCE,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;MAEnC,MAAMzB,QAAQ,GAAGb,cAAc,CAAC,MAAM,CAAC;MAEvC,MAAMc,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAE/D,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,cAAc,CAACP,QAAQ,EAAE;QACnDQ,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEgB,QAAQ;QACdb,MAAM,EAAEZ,UAAU,CAACY;MACrB,CAAC,CAAC;MAEFC,YAAY,CAACX,SAAS,CAAC;MAEvB,IAAI,CAACG,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClC/B,MAAM,CAACgC,WAAW,CAAC,sCAAsC,EAAEF,IAAI,CAAC;MAChE,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdjC,MAAM,CAACiC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAI,CAACQ,kBAAkB,CAACR,KAAK,EAAE,OAAO,CAAC;IAC/C;EACF;;EAEA;AACF;AACA;EACE,MAAMS,WAAWA,CAACC,OAAe,EAAEN,OAAY,GAAG,CAAC,CAAC,EAAgC;IAClF,IAAI;MACF;MACA,MAAMO,WAAW,GAAG;QAClBC,KAAK,EAAE,oBAAoBF,OAAO,EAAE;QACpCG,YAAY,EAAE;UACZC,aAAa,EAAEV,OAAO,CAACU,aAAa,IAAI,SAAS;UACjDC,WAAW,EAAEX,OAAO,CAACW,WAAW,IAAI,SAAS;UAC7CC,SAAS,EAAEZ,OAAO,CAACY,SAAS,IAAI;QAClC;MACF,CAAC;MAED,MAAMrC,QAAQ,GAAGb,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;;MAExC,MAAMc,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAE/D,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,cAAc,CAACP,QAAQ,EAAE;QACnDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACoB,WAAW,CAAC;QACjCnB,MAAM,EAAEZ,UAAU,CAACY;MACrB,CAAC,CAAC;MAEFC,YAAY,CAACX,SAAS,CAAC;MAEvB,IAAI,CAACG,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClC/B,MAAM,CAACgC,WAAW,CAAC,wCAAwC,EAAEF,IAAI,CAAC;;MAElE;MACA,OAAO,IAAI,CAACoB,0BAA0B,CAACpB,IAAI,EAAEa,OAAO,CAAC;IACvD,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdjC,MAAM,CAACiC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAClD,MAAM,IAAI,CAACQ,kBAAkB,CAACR,KAAK,EAAE,SAAS,CAAC;IACjD;EACF;;EAEA;AACF;AACA;EACUiB,0BAA0BA,CAACC,MAAW,EAAER,OAAe,EAAuB;IACpF,MAAMS,QAAQ,GAAGD,MAAM,CAACC,QAAQ,IAAID,MAAM;IAC1C,MAAM;MACJE,UAAU;MACVC,mBAAmB;MACnBC,kBAAkB;MAClBC,sBAAsB;MACtBC,cAAc;MACdC,kBAAkB;MAClBC;IACF,CAAC,GAAGP,QAAQ;IAEZ,OAAO;MACLQ,OAAO,EAAE,IAAI;MACbP,UAAU,EAAEA,UAAU,IAAI,CAAC;MAC3BQ,YAAY,EAAEN,kBAAkB,IAAI,CAAC;MACrCO,YAAY,EAAEV,QAAQ,CAACU,YAAY,IAAI,WAAWnB,OAAO,EAAE;MAC3DoB,WAAW,EAAEX,QAAQ,CAACW,WAAW,IAAI,EAAE;MACvCC,gBAAgB,EAAE;QAChBC,iBAAiB,EAAEb,QAAQ,CAACa,iBAAiB,IAAI,CAAC;QAClDC,SAAS,EAAEd,QAAQ,CAACc,SAAS,IAAI,CAAC;QAClCC,OAAO,EAAEf,QAAQ,CAACe,OAAO,IAAI,CAAC;QAC9BC,KAAK,EAAEhB,QAAQ,CAACgB,KAAK,IAAI,CAAC;QAC1BC,OAAO,EAAEjB,QAAQ,CAACiB,OAAO,IAAI,CAAC;QAC9BC,SAAS,EAAElB,QAAQ,CAACkB,SAAS,IAAI;MACnC,CAAC;MACDC,eAAe,EAAE;QACfC,iBAAiB,EAAE,CAAAd,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEe,oBAAoB,KAAI,EAAE;QACjEC,eAAe,EAAEtB,QAAQ,CAACsB,eAAe,IAAI,EAAE;QAC/CC,gBAAgB,EAAErB,mBAAmB,IAAI;MAC3C,CAAC;MACDsB,oBAAoB,EAAExB,QAAQ,CAACyB,eAAe,IAAI,EAAE;MACpDC,YAAY,EAAE3B,MAAM,CAAC4B,kBAAkB,IAAI,CAAC,wBAAwB,EAAE,kBAAkB;IAC1F,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMC,cAAcA,CAAA,EAAkF;IACpG,IAAI;MACF,MAAM9D,QAAQ,GAAG,MAAM+D,KAAK,CAACC,qBAAqB,EAAE;QAClD9D,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,QAAQ,EAAE;QAAmB;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwBV,QAAQ,CAACW,MAAM,EAAE,CAAC;MAC5D;MAEA,OAAO,MAAMX,QAAQ,CAACa,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdjC,MAAM,CAACiC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACE,MAAcd,cAAcA,CAACgE,GAAW,EAAEC,OAAoB,EAAEC,OAAe,GAAG,CAAC,EAAqB;IACtG,IAAIC,SAAgB;IAEpB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIF,OAAO,EAAEE,OAAO,EAAE,EAAE;MACnD,IAAI;QACF,MAAMrE,QAAQ,GAAG,MAAM+D,KAAK,CAACE,GAAG,EAAEC,OAAO,CAAC;QAC1C,OAAOlE,QAAQ,CAAC,CAAC;MACnB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdqD,SAAS,GAAGrD,KAAc;QAC1BjC,MAAM,CAACwF,IAAI,CAAC,WAAWD,OAAO,GAAG,CAAC,eAAe,IAAI,CAAClF,OAAO,GAAG,EAAE4B,KAAK,CAAC;;QAExE;QACA,IAAIsD,OAAO,KAAKF,OAAO,EAAE;UACvB,MAAMC,SAAS;QACjB;;QAEA;QACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAI1E,UAAU,CAAC0E,OAAO,EAAE,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,OAAO,CAAC,CAAC,CAAC;MAChF;IACF;IAEA,MAAMD,SAAS;EACjB;;EAEA;AACF;AACA;EACUpD,mBAAmBA,CAACD,KAAU,EAAS;IAC7C,IAAIA,KAAK,YAAYL,KAAK,EAAE;MAC1B;MACA,IAAIK,KAAK,CAAC4D,IAAI,KAAK,YAAY,EAAE;QAC/B,OAAO,IAAIjE,KAAK,CAAC,oFAAoF,CAAC;MACxG;;MAEA;MACA,IAAIK,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,MAAM,CAAC,IAC9ByB,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,iBAAiB,CAAC,IACzCyB,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,oCAAoC,CAAC,EAAE;QAChE,OAAO,IAAIoB,KAAK,CAAC,uEAAuE,CAAC;MAC3F;;MAEA;MACA,IAAIK,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,OAAO,CAAC,IAC/ByB,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,SAAS,CAAC,IACjCyB,KAAK,CAAC4D,IAAI,KAAK,WAAW,IAC1B5D,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC7C,OAAO,IAAIoB,KAAK,CAAC,kEAAkE,CAAC;MACtF;;MAEA;MACA,IAAIK,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,uBAAuB,CAAC,EAAE;QACnD,OAAO,IAAIoB,KAAK,CAAC,2DAA2D,CAAC;MAC/E;MAEA,OAAO,IAAIA,KAAK,CAACK,KAAK,CAAC6D,OAAO,IAAI,oCAAoC,CAAC;IACzE;IAEA,OAAO,IAAIlE,KAAK,CAAC,6DAA6D,CAAC;EACjF;;EAEA;AACF;AACA;EACUa,kBAAkBA,CAACR,KAAU,EAAE8D,QAA6B,EAAS;IAC3E,MAAM1D,OAAO,GAAG0D,QAAQ,KAAK,OAAO,GAAG,eAAe,GAAG,iBAAiB;IAE1E,IAAI9D,KAAK,YAAYL,KAAK,EAAE;MAC1B,IAAIK,KAAK,CAAC4D,IAAI,KAAK,YAAY,EAAE;QAC/B,OAAO,IAAIjE,KAAK,CAAC,kBAAkBS,OAAO,oBAAoB,CAAC;MACjE;MAEA,IAAIJ,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,yBAAyB,CAAC,EAAE;QACrD,OAAO,IAAIoB,KAAK,CAAC,6BAA6BmE,QAAQ,iBAAiB,CAAC;MAC1E;MAEA,IAAI9D,KAAK,CAAC6D,OAAO,CAACtF,QAAQ,CAAC,yBAAyB,CAAC,EAAE;QACrD,OAAO,IAAIoB,KAAK,CAAC,cAAcmE,QAAQ,KAAK,SAAS,GAAG,0CAA0C,GAAG,yBAAyB,EAAE,CAAC;MACnI;MAEA,OAAO,IAAInE,KAAK,CAAC,GAAGS,OAAO,CAAC2D,WAAW,CAAC,CAAC,WAAW/D,KAAK,CAAC6D,OAAO,EAAE,CAAC;IACtE;IAEA,OAAO,IAAIlE,KAAK,CAAC,WAAWS,OAAO,CAAC4D,WAAW,CAAC,CAAC,iBAAiB,CAAC;EACrE;;EAEA;AACF;AACA;AACA;EACE,MAAMC,WAAWA,CAACxF,OAAqC,EAAoE;IACzH,IAAI;MACF;MACA,MAAMyF,eAAuC,GAAG;QAC9CtD,KAAK,EAAEnC,OAAO,CAACmC,KAAK;QACpBR,OAAO,EAAE,cAAc,IAAI3B,OAAO,GAAGa,IAAI,CAACC,SAAS,CAACd,OAAO,CAACoC,YAAY,CAAC,GAAG,EAAE;QAC9EsD,OAAO,EAAE,SAAS,IAAI1F,OAAO,GAAGA,OAAO,CAAC0F,OAAO,GAAGC;MACpD,CAAC;;MAED;MACA,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAAC7F,yBAAyB,CAAC0F,eAAe,CAAC;;MAE9E;MACA,OAAO,IAAI,CAACI,uBAAuB,CAACD,gBAAgB,EAAE5F,OAAO,CAACmC,KAAK,CAAC;IAEtE,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdjC,MAAM,CAACiC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACUsE,uBAAuBA,CAACD,gBAAwC,EAAEE,aAAqB,EAAgB;IAC7G,OAAO;MACL5C,OAAO,EAAE,IAAI;MACb6C,SAAS,EAAEH,gBAAgB,CAACG,SAAS,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACjEC,aAAa,EAAE,gBAAgB;MAC/B/D,KAAK,EAAE2D,aAAa;MACpBK,aAAa,EAAE;QACbC,UAAU,EAAE,gBAAgB;QAC5BjE,KAAK,EAAE2D,aAAa;QACpBO,cAAc,EAAET,gBAAgB,CAACU,MAAM;QACvCC,qBAAqB,EAAE;UACrBC,uBAAuB,EAAE,EAAE;UAC3BC,qBAAqB,EAAE,CAACb,gBAAgB,CAACU,MAAM,CAAC;UAChDI,YAAY,EAAEd,gBAAgB,CAACe,WAAW,CAACC,GAAG,CAAC,CAACC,MAAc,EAAEC,KAAa,MAAM;YACjFC,MAAM,EAAEF,MAAM;YACdG,QAAQ,EAAE,MAAM;YAChBC,cAAc,EAAE,gBAAgB;YAChCC,cAAc,EAAE,gBAAgB;YAChCC,SAAS,EAAE,iBAAiB;YAC5BC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAAC;UACHA,QAAQ,EAAE;QACZ,CAAC;QACDC,mBAAmB,EAAEzB,gBAAgB,CAACvB,kBAAkB,CAACuC,GAAG,CAAEU,QAAgB,KAAM;UAClFC,aAAa,EAAED,QAAQ;UACvBE,UAAU,EAAE,yBAAyB;UACrCC,WAAW,EAAEH;QACf,CAAC,CAAC,CAAC;QACHI,iBAAiB,EAAE;UACjBC,WAAW,EAAE,CAAC,+BAA+B,CAAC;UAC9CC,mBAAmB,EAAE;QACvB,CAAC;QACDC,eAAe,EAAEjC,gBAAgB,CAACe;MACpC,CAAC;MACDvB,OAAO,EAAEQ,gBAAgB,CAACU;IAC5B,CAAC;EACH;;EAEA;AACF;AACA;EACUwB,qBAAqBA,CAACC,eAAgC,EAAEjC,aAAqB,EAAgB;IAAA,IAAAkC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACnG;IACA,IAAIJ,eAAe,CAACK,YAAY,KAAK,MAAM,IAAIL,eAAe,CAAC3G,IAAI,CAACZ,QAAQ,EAAE;MAC5E,OAAO;QACL0C,OAAO,EAAE6E,eAAe,CAAC7E,OAAO;QAChC6C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,aAAa,EAAE6B,eAAe,CAACM,YAAY;QAC3ClG,KAAK,EAAE2D,aAAa;QACpBK,aAAa,EAAE;UACbC,UAAU,EAAE2B,eAAe,CAACM,YAAY;UACxClG,KAAK,EAAE2D,aAAa;UACpBO,cAAc,EAAE0B,eAAe,CAAC3G,IAAI,CAACZ,QAAQ;UAC7C+F,qBAAqB,EAAE;YACrBC,uBAAuB,EAAE,EAAE;YAC3BC,qBAAqB,EAAE,CAACsB,eAAe,CAAC3G,IAAI,CAACZ,QAAQ,CAAC;YACtDkG,YAAY,EAAE,CAAC;cACbK,MAAM,EAAEgB,eAAe,CAAC3G,IAAI,CAACZ,QAAQ;cACrCwG,QAAQ,EAAE,QAAQ;cAClBC,cAAc,EAAE,gBAAgB;cAChCC,cAAc,EAAE,cAAc;cAC9BC,SAAS,EAAE,eAAe;cAC1BC,QAAQ,EAAE;YACZ,CAAC,CAAC;YACFA,QAAQ,EAAE;UACZ,CAAC;UACDC,mBAAmB,EAAE,CAAC;YACpBE,aAAa,EAAE,qBAAqB;YACpCC,UAAU,EAAE,aAAa;YACzBC,WAAW,EAAEM,eAAe,CAAC3G,IAAI,CAACZ;UACpC,CAAC,CAAC;UACFkH,iBAAiB,EAAE;YACjBC,WAAW,EAAE,CAAC,gBAAgB,CAAC;YAC/BC,mBAAmB,EAAE;UACvB,CAAC;UACDC,eAAe,EAAE;QACnB,CAAC;QACDzC,OAAO,EAAE2C,eAAe,CAAC3G,IAAI,CAACZ;MAChC,CAAC;IACH;;IAEA;IACA,OAAO;MACL0C,OAAO,EAAE6E,eAAe,CAAC7E,OAAO;MAChC6C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,aAAa,EAAE6B,eAAe,CAACM,YAAY;MAC3ClG,KAAK,EAAE2D,aAAa;MACpBK,aAAa,EAAE;QACbC,UAAU,EAAE2B,eAAe,CAACM,YAAY;QACxClG,KAAK,EAAE2D,aAAa;QACpBO,cAAc,EAAE0B,eAAe,CAAC3G,IAAI,CAACsB,QAAQ,IAAIqF,eAAe,CAAC3G,IAAI,CAACZ,QAAQ,IAAI,oBAAoB;QACtG+F,qBAAqB,EAAE;UACrBC,uBAAuB,EAAE,EAAE;UAC3BC,qBAAqB,EAAE,EAAE;UACzBC,YAAY,EAAE,EAAAsB,qBAAA,GAAAD,eAAe,CAAC3G,IAAI,CAAC+C,eAAe,cAAA6D,qBAAA,wBAAAC,sBAAA,GAApCD,qBAAA,CAAsCM,iBAAiB,cAAAL,sBAAA,uBAAvDA,sBAAA,CAAyDrB,GAAG,CAAC,CAAC2B,GAAW,EAAEzB,KAAa,MAAM;YAC1GC,MAAM,EAAEwB,GAAG;YACXvB,QAAQ,EAAE,QAAQ;YAClBC,cAAc,EAAE,gBAAgB;YAChCC,cAAc,EAAE,UAAU;YAC1BC,SAAS,EAAE,wBAAwB;YACnCC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAAC,OAAAc,sBAAA,GAAIH,eAAe,CAAC3G,IAAI,CAACoH,sBAAsB,cAAAN,sBAAA,uBAA3CA,sBAAA,CAA6CtB,GAAG,CAAC,CAAC2B,GAAW,EAAEzB,KAAa,MAAM;YACvFC,MAAM,EAAEwB,GAAG;YACXvB,QAAQ,EAAE,QAAQ;YAClBC,cAAc,EAAE,gBAAgB;YAChCC,cAAc,EAAE,UAAU;YAC1BC,SAAS,EAAE,wBAAwB;YACnCC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAAC,KAAI,EAAE;UACTA,QAAQ,EAAE;QACZ,CAAC;QACDC,mBAAmB,EAAE,EAAAc,sBAAA,GAAAJ,eAAe,CAAC3G,IAAI,CAACqH,OAAO,cAAAN,sBAAA,uBAA5BA,sBAAA,CAA8BvB,GAAG,CAAE8B,MAAc,KAAM;UAC1EnB,aAAa,EAAEmB,MAAM;UACrBlB,UAAU,EAAE,UAAU;UACtBC,WAAW,EAAEiB;QACf,CAAC,CAAC,CAAC,KAAI,EAAE;QACThB,iBAAiB,EAAE;UACjBC,WAAW,EAAE,CAAC,gBAAgB,CAAC;UAC/BC,mBAAmB,EAAE;QACvB,CAAC;QACDC,eAAe,EAAE;MACnB,CAAC;MACDzC,OAAO,EAAE2C,eAAe,CAAC3G,IAAI,CAACZ,QAAQ,IAAIuH,eAAe,CAAC3G,IAAI,CAACsB,QAAQ,IAAI;IAC7E,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMiG,aAAaA,CAACC,UAAqB,EAAEC,KAAc,EAAyB;IAChF,MAAM1G,KAAK,GAAGyG,UAAU,IAAIA,UAAU,CAACE,MAAM,GAAG,CAAC,GAC7C,4BAA4BF,UAAU,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE,GACnD,oBAAoB;IAExB,MAAM/I,OAAuB,GAAG;MAC9BmC,KAAK,EAAEA,KAAK;MACZkG,YAAY,EAAE,QAAQ;MACtB1G,OAAO,EAAE;QACPiH,UAAU,EAAEA,UAAU;QACtBC,KAAK,EAAEA;MACT;IACF,CAAC;IAED,MAAMrI,QAAQ,GAAG,MAAM,IAAI,CAACgF,WAAW,CAACxF,OAAO,CAAC;IAChD,IAAI,MAAM,IAAIQ,QAAQ,EAAE;MACtB;MACA,OAAO,IAAI,CAACsH,qBAAqB,CAACtH,QAAQ,EAAqB2B,KAAK,CAAC;IACvE;IACA,OAAO3B,QAAQ;EACjB;;EAEA;AACF;AACA;EACE,MAAMwI,eAAeA,CAACC,SAAiB,EAAEC,WAAyB,EAAyB;IACzF,MAAMlJ,OAAuB,GAAG;MAC9BmC,KAAK,EAAE,6BAA6B8G,SAAS,EAAE;MAC/CZ,YAAY,EAAE,WAAW;MACzB1G,OAAO,EAAEuH,WAAW,IAAI,CAAC;IAC3B,CAAC;IAED,MAAM1I,QAAQ,GAAG,MAAM,IAAI,CAACgF,WAAW,CAACxF,OAAO,CAAC;IAChD,IAAI,MAAM,IAAIQ,QAAQ,EAAE;MACtB;MACA,OAAO,IAAI,CAACsH,qBAAqB,CAACtH,QAAQ,EAAqBR,OAAO,CAACmC,KAAK,CAAC;IAC/E;IACA,OAAO3B,QAAQ;EACjB;;EAEA;AACF;AACA;EACE,MAAM2I,QAAQA,CAACC,IAAW,EAAEC,WAAkC,EAA2C;IACvG,IAAI;MACF,IAAID,IAAI,EAAE;QACR;QACA,MAAMxD,gBAAgB,GAAG,MAAM,IAAI,CAACnE,aAAa,CAAC2H,IAAI,EAAEC,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEjH,YAAY,GAAGvB,IAAI,CAACC,SAAS,CAACuI,WAAW,CAACjH,YAAY,CAAC,GAAG,EAAE,CAAC;;QAElI;QACA,OAAO,IAAI,CAACkH,wBAAwB,CAAC1D,gBAAgB,EAAE,qBAAqB,CAAC;MAE/E,CAAC,MAAM,IAAIyD,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEpH,OAAO,EAAE;QAC/B;QACA,MAAM2D,gBAAgB,GAAG,MAAM,IAAI,CAAC5D,WAAW,CAACqH,WAAW,CAACpH,OAAO,EAAEoH,WAAW,CAACjH,YAAY,CAAC;;QAE9F;QACA,OAAO,IAAI,CAACmH,0BAA0B,CAAC3D,gBAAgB,EAAE,iBAAiByD,WAAW,CAACpH,OAAO,EAAE,CAAC;MAElG,CAAC,MAAM;QACL,MAAM,IAAIf,KAAK,CAAC,0CAA0C,CAAC;MAC7D;IAEF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdjC,MAAM,CAACiC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACvC,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACU+H,wBAAwBA,CAAC9I,QAA2B,EAAE2B,KAAa,EAAgB;IAAA,IAAAqH,qBAAA,EAAAC,qBAAA;IACzF,MAAMtF,eAAe,GAAG3D,QAAQ,CAAC0D,oBAAoB,IAAI,EAAE;IAC3D,MAAMwF,QAAQ,GAAGlJ,QAAQ,CAACmJ,mBAAmB,IAAI,EAAE;IAEnD,OAAO;MACLzG,OAAO,EAAE1C,QAAQ,CAAC0C,OAAO;MACzB6C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,aAAa,EAAE,YAAY;MAC3B/D,KAAK,EAAEA,KAAK;MACZgE,aAAa,EAAE;QACbC,UAAU,EAAE,YAAY;QACxBjE,KAAK,EAAEA,KAAK;QACZkE,cAAc,EAAE,EAAAmD,qBAAA,GAAAhJ,QAAQ,CAACoJ,kBAAkB,cAAAJ,qBAAA,uBAA3BA,qBAAA,CAA6BK,OAAO,KAAI,yBAAyB;QACjFtD,qBAAqB,EAAE;UACrBC,uBAAuB,EAAEkD,QAAQ,CAAC9C,GAAG,CAACkD,OAAO,KAAK;YAChDC,WAAW,EAAED,OAAO;YACpBE,oBAAoB,EAAE,SAAS;YAC/BC,eAAe,EAAE,CAAC;YAClBC,oBAAoB,EAAE;UACxB,CAAC,CAAC,CAAC;UACHzD,qBAAqB,EAAEtC,eAAe;UACtCuC,YAAY,EAAEvC,eAAe,CAACyC,GAAG,CAAC2B,GAAG,KAAK;YACxCxB,MAAM,EAAEwB,GAAG;YACXvB,QAAQ,EAAE,MAAM;YAChBC,cAAc,EAAE,gBAAgB;YAChCC,cAAc,EAAE,gBAAgB;YAChCC,SAAS,EAAE,aAAa;YACxBC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAAC;UACHA,QAAQ,EAAE;QACZ,CAAC;QACDC,mBAAmB,EAAE,EAAAoC,qBAAA,GAAAjJ,QAAQ,CAAC4D,YAAY,cAAAqF,qBAAA,uBAArBA,qBAAA,CAAuB7C,GAAG,CAAC8B,MAAM,KAAK;UACzDnB,aAAa,EAAEmB,MAAM;UACrBlB,UAAU,EAAE,UAAU;UACtBC,WAAW,EAAEiB;QACf,CAAC,CAAC,CAAC,KAAI,EAAE;QACThB,iBAAiB,EAAE;UACjBC,WAAW,EAAE,CAAC,wBAAwB,CAAC;UACvCC,mBAAmB,EAAE;QACvB,CAAC;QACDC,eAAe,EAAE,CAAC,4DAA4D;MAChF,CAAC;MACDzC,OAAO,EAAE,IAAI,CAAC+E,uBAAuB,CAAC3J,QAAQ;IAChD,CAAC;EACH;;EAEA;AACF;AACA;EACU+I,0BAA0BA,CAAC/I,QAA6B,EAAE2B,KAAa,EAAgB;IAAA,IAAAiI,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAC7F,MAAMnG,eAAe,GAAG3D,QAAQ,CAAC0D,oBAAoB,IAAI,EAAE;IAC3D,MAAMwF,QAAQ,GAAG,CAAC,IAAI,EAAAU,qBAAA,GAAA5J,QAAQ,CAACqD,eAAe,cAAAuG,qBAAA,uBAAxBA,qBAAA,CAA0BtG,iBAAiB,KAAI,EAAE,CAAC,EAAE,IAAI,EAAAuG,sBAAA,GAAA7J,QAAQ,CAACqD,eAAe,cAAAwG,sBAAA,uBAAxBA,sBAAA,CAA0BrG,eAAe,KAAI,EAAE,CAAC,CAAC;IAE/H,OAAO;MACLd,OAAO,EAAE1C,QAAQ,CAAC0C,OAAO;MACzB6C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,aAAa,EAAE,cAAc;MAC7B/D,KAAK,EAAEA,KAAK;MACZgE,aAAa,EAAE;QACbC,UAAU,EAAE,cAAc;QAC1BjE,KAAK,EAAEA,KAAK;QACZkE,cAAc,EAAE,qBAAqB7F,QAAQ,CAAC4C,YAAY,EAAE;QAC5DmD,qBAAqB,EAAE;UACrBC,uBAAuB,EAAEkD,QAAQ,CAAC9C,GAAG,CAACkD,OAAO,KAAK;YAChDC,WAAW,EAAED,OAAO;YACpBE,oBAAoB,EAAE,SAAS;YAC/BC,eAAe,EAAE,CAAC;YAClBC,oBAAoB,EAAE;UACxB,CAAC,CAAC,CAAC;UACHzD,qBAAqB,EAAEtC,eAAe;UACtCuC,YAAY,EAAEvC,eAAe,CAACyC,GAAG,CAAC2B,GAAG,KAAK;YACxCxB,MAAM,EAAEwB,GAAG;YACXvB,QAAQ,EAAE,MAAM;YAChBC,cAAc,EAAE,gBAAgB;YAChCC,cAAc,EAAE,kBAAkB;YAClCC,SAAS,EAAE,sBAAsB;YACjCC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAAC;UACHA,QAAQ,EAAE;QACZ,CAAC;QACDC,mBAAmB,EAAE,EAAAiD,sBAAA,GAAA9J,QAAQ,CAAC4D,YAAY,cAAAkG,sBAAA,uBAArBA,sBAAA,CAAuB1D,GAAG,CAAC8B,MAAM,KAAK;UACzDnB,aAAa,EAAEmB,MAAM;UACrBlB,UAAU,EAAE,oBAAoB;UAChCC,WAAW,EAAEiB;QACf,CAAC,CAAC,CAAC,KAAI,EAAE;QACThB,iBAAiB,EAAE;UACjBC,WAAW,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,CAAC;UACxDC,mBAAmB,EAAE;QACvB,CAAC;QACDC,eAAe,EAAE,CAAC,mEAAmE;MACvF,CAAC;MACDzC,OAAO,EAAE,IAAI,CAACmF,yBAAyB,CAAC/J,QAAQ;IAClD,CAAC;EACH;;EAEA;AACF;AACA;EACUgK,YAAYA,CAACpB,IAAU,EAAmB;IAChD,OAAO,IAAIrE,OAAO,CAAC,CAACC,OAAO,EAAEyF,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,aAAa,CAACxB,IAAI,CAAC;MAC1BsB,MAAM,CAACG,MAAM,GAAG,MAAM;QACpB,MAAMpI,MAAM,GAAGiI,MAAM,CAACjI,MAAgB;QACtC;QACA,MAAMqI,MAAM,GAAGrI,MAAM,CAACsI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnC/F,OAAO,CAAC8F,MAAM,CAAC;MACjB,CAAC;MACDJ,MAAM,CAACM,OAAO,GAAGzJ,KAAK,IAAIkJ,MAAM,CAAClJ,KAAK,CAAC;IACzC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,MAAM0J,YAAYA,CAAC9I,KAAa,EAAE+G,WAAyB,EAA2C;IAAA,IAAAgC,YAAA;IACpG,MAAMnF,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC1C,MAAMkF,MAAM,GAAGlG,IAAI,CAACmG,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAEtDhM,MAAM,CAACiM,IAAI,CAAC,OAAOJ,MAAM,iCAAiCpF,SAAS,EAAE,EAAE;MACrE5D,KAAK;MACL+G,WAAW;MACXsC,KAAK,GAAAN,YAAA,GAAE,IAAIhK,KAAK,CAAC,CAAC,CAACsK,KAAK,cAAAN,YAAA,uBAAjBA,YAAA,CAAmBH,KAAK,CAAC,IAAI,CAAC,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC7E,GAAG,CAAC8E,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC;IAEF,MAAM3L,OAAuB,GAAG;MAC9BmC,KAAK,EAAEA,KAAK;MACZkG,YAAY,EAAE,MAAM;MACpB1G,OAAO,EAAEuH,WAAW,IAAI,CAAC;IAC3B,CAAC;IAED,MAAM1I,QAAQ,GAAG,MAAM,IAAI,CAACgF,WAAW,CAACxF,OAAO,CAAC;IAEhDV,MAAM,CAACiM,IAAI,CAAC,MAAMJ,MAAM,oCAAoC,IAAInF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE,EAAE;MACtF9D,KAAK;MACLyJ,YAAY,EAAEpL,QAAQ,CAACd,WAAW,CAACyF,IAAI;MACvCjC,OAAO,EAAG1C,QAAQ,CAAS0C,OAAO;MAClC2I,QAAQ,EAAE,GAAG7F,IAAI,CAAC8F,GAAG,CAAC,CAAC,GAAG,IAAI9F,IAAI,CAACD,SAAS,CAAC,CAACgG,OAAO,CAAC,CAAC;IACzD,CAAC,CAAC;;IAEF;IACA,OAAOvL,QAAQ;EACjB;;EAEA;AACF;AACA;EACEwL,eAAeA,CAACC,SAAiB,EAAsD;IACrF,MAAMC,QAAQ,GAAG;MACf,CAAC,EAAE;QAAEnF,MAAM,EAAE,QAAQ;QAAEoF,KAAK,EAAE,OAAO;QAAE/G,OAAO,EAAE;MAA4B,CAAC;MAC7E,CAAC,EAAE;QAAE2B,MAAM,EAAE,UAAU;QAAEoF,KAAK,EAAE,QAAQ;QAAE/G,OAAO,EAAE;MAAgB,CAAC;MACpE,CAAC,EAAE;QAAE2B,MAAM,EAAE,OAAO;QAAEoF,KAAK,EAAE,QAAQ;QAAE/G,OAAO,EAAE;MAAoB,CAAC;MACrE,CAAC,EAAE;QAAE2B,MAAM,EAAE,OAAO;QAAEoF,KAAK,EAAE,KAAK;QAAE/G,OAAO,EAAE;MAA8B;IAC7E,CAAC;IAED,OAAO8G,QAAQ,CAACD,SAAS,CAA0B,IAAIC,QAAQ,CAAC,CAAC,CAAC;EACpE;;EAEA;AACF;AACA;EACEE,mBAAmBA,CAAC3J,MAAW,EAAuB;IACpD,MAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,IAAID,MAAM;IAC1C,MAAM;MACJE,UAAU;MACVC,mBAAmB;MACnBC,kBAAkB;MAClBC,sBAAsB;MACtBC,cAAc;MACdC,kBAAkB;MAClBmB;IACF,CAAC,GAAGzB,QAAQ;IAEZ,MAAMuJ,SAAS,GAAGtJ,UAAU,IAAI,CAAC;IACjC,MAAMuJ,QAAQ,GAAG,IAAI,CAACF,eAAe,CAACC,SAAS,CAAC;IAEhD,OAAO;MACLI,SAAS,EAAEJ,SAAS,IAAI,CAAC,IAAI,CAACpJ,kBAAkB,IAAI,CAAC,KAAK,EAAE;MAC5DoJ,SAAS,EAAEA,SAAS;MACpBK,WAAW,EAAEzJ,kBAAkB,IAAI,CAAC;MACpC0J,eAAe,EAAEzJ,sBAAsB,IAAI,CAAC;MAC5C+G,OAAO,EAAE9G,cAAc,IAAI,SAAS;MACpCyJ,cAAc,EAAE,CAAAxJ,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEyJ,eAAe,KAAI,CAAC;MACxDtI,eAAe,EAAEA,eAAe,IAAI,EAAE;MACtCuF,QAAQ,EAAE,CAAA1G,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEe,oBAAoB,KAAI,EAAE;MACxD2I,UAAU,EAAE,CAAC7J,kBAAkB,IAAI,CAAC,KAAK,EAAE;MAC3C8J,SAAS,EAAET,QAAQ,CAACC,KAA8C;MAClES,WAAW,EAAEnK;IACf,CAAC;EACH;;EAEA;AACF;AACA;EACEoK,sBAAsBA,CAACrM,QAAgC,EAAU;IAC/D,IAAIsM,SAAS,GAAG,yCAAyC;;IAEzD;IACAA,SAAS,IAAItM,QAAQ,CAAC8F,MAAM;;IAE5B;IACA,IAAI9F,QAAQ,CAAC6D,kBAAkB,IAAI7D,QAAQ,CAAC6D,kBAAkB,CAACyE,MAAM,GAAG,CAAC,EAAE;MACzEgE,SAAS,IAAI,gCAAgC;MAC7CtM,QAAQ,CAAC6D,kBAAkB,CAAC0I,OAAO,CAAC,CAACzF,QAAQ,EAAER,KAAK,KAAK;QACvDgG,SAAS,IAAI,GAAGhG,KAAK,GAAG,CAAC,KAAKQ,QAAQ,IAAI;MAC5C,CAAC,CAAC;IACJ;;IAEA;IACA,IAAI9G,QAAQ,CAACmG,WAAW,IAAInG,QAAQ,CAACmG,WAAW,CAACmC,MAAM,GAAG,CAAC,EAAE;MAC3DgE,SAAS,IAAI,6BAA6B;MAC1CtM,QAAQ,CAACmG,WAAW,CAACoG,OAAO,CAAClG,MAAM,IAAI;QACrCiG,SAAS,IAAI,KAAKjG,MAAM,MAAM;MAChC,CAAC,CAAC;IACJ;;IAEA;IACAiG,SAAS,IAAI,aAAa;IAC1BA,SAAS,IAAI,6BAA6BtM,QAAQ,CAACwM,sBAAsB,wBAAwB;IACjGF,SAAS,IAAI,sBAAsB7H,IAAI,CAACgI,KAAK,CAACzM,QAAQ,CAAC0M,gBAAgB,GAAG,GAAG,CAAC,MAAM;IACpFJ,SAAS,IAAI,mBAAmBtM,QAAQ,CAAC2M,aAAa,GAAG;IAEzD,OAAOL,SAAS;EAClB;;EAEA;AACF;AACA;EACE3C,uBAAuBA,CAAC3J,QAA2B,EAAU;IAC3D,IAAIsM,SAAS,GAAG,sCAAsC;IAEtD,IAAItM,QAAQ,CAAC0C,OAAO,IAAI1C,QAAQ,CAACoJ,kBAAkB,EAAE;MAAA,IAAAwD,qBAAA;MACnD,MAAM;QAAEjK,YAAY;QAAE0G,OAAO;QAAElH;MAAW,CAAC,GAAGnC,QAAQ,CAACoJ,kBAAkB;MACzE,MAAMsC,QAAQ,IAAAkB,qBAAA,GAAG5M,QAAQ,CAAC6M,oBAAoB,cAAAD,qBAAA,uBAA7BA,qBAAA,CAA+BE,eAAe;MAE/DR,SAAS,IAAI,wBAAwB;MACrCA,SAAS,IAAI,qBAAqB3J,YAAY,QAAQ;MACtD2J,SAAS,IAAI,gBAAgBjD,OAAO,IAAI;MACxCiD,SAAS,IAAI,mBAAmBnK,UAAU,KAAK,IAAI,CAAC4K,YAAY,CAAC5K,UAAU,CAAC,KAAK;MAEjF,IAAIuJ,QAAQ,EAAE;QACZY,SAAS,IAAI,uBAAuBZ,QAAQ,CAACnF,MAAM,MAAMmF,QAAQ,CAAC9G,OAAO,MAAM;MACjF;;MAEA;MACA,IAAI5E,QAAQ,CAACgN,cAAc,IAAIhN,QAAQ,CAACgN,cAAc,CAAC1E,MAAM,GAAG,CAAC,EAAE;QACjEgE,SAAS,IAAI,yBAAyB;QACtCtM,QAAQ,CAACgN,cAAc,CAACT,OAAO,CAACU,IAAI,IAAI;UACtCX,SAAS,IAAI,OAAOW,IAAI,CAACtI,IAAI,mBAAmBF,IAAI,CAACgI,KAAK,CAACQ,IAAI,CAACC,UAAU,GAAG,GAAG,CAAC,YAAYD,IAAI,CAAC9K,UAAU,KAAK;QACnH,CAAC,CAAC;QACFmK,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAItM,QAAQ,CAAC0D,oBAAoB,IAAI1D,QAAQ,CAAC0D,oBAAoB,CAAC4E,MAAM,GAAG,CAAC,EAAE;QAC7EgE,SAAS,IAAI,8BAA8B;QAC3CtM,QAAQ,CAAC0D,oBAAoB,CAAC6I,OAAO,CAACxE,GAAG,IAAI;UAC3CuE,SAAS,IAAI,KAAKvE,GAAG,IAAI;QAC3B,CAAC,CAAC;QACFuE,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAItM,QAAQ,CAACmJ,mBAAmB,IAAInJ,QAAQ,CAACmJ,mBAAmB,CAACb,MAAM,GAAG,CAAC,EAAE;QAC3EgE,SAAS,IAAI,yBAAyB;QACtCtM,QAAQ,CAACmJ,mBAAmB,CAACoD,OAAO,CAACjD,OAAO,IAAI;UAC9CgD,SAAS,IAAI,KAAKhD,OAAO,IAAI;QAC/B,CAAC,CAAC;QACFgD,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAItM,QAAQ,CAACmN,aAAa,EAAE;QAC1Bb,SAAS,IAAI,gCAAgC;QAC7CA,SAAS,IAAI,eAAetM,QAAQ,CAACmN,aAAa,CAACC,WAAW,GAAG,QAAQ,GAAG,mBAAmB,IAAI;QACnGd,SAAS,IAAI,gBAAgBtM,QAAQ,CAACmN,aAAa,CAACE,cAAc,MAAM;MAC1E;IAEF,CAAC,MAAM;MACLf,SAAS,IAAI,4EAA4E;IAC3F;;IAEA;IACA,IAAItM,QAAQ,CAAC4D,YAAY,IAAI5D,QAAQ,CAAC4D,YAAY,CAAC0E,MAAM,GAAG,CAAC,EAAE;MAC7DgE,SAAS,IAAI,yBAAyBtM,QAAQ,CAAC4D,YAAY,CAAC2E,IAAI,CAAC,IAAI,CAAC,GAAG;IAC3E;IAEA,OAAO+D,SAAS;EAClB;;EAEA;AACF;AACA;EACEvC,yBAAyBA,CAAC/J,QAA6B,EAAU;IAC/D,IAAIsM,SAAS,GAAG,gCAAgC;IAEhD,IAAItM,QAAQ,CAAC0C,OAAO,EAAE;MACpB4J,SAAS,IAAI,0BAA0B;MACvCA,SAAS,IAAI,gBAAgBtM,QAAQ,CAAC4C,YAAY,IAAI;MACtD0J,SAAS,IAAI,qBAAqBtM,QAAQ,CAAC2C,YAAY,QAAQ;MAC/D2J,SAAS,IAAI,mBAAmBtM,QAAQ,CAACmC,UAAU,KAAK,IAAI,CAAC4K,YAAY,CAAC/M,QAAQ,CAACmC,UAAU,CAAC,OAAO;;MAErG;MACA,IAAInC,QAAQ,CAAC8C,gBAAgB,EAAE;QAC7B,MAAMwK,SAAS,GAAGtN,QAAQ,CAAC8C,gBAAgB;QAC3CwJ,SAAS,IAAI,oCAAoC;QACjDA,SAAS,IAAI,mBAAmBgB,SAAS,CAACvK,iBAAiB,IAAI;QAC/DuJ,SAAS,IAAI,kBAAkBgB,SAAS,CAACtK,SAAS,KAAK;QACvDsJ,SAAS,IAAI,wBAAwBgB,SAAS,CAACrK,OAAO,KAAK;QAC3DqJ,SAAS,IAAI,cAAcgB,SAAS,CAACpK,KAAK,KAAK;QAC/CoJ,SAAS,IAAI,gBAAgBgB,SAAS,CAACnK,OAAO,KAAK;QACnDmJ,SAAS,IAAI,iBAAiBgB,SAAS,CAAClK,SAAS,QAAQ;MAC3D;;MAEA;MACA,IAAIpD,QAAQ,CAACqD,eAAe,EAAE;QAC5B,MAAMnB,QAAQ,GAAGlC,QAAQ,CAACqD,eAAe;QACzCiJ,SAAS,IAAI,yBAAyB;QACtCA,SAAS,IAAI,yBAAyBpK,QAAQ,CAACuB,gBAAgB,IAAI;QAEnE,IAAIvB,QAAQ,CAACoB,iBAAiB,IAAIpB,QAAQ,CAACoB,iBAAiB,CAACgF,MAAM,GAAG,CAAC,EAAE;UACvEgE,SAAS,IAAI,6BAA6B;UAC1CpK,QAAQ,CAACoB,iBAAiB,CAACiJ,OAAO,CAACgB,KAAK,IAAI;YAC1CjB,SAAS,IAAI,KAAKiB,KAAK,IAAI;UAC7B,CAAC,CAAC;QACJ;QAEA,IAAIrL,QAAQ,CAACsB,eAAe,IAAItB,QAAQ,CAACsB,eAAe,CAAC8E,MAAM,GAAG,CAAC,EAAE;UACnEgE,SAAS,IAAI,2BAA2B;UACxCpK,QAAQ,CAACsB,eAAe,CAAC+I,OAAO,CAACiB,QAAQ,IAAI;YAC3ClB,SAAS,IAAI,KAAKkB,QAAQ,IAAI;UAChC,CAAC,CAAC;QACJ;QACAlB,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAItM,QAAQ,CAAC0D,oBAAoB,IAAI1D,QAAQ,CAAC0D,oBAAoB,CAAC4E,MAAM,GAAG,CAAC,EAAE;QAC7EgE,SAAS,IAAI,8BAA8B;QAC3CtM,QAAQ,CAAC0D,oBAAoB,CAAC6I,OAAO,CAACxE,GAAG,IAAI;UAC3CuE,SAAS,IAAI,KAAKvE,GAAG,IAAI;QAC3B,CAAC,CAAC;QACFuE,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAItM,QAAQ,CAAC6C,WAAW,IAAI7C,QAAQ,CAAC6C,WAAW,CAACyF,MAAM,GAAG,CAAC,EAAE;QAC3DgE,SAAS,IAAI,qBAAqB;QAClCA,SAAS,IAAItM,QAAQ,CAAC6C,WAAW,CAAC0F,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM;MACvD;IAEF,CAAC,MAAM;MACL+D,SAAS,IAAI,mGAAmG;IAClH;;IAEA;IACA,IAAItM,QAAQ,CAAC4D,YAAY,IAAI5D,QAAQ,CAAC4D,YAAY,CAAC0E,MAAM,GAAG,CAAC,EAAE;MAC7DgE,SAAS,IAAI,yBAAyBtM,QAAQ,CAAC4D,YAAY,CAAC2E,IAAI,CAAC,IAAI,CAAC,GAAG;IAC3E;IAEA,OAAO+D,SAAS;EAClB;;EAEA;AACF;AACA;EACUS,YAAYA,CAACtB,SAAiB,EAAU;IAC9C,MAAMgC,MAAM,GAAG;MACb,CAAC,EAAE,qBAAqB;MACxB,CAAC,EAAE,gCAAgC;MACnC,CAAC,EAAE,iBAAiB;MACpB,CAAC,EAAE;IACL,CAAC;IACD,OAAOA,MAAM,CAAChC,SAAS,CAAwB,IAAI,SAAS;EAC9D;;EAEA;AACF;AACA;EACEiC,kBAAkBA,CAAC1N,QAAiE,EAAU;IAAA,IAAA2N,qBAAA,EAAAC,qBAAA;IAC5F;IACA,IAAI,SAAS,IAAI5N,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAIA,QAAQ,CAACY,IAAI,IAAI,UAAU,IAAIZ,QAAQ,CAACY,IAAI,IAAI,gBAAgB,IAAIZ,QAAQ,CAACY,IAAI,EAAE;MACpI,MAAMiN,UAAU,GAAG7N,QAAkC;MACrD,MAAMY,IAAI,GAAGiN,UAAU,CAACjN,IAAI;MAE5B,IAAI0L,SAAS,GAAG,gCAAgC;;MAEhD;MACAA,SAAS,IAAI1L,IAAI,CAACZ,QAAQ;;MAE1B;MACA,IAAIY,IAAI,CAACkN,eAAe,EAAE;QAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;QACxB,KAAAF,qBAAA,GAAInN,IAAI,CAACkN,eAAe,CAACI,YAAY,cAAAH,qBAAA,eAAjCA,qBAAA,CAAmCzF,MAAM,EAAE;UAC7CgE,SAAS,IAAI,0BAA0B;UACvC1L,IAAI,CAACkN,eAAe,CAACI,YAAY,CAAC3B,OAAO,CAAC4B,OAAO,IAAI;YACnD7B,SAAS,IAAI,KAAK6B,OAAO,IAAI;UAC/B,CAAC,CAAC;QACJ;QAEA,KAAAH,sBAAA,GAAIpN,IAAI,CAACkN,eAAe,CAACM,eAAe,cAAAJ,sBAAA,eAApCA,sBAAA,CAAsC1F,MAAM,EAAE;UAChDgE,SAAS,IAAI,6BAA6B;UAC1C1L,IAAI,CAACkN,eAAe,CAACM,eAAe,CAAC7B,OAAO,CAAC8B,IAAI,IAAI;YACnD/B,SAAS,IAAI,KAAK+B,IAAI,IAAI;UAC5B,CAAC,CAAC;QACJ;QAEA,KAAAJ,sBAAA,GAAIrN,IAAI,CAACkN,eAAe,CAACnK,eAAe,cAAAsK,sBAAA,eAApCA,sBAAA,CAAsC3F,MAAM,EAAE;UAChDgE,SAAS,IAAI,6BAA6B;UAC1C1L,IAAI,CAACkN,eAAe,CAACnK,eAAe,CAAC4I,OAAO,CAACxE,GAAG,IAAI;YAClDuE,SAAS,IAAI,KAAKvE,GAAG,IAAI;UAC3B,CAAC,CAAC;QACJ;MACF;;MAEA;MACAuE,SAAS,IAAI,4BAA4B1L,IAAI,CAAC0N,cAAc,OAAO1N,IAAI,CAAC2N,eAAe,CAACC,OAAO,CAAC,CAAC,CAAC,KAAK;MAEvG,OAAOlC,SAAS;IAClB;;IAEA;IACA,IAAI,SAAS,IAAItM,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAIA,QAAQ,CAACY,IAAI,IAAI,aAAa,IAAIZ,QAAQ,CAACY,IAAI,EAAE;MAAA,IAAA6N,qBAAA;MAClG,MAAMC,WAAW,GAAG1O,QAA2B;MAE/C,IAAIsM,SAAS,GAAG,6BAA6B;;MAE7C;MACA,IAAIoC,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,IAAID,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,CAAC3O,QAAQ,EAAE;QACzEsM,SAAS,IAAIoC,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,CAAC3O,QAAQ;MACpD,CAAC,MAAM;QACL;QACAsM,SAAS,IAAI,0BAA0BjM,IAAI,CAACC,SAAS,CAACoO,WAAW,CAAC9N,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,UAAU;MAC5F;;MAEA;MACA,KAAA6N,qBAAA,GAAIC,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,cAAAF,qBAAA,eAA5BA,qBAAA,CAA8BG,OAAO,EAAE;QACzCtC,SAAS,IAAI,6BAA6BoC,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,CAACC,OAAO,WAAW;QACzF,IAAIF,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,CAACzB,UAAU,EAAE;UAC3CZ,SAAS,IAAI,iBAAiB7H,IAAI,CAACgI,KAAK,CAACiC,WAAW,CAAC9N,IAAI,CAAC+N,WAAW,CAACzB,UAAU,GAAG,GAAG,CAAC,IAAI;QAC7F;MACF;MAEA,OAAOZ,SAAS;IAClB;;IAEA;IACA,MAAMuC,UAAU,GAAG7O,QAAwB;IAC3C,MAAM;MAAE2F;IAAc,CAAC,GAAGkJ,UAAU;IAEpC,IAAIvC,SAAS,GAAG,KAAK3G,aAAa,CAACE,cAAc,MAAM;;IAEvD;IACA,IAAIF,aAAa,CAACI,qBAAqB,EAAE;MAAA,IAAA+I,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACvC1C,SAAS,IAAI,wCAAwC;;MAErD;MACA,IAAI,EAAAwC,qBAAA,GAAAnJ,aAAa,CAACI,qBAAqB,CAACC,uBAAuB,cAAA8I,qBAAA,uBAA3DA,qBAAA,CAA6DxG,MAAM,IAAG,CAAC,EAAE;QAC3EgE,SAAS,IAAI,gCAAgC;QAC7C3G,aAAa,CAACI,qBAAqB,CAACC,uBAAuB,CAACuG,OAAO,CAAC8B,IAAI,IAAI;UAC1E/B,SAAS,IAAI,OAAO+B,IAAI,CAAC9E,WAAW,CAAC0F,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACnK,WAAW,CAAC,CAAC,MAAM;UAC3EwH,SAAS,IAAI,wBAAwB+B,IAAI,CAAC7E,oBAAoB,CAACyF,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI;UACrF3C,SAAS,IAAI,mBAAmB+B,IAAI,CAAC5E,eAAe,KAAK;UACzD6C,SAAS,IAAI,uBAAuB+B,IAAI,CAAC3E,oBAAoB,OAAO;QACtE,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,EAAAqF,sBAAA,GAAApJ,aAAa,CAACI,qBAAqB,CAACE,qBAAqB,cAAA8I,sBAAA,uBAAzDA,sBAAA,CAA2DzG,MAAM,IAAG,CAAC,EAAE;QACzEgE,SAAS,IAAI,iCAAiC;QAC9C3G,aAAa,CAACI,qBAAqB,CAACE,qBAAqB,CAACsG,OAAO,CAAC2C,IAAI,IAAI;UACxE5C,SAAS,IAAI,KAAK4C,IAAI,IAAI;QAC5B,CAAC,CAAC;QACF5C,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAI,EAAA0C,sBAAA,GAAArJ,aAAa,CAACI,qBAAqB,CAACG,YAAY,cAAA8I,sBAAA,uBAAhDA,sBAAA,CAAkD1G,MAAM,IAAG,CAAC,EAAE;QAChEgE,SAAS,IAAI,wBAAwB;QACrC3G,aAAa,CAACI,qBAAqB,CAACG,YAAY,CAACqG,OAAO,CAAC,CAAChG,MAAM,EAAED,KAAK,KAAK;UAC1EgG,SAAS,IAAI,QAAQhG,KAAK,GAAG,CAAC,KAAKC,MAAM,CAACA,MAAM,IAAI;UACpD+F,SAAS,IAAI,mBAAmB/F,MAAM,CAACC,QAAQ,IAAI;UACnD8F,SAAS,IAAI,iBAAiB/F,MAAM,CAACE,cAAc,CAACwI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI;UAC1E3C,SAAS,IAAI,yBAAyB/F,MAAM,CAACG,cAAc,IAAI;UAC/D4F,SAAS,IAAI,uBAAuB/F,MAAM,CAACI,SAAS,IAAI;UACxD2F,SAAS,IAAI,mBAAmB/F,MAAM,CAACK,QAAQ,MAAM;QACvD,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIjB,aAAa,CAACI,qBAAqB,CAACa,QAAQ,EAAE;QAChD0F,SAAS,IAAI,gCAAgC3G,aAAa,CAACI,qBAAqB,CAACa,QAAQ,MAAM;MACjG;IACF;;IAEA;IACA,IAAI,EAAA+G,qBAAA,GAAAhI,aAAa,CAACkB,mBAAmB,cAAA8G,qBAAA,uBAAjCA,qBAAA,CAAmCrF,MAAM,IAAG,CAAC,EAAE;MACjDgE,SAAS,IAAI,+BAA+B;MAC5C3G,aAAa,CAACkB,mBAAmB,CAAC0F,OAAO,CAAC4C,QAAQ,IAAI;QACpD7C,SAAS,IAAI,OAAO6C,QAAQ,CAACpI,aAAa,OAAOoI,QAAQ,CAACnI,UAAU,KAAK;QACzEsF,SAAS,IAAI,KAAK6C,QAAQ,CAAClI,WAAW,MAAM;MAC9C,CAAC,CAAC;IACJ;;IAEA;IACA,IAAItB,aAAa,CAACuB,iBAAiB,EAAE;MACnCoF,SAAS,IAAI,6BAA6B;MAC1CA,SAAS,IAAI,6BAA6B;MAC1C3G,aAAa,CAACuB,iBAAiB,CAACC,WAAW,CAACoF,OAAO,CAAC6C,MAAM,IAAI;QAC5D9C,SAAS,IAAI,KAAK8C,MAAM,IAAI;MAC9B,CAAC,CAAC;MACF9C,SAAS,IAAI,uBAAuB3G,aAAa,CAACuB,iBAAiB,CAACE,mBAAmB,MAAM;IAC/F;;IAEA;IACA,IAAI,EAAAwG,qBAAA,GAAAjI,aAAa,CAAC0B,eAAe,cAAAuG,qBAAA,uBAA7BA,qBAAA,CAA+BtF,MAAM,IAAG,CAAC,EAAE;MAC7CgE,SAAS,IAAI,2BAA2B;MACxC3G,aAAa,CAAC0B,eAAe,CAACkF,OAAO,CAAClG,MAAM,IAAI;QAC9CiG,SAAS,IAAI,KAAKjG,MAAM,MAAM;MAChC,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMd,SAAS,GAAIvF,QAAQ,CAASuF,SAAS,IAAKvF,QAAQ,CAASqP,UAAU,IAAI,IAAI7J,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACzG6G,SAAS,IAAI,oDAAoD,IAAI9G,IAAI,CAACD,SAAS,CAAC,CAAC+J,cAAc,CAAC,CAAC,KAAK;IAE1G,OAAOhD,SAAS;EAClB;;EAEA;AACF;AACA;EACEiD,sBAAsBA,CAACvP,QAAiE,EAAY;IAClG,MAAM2D,eAAyB,GAAG,EAAE;;IAEpC;IACA,IAAI,SAAS,IAAI3D,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAIA,QAAQ,CAACY,IAAI,IAAI,iBAAiB,IAAIZ,QAAQ,CAACY,IAAI,EAAE;MACtG,MAAMiN,UAAU,GAAG7N,QAAkC;MACrD,IAAI6N,UAAU,CAACjN,IAAI,CAACkN,eAAe,CAACnK,eAAe,EAAE;QACnDkK,UAAU,CAACjN,IAAI,CAACkN,eAAe,CAACnK,eAAe,CAAC4I,OAAO,CAACiD,CAAC,IAAI7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;MACvF;MACA,OAAO7L,eAAe;IACxB;IAEA,IAAI5E,iBAAiB,CAACiB,QAAQ,CAAC,EAAE;MAC/B;MACA,IAAIA,QAAQ,CAACY,IAAI,CAAC+C,eAAe,EAAE;QACjC,MAAM+L,IAAI,GAAG1P,QAAQ,CAACY,IAAI,CAAC+C,eAAe;QAC1C,IAAI+L,IAAI,CAAC5H,iBAAiB,EAAE4H,IAAI,CAAC5H,iBAAiB,CAACyE,OAAO,CAACiD,CAAC,IAAI7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;QACxF,IAAIE,IAAI,CAACC,iBAAiB,EAAED,IAAI,CAACC,iBAAiB,CAACpD,OAAO,CAACiD,CAAC,IAAI7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;QACxF,IAAIE,IAAI,CAACE,mBAAmB,EAAEF,IAAI,CAACE,mBAAmB,CAACrD,OAAO,CAACiD,CAAC,IAAI7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;QAC5F,IAAIE,IAAI,CAACG,aAAa,EAAEH,IAAI,CAACG,aAAa,CAACtD,OAAO,CAACiD,CAAC,IAAI7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;QAChF,IAAIE,IAAI,CAACI,aAAa,EAAEJ,IAAI,CAACI,aAAa,CAACvD,OAAO,CAACiD,CAAC,IAAI7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;MAClF;MACA;MACA,IAAIxP,QAAQ,CAACY,IAAI,CAACoH,sBAAsB,IAAIhI,QAAQ,CAACY,IAAI,CAACoH,sBAAsB,CAACM,MAAM,GAAG,CAAC,EAAE;QAC3FtI,QAAQ,CAACY,IAAI,CAACoH,sBAAsB,CAACuE,OAAO,CAAEiD,CAAS,IAAK7L,eAAe,CAAC8L,IAAI,CAACD,CAAC,CAAC,CAAC;MACtF;IACF,CAAC,MAAM;MAAA,IAAAO,qBAAA;MACL;MACA,MAAMlB,UAAU,GAAG7O,QAAwB;MAC3C,KAAA+P,qBAAA,GAAIlB,UAAU,CAAClJ,aAAa,CAACI,qBAAqB,cAAAgK,qBAAA,eAA9CA,qBAAA,CAAgD7J,YAAY,EAAE;QAChE2I,UAAU,CAAClJ,aAAa,CAACI,qBAAqB,CAACG,YAAY,CAACqG,OAAO,CAAChG,MAAM,IAAI;UAC5E5C,eAAe,CAAC8L,IAAI,CAAC,GAAGlJ,MAAM,CAACA,MAAM,KAAKA,MAAM,CAACC,QAAQ,YAAY,CAAC;QACxE,CAAC,CAAC;MACJ;IACF;IAEA,OAAO7C,eAAe;EACxB;;EAEA;AACF;AACA;EACEqM,gBAAgBA,CAAChQ,QAAiE,EAAY;IAC5F,MAAMiQ,SAAmB,GAAG,EAAE;;IAE9B;IACA,IAAI,SAAS,IAAIjQ,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAIA,QAAQ,CAACY,IAAI,IAAI,gBAAgB,IAAIZ,QAAQ,CAACY,IAAI,EAAE;MACrG;MACA;MACA,OAAOqP,SAAS;IAClB;IAEA,IAAIlR,iBAAiB,CAACiB,QAAQ,CAAC,EAAE;MAC/B;MACA,IAAIA,QAAQ,CAACY,IAAI,CAACqH,OAAO,IAAIjI,QAAQ,CAACY,IAAI,CAACqH,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;QAC7DtI,QAAQ,CAACY,IAAI,CAACqH,OAAO,CAACsE,OAAO,CAAE2D,CAAS,IAAKD,SAAS,CAACR,IAAI,CAACS,CAAC,CAAC,CAAC;MACjE;IACF,CAAC,MAAM;MACL;MACA,MAAMrB,UAAU,GAAG7O,QAAwB;MAC3C,IAAI6O,UAAU,CAAClJ,aAAa,CAACkB,mBAAmB,EAAE;QAChDgI,UAAU,CAAClJ,aAAa,CAACkB,mBAAmB,CAAC0F,OAAO,CAAC4C,QAAQ,IAAI;UAC/Dc,SAAS,CAACR,IAAI,CAAC,GAAGN,QAAQ,CAACpI,aAAa,KAAKoI,QAAQ,CAAClI,WAAW,EAAE,CAAC;QACtE,CAAC,CAAC;MACJ;IACF;IAEA,OAAOgJ,SAAS;EAClB;;EAEA;AACF;AACA;EACEE,4BAA4BA,CAACnQ,QAAyB,EAAU;IAC9D;IACA,IAAIA,QAAQ,CAAC4H,YAAY,KAAK,MAAM,IAAI5H,QAAQ,CAACY,IAAI,CAACZ,QAAQ,EAAE;MAC9D;MACA;MACA,MAAMoQ,aAAa,GAAGpQ,QAAQ,CAACY,IAAI,CAACZ,QAAQ;MAE5C,IAAIoQ,aAAa,CAAC9Q,QAAQ,CAAC,sBAAsB,CAAC,EAAE;QAClD;QACA,MAAMqC,KAAK,GAAG3B,QAAQ,CAACY,IAAI,CAACe,KAAK,IAAI,eAAe;QACpD,OAAO,mCAAmCA,KAAK;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;MAC5D;MAEA,OAAOyO,aAAa;IACtB;;IAEA;IACA,IAAIpQ,QAAQ,CAACY,IAAI,CAACZ,QAAQ,EAAE;MAC1B,OAAOA,QAAQ,CAACY,IAAI,CAACZ,QAAQ;IAC/B;IAEA,IAAIA,QAAQ,CAACY,IAAI,CAACsB,QAAQ,EAAE;MAC1B,OAAOlC,QAAQ,CAACY,IAAI,CAACsB,QAAQ;IAC/B;IAEA,IAAIlC,QAAQ,CAACY,IAAI,CAACyP,eAAe,EAAE;MACjC,IAAIzL,OAAO,GAAG,MAAM5E,QAAQ,CAACY,IAAI,CAACyP,eAAe,EAAE;MACnD,IAAIrQ,QAAQ,CAACY,IAAI,CAAC0P,gBAAgB,IAAItQ,QAAQ,CAACY,IAAI,CAAC0P,gBAAgB,CAAChI,MAAM,GAAG,CAAC,EAAE;QAC/E1D,OAAO,IAAI,4BAA4B5E,QAAQ,CAACY,IAAI,CAAC0P,gBAAgB,CAAC/H,IAAI,CAAC,IAAI,CAAC,EAAE;MACpF;MACA,OAAO3D,OAAO;IAChB;;IAEA;IACA,OAAO,kCAAkC5E,QAAQ,CAAC4H,YAAY,qCAAqCvH,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACY,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;EAC7I;AACF;;AAEA;AACA,OAAO,MAAM2P,OAAO,GAAG,IAAItR,sBAAsB,CAAC,CAAC;AACnD,eAAesR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}