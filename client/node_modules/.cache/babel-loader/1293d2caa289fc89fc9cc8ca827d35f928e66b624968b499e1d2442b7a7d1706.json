{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\nvar BasicAuthenticationCredentials = /** @class */function () {\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @constructor\n   * @param {string} userName User name.\n   * @param {string} password Password.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  function BasicAuthenticationCredentials(userName, password, authorizationScheme) {\n    if (authorizationScheme === void 0) {\n      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    }\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResourceLike} webResource The WebResourceLike to be signed.\n   * @returns {Promise<WebResourceLike>} The signed request object.\n   */\n  BasicAuthenticationCredentials.prototype.signRequest = function (webResource) {\n    var credentials = this.userName + \":\" + this.password;\n    var encodedCredentials = this.authorizationScheme + \" \" + base64.encodeString(credentials);\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  };\n  return BasicAuthenticationCredentials;\n}();\nexport { BasicAuthenticationCredentials };","map":{"version":3,"names":["HttpHeaders","base64","Constants","HeaderConstants","DEFAULT_AUTHORIZATION_SCHEME","BasicAuthenticationCredentials","userName","password","authorizationScheme","undefined","valueOf","Error","prototype","signRequest","webResource","credentials","encodedCredentials","encodeString","headers","set","AUTHORIZATION","Promise","resolve"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\credentials\\basicAuthenticationCredentials.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  userName: string;\n  password: string;\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @constructor\n   * @param {string} userName User name.\n   * @param {string} password Password.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  constructor(\n    userName: string,\n    password: string,\n    authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME\n  ) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResourceLike} webResource The WebResourceLike to be signed.\n   * @returns {Promise<WebResourceLike>} The signed request object.\n   */\n  signRequest(webResource: WebResourceLike) {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,SAASC,SAAS,QAAQ,mBAAmB;AAG7C,IAAMC,eAAe,GAAGD,SAAS,CAACC,eAAe;AACjD,IAAMC,4BAA4B,GAAG,OAAO;AAE5C,IAAAC,8BAAA;EAKE;;;;;;;;EAQA,SAAAA,+BACEC,QAAgB,EAChBC,QAAgB,EAChBC,mBAA0D;IAA1D,IAAAA,mBAAA;MAAAA,mBAAA,GAAAJ,4BAA0D;IAAA;IAb5D,KAAAI,mBAAmB,GAAWJ,4BAA4B;IAexD,IAAIE,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKG,SAAS,IAAI,OAAOH,QAAQ,CAACI,OAAO,EAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAErF,IAAIJ,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKE,SAAS,IAAI,OAAOF,QAAQ,CAACG,OAAO,EAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAErF,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAChD;EAEA;;;;;;EAMAH,8BAAA,CAAAO,SAAA,CAAAC,WAAW,GAAX,UAAYC,WAA4B;IACtC,IAAMC,WAAW,GAAM,IAAI,CAACT,QAAQ,SAAI,IAAI,CAACC,QAAU;IACvD,IAAMS,kBAAkB,GAAM,IAAI,CAACR,mBAAmB,SAAIP,MAAM,CAACgB,YAAY,CAACF,WAAW,CAAG;IAC5F,IAAI,CAACD,WAAW,CAACI,OAAO,EAAEJ,WAAW,CAACI,OAAO,GAAG,IAAIlB,WAAW,EAAE;IACjEc,WAAW,CAACI,OAAO,CAACC,GAAG,CAAChB,eAAe,CAACiB,aAAa,EAAEJ,kBAAkB,CAAC;IAC1E,OAAOK,OAAO,CAACC,OAAO,CAACR,WAAW,CAAC;EACrC,CAAC;EACH,OAAAT,8BAAC;AAAD,CAAC,CA1CD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}