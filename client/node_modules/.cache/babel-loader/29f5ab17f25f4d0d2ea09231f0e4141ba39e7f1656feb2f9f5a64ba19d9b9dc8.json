{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// RSS API response types\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'livemint.com': 0.8,\n  'npr.org': 0.9,\n  'reuters.com': 0.9,\n  'cnn.com': 0.8,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'nutrition',\n  MEDICAL: 'medical',\n  PUBLIC_HEALTH: 'health',\n  CLINICAL: 'clinical',\n  PREVENTION: 'prevention',\n  MENTAL_HEALTH: 'mental',\n  GENERAL: 'general',\n  SCIENCE: 'science',\n  TECH: 'tech',\n  POLITICAL: 'political',\n  SPORTS: 'sports',\n  ENTERTAINMENT: 'entertainment',\n  BUSINESS: 'business',\n  NATURE: 'nature'\n};\n\n// Check RSS service health\nexport const checkRSSHealth = async () => {\n  try {\n    console.log('🏥 Checking RSS service health...');\n    const response = await axios.get(`${API_URL}/news/health`, {\n      timeout: 5000\n    });\n    const data = response.data;\n    console.log('✅ RSS Health check response:', data);\n    return {\n      success: data.success,\n      isHealthy: data.success && data.status.is_initialized && !data.status.initialization_error,\n      status: data.status,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('❌ RSS health check failed:', error);\n    return {\n      success: false,\n      isHealthy: false,\n      message: `Health check failed: ${error.message}`\n    };\n  }\n};\n\n// Helper function to check if articles need refreshing\nconst shouldRefreshFeed = lastChecked => {\n  if (!lastChecked) return true; // No data, need to fetch\n\n  const lastCheckTime = new Date(lastChecked);\n  const now = new Date();\n  const hoursDiff = (now.getTime() - lastCheckTime.getTime()) / (1000 * 60 * 60);\n\n  // Refresh if more than 24 hours old\n  return hoursDiff > 24;\n};\n\n// Check feed freshness before fetching articles\nconst checkAndRefreshFeed = async feedId => {\n  try {\n    var _response$data$data_s;\n    console.log('🕐 Checking feed freshness...');\n\n    // Get feed status from your debug endpoint\n    const response = await axios.get(`${API_URL}/news/debug/check-table`);\n    if (!response.data.success) {\n      return {\n        needsRefresh: true\n      };\n    }\n    const lastChecked = (_response$data$data_s = response.data.data_summary) === null || _response$data$data_s === void 0 ? void 0 : _response$data$data_s.last_checked;\n    const needsRefresh = shouldRefreshFeed(lastChecked);\n    console.log('📊 Feed freshness check:', {\n      lastChecked,\n      needsRefresh,\n      hoursSinceLastCheck: lastChecked ? Math.round((new Date().getTime() - new Date(lastChecked).getTime()) / (1000 * 60 * 60)) : 'N/A'\n    });\n    return {\n      needsRefresh,\n      lastChecked\n    };\n  } catch (error) {\n    console.error('❌ Error checking feed freshness:', error);\n    return {\n      needsRefresh: true\n    }; // Default to refresh on error\n  }\n};\n\n// Trigger feed refresh\nconst triggerFeedRefresh = async feedId => {\n  try {\n    console.log('🔄 Triggering feed refresh...', {\n      feedId\n    });\n    const params = {\n      force: false // Only refresh if needed\n    };\n    if (feedId) {\n      params.feed_id = feedId;\n    }\n    const response = await axios.post(`${API_URL}/news/fetch`, {}, {\n      params,\n      timeout: 30000 // 30 second timeout for fetch\n    });\n    console.log('✅ Feed refresh response:', response.data);\n    return response.data.success;\n  } catch (error) {\n    console.error('❌ Error refreshing feed:', error);\n    return false;\n  }\n};\n\n// Main function to fetch RSS articles with intelligent refresh\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    var _data$articles;\n    console.log('🔍 Fetching RSS articles with intelligent refresh...', {\n      categories,\n      limit\n    });\n\n    // Step 1: Check if we need to refresh the feed\n    const feedCheck = await checkAndRefreshFeed();\n\n    // Step 2: If data is stale, trigger refresh\n    if (feedCheck.needsRefresh) {\n      console.log('📥 Articles are stale, triggering refresh...');\n      const refreshSuccess = await triggerFeedRefresh();\n      if (refreshSuccess) {\n        console.log('✅ Feed refreshed successfully');\n        // Wait a moment for the refresh to complete\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } else {\n        console.warn('⚠️ Feed refresh failed, proceeding with existing data...');\n      }\n    } else {\n      console.log('✅ Articles are fresh, using cached data');\n    }\n\n    // Step 3: Fetch articles\n    const params = {\n      limit: limit || 6,\n      flat: true\n    };\n\n    // Map frontend categories to backend categories\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\n      if (mappedCategory) {\n        params.category = mappedCategory;\n      }\n    }\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params,\n      timeout: 10000\n    });\n    const data = response.data;\n    console.log('✅ RSS API response:', {\n      success: data.success,\n      articleCount: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n      count: data.count,\n      filtersApplied: data.filters_applied\n    });\n    if (!data.success) {\n      console.warn('⚠️ RSS API returned success=false, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Convert RSS articles to NewsArticle format\n    const articles = (data.articles || []).filter(article => article.title && article.title.trim() !== '').map((article, index) => {\n      var _article$title, _article$id;\n      console.log(`📰 Processing article ${index + 1}:`, {\n        title: ((_article$title = article.title) === null || _article$title === void 0 ? void 0 : _article$title.substring(0, 50)) + '...',\n        hasMedia: article.has_media,\n        mediaUrl: article.media_url,\n        thumbUrl: article.media_thumb_url,\n        category: article.category,\n        domain: article.domain\n      });\n\n      // Enhanced image URL extraction\n      const extractValidImageUrl = url => {\n        if (!url) return '';\n        const trimmed = url.trim();\n        if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\n        if (trimmed.startsWith('http') || trimmed.startsWith('//')) return trimmed;\n        return '';\n      };\n      const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\n      const imageUrl = extractValidImageUrl(article.media_url);\n      const hasMedia = article.has_media || !!(thumbnailUrl || imageUrl);\n      return {\n        id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || article.guid || `rss_${Date.now()}_${index}`,\n        title: article.title || 'No title',\n        summary: article.description || 'No summary available',\n        url: article.link || '#',\n        source: article.feed_name || 'Unknown Source',\n        domain: article.domain || extractDomain(article.link || ''),\n        category: mapBackendCategory(article.category),\n        publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description),\n        tags: extractTags(article.title, article.description),\n        // RSS enhanced fields\n        thumbnailUrl,\n        imageUrl,\n        mediaType: article.media_type || (hasMedia ? 'image' : ''),\n        mediaDescription: article.media_description || '',\n        author: article.author || '',\n        fullContent: article.content_encoded || '',\n        wordCount: article.word_count || 0,\n        readingTime: article.reading_time || 0,\n        hasMedia,\n        hasAuthor: article.has_author || !!(article.author && article.author.trim()),\n        contentLength: article.content_length || 0,\n        feedTitle: article.feed_name || '',\n        guid: article.guid || '',\n        commentsUrl: article.comments_url || '',\n        language: article.language || '',\n        rights: article.rights || '',\n        extractedAt: article.extracted_at || '',\n        lastModified: article.last_modified || '',\n        // RSS API specific fields\n        timeAgo: article.time_ago || '',\n        isRecent: article.is_recent || false,\n        contentQuality: article.content_quality || 'low',\n        completeness: article.completeness || 'minimal',\n        country: article.country || '',\n        feedName: article.feed_name || '',\n        feedId: article.feed_id || 0\n      };\n    });\n    console.log('📰 Processed RSS articles:', {\n      total: articles.length,\n      withImages: articles.filter(a => a.hasMedia).length,\n      withAuthors: articles.filter(a => a.hasAuthor).length,\n      categories: [...new Set(articles.map(a => a.category))],\n      dataFreshness: feedCheck.needsRefresh ? 'Refreshed' : 'Cached'\n    });\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      const category = article.category;\n      if (!categorizedArticles[category]) {\n        categorizedArticles[category] = [];\n      }\n      categorizedArticles[category].push(article);\n    });\n    return {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      filtersApplied: data.filters_applied,\n      message: feedCheck.needsRefresh ? 'Health news refreshed and fetched successfully' : 'Health news fetched from cache'\n    };\n  } catch (error) {\n    var _error$response;\n    console.error('❌ Error fetching RSS feed:', error);\n    if (error.code === 'ECONNREFUSED' || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 500) {\n      console.log('📱 RSS service unavailable, using fallback news...');\n    } else {\n      console.log('📱 RSS error, using fallback news...', error.message);\n    }\n    const fallback = await getFallbackNews();\n    return {\n      ...fallback,\n      message: `RSS service error (${error.message}). Showing sample news.`\n    };\n  }\n};\n\n// Get available categories and countries from RSS API\nexport const getRSSFilters = async () => {\n  try {\n    console.log('🏷️ Fetching RSS categories and countries...');\n    const response = await axios.get(`${API_URL}/news/categories-countries`, {\n      timeout: 5000\n    });\n    const data = response.data;\n    console.log('✅ RSS filters response:', data);\n    return {\n      success: data.success,\n      categories: data.categories || [],\n      countries: data.countries || []\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS filters:', error);\n    return {\n      success: false,\n      message: `Failed to fetch filters: ${error.message}`\n    };\n  }\n};\n\n// Trigger RSS polling manually\nexport const triggerRSSPolling = async (force, feedId) => {\n  try {\n    console.log('🔄 Triggering RSS polling...', {\n      force,\n      feedId\n    });\n    const params = {};\n    if (force) params.force = 'true';\n    if (feedId) params.feed_id = feedId.toString();\n    const response = await axios.post(`${API_URL}/news/polling/trigger`, {}, {\n      params,\n      timeout: 30000 // Longer timeout for polling\n    });\n    const data = response.data;\n    console.log('✅ RSS polling response:', data);\n    return {\n      success: data.success,\n      results: data.results,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('❌ Error triggering RSS polling:', error);\n    return {\n      success: false,\n      message: `Failed to trigger polling: ${error.message}`\n    };\n  }\n};\n\n// Map frontend categories to backend RSS categories\nconst mapFrontendToBackendCategory = frontendCategory => {\n  const categoryMap = {\n    'nutrition': 'nutrition',\n    'medical': 'medical',\n    'health': 'health',\n    'clinical': 'medical',\n    'prevention': 'health',\n    'mental': 'mental',\n    'science': 'science',\n    'general': 'health',\n    'tech': 'tech',\n    'business': 'business'\n  };\n  return categoryMap[frontendCategory.toLowerCase()] || null;\n};\n\n// Map backend categories to frontend display categories\nconst mapBackendCategory = backendCategory => {\n  if (!backendCategory) return 'General Health';\n  const categoryMap = {\n    'nutrition': 'Nutrition & Diet',\n    'diet': 'Nutrition & Diet',\n    'medical': 'Medical Research',\n    'health': 'Public Health',\n    'mental': 'Mental Health',\n    'prevention': 'Disease Prevention',\n    'clinical': 'Clinical Studies',\n    'science': 'Medical Research',\n    'tech': 'Medical Technology',\n    'political': 'Health Policy',\n    'sports': 'Fitness & Sports',\n    'entertainment': 'Wellness',\n    'business': 'Health Business',\n    'nature': 'Environmental Health'\n  };\n  const lowerCategory = backendCategory.toLowerCase();\n  for (const [key, value] of Object.entries(categoryMap)) {\n    if (lowerCategory.includes(key)) {\n      return value;\n    }\n  }\n  return 'General Health';\n};\n\n// Enhanced fallback news with RSS structure\nconst getFallbackNews = async () => {\n  const fallbackArticles = [{\n    id: 'fallback_1',\n    title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\n    summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\n    url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\n    source: \"NIH Health News\",\n    domain: \"nih.gov\",\n    category: \"Nutrition & Diet\",\n    publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Sarah Johnson\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 150,\n    readingTime: 1,\n    contentLength: 750,\n    timeAgo: \"1 day ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_2',\n    title: \"Exercise and Mental Health: The Connection You Need to Know\",\n    summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\n    url: \"https://www.cdc.gov/mental-health/exercise-connection\",\n    source: \"CDC Health Updates\",\n    domain: \"cdc.gov\",\n    category: \"Mental Health\",\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.90,\n    tags: ['mental-health', 'exercise', 'wellness', 'depression'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Michael Chen\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 180,\n    readingTime: 1,\n    contentLength: 900,\n    timeAgo: \"2 days ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_3',\n    title: \"The Importance of Sleep for Immune System Function\",\n    summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\n    url: \"https://www.nih.gov/news-events/sleep-immune-system\",\n    source: \"Sleep Health Research\",\n    domain: \"nih.gov\",\n    category: \"General Health\",\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.85,\n    tags: ['sleep', 'immune-system', 'health', 'wellness'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Lisa Rodriguez\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 200,\n    readingTime: 1,\n    contentLength: 1000,\n    timeAgo: \"3 days ago\",\n    isRecent: false,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }];\n\n  // Categorize fallback articles\n  const categorizedArticles = {};\n  fallbackArticles.forEach(article => {\n    if (!categorizedArticles[article.category]) {\n      categorizedArticles[article.category] = [];\n    }\n    categorizedArticles[article.category].push(article);\n  });\n  return {\n    success: true,\n    articles: fallbackArticles,\n    categories: categorizedArticles,\n    lastUpdated: new Date().toISOString(),\n    count: fallbackArticles.length,\n    message: 'Using sample health news (RSS service unavailable)'\n  };\n};\n\n// Updated utility functions\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching RSS articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching RSS articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available to search'\n      };\n    }\n    const searchTerm = query.toLowerCase();\n    const matchingArticles = feedResponse.articles.filter(article => article.title.toLowerCase().includes(searchTerm) || article.summary.toLowerCase().includes(searchTerm) || article.tags.some(tag => tag.includes(searchTerm)) || article.author && article.author.toLowerCase().includes(searchTerm)).slice(0, limit || 10);\n    return {\n      success: true,\n      articles: matchingArticles,\n      lastUpdated: new Date().toISOString(),\n      count: matchingArticles.length,\n      message: `Search results for \"${query}\"`\n    };\n  } catch (error) {\n    console.error('❌ Error searching articles:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\n\n// Manual refresh function that always triggers fetch\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Manual refresh triggered');\n\n    // Force refresh regardless of age\n    const refreshSuccess = await triggerFeedRefresh();\n    if (refreshSuccess) {\n      console.log('✅ Manual refresh completed');\n      // Wait for refresh to complete\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Fetch fresh articles\n      return await fetchNewsFeed();\n    } else {\n      throw new Error('Manual refresh failed');\n    }\n  } catch (error) {\n    console.error('❌ Error in manual refresh:', error);\n    return {\n      success: false,\n      message: `Manual refresh failed: ${error.message}`\n    };\n  }\n};\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed();\n    const healthCheck = await checkRSSHealth();\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    let totalWordCount = 0;\n    let totalReadingTime = 0;\n    let articlesWithImages = 0;\n    let articlesWithAuthors = 0;\n    let trustedSources = 0;\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n      if (article.hasMedia) articlesWithImages++;\n      if (article.hasAuthor) articlesWithAuthors++;\n      if (isTrustedDomain(article.url)) trustedSources++;\n      if (article.wordCount) totalWordCount += article.wordCount;\n      if (article.readingTime) totalReadingTime += article.readingTime;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts,\n        articlesWithImages,\n        articlesWithAuthors,\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\n        trustedSources,\n        rssServiceHealth: healthCheck.status\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility functions\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary,\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\n    qualityScore: calculateQualityScore(article),\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read'\n  };\n};\nconst calculateQualityScore = article => {\n  let score = 0;\n  if (article.hasAuthor) score += 0.2;\n  if (article.hasMedia) score += 0.2;\n  if (article.wordCount && article.wordCount > 100) score += 0.2;\n  if (article.contentLength && article.contentLength > 500) score += 0.2;\n  if (isTrustedDomain(article.url)) score += 0.2;\n  return Math.min(score, 1.0);\n};\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname.toLowerCase();\n  } catch {\n    return 'unknown';\n  }\n};\nconst calculateRelevanceScore = (title = '', description = '') => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n  let score = 0.5;\n  score += matchingKeywords.length * 0.08;\n  return Math.min(score, 1.0);\n};\nconst extractTags = (title = '', description = '', existingTags) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const tags = [];\n  if (existingTags) {\n    try {\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n      tags.push(...parsedTags);\n    } catch (e) {\n      // Continue with keyword extraction\n    }\n  }\n  const tagKeywords = ['health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise', 'mental-health', 'wellness', 'prevention', 'treatment', 'research', 'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor', 'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'];\n  tagKeywords.forEach(keyword => {\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\n      tags.push(keyword);\n    }\n  });\n  return tags.slice(0, 5);\n};\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\nexport const getAvailableCategories = async () => {\n  try {\n    const filters = await getRSSFilters();\n    if (filters.success && filters.categories) {\n      // Map RSS categories to display labels\n      const rssCategories = filters.categories.map(cat => ({\n        id: cat,\n        label: mapBackendCategory(cat)\n      }));\n      return [{\n        id: 'all',\n        label: 'All Health News'\n      }, ...rssCategories];\n    }\n  } catch (error) {\n    console.error('❌ Error fetching RSS categories:', error);\n  }\n\n  // Fallback categories\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: 'nutrition',\n    label: 'Nutrition & Diet'\n  }, {\n    id: 'medical',\n    label: 'Medical Research'\n  }, {\n    id: 'health',\n    label: 'Public Health'\n  }, {\n    id: 'clinical',\n    label: 'Clinical Studies'\n  }, {\n    id: 'prevention',\n    label: 'Disease Prevention'\n  }, {\n    id: 'mental',\n    label: 'Mental Health'\n  }, {\n    id: 'science',\n    label: 'Science Research'\n  }, {\n    id: 'general',\n    label: 'General Health'\n  }];\n};\n\n// Legacy compatibility\n\nexport class NewsService {\n  async fetchNews() {\n    var _response$articles;\n    const response = await fetchNewsFeed();\n    return ((_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.map(article => ({\n      title: article.title,\n      link: article.url,\n      description: article.summary,\n      pubDate: article.publishedDate,\n      source: article.source,\n      category: article.category,\n      thumbnailUrl: article.thumbnailUrl,\n      imageUrl: article.imageUrl,\n      author: article.author,\n      hasMedia: article.hasMedia\n    }))) || [];\n  }\n}\nexport const newsService = new NewsService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","SCIENCE","TECH","POLITICAL","SPORTS","ENTERTAINMENT","BUSINESS","NATURE","checkRSSHealth","console","log","response","get","timeout","data","success","isHealthy","status","is_initialized","initialization_error","message","error","shouldRefreshFeed","lastChecked","lastCheckTime","Date","now","hoursDiff","getTime","checkAndRefreshFeed","feedId","_response$data$data_s","needsRefresh","data_summary","last_checked","hoursSinceLastCheck","Math","round","triggerFeedRefresh","params","force","feed_id","post","fetchNewsFeed","categories","limit","_data$articles","feedCheck","refreshSuccess","Promise","resolve","setTimeout","warn","flat","length","mappedCategory","mapFrontendToBackendCategory","category","articleCount","articles","count","filtersApplied","filters_applied","getFallbackNews","filter","article","title","trim","map","index","_article$title","_article$id","substring","hasMedia","has_media","mediaUrl","media_url","thumbUrl","media_thumb_url","domain","extractValidImageUrl","url","trimmed","startsWith","thumbnailUrl","imageUrl","id","toString","guid","summary","description","link","source","feed_name","extractDomain","mapBackendCategory","publishedDate","published_date","extracted_at","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","mediaType","media_type","mediaDescription","media_description","author","fullContent","content_encoded","wordCount","word_count","readingTime","reading_time","hasAuthor","has_author","contentLength","content_length","feedTitle","commentsUrl","comments_url","language","rights","extractedAt","lastModified","last_modified","timeAgo","time_ago","isRecent","is_recent","contentQuality","content_quality","completeness","country","feedName","total","withImages","a","withAuthors","Set","dataFreshness","categorizedArticles","forEach","push","lastUpdated","_error$response","code","fallback","getRSSFilters","countries","triggerRSSPolling","results","frontendCategory","categoryMap","toLowerCase","backendCategory","lowerCategory","key","value","Object","entries","includes","fallbackArticles","getArticlesByCategory","searchNewsArticles","query","feedResponse","undefined","searchTerm","matchingArticles","some","tag","slice","refreshNewsFeed","Error","getNewsFeedStats","healthCheck","categoryCounts","sourcesCounts","totalWordCount","totalReadingTime","articlesWithImages","articlesWithAuthors","trustedSources","isTrustedDomain","stats","totalArticles","averageWordCount","averageReadingTime","rssServiceHealth","formatArticleForDisplay","formattedDate","formatTimeAgo","isTrusted","relevancePercentage","shortSummary","displayImage","feedThumbnailUrl","feedImageUrl","hasValidImage","qualityScore","calculateQualityScore","readingTimeText","score","min","URL","hostname","content","healthKeywords","matchingKeywords","keyword","existingTags","parsedTags","split","e","tagKeywords","replace","keys","trustedDomain","dateString","diffInHours","floor","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","filters","rssCategories","cat","label","NewsService","fetchNews","_response$articles","pubDate","newsService"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n  // Enhanced RSS fields\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  mediaType?: string;\r\n  mediaDescription?: string;\r\n  author?: string;\r\n  fullContent?: string;\r\n  wordCount?: number;\r\n  readingTime?: number;\r\n  hasMedia: boolean;\r\n  hasAuthor: boolean;\r\n  contentLength?: number;\r\n  feedTitle?: string;\r\n  feedImageUrl?: string;\r\n  feedThumbnailUrl?: string;\r\n  guid?: string;\r\n  commentsUrl?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  extractedAt?: string;\r\n  lastModified?: string;\r\n  // RSS API enhanced fields\r\n  timeAgo?: string;\r\n  isRecent?: boolean;\r\n  contentQuality?: 'low' | 'medium' | 'high';\r\n  completeness?: 'minimal' | 'partial' | 'complete';\r\n  country?: string;\r\n  feedName?: string;\r\n  feedId?: number;\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n  filtersApplied?: {\r\n    category?: string | null;\r\n    country?: string | null;\r\n    feed_id?: string | null;\r\n    limit?: number;\r\n  };\r\n}\r\n\r\n// RSS API response types\r\ninterface RSSArticleResponse {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  published_date: string;\r\n  author?: string;\r\n  category?: string;\r\n  country?: string;\r\n  feed_name: string;\r\n  feed_id: number;\r\n  time_ago: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  is_recent: boolean;\r\n  content_quality: 'low' | 'medium' | 'high';\r\n  completeness: 'minimal' | 'partial' | 'complete';\r\n  domain: string;\r\n  extracted_at: string;\r\n  // Additional possible fields\r\n  media_thumb_url?: string;\r\n  media_url?: string;\r\n  media_type?: string;\r\n  media_description?: string;\r\n  content_encoded?: string;\r\n  guid?: string;\r\n  comments_url?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  last_modified?: string;\r\n  has_media?: boolean;\r\n  has_author?: boolean;\r\n  content_length?: number;\r\n}\r\n\r\ninterface RSSResponse {\r\n  success: boolean;\r\n  articles: RSSArticleResponse[];\r\n  count: number;\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: string | null;\r\n    limit: number;\r\n  };\r\n  message?: string;\r\n}\r\n\r\ninterface RSSHealthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  status: {\r\n    controller_created: boolean;\r\n    database_available: boolean;\r\n    parser_available: boolean;\r\n    polling_available: boolean;\r\n    is_initialized: boolean;\r\n    initialization_error: string | null;\r\n    database_connection?: string;\r\n    timestamp: string;\r\n  };\r\n}\r\n\r\ninterface RSSCategoriesResponse {\r\n  success: boolean;\r\n  categories: string[];\r\n  countries: string[];\r\n}\r\n\r\ninterface RSSPollingResponse {\r\n  success: boolean;\r\n  message: string;\r\n  results: {\r\n    total: number;\r\n    successful: number;\r\n    failed: number;\r\n    articles_fetched: number;\r\n    duration: string;\r\n  };\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'livemint.com': 0.8,\r\n  'npr.org': 0.9,\r\n  'reuters.com': 0.9,\r\n  'cnn.com': 0.8,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'nutrition',\r\n  MEDICAL: 'medical',\r\n  PUBLIC_HEALTH: 'health',\r\n  CLINICAL: 'clinical',\r\n  PREVENTION: 'prevention',\r\n  MENTAL_HEALTH: 'mental',\r\n  GENERAL: 'general',\r\n  SCIENCE: 'science',\r\n  TECH: 'tech',\r\n  POLITICAL: 'political',\r\n  SPORTS: 'sports',\r\n  ENTERTAINMENT: 'entertainment',\r\n  BUSINESS: 'business',\r\n  NATURE: 'nature'\r\n};\r\n\r\n// Check RSS service health\r\nexport const checkRSSHealth = async (): Promise<{\r\n  success: boolean;\r\n  isHealthy: boolean;\r\n  status?: any;\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🏥 Checking RSS service health...');\r\n    \r\n    const response = await axios.get<RSSHealthResponse>(`${API_URL}/news/health`, {\r\n      timeout: 5000\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS Health check response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      isHealthy: data.success && data.status.is_initialized && !data.status.initialization_error,\r\n      status: data.status,\r\n      message: data.message\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ RSS health check failed:', error);\r\n    return {\r\n      success: false,\r\n      isHealthy: false,\r\n      message: `Health check failed: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to check if articles need refreshing\r\nconst shouldRefreshFeed = (lastChecked: string | null): boolean => {\r\n  if (!lastChecked) return true; // No data, need to fetch\r\n  \r\n  const lastCheckTime = new Date(lastChecked);\r\n  const now = new Date();\r\n  const hoursDiff = (now.getTime() - lastCheckTime.getTime()) / (1000 * 60 * 60);\r\n  \r\n  // Refresh if more than 24 hours old\r\n  return hoursDiff > 24;\r\n};\r\n\r\n// Check feed freshness before fetching articles\r\nconst checkAndRefreshFeed = async (feedId?: number): Promise<{\r\n  needsRefresh: boolean;\r\n  lastChecked?: string;\r\n}> => {\r\n  try {\r\n    console.log('🕐 Checking feed freshness...');\r\n    \r\n    // Get feed status from your debug endpoint\r\n    const response = await axios.get(`${API_URL}/news/debug/check-table`);\r\n    \r\n    if (!response.data.success) {\r\n      return { needsRefresh: true };\r\n    }\r\n    \r\n    const lastChecked = response.data.data_summary?.last_checked;\r\n    const needsRefresh = shouldRefreshFeed(lastChecked);\r\n    \r\n    console.log('📊 Feed freshness check:', {\r\n      lastChecked,\r\n      needsRefresh,\r\n      hoursSinceLastCheck: lastChecked ? \r\n        Math.round((new Date().getTime() - new Date(lastChecked).getTime()) / (1000 * 60 * 60)) : \r\n        'N/A'\r\n    });\r\n    \r\n    return { needsRefresh, lastChecked };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error checking feed freshness:', error);\r\n    return { needsRefresh: true }; // Default to refresh on error\r\n  }\r\n};\r\n\r\n// Trigger feed refresh\r\nconst triggerFeedRefresh = async (feedId?: number): Promise<boolean> => {\r\n  try {\r\n    console.log('🔄 Triggering feed refresh...', { feedId });\r\n    \r\n    const params: any = {\r\n      force: false // Only refresh if needed\r\n    };\r\n    \r\n    if (feedId) {\r\n      params.feed_id = feedId;\r\n    }\r\n    \r\n    const response = await axios.post(`${API_URL}/news/fetch`, {}, {\r\n      params,\r\n      timeout: 30000 // 30 second timeout for fetch\r\n    });\r\n    \r\n    console.log('✅ Feed refresh response:', response.data);\r\n    return response.data.success;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error refreshing feed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Main function to fetch RSS articles with intelligent refresh\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching RSS articles with intelligent refresh...', { categories, limit });\r\n    \r\n    // Step 1: Check if we need to refresh the feed\r\n    const feedCheck = await checkAndRefreshFeed();\r\n    \r\n    // Step 2: If data is stale, trigger refresh\r\n    if (feedCheck.needsRefresh) {\r\n      console.log('📥 Articles are stale, triggering refresh...');\r\n      const refreshSuccess = await triggerFeedRefresh();\r\n      \r\n      if (refreshSuccess) {\r\n        console.log('✅ Feed refreshed successfully');\r\n        // Wait a moment for the refresh to complete\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n      } else {\r\n        console.warn('⚠️ Feed refresh failed, proceeding with existing data...');\r\n      }\r\n    } else {\r\n      console.log('✅ Articles are fresh, using cached data');\r\n    }\r\n    \r\n    // Step 3: Fetch articles\r\n    const params: any = {\r\n      limit: limit || 6,\r\n      flat: true\r\n    };\r\n    \r\n    // Map frontend categories to backend categories\r\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\r\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\r\n      if (mappedCategory) {\r\n        params.category = mappedCategory;\r\n      }\r\n    }\r\n    \r\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\r\n    \r\n    const response = await axios.get<RSSResponse>(`${API_URL}/news/articles`, {\r\n      params,\r\n      timeout: 10000\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    console.log('✅ RSS API response:', {\r\n      success: data.success,\r\n      articleCount: data.articles?.length || 0,\r\n      count: data.count,\r\n      filtersApplied: data.filters_applied\r\n    });\r\n\r\n    if (!data.success) {\r\n      console.warn('⚠️ RSS API returned success=false, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n\r\n    // Convert RSS articles to NewsArticle format\r\n    const articles: NewsArticle[] = (data.articles || [])\r\n      .filter(article => article.title && article.title.trim() !== '')\r\n      .map((article: RSSArticleResponse, index: number) => {\r\n        \r\n        console.log(`📰 Processing article ${index + 1}:`, {\r\n          title: article.title?.substring(0, 50) + '...',\r\n          hasMedia: article.has_media,\r\n          mediaUrl: article.media_url,\r\n          thumbUrl: article.media_thumb_url,\r\n          category: article.category,\r\n          domain: article.domain\r\n        });\r\n        \r\n        // Enhanced image URL extraction\r\n        const extractValidImageUrl = (url: string | undefined): string => {\r\n          if (!url) return '';\r\n          const trimmed = url.trim();\r\n          if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\r\n          if (trimmed.startsWith('http') || trimmed.startsWith('//')) return trimmed;\r\n          return '';\r\n        };\r\n        \r\n        const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\r\n        const imageUrl = extractValidImageUrl(article.media_url);\r\n        const hasMedia = article.has_media || !!(thumbnailUrl || imageUrl);\r\n        \r\n        return {\r\n          id: article.id?.toString() || article.guid || `rss_${Date.now()}_${index}`,\r\n          title: article.title || 'No title',\r\n          summary: article.description || 'No summary available',\r\n          url: article.link || '#',\r\n          source: article.feed_name || 'Unknown Source',\r\n          domain: article.domain || extractDomain(article.link || ''),\r\n          category: mapBackendCategory(article.category),\r\n          publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\r\n          relevanceScore: calculateRelevanceScore(article.title, article.description),\r\n          tags: extractTags(article.title, article.description),\r\n          \r\n          // RSS enhanced fields\r\n          thumbnailUrl,\r\n          imageUrl,\r\n          mediaType: article.media_type || (hasMedia ? 'image' : ''),\r\n          mediaDescription: article.media_description || '',\r\n          author: article.author || '',\r\n          fullContent: article.content_encoded || '',\r\n          wordCount: article.word_count || 0,\r\n          readingTime: article.reading_time || 0,\r\n          hasMedia,\r\n          hasAuthor: article.has_author || !!(article.author && article.author.trim()),\r\n          contentLength: article.content_length || 0,\r\n          feedTitle: article.feed_name || '',\r\n          guid: article.guid || '',\r\n          commentsUrl: article.comments_url || '',\r\n          language: article.language || '',\r\n          rights: article.rights || '',\r\n          extractedAt: article.extracted_at || '',\r\n          lastModified: article.last_modified || '',\r\n          \r\n          // RSS API specific fields\r\n          timeAgo: article.time_ago || '',\r\n          isRecent: article.is_recent || false,\r\n          contentQuality: article.content_quality || 'low',\r\n          completeness: article.completeness || 'minimal',\r\n          country: article.country || '',\r\n          feedName: article.feed_name || '',\r\n          feedId: article.feed_id || 0\r\n        };\r\n      });\r\n    \r\n    console.log('📰 Processed RSS articles:', {\r\n      total: articles.length,\r\n      withImages: articles.filter(a => a.hasMedia).length,\r\n      withAuthors: articles.filter(a => a.hasAuthor).length,\r\n      categories: [...new Set(articles.map(a => a.category))],\r\n      dataFreshness: feedCheck.needsRefresh ? 'Refreshed' : 'Cached'\r\n    });\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      const category = article.category;\r\n      if (!categorizedArticles[category]) {\r\n        categorizedArticles[category] = [];\r\n      }\r\n      categorizedArticles[category].push(article);\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      filtersApplied: data.filters_applied,\r\n      message: feedCheck.needsRefresh ? \r\n        'Health news refreshed and fetched successfully' : \r\n        'Health news fetched from cache'\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS feed:', error);\r\n    \r\n    if (error.code === 'ECONNREFUSED' || error.response?.status === 500) {\r\n      console.log('📱 RSS service unavailable, using fallback news...');\r\n    } else {\r\n      console.log('📱 RSS error, using fallback news...', error.message);\r\n    }\r\n    \r\n    const fallback = await getFallbackNews();\r\n    return {\r\n      ...fallback,\r\n      message: `RSS service error (${error.message}). Showing sample news.`\r\n    };\r\n  }\r\n};\r\n\r\n// Get available categories and countries from RSS API\r\nexport const getRSSFilters = async (): Promise<{\r\n  success: boolean;\r\n  categories?: string[];\r\n  countries?: string[];\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🏷️ Fetching RSS categories and countries...');\r\n    \r\n    const response = await axios.get<RSSCategoriesResponse>(`${API_URL}/news/categories-countries`, {\r\n      timeout: 5000\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS filters response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      categories: data.categories || [],\r\n      countries: data.countries || []\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS filters:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to fetch filters: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Trigger RSS polling manually\r\nexport const triggerRSSPolling = async (force?: boolean, feedId?: number): Promise<{\r\n  success: boolean;\r\n  results?: any;\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🔄 Triggering RSS polling...', { force, feedId });\r\n    \r\n    const params: any = {};\r\n    if (force) params.force = 'true';\r\n    if (feedId) params.feed_id = feedId.toString();\r\n    \r\n    const response = await axios.post<RSSPollingResponse>(`${API_URL}/news/polling/trigger`, {}, {\r\n      params,\r\n      timeout: 30000 // Longer timeout for polling\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS polling response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      results: data.results,\r\n      message: data.message\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error triggering RSS polling:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to trigger polling: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Map frontend categories to backend RSS categories\r\nconst mapFrontendToBackendCategory = (frontendCategory: string): string | null => {\r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'nutrition',\r\n    'medical': 'medical',\r\n    'health': 'health',\r\n    'clinical': 'medical',\r\n    'prevention': 'health',\r\n    'mental': 'mental',\r\n    'science': 'science',\r\n    'general': 'health',\r\n    'tech': 'tech',\r\n    'business': 'business'\r\n  };\r\n  \r\n  return categoryMap[frontendCategory.toLowerCase()] || null;\r\n};\r\n\r\n// Map backend categories to frontend display categories\r\nconst mapBackendCategory = (backendCategory: string | undefined): string => {\r\n  if (!backendCategory) return 'General Health';\r\n  \r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'Nutrition & Diet',\r\n    'diet': 'Nutrition & Diet',\r\n    'medical': 'Medical Research',\r\n    'health': 'Public Health',\r\n    'mental': 'Mental Health',\r\n    'prevention': 'Disease Prevention',\r\n    'clinical': 'Clinical Studies',\r\n    'science': 'Medical Research',\r\n    'tech': 'Medical Technology',\r\n    'political': 'Health Policy',\r\n    'sports': 'Fitness & Sports',\r\n    'entertainment': 'Wellness',\r\n    'business': 'Health Business',\r\n    'nature': 'Environmental Health'\r\n  };\r\n  \r\n  const lowerCategory = backendCategory.toLowerCase();\r\n  for (const [key, value] of Object.entries(categoryMap)) {\r\n    if (lowerCategory.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return 'General Health';\r\n};\r\n\r\n// Enhanced fallback news with RSS structure\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  const fallbackArticles: NewsArticle[] = [\r\n    {\r\n      id: 'fallback_1',\r\n      title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\r\n      summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\r\n      url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\r\n      source: \"NIH Health News\",\r\n      domain: \"nih.gov\",\r\n      category: \"Nutrition & Diet\",\r\n      publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Sarah Johnson\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 150,\r\n      readingTime: 1,\r\n      contentLength: 750,\r\n      timeAgo: \"1 day ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_2',\r\n      title: \"Exercise and Mental Health: The Connection You Need to Know\",\r\n      summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\r\n      url: \"https://www.cdc.gov/mental-health/exercise-connection\",\r\n      source: \"CDC Health Updates\",\r\n      domain: \"cdc.gov\",\r\n      category: \"Mental Health\",\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.90,\r\n      tags: ['mental-health', 'exercise', 'wellness', 'depression'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Michael Chen\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 180,\r\n      readingTime: 1,\r\n      contentLength: 900,\r\n      timeAgo: \"2 days ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_3',\r\n      title: \"The Importance of Sleep for Immune System Function\",\r\n      summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\r\n      url: \"https://www.nih.gov/news-events/sleep-immune-system\",\r\n      source: \"Sleep Health Research\",\r\n      domain: \"nih.gov\",\r\n      category: \"General Health\",\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.85,\r\n      tags: ['sleep', 'immune-system', 'health', 'wellness'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Lisa Rodriguez\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 200,\r\n      readingTime: 1,\r\n      contentLength: 1000,\r\n      timeAgo: \"3 days ago\",\r\n      isRecent: false,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    }\r\n  ];\r\n\r\n  // Categorize fallback articles\r\n  const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n  fallbackArticles.forEach(article => {\r\n    if (!categorizedArticles[article.category]) {\r\n      categorizedArticles[article.category] = [];\r\n    }\r\n    categorizedArticles[article.category].push(article);\r\n  });\r\n\r\n  return {\r\n    success: true,\r\n    articles: fallbackArticles,\r\n    categories: categorizedArticles,\r\n    lastUpdated: new Date().toISOString(),\r\n    count: fallbackArticles.length,\r\n    message: 'Using sample health news (RSS service unavailable)'\r\n  };\r\n};\r\n\r\n// Updated utility functions\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching RSS articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching RSS articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available to search'\r\n      };\r\n    }\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    \r\n    const matchingArticles = feedResponse.articles\r\n      .filter(article => \r\n        article.title.toLowerCase().includes(searchTerm) ||\r\n        article.summary.toLowerCase().includes(searchTerm) ||\r\n        article.tags.some(tag => tag.includes(searchTerm)) ||\r\n        (article.author && article.author.toLowerCase().includes(searchTerm))\r\n      )\r\n      .slice(0, limit || 10);\r\n    \r\n    return {\r\n      success: true,\r\n      articles: matchingArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: matchingArticles.length,\r\n      message: `Search results for \"${query}\"`\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error searching articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\n// Manual refresh function that always triggers fetch\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Manual refresh triggered');\r\n    \r\n    // Force refresh regardless of age\r\n    const refreshSuccess = await triggerFeedRefresh();\r\n    \r\n    if (refreshSuccess) {\r\n      console.log('✅ Manual refresh completed');\r\n      // Wait for refresh to complete\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      \r\n      // Fetch fresh articles\r\n      return await fetchNewsFeed();\r\n    } else {\r\n      throw new Error('Manual refresh failed');\r\n    }\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error in manual refresh:', error);\r\n    return {\r\n      success: false,\r\n      message: `Manual refresh failed: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n    articlesWithImages: number;\r\n    articlesWithAuthors: number;\r\n    averageWordCount: number;\r\n    averageReadingTime: number;\r\n    trustedSources: number;\r\n    rssServiceHealth?: any;\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed();\r\n    const healthCheck = await checkRSSHealth();\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    let totalWordCount = 0;\r\n    let totalReadingTime = 0;\r\n    let articlesWithImages = 0;\r\n    let articlesWithAuthors = 0;\r\n    let trustedSources = 0;\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n      \r\n      if (article.hasMedia) articlesWithImages++;\r\n      if (article.hasAuthor) articlesWithAuthors++;\r\n      if (isTrustedDomain(article.url)) trustedSources++;\r\n      if (article.wordCount) totalWordCount += article.wordCount;\r\n      if (article.readingTime) totalReadingTime += article.readingTime;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts,\r\n        articlesWithImages,\r\n        articlesWithAuthors,\r\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\r\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\r\n        trustedSources,\r\n        rssServiceHealth: healthCheck.status\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility functions\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary,\r\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\r\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\r\n    qualityScore: calculateQualityScore(article),\r\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read'\r\n  };\r\n};\r\n\r\nconst calculateQualityScore = (article: NewsArticle): number => {\r\n  let score = 0;\r\n  \r\n  if (article.hasAuthor) score += 0.2;\r\n  if (article.hasMedia) score += 0.2;\r\n  if (article.wordCount && article.wordCount > 100) score += 0.2;\r\n  if (article.contentLength && article.contentLength > 500) score += 0.2;\r\n  if (isTrustedDomain(article.url)) score += 0.2;\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname.toLowerCase();\r\n  } catch {\r\n    return 'unknown';\r\n  }\r\n};\r\n\r\nconst calculateRelevanceScore = (title: string = '', description: string = ''): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.08);\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst extractTags = (title: string = '', description: string = '', existingTags?: string): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const tags: string[] = [];\r\n  \r\n  if (existingTags) {\r\n    try {\r\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\r\n      tags.push(...parsedTags);\r\n    } catch (e) {\r\n      // Continue with keyword extraction\r\n    }\r\n  }\r\n  \r\n  const tagKeywords = [\r\n    'health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise',\r\n    'mental-health', 'wellness', 'prevention', 'treatment', 'research',\r\n    'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor',\r\n    'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'\r\n  ];\r\n  \r\n  tagKeywords.forEach(keyword => {\r\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\r\n      tags.push(keyword);\r\n    }\r\n  });\r\n  \r\n  return tags.slice(0, 5);\r\n};\r\n\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\nexport const getAvailableCategories = async (): Promise<Array<{id: string, label: string}>> => {\r\n  try {\r\n    const filters = await getRSSFilters();\r\n    \r\n    if (filters.success && filters.categories) {\r\n      // Map RSS categories to display labels\r\n      const rssCategories = filters.categories.map(cat => ({\r\n        id: cat,\r\n        label: mapBackendCategory(cat)\r\n      }));\r\n      \r\n      return [\r\n        { id: 'all', label: 'All Health News' },\r\n        ...rssCategories\r\n      ];\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error fetching RSS categories:', error);\r\n  }\r\n  \r\n  // Fallback categories\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: 'nutrition', label: 'Nutrition & Diet' },\r\n    { id: 'medical', label: 'Medical Research' },\r\n    { id: 'health', label: 'Public Health' },\r\n    { id: 'clinical', label: 'Clinical Studies' },\r\n    { id: 'prevention', label: 'Disease Prevention' },\r\n    { id: 'mental', label: 'Mental Health' },\r\n    { id: 'science', label: 'Science Research' },\r\n    { id: 'general', label: 'General Health' }\r\n  ];\r\n};\r\n\r\n// Legacy compatibility\r\nexport interface NewsItem {\r\n  title: string;\r\n  link: string;\r\n  description: string;\r\n  pubDate: string;\r\n  source: string;\r\n  category: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  author?: string;\r\n  hasMedia?: boolean;\r\n}\r\n\r\nexport class NewsService {\r\n  async fetchNews(): Promise<NewsItem[]> {\r\n    const response = await fetchNewsFeed();\r\n    \r\n    return response.articles?.map(article => ({\r\n      title: article.title,\r\n      link: article.url,\r\n      description: article.summary,\r\n      pubDate: article.publishedDate,\r\n      source: article.source,\r\n      category: article.category,\r\n      thumbnailUrl: article.thumbnailUrl,\r\n      imageUrl: article.imageUrl,\r\n      author: article.author,\r\n      hasMedia: article.hasMedia\r\n    })) || [];\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}