{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// RSS API response types\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'livemint.com': 0.8,\n  'npr.org': 0.9,\n  'reuters.com': 0.9,\n  'cnn.com': 0.8,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'nutrition',\n  MEDICAL: 'medical',\n  PUBLIC_HEALTH: 'health',\n  CLINICAL: 'clinical',\n  PREVENTION: 'prevention',\n  MENTAL_HEALTH: 'mental',\n  GENERAL: 'general',\n  SCIENCE: 'science',\n  TECH: 'tech',\n  POLITICAL: 'political',\n  SPORTS: 'sports',\n  ENTERTAINMENT: 'entertainment',\n  BUSINESS: 'business',\n  NATURE: 'nature'\n};\n\n// Add simple cache to prevent duplicate calls\nlet newsCache = {\n  data: null,\n  timestamp: 0\n};\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Add content quality filters\nconst isHealthRelevant = article => {\n  var _article$title, _article$description;\n  const title = ((_article$title = article.title) === null || _article$title === void 0 ? void 0 : _article$title.toLowerCase()) || '';\n  const description = ((_article$description = article.description) === null || _article$description === void 0 ? void 0 : _article$description.toLowerCase()) || '';\n  const content = `${title} ${description}`;\n\n  // Filter out non-health content\n  const irrelevantKeywords = ['coupon', 'coupons', 'discount', 'sale', 'deal', 'deals', 'shopping', 'price', 'cheap', 'buy', 'purchase', 'store', 'retail', 'pharmacy deals', 'cvs deals', 'walgreens deals', 'advertisement', 'promo', 'promotion', 'black friday', 'cyber monday', 'clearance', 'stock market', 'invest', 'celebrity', 'entertainment', 'sports score', 'politics', 'election', 'weather', 'traffic', 'real estate', 'fashion', 'beauty products'];\n\n  // Check if article contains irrelevant content\n  const hasIrrelevantContent = irrelevantKeywords.some(keyword => content.includes(keyword));\n  if (hasIrrelevantContent) {\n    return false;\n  }\n\n  // Require health-related keywords\n  const healthKeywords = ['health', 'medical', 'medicine', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'therapy', 'research', 'study', 'clinical', 'vaccine', 'hospital', 'doctor', 'patient', 'symptoms', 'diagnosis', 'prevention', 'care', 'healthcare', 'drug', 'medication', 'supplement', 'vitamin', 'protein', 'obesity', 'diabetes', 'cancer', 'heart', 'blood', 'immune', 'infection', 'virus', 'bacteria', 'surgery', 'procedure', 'recovery', 'rehabilitation'];\n  const hasHealthKeywords = healthKeywords.some(keyword => content.includes(keyword));\n  return hasHealthKeywords;\n};\nconst hasValidContent = article => {\n  // Check if title is meaningful\n  if (!article.title || article.title.trim().length < 10) {\n    return false;\n  }\n\n  // Check if description exists and is meaningful\n  const description = article.description || '';\n  if (description.trim().length < 20) {\n    return false;\n  }\n\n  // Filter out generic/template descriptions\n  const genericDescriptions = ['read about', 'click to read', 'no summary available', 'undefined', 'null', 'coming soon', 'more information', 'stay tuned'];\n  const hasGenericDescription = genericDescriptions.some(generic => description.toLowerCase().includes(generic));\n  if (hasGenericDescription) {\n    return false;\n  }\n\n  // Check if source is defined\n  if (!article.feed_name || article.feed_name === 'undefined') {\n    return false;\n  }\n  return true;\n};\n\n// Main function to fetch RSS articles\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    var _data$articles;\n    // Check cache first to prevent duplicate calls\n    const now = Date.now();\n    const cacheKey = `${(categories === null || categories === void 0 ? void 0 : categories.join(',')) || 'all'}_${limit || 100}`;\n    if (newsCache.data && newsCache.data.articles && newsCache.data.articles.length >= (limit || 100) && now - newsCache.timestamp < CACHE_DURATION) {\n      console.log('📦 Using cached RSS data');\n      return newsCache.data;\n    }\n    console.log('🔍 Fetching RSS articles...', {\n      categories,\n      limit\n    });\n\n    // Only make ONE API call\n    const params = {\n      limit: limit || 100,\n      flat: true,\n      category: 'health',\n      country: 'US',\n      feed_id: 276\n    };\n\n    // Override category if specified\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\n      if (mappedCategory) {\n        params.category = mappedCategory;\n      }\n    }\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params,\n      timeout: 10000\n    });\n    const data = response.data;\n    console.log('✅ RSS API response:', {\n      success: data.success,\n      articleCount: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n      count: data.count,\n      filtersApplied: data.filters_applied\n    });\n    if (!data.success && (!data.articles || data.articles.length === 0)) {\n      console.warn('⚠️ RSS API returned no articles, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Enhanced filtering for quality content\n    const articles = (data.articles || []).filter(article => {\n      // Basic validation\n      if (!article.title || article.title.trim() === '') return false;\n\n      // Content quality check\n      if (!hasValidContent(article)) {\n        console.log(`🚫 Filtered out low-quality article: \"${article.title}\"`);\n        return false;\n      }\n\n      // Health relevance check\n      if (!isHealthRelevant(article)) {\n        console.log(`🚫 Filtered out non-health article: \"${article.title}\"`);\n        return false;\n      }\n      return true;\n    }).map((article, index) => {\n      var _article$id;\n      // Enhanced image URL extraction with better validation\n      const extractValidImageUrl = url => {\n        if (!url) return '';\n        const trimmed = url.trim();\n        if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\n        if (trimmed.startsWith('http') || trimmed.startsWith('//')) {\n          // Validate it's actually an image URL\n          const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n          const hasImageExtension = imageExtensions.some(ext => trimmed.toLowerCase().includes(ext));\n          // Accept if it has image extension or contains image-related path\n          if (hasImageExtension || trimmed.includes('/image') || trimmed.includes('/photo')) {\n            return trimmed;\n          }\n        }\n        return '';\n      };\n      const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\n      const imageUrl = extractValidImageUrl(article.media_url);\n\n      // Better summary handling - ensure we have actual content\n      let summary = article.description || article.content_encoded || '';\n\n      // Clean up HTML tags and decode entities if present\n      summary = summary.replace(/<[^>]*>/g, '').trim();\n      summary = summary.replace(/&[^;]+;/g, ' ').trim();\n\n      // Ensure we have a meaningful summary\n      if (!summary || summary.length < 20) {\n        console.warn(`⚠️ Article has poor summary: \"${article.title}\"`);\n        return null; // This will be filtered out\n      }\n      const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\n      return {\n        id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || article.guid || `rss_${Date.now()}_${index}`,\n        title: article.title || 'No title',\n        summary: cleanSummary,\n        url: article.link || '#',\n        source: article.feed_name || 'Unknown Source',\n        domain: article.domain || extractDomain(article.link || ''),\n        category: mapBackendCategory(article.category),\n        publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description),\n        tags: extractTags(article.title, article.description),\n        // RSS enhanced fields\n        thumbnailUrl,\n        imageUrl,\n        mediaType: article.media_type || '',\n        mediaDescription: article.media_description || '',\n        author: article.author || '',\n        fullContent: article.content_encoded || '',\n        wordCount: article.word_count || 0,\n        readingTime: article.reading_time || Math.ceil((article.word_count || 200) / 200),\n        hasMedia: !!(thumbnailUrl || imageUrl),\n        hasAuthor: !!(article.author && article.author.trim()),\n        contentLength: article.content_length || 0,\n        feedTitle: article.feed_name || '',\n        guid: article.guid || '',\n        commentsUrl: article.comments_url || '',\n        language: article.language || '',\n        rights: article.rights || '',\n        extractedAt: article.extracted_at || '',\n        lastModified: article.last_modified || '',\n        // RSS API specific fields\n        timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\n        isRecent: article.is_recent || false,\n        contentQuality: article.content_quality || 'medium',\n        completeness: article.completeness || 'partial',\n        country: article.country || '',\n        feedName: article.feed_name || '',\n        feedId: article.feed_id || 0\n      };\n    }).filter(article => article !== null); // Remove null entries\n\n    console.log('📰 Processed and filtered RSS articles:', {\n      total: articles.length,\n      withImages: articles.filter(a => a.hasMedia).length,\n      withAuthors: articles.filter(a => a.hasAuthor).length,\n      categories: [...new Set(articles.map(a => a.category))]\n    });\n\n    // If we got no valid articles after filtering, use fallback\n    if (articles.length === 0) {\n      console.warn('⚠️ No valid health articles found after filtering, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      const category = article.category;\n      if (!categorizedArticles[category]) {\n        categorizedArticles[category] = [];\n      }\n      categorizedArticles[category].push(article);\n    });\n    const result = {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      filtersApplied: data.filters_applied,\n      message: `Fetched ${articles.length} quality health articles from RSS feeds`\n    };\n\n    // Cache the result\n    newsCache = {\n      data: result,\n      timestamp: now\n    };\n    return result;\n  } catch (error) {\n    console.error('❌ Error fetching RSS feed:', error);\n\n    // If we have cached data, use it even if it's old\n    if (newsCache.data) {\n      console.log('📦 Using stale cached data due to error');\n      return newsCache.data;\n    }\n\n    // Try to get fallback news\n    try {\n      const fallback = await getFallbackNews();\n      return {\n        ...fallback,\n        message: `RSS service temporarily unavailable. Showing sample articles.`\n      };\n    } catch (fallbackError) {\n      console.error('❌ Even fallback failed:', fallbackError);\n      return {\n        success: false,\n        articles: [],\n        message: 'Unable to load news articles at this time. Please try again later.'\n      };\n    }\n  }\n};\n\n// Clear cache function\nexport const clearNewsCache = () => {\n  newsCache = {\n    data: null,\n    timestamp: 0\n  };\n  console.log('🗑️ News cache cleared');\n};\n\n// Get available categories and countries from RSS API\nexport const getRSSFilters = async () => {\n  try {\n    console.log('🏷️ Fetching RSS categories and countries...');\n    const response = await axios.get(`${API_URL}/news/categories-countries`, {\n      timeout: 5000\n    });\n    const data = response.data;\n    console.log('✅ RSS filters response:', data);\n    return {\n      success: data.success,\n      categories: data.categories || [],\n      countries: data.countries || []\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS filters:', error);\n    return {\n      success: false,\n      message: `Failed to fetch filters: ${error.message}`\n    };\n  }\n};\n\n// Trigger RSS polling manually\nexport const triggerRSSPolling = async (force, feedId) => {\n  try {\n    console.log('🔄 Triggering RSS polling...', {\n      force,\n      feedId\n    });\n    const params = {};\n    if (force) params.force = 'true';\n    if (feedId) params.feed_id = feedId.toString();\n    const response = await axios.post(`${API_URL}/news/polling/trigger`, {}, {\n      params,\n      timeout: 30000 // Longer timeout for polling\n    });\n    const data = response.data;\n    console.log('✅ RSS polling response:', data);\n    return {\n      success: data.success,\n      results: data.results,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('❌ Error triggering RSS polling:', error);\n    return {\n      success: false,\n      message: `Failed to trigger polling: ${error.message}`\n    };\n  }\n};\n\n// Map frontend categories to backend RSS categories\nconst mapFrontendToBackendCategory = frontendCategory => {\n  const categoryMap = {\n    'nutrition': 'nutrition',\n    'medical': 'medical',\n    'health': 'health',\n    'clinical': 'medical',\n    'prevention': 'health',\n    'mental': 'mental',\n    'science': 'science',\n    'general': 'health',\n    'tech': 'tech',\n    'business': 'business'\n  };\n  return categoryMap[frontendCategory.toLowerCase()] || 'health'; // Default to 'health' instead of null\n};\n\n// Map backend categories to frontend display categories\nconst mapBackendCategory = backendCategory => {\n  if (!backendCategory) return 'General Health';\n  const categoryMap = {\n    'nutrition': 'Nutrition & Diet',\n    'diet': 'Nutrition & Diet',\n    'medical': 'Medical Research',\n    'health': 'Public Health',\n    'mental': 'Mental Health',\n    'prevention': 'Disease Prevention',\n    'clinical': 'Clinical Studies',\n    'science': 'Medical Research',\n    'tech': 'Medical Technology',\n    'political': 'Health Policy',\n    'sports': 'Fitness & Sports',\n    'entertainment': 'Wellness',\n    'business': 'Health Business',\n    'nature': 'Environmental Health'\n  };\n  const lowerCategory = backendCategory.toLowerCase();\n  for (const [key, value] of Object.entries(categoryMap)) {\n    if (lowerCategory.includes(key)) {\n      return value;\n    }\n  }\n  return 'General Health';\n};\n\n// Enhanced fallback news with RSS structure\nconst getFallbackNews = async () => {\n  const fallbackArticles = [{\n    id: 'fallback_1',\n    title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\n    summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\n    url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\n    source: \"NIH Health News\",\n    domain: \"nih.gov\",\n    category: \"Nutrition & Diet\",\n    publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Sarah Johnson\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 150,\n    readingTime: 1,\n    contentLength: 750,\n    timeAgo: \"1 day ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_2',\n    title: \"Exercise and Mental Health: The Connection You Need to Know\",\n    summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\n    url: \"https://www.cdc.gov/mental-health/exercise-connection\",\n    source: \"CDC Health Updates\",\n    domain: \"cdc.gov\",\n    category: \"Mental Health\",\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.90,\n    tags: ['mental-health', 'exercise', 'wellness', 'depression'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Michael Chen\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 180,\n    readingTime: 1,\n    contentLength: 900,\n    timeAgo: \"2 days ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_3',\n    title: \"The Importance of Sleep for Immune System Function\",\n    summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\n    url: \"https://www.nih.gov/news-events/sleep-immune-system\",\n    source: \"Sleep Health Research\",\n    domain: \"nih.gov\",\n    category: \"General Health\",\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.85,\n    tags: ['sleep', 'immune-system', 'health', 'wellness'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Lisa Rodriguez\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 200,\n    readingTime: 1,\n    contentLength: 1000,\n    timeAgo: \"3 days ago\",\n    isRecent: false,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }];\n\n  // Categorize fallback articles\n  const categorizedArticles = {};\n  fallbackArticles.forEach(article => {\n    if (!categorizedArticles[article.category]) {\n      categorizedArticles[article.category] = [];\n    }\n    categorizedArticles[article.category].push(article);\n  });\n  return {\n    success: true,\n    articles: fallbackArticles,\n    categories: categorizedArticles,\n    lastUpdated: new Date().toISOString(),\n    count: fallbackArticles.length,\n    message: 'Using sample health news (RSS service unavailable)'\n  };\n};\n\n// Updated utility functions\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching RSS articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching RSS articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available to search'\n      };\n    }\n    const searchTerm = query.toLowerCase();\n    const matchingArticles = feedResponse.articles.filter(article => article.title.toLowerCase().includes(searchTerm) || article.summary.toLowerCase().includes(searchTerm) || article.tags.some(tag => tag.includes(searchTerm)) || article.author && article.author.toLowerCase().includes(searchTerm)).slice(0, limit || 10);\n    return {\n      success: true,\n      articles: matchingArticles,\n      lastUpdated: new Date().toISOString(),\n      count: matchingArticles.length,\n      message: `Search results for \"${query}\"`\n    };\n  } catch (error) {\n    console.error('❌ Error searching articles:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing RSS feed...');\n\n    // Clear cache to force fresh data\n    clearNewsCache();\n\n    // Trigger RSS polling\n    const pollingResult = await triggerRSSPolling(true);\n    if (pollingResult.success) {\n      console.log('✅ RSS polling triggered successfully:', pollingResult.results);\n    } else {\n      console.warn('⚠️ RSS polling failed:', pollingResult.message);\n    }\n\n    // Fetch fresh articles\n    return await fetchNewsFeed();\n  } catch (error) {\n    console.error('❌ Error refreshing news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed();\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    let totalWordCount = 0;\n    let totalReadingTime = 0;\n    let articlesWithImages = 0;\n    let articlesWithAuthors = 0;\n    let trustedSources = 0;\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n      if (article.hasMedia) articlesWithImages++;\n      if (article.hasAuthor) articlesWithAuthors++;\n      if (isTrustedDomain(article.url)) trustedSources++;\n      if (article.wordCount) totalWordCount += article.wordCount;\n      if (article.readingTime) totalReadingTime += article.readingTime;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts,\n        articlesWithImages,\n        articlesWithAuthors,\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\n        trustedSources\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility functions\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary,\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\n    qualityScore: calculateQualityScore(article),\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read'\n  };\n};\nconst calculateQualityScore = article => {\n  let score = 0;\n  if (article.hasAuthor) score += 0.2;\n  if (article.hasMedia) score += 0.2;\n  if (article.wordCount && article.wordCount > 100) score += 0.2;\n  if (article.contentLength && article.contentLength > 500) score += 0.2;\n  if (isTrustedDomain(article.url)) score += 0.2;\n  return Math.min(score, 1.0);\n};\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname.toLowerCase();\n  } catch {\n    return 'unknown';\n  }\n};\nconst calculateRelevanceScore = (title = '', description = '') => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n  let score = 0.5;\n  score += matchingKeywords.length * 0.08;\n  return Math.min(score, 1.0);\n};\nconst extractTags = (title = '', description = '', existingTags) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const tags = [];\n  if (existingTags) {\n    try {\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n      tags.push(...parsedTags);\n    } catch (e) {\n      // Continue with keyword extraction\n    }\n  }\n  const tagKeywords = ['health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise', 'mental-health', 'wellness', 'prevention', 'treatment', 'research', 'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor', 'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'];\n  tagKeywords.forEach(keyword => {\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\n      tags.push(keyword);\n    }\n  });\n  return tags.slice(0, 5);\n};\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\nexport const getAvailableCategories = async () => {\n  try {\n    const filters = await getRSSFilters();\n    if (filters.success && filters.categories) {\n      // Map RSS categories to display labels\n      const rssCategories = filters.categories.map(cat => ({\n        id: cat,\n        label: mapBackendCategory(cat)\n      }));\n      return [{\n        id: 'all',\n        label: 'All Health News'\n      }, ...rssCategories];\n    }\n  } catch (error) {\n    console.error('❌ Error fetching RSS categories:', error);\n  }\n\n  // Fallback categories\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: 'nutrition',\n    label: 'Nutrition & Diet'\n  }, {\n    id: 'medical',\n    label: 'Medical Research'\n  }, {\n    id: 'health',\n    label: 'Public Health'\n  }, {\n    id: 'clinical',\n    label: 'Clinical Studies'\n  }, {\n    id: 'prevention',\n    label: 'Disease Prevention'\n  }, {\n    id: 'mental',\n    label: 'Mental Health'\n  }, {\n    id: 'science',\n    label: 'Science Research'\n  }, {\n    id: 'general',\n    label: 'General Health'\n  }];\n};\n\n// Legacy compatibility\n\nexport class NewsService {\n  async fetchNews() {\n    var _response$articles;\n    const response = await fetchNewsFeed();\n    return ((_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.map(article => ({\n      title: article.title,\n      link: article.url,\n      description: article.summary,\n      pubDate: article.publishedDate,\n      source: article.source,\n      category: article.category,\n      thumbnailUrl: article.thumbnailUrl,\n      imageUrl: article.imageUrl,\n      author: article.author,\n      hasMedia: article.hasMedia\n    }))) || [];\n  }\n}\nexport const newsService = new NewsService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","SCIENCE","TECH","POLITICAL","SPORTS","ENTERTAINMENT","BUSINESS","NATURE","newsCache","data","timestamp","CACHE_DURATION","isHealthRelevant","article","_article$title","_article$description","title","toLowerCase","description","content","irrelevantKeywords","hasIrrelevantContent","some","keyword","includes","healthKeywords","hasHealthKeywords","hasValidContent","trim","length","genericDescriptions","hasGenericDescription","generic","feed_name","fetchNewsFeed","categories","limit","_data$articles","now","Date","cacheKey","join","articles","console","log","params","flat","category","country","feed_id","mappedCategory","mapFrontendToBackendCategory","response","get","timeout","success","articleCount","count","filtersApplied","filters_applied","warn","getFallbackNews","filter","map","index","_article$id","extractValidImageUrl","url","trimmed","startsWith","imageExtensions","hasImageExtension","ext","thumbnailUrl","media_thumb_url","imageUrl","media_url","summary","content_encoded","replace","cleanSummary","substring","id","toString","guid","link","source","domain","extractDomain","mapBackendCategory","publishedDate","published_date","extracted_at","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","mediaType","media_type","mediaDescription","media_description","author","fullContent","wordCount","word_count","readingTime","reading_time","Math","ceil","hasMedia","hasAuthor","contentLength","content_length","feedTitle","commentsUrl","comments_url","language","rights","extractedAt","lastModified","last_modified","timeAgo","time_ago","formatTimeAgo","isRecent","is_recent","contentQuality","content_quality","completeness","feedName","feedId","total","withImages","a","withAuthors","Set","categorizedArticles","forEach","push","result","lastUpdated","message","error","fallback","fallbackError","clearNewsCache","getRSSFilters","countries","triggerRSSPolling","force","post","results","frontendCategory","categoryMap","backendCategory","lowerCategory","key","value","Object","entries","fallbackArticles","getArticlesByCategory","searchNewsArticles","query","feedResponse","undefined","searchTerm","matchingArticles","tag","slice","refreshNewsFeed","pollingResult","getNewsFeedStats","categoryCounts","sourcesCounts","totalWordCount","totalReadingTime","articlesWithImages","articlesWithAuthors","trustedSources","isTrustedDomain","stats","totalArticles","averageWordCount","round","averageReadingTime","formatArticleForDisplay","formattedDate","isTrusted","relevancePercentage","shortSummary","displayImage","feedThumbnailUrl","feedImageUrl","hasValidImage","qualityScore","calculateQualityScore","readingTimeText","score","min","URL","hostname","matchingKeywords","existingTags","parsedTags","split","e","tagKeywords","keys","trustedDomain","dateString","diffInHours","floor","getTime","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","filters","rssCategories","cat","label","NewsService","fetchNews","_response$articles","pubDate","newsService"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n  // Enhanced RSS fields\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  mediaType?: string;\r\n  mediaDescription?: string;\r\n  author?: string;\r\n  fullContent?: string;\r\n  wordCount?: number;\r\n  readingTime?: number;\r\n  hasMedia: boolean;\r\n  hasAuthor: boolean;\r\n  contentLength?: number;\r\n  feedTitle?: string;\r\n  feedImageUrl?: string;\r\n  feedThumbnailUrl?: string;\r\n  guid?: string;\r\n  commentsUrl?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  extractedAt?: string;\r\n  lastModified?: string;\r\n  // RSS API enhanced fields\r\n  timeAgo?: string;\r\n  isRecent?: boolean;\r\n  contentQuality?: 'low' | 'medium' | 'high';\r\n  completeness?: 'minimal' | 'partial' | 'complete';\r\n  country?: string;\r\n  feedName?: string;\r\n  feedId?: number;\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n  filtersApplied?: {\r\n    category?: string | null;\r\n    country?: string | null;\r\n    feed_id?: string | null;\r\n    limit?: number;\r\n  };\r\n}\r\n\r\n// RSS API response types\r\ninterface RSSArticleResponse {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  published_date: string;\r\n  author?: string;\r\n  category?: string;\r\n  country?: string;\r\n  feed_name: string;\r\n  feed_id: number;\r\n  time_ago: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  is_recent: boolean;\r\n  content_quality: 'low' | 'medium' | 'high';\r\n  completeness: 'minimal' | 'partial' | 'complete';\r\n  domain: string;\r\n  extracted_at: string;\r\n  // Additional possible fields\r\n  media_thumb_url?: string;\r\n  media_url?: string;\r\n  media_type?: string;\r\n  media_description?: string;\r\n  content_encoded?: string;\r\n  guid?: string;\r\n  comments_url?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  last_modified?: string;\r\n  has_media?: boolean;\r\n  has_author?: boolean;\r\n  content_length?: number;\r\n}\r\n\r\ninterface RSSResponse {\r\n  success: boolean;\r\n  articles: RSSArticleResponse[];\r\n  count: number;\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: string | null;\r\n    limit: number;\r\n  };\r\n  message?: string;\r\n}\r\n\r\ninterface RSSHealthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  status: {\r\n    controller_created: boolean;\r\n    database_available: boolean;\r\n    parser_available: boolean;\r\n    polling_available: boolean;\r\n    is_initialized: boolean;\r\n    initialization_error: string | null;\r\n    database_connection?: string;\r\n    timestamp: string;\r\n  };\r\n}\r\n\r\ninterface RSSCategoriesResponse {\r\n  success: boolean;\r\n  categories: string[];\r\n  countries: string[];\r\n}\r\n\r\ninterface RSSPollingResponse {\r\n  success: boolean;\r\n  message: string;\r\n  results: {\r\n    total: number;\r\n    successful: number;\r\n    failed: number;\r\n    articles_fetched: number;\r\n    duration: string;\r\n  };\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'livemint.com': 0.8,\r\n  'npr.org': 0.9,\r\n  'reuters.com': 0.9,\r\n  'cnn.com': 0.8,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'nutrition',\r\n  MEDICAL: 'medical',\r\n  PUBLIC_HEALTH: 'health',\r\n  CLINICAL: 'clinical',\r\n  PREVENTION: 'prevention',\r\n  MENTAL_HEALTH: 'mental',\r\n  GENERAL: 'general',\r\n  SCIENCE: 'science',\r\n  TECH: 'tech',\r\n  POLITICAL: 'political',\r\n  SPORTS: 'sports',\r\n  ENTERTAINMENT: 'entertainment',\r\n  BUSINESS: 'business',\r\n  NATURE: 'nature'\r\n};\r\n\r\n// Add simple cache to prevent duplicate calls\r\nlet newsCache: { data: NewsFeedResponse | null; timestamp: number } = {\r\n  data: null,\r\n  timestamp: 0\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\n// Add content quality filters\r\nconst isHealthRelevant = (article: RSSArticleResponse): boolean => {\r\n  const title = article.title?.toLowerCase() || '';\r\n  const description = article.description?.toLowerCase() || '';\r\n  const content = `${title} ${description}`;\r\n  \r\n  // Filter out non-health content\r\n  const irrelevantKeywords = [\r\n    'coupon', 'coupons', 'discount', 'sale', 'deal', 'deals', 'shopping',\r\n    'price', 'cheap', 'buy', 'purchase', 'store', 'retail', 'pharmacy deals',\r\n    'cvs deals', 'walgreens deals', 'advertisement', 'promo', 'promotion',\r\n    'black friday', 'cyber monday', 'clearance', 'stock market', 'invest',\r\n    'celebrity', 'entertainment', 'sports score', 'politics', 'election',\r\n    'weather', 'traffic', 'real estate', 'fashion', 'beauty products'\r\n  ];\r\n  \r\n  // Check if article contains irrelevant content\r\n  const hasIrrelevantContent = irrelevantKeywords.some(keyword => \r\n    content.includes(keyword)\r\n  );\r\n  \r\n  if (hasIrrelevantContent) {\r\n    return false;\r\n  }\r\n  \r\n  // Require health-related keywords\r\n  const healthKeywords = [\r\n    'health', 'medical', 'medicine', 'wellness', 'fitness', 'nutrition',\r\n    'diet', 'exercise', 'mental health', 'disease', 'treatment', 'therapy',\r\n    'research', 'study', 'clinical', 'vaccine', 'hospital', 'doctor',\r\n    'patient', 'symptoms', 'diagnosis', 'prevention', 'care', 'healthcare',\r\n    'drug', 'medication', 'supplement', 'vitamin', 'protein', 'obesity',\r\n    'diabetes', 'cancer', 'heart', 'blood', 'immune', 'infection',\r\n    'virus', 'bacteria', 'surgery', 'procedure', 'recovery', 'rehabilitation'\r\n  ];\r\n  \r\n  const hasHealthKeywords = healthKeywords.some(keyword => \r\n    content.includes(keyword)\r\n  );\r\n  \r\n  return hasHealthKeywords;\r\n};\r\n\r\nconst hasValidContent = (article: RSSArticleResponse): boolean => {\r\n  // Check if title is meaningful\r\n  if (!article.title || article.title.trim().length < 10) {\r\n    return false;\r\n  }\r\n  \r\n  // Check if description exists and is meaningful\r\n  const description = article.description || '';\r\n  if (description.trim().length < 20) {\r\n    return false;\r\n  }\r\n  \r\n  // Filter out generic/template descriptions\r\n  const genericDescriptions = [\r\n    'read about',\r\n    'click to read',\r\n    'no summary available',\r\n    'undefined',\r\n    'null',\r\n    'coming soon',\r\n    'more information',\r\n    'stay tuned'\r\n  ];\r\n  \r\n  const hasGenericDescription = genericDescriptions.some(generic => \r\n    description.toLowerCase().includes(generic)\r\n  );\r\n  \r\n  if (hasGenericDescription) {\r\n    return false;\r\n  }\r\n  \r\n  // Check if source is defined\r\n  if (!article.feed_name || article.feed_name === 'undefined') {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n// Main function to fetch RSS articles\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    // Check cache first to prevent duplicate calls\r\n    const now = Date.now();\r\n    const cacheKey = `${categories?.join(',') || 'all'}_${limit || 100}`;\r\n    \r\n    if (newsCache.data && \r\n        newsCache.data.articles && \r\n        newsCache.data.articles.length >= (limit || 100) &&\r\n        (now - newsCache.timestamp) < CACHE_DURATION) {\r\n      console.log('📦 Using cached RSS data');\r\n      return newsCache.data;\r\n    }\r\n    \r\n    console.log('🔍 Fetching RSS articles...', { categories, limit });\r\n    \r\n    // Only make ONE API call\r\n    const params: any = {\r\n      limit: limit || 100,\r\n      flat: true,\r\n      category: 'health',\r\n      country: 'US',\r\n      feed_id: 276\r\n    };\r\n    \r\n    // Override category if specified\r\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\r\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\r\n      if (mappedCategory) {\r\n        params.category = mappedCategory;\r\n      }\r\n    }\r\n    \r\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\r\n    \r\n    const response = await axios.get<RSSResponse>(`${API_URL}/news/articles`, {\r\n      params,\r\n      timeout: 10000\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    console.log('✅ RSS API response:', {\r\n      success: data.success,\r\n      articleCount: data.articles?.length || 0,\r\n      count: data.count,\r\n      filtersApplied: data.filters_applied\r\n    });\r\n\r\n    if (!data.success && (!data.articles || data.articles.length === 0)) {\r\n      console.warn('⚠️ RSS API returned no articles, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n\r\n    // Enhanced filtering for quality content\r\n    const articles: NewsArticle[] = (data.articles || [])\r\n      .filter(article => {\r\n        // Basic validation\r\n        if (!article.title || article.title.trim() === '') return false;\r\n        \r\n        // Content quality check\r\n        if (!hasValidContent(article)) {\r\n          console.log(`🚫 Filtered out low-quality article: \"${article.title}\"`);\r\n          return false;\r\n        }\r\n        \r\n        // Health relevance check\r\n        if (!isHealthRelevant(article)) {\r\n          console.log(`🚫 Filtered out non-health article: \"${article.title}\"`);\r\n          return false;\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .map((article: RSSArticleResponse, index: number) => {\r\n        \r\n        // Enhanced image URL extraction with better validation\r\n        const extractValidImageUrl = (url: string | undefined): string => {\r\n          if (!url) return '';\r\n          const trimmed = url.trim();\r\n          if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\r\n          if (trimmed.startsWith('http') || trimmed.startsWith('//')) {\r\n            // Validate it's actually an image URL\r\n            const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\r\n            const hasImageExtension = imageExtensions.some(ext => \r\n              trimmed.toLowerCase().includes(ext)\r\n            );\r\n            // Accept if it has image extension or contains image-related path\r\n            if (hasImageExtension || trimmed.includes('/image') || trimmed.includes('/photo')) {\r\n              return trimmed;\r\n            }\r\n          }\r\n          return '';\r\n        };\r\n        \r\n        const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\r\n        const imageUrl = extractValidImageUrl(article.media_url);\r\n        \r\n        // Better summary handling - ensure we have actual content\r\n        let summary = article.description || article.content_encoded || '';\r\n        \r\n        // Clean up HTML tags and decode entities if present\r\n        summary = summary.replace(/<[^>]*>/g, '').trim();\r\n        summary = summary.replace(/&[^;]+;/g, ' ').trim();\r\n        \r\n        // Ensure we have a meaningful summary\r\n        if (!summary || summary.length < 20) {\r\n          console.warn(`⚠️ Article has poor summary: \"${article.title}\"`);\r\n          return null; // This will be filtered out\r\n        }\r\n        \r\n        const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\r\n        \r\n        return {\r\n          id: article.id?.toString() || article.guid || `rss_${Date.now()}_${index}`,\r\n          title: article.title || 'No title',\r\n          summary: cleanSummary,\r\n          url: article.link || '#',\r\n          source: article.feed_name || 'Unknown Source',\r\n          domain: article.domain || extractDomain(article.link || ''),\r\n          category: mapBackendCategory(article.category),\r\n          publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\r\n          relevanceScore: calculateRelevanceScore(article.title, article.description),\r\n          tags: extractTags(article.title, article.description),\r\n          \r\n          // RSS enhanced fields\r\n          thumbnailUrl,\r\n          imageUrl,\r\n          mediaType: article.media_type || '',\r\n          mediaDescription: article.media_description || '',\r\n          author: article.author || '',\r\n          fullContent: article.content_encoded || '',\r\n          wordCount: article.word_count || 0,\r\n          readingTime: article.reading_time || Math.ceil((article.word_count || 200) / 200),\r\n          hasMedia: !!(thumbnailUrl || imageUrl),\r\n          hasAuthor: !!(article.author && article.author.trim()),\r\n          contentLength: article.content_length || 0,\r\n          feedTitle: article.feed_name || '',\r\n          guid: article.guid || '',\r\n          commentsUrl: article.comments_url || '',\r\n          language: article.language || '',\r\n          rights: article.rights || '',\r\n          extractedAt: article.extracted_at || '',\r\n          lastModified: article.last_modified || '',\r\n          \r\n          // RSS API specific fields\r\n          timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\r\n          isRecent: article.is_recent || false,\r\n          contentQuality: article.content_quality || 'medium',\r\n          completeness: article.completeness || 'partial',\r\n          country: article.country || '',\r\n          feedName: article.feed_name || '',\r\n          feedId: article.feed_id || 0\r\n        };\r\n      })\r\n      .filter(article => article !== null) as NewsArticle[]; // Remove null entries\r\n    \r\n    console.log('📰 Processed and filtered RSS articles:', {\r\n      total: articles.length,\r\n      withImages: articles.filter(a => a.hasMedia).length,\r\n      withAuthors: articles.filter(a => a.hasAuthor).length,\r\n      categories: [...new Set(articles.map(a => a.category))]\r\n    });\r\n    \r\n    // If we got no valid articles after filtering, use fallback\r\n    if (articles.length === 0) {\r\n      console.warn('⚠️ No valid health articles found after filtering, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      const category = article.category;\r\n      if (!categorizedArticles[category]) {\r\n        categorizedArticles[category] = [];\r\n      }\r\n      categorizedArticles[category].push(article);\r\n    });\r\n    \r\n    const result = {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      filtersApplied: data.filters_applied,\r\n      message: `Fetched ${articles.length} quality health articles from RSS feeds`\r\n    };\r\n    \r\n    // Cache the result\r\n    newsCache = {\r\n      data: result,\r\n      timestamp: now\r\n    };\r\n    \r\n    return result;\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS feed:', error);\r\n    \r\n    // If we have cached data, use it even if it's old\r\n    if (newsCache.data) {\r\n      console.log('📦 Using stale cached data due to error');\r\n      return newsCache.data;\r\n    }\r\n    \r\n    // Try to get fallback news\r\n    try {\r\n      const fallback = await getFallbackNews();\r\n      return {\r\n        ...fallback,\r\n        message: `RSS service temporarily unavailable. Showing sample articles.`\r\n      };\r\n    } catch (fallbackError) {\r\n      console.error('❌ Even fallback failed:', fallbackError);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        message: 'Unable to load news articles at this time. Please try again later.'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Clear cache function\r\nexport const clearNewsCache = () => {\r\n  newsCache = { data: null, timestamp: 0 };\r\n  console.log('🗑️ News cache cleared');\r\n};\r\n\r\n// Get available categories and countries from RSS API\r\nexport const getRSSFilters = async (): Promise<{\r\n  success: boolean;\r\n  categories?: string[];\r\n  countries?: string[];\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🏷️ Fetching RSS categories and countries...');\r\n    \r\n    const response = await axios.get<RSSCategoriesResponse>(`${API_URL}/news/categories-countries`, {\r\n      timeout: 5000\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS filters response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      categories: data.categories || [],\r\n      countries: data.countries || []\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS filters:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to fetch filters: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Trigger RSS polling manually\r\nexport const triggerRSSPolling = async (force?: boolean, feedId?: number): Promise<{\r\n  success: boolean;\r\n  results?: any;\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🔄 Triggering RSS polling...', { force, feedId });\r\n    \r\n    const params: any = {};\r\n    if (force) params.force = 'true';\r\n    if (feedId) params.feed_id = feedId.toString();\r\n    \r\n    const response = await axios.post<RSSPollingResponse>(`${API_URL}/news/polling/trigger`, {}, {\r\n      params,\r\n      timeout: 30000 // Longer timeout for polling\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS polling response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      results: data.results,\r\n      message: data.message\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error triggering RSS polling:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to trigger polling: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Map frontend categories to backend RSS categories\r\nconst mapFrontendToBackendCategory = (frontendCategory: string): string | null => {\r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'nutrition',\r\n    'medical': 'medical',\r\n    'health': 'health',\r\n    'clinical': 'medical',\r\n    'prevention': 'health',\r\n    'mental': 'mental',\r\n    'science': 'science',\r\n    'general': 'health',\r\n    'tech': 'tech',\r\n    'business': 'business'\r\n  };\r\n  \r\n  return categoryMap[frontendCategory.toLowerCase()] || 'health'; // Default to 'health' instead of null\r\n};\r\n\r\n// Map backend categories to frontend display categories\r\nconst mapBackendCategory = (backendCategory: string | undefined): string => {\r\n  if (!backendCategory) return 'General Health';\r\n  \r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'Nutrition & Diet',\r\n    'diet': 'Nutrition & Diet',\r\n    'medical': 'Medical Research',\r\n    'health': 'Public Health',\r\n    'mental': 'Mental Health',\r\n    'prevention': 'Disease Prevention',\r\n    'clinical': 'Clinical Studies',\r\n    'science': 'Medical Research',\r\n    'tech': 'Medical Technology',\r\n    'political': 'Health Policy',\r\n    'sports': 'Fitness & Sports',\r\n    'entertainment': 'Wellness',\r\n    'business': 'Health Business',\r\n    'nature': 'Environmental Health'\r\n  };\r\n  \r\n  const lowerCategory = backendCategory.toLowerCase();\r\n  for (const [key, value] of Object.entries(categoryMap)) {\r\n    if (lowerCategory.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return 'General Health';\r\n};\r\n\r\n// Enhanced fallback news with RSS structure\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  const fallbackArticles: NewsArticle[] = [\r\n    {\r\n      id: 'fallback_1',\r\n      title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\r\n      summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\r\n      url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\r\n      source: \"NIH Health News\",\r\n      domain: \"nih.gov\",\r\n      category: \"Nutrition & Diet\",\r\n      publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Sarah Johnson\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 150,\r\n      readingTime: 1,\r\n      contentLength: 750,\r\n      timeAgo: \"1 day ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_2',\r\n      title: \"Exercise and Mental Health: The Connection You Need to Know\",\r\n      summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\r\n      url: \"https://www.cdc.gov/mental-health/exercise-connection\",\r\n      source: \"CDC Health Updates\",\r\n      domain: \"cdc.gov\",\r\n      category: \"Mental Health\",\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.90,\r\n      tags: ['mental-health', 'exercise', 'wellness', 'depression'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Michael Chen\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 180,\r\n      readingTime: 1,\r\n      contentLength: 900,\r\n      timeAgo: \"2 days ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_3',\r\n      title: \"The Importance of Sleep for Immune System Function\",\r\n      summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\r\n      url: \"https://www.nih.gov/news-events/sleep-immune-system\",\r\n      source: \"Sleep Health Research\",\r\n      domain: \"nih.gov\",\r\n      category: \"General Health\",\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.85,\r\n      tags: ['sleep', 'immune-system', 'health', 'wellness'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Lisa Rodriguez\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 200,\r\n      readingTime: 1,\r\n      contentLength: 1000,\r\n      timeAgo: \"3 days ago\",\r\n      isRecent: false,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    }\r\n  ];\r\n\r\n  // Categorize fallback articles\r\n  const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n  fallbackArticles.forEach(article => {\r\n    if (!categorizedArticles[article.category]) {\r\n      categorizedArticles[article.category] = [];\r\n    }\r\n    categorizedArticles[article.category].push(article);\r\n  });\r\n\r\n  return {\r\n    success: true,\r\n    articles: fallbackArticles,\r\n    categories: categorizedArticles,\r\n    lastUpdated: new Date().toISOString(),\r\n    count: fallbackArticles.length,\r\n    message: 'Using sample health news (RSS service unavailable)'\r\n  };\r\n};\r\n\r\n// Updated utility functions\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching RSS articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching RSS articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available to search'\r\n      };\r\n    }\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    \r\n    const matchingArticles = feedResponse.articles\r\n      .filter(article => \r\n        article.title.toLowerCase().includes(searchTerm) ||\r\n        article.summary.toLowerCase().includes(searchTerm) ||\r\n        article.tags.some(tag => tag.includes(searchTerm)) ||\r\n        (article.author && article.author.toLowerCase().includes(searchTerm))\r\n      )\r\n      .slice(0, limit || 10);\r\n    \r\n    return {\r\n      success: true,\r\n      articles: matchingArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: matchingArticles.length,\r\n      message: `Search results for \"${query}\"`\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error searching articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing RSS feed...');\r\n    \r\n    // Clear cache to force fresh data\r\n    clearNewsCache();\r\n    \r\n    // Trigger RSS polling\r\n    const pollingResult = await triggerRSSPolling(true);\r\n    if (pollingResult.success) {\r\n      console.log('✅ RSS polling triggered successfully:', pollingResult.results);\r\n    } else {\r\n      console.warn('⚠️ RSS polling failed:', pollingResult.message);\r\n    }\r\n    \r\n    // Fetch fresh articles\r\n    return await fetchNewsFeed();\r\n  } catch (error: any) {\r\n    console.error('❌ Error refreshing news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n    articlesWithImages: number;\r\n    articlesWithAuthors: number;\r\n    averageWordCount: number;\r\n    averageReadingTime: number;\r\n    trustedSources: number;\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed();\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    let totalWordCount = 0;\r\n    let totalReadingTime = 0;\r\n    let articlesWithImages = 0;\r\n    let articlesWithAuthors = 0;\r\n    let trustedSources = 0;\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n      \r\n      if (article.hasMedia) articlesWithImages++;\r\n      if (article.hasAuthor) articlesWithAuthors++;\r\n      if (isTrustedDomain(article.url)) trustedSources++;\r\n      if (article.wordCount) totalWordCount += article.wordCount;\r\n      if (article.readingTime) totalReadingTime += article.readingTime;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts,\r\n        articlesWithImages,\r\n        articlesWithAuthors,\r\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\r\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\r\n        trustedSources\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility functions\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary,\r\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\r\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\r\n    qualityScore: calculateQualityScore(article),\r\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read'\r\n  };\r\n};\r\n\r\nconst calculateQualityScore = (article: NewsArticle): number => {\r\n  let score = 0;\r\n  \r\n  if (article.hasAuthor) score += 0.2;\r\n  if (article.hasMedia) score += 0.2;\r\n  if (article.wordCount && article.wordCount > 100) score += 0.2;\r\n  if (article.contentLength && article.contentLength > 500) score += 0.2;\r\n  if (isTrustedDomain(article.url)) score += 0.2;\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname.toLowerCase();\r\n  } catch {\r\n    return 'unknown';\r\n  }\r\n};\r\n\r\nconst calculateRelevanceScore = (title: string = '', description: string = ''): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.08);\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst extractTags = (title: string = '', description: string = '', existingTags?: string): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const tags: string[] = [];\r\n  \r\n  if (existingTags) {\r\n    try {\r\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\r\n      tags.push(...parsedTags);\r\n    } catch (e) {\r\n      // Continue with keyword extraction\r\n    }\r\n  }\r\n  \r\n  const tagKeywords = [\r\n    'health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise',\r\n    'mental-health', 'wellness', 'prevention', 'treatment', 'research',\r\n    'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor',\r\n    'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'\r\n  ];\r\n  \r\n  tagKeywords.forEach(keyword => {\r\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\r\n      tags.push(keyword);\r\n    }\r\n  });\r\n  \r\n  return tags.slice(0, 5);\r\n};\r\n\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\nexport const getAvailableCategories = async (): Promise<Array<{id: string, label: string}>> => {\r\n  try {\r\n    const filters = await getRSSFilters();\r\n    \r\n    if (filters.success && filters.categories) {\r\n      // Map RSS categories to display labels\r\n      const rssCategories = filters.categories.map(cat => ({\r\n        id: cat,\r\n        label: mapBackendCategory(cat)\r\n      }));\r\n      \r\n      return [\r\n        { id: 'all', label: 'All Health News' },\r\n        ...rssCategories\r\n      ];\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error fetching RSS categories:', error);\r\n  }\r\n  \r\n  // Fallback categories\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: 'nutrition', label: 'Nutrition & Diet' },\r\n    { id: 'medical', label: 'Medical Research' },\r\n    { id: 'health', label: 'Public Health' },\r\n    { id: 'clinical', label: 'Clinical Studies' },\r\n    { id: 'prevention', label: 'Disease Prevention' },\r\n    { id: 'mental', label: 'Mental Health' },\r\n    { id: 'science', label: 'Science Research' },\r\n    { id: 'general', label: 'General Health' }\r\n  ];\r\n};\r\n\r\n// Legacy compatibility\r\nexport interface NewsItem {\r\n  title: string;\r\n  link: string;\r\n  description: string;\r\n  pubDate: string;\r\n  source: string;\r\n  category: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  author?: string;\r\n  hasMedia?: boolean;\r\n}\r\n\r\nexport class NewsService {\r\n  async fetchNews(): Promise<NewsItem[]> {\r\n    const response = await fetchNewsFeed();\r\n    \r\n    return response.articles?.map(article => ({\r\n      title: article.title,\r\n      link: article.url,\r\n      description: article.summary,\r\n      pubDate: article.publishedDate,\r\n      source: article.source,\r\n      category: article.category,\r\n      thumbnailUrl: article.thumbnailUrl,\r\n      imageUrl: article.imageUrl,\r\n      author: article.author,\r\n      hasMedia: article.hasMedia\r\n    })) || [];\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}