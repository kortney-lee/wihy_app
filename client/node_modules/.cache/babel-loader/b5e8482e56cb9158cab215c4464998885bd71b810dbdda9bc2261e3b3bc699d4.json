{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport openaiAPI from './services/openaiAPI';\nimport { searchFoodDatabase } from './services/openaiAPI'; // or './services/apiService'\nimport './VHealthSearch.css';\n\n// Create or update this function in your existing API service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Define a type for the allowed data sources that matches SearchResults requirements\n\n// Results page wrapper to handle URL parameters\nconst ResultsPage = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const query = searchParams.get('q') || '';\n  const [isLoading, setIsLoading] = useState(true);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query) {\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Fetching results for query:\", query);\n      setIsLoading(true);\n      try {\n        const result = await openaiAPI.searchHealthInfo(query);\n        console.log(\"Search result:\", result);\n\n        // Safely extract the text content\n        const resultText = result.details || result.response || JSON.stringify(result);\n        setResults(resultText);\n        setDataSource(\"openai\");\n        setCitations(result.sources || []);\n        setRecommendations(result.recommendations || []);\n        setDisclaimer(result.medicalDisclaimer || '');\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        setResults(\"Sorry, there was an error processing your request.\");\n        setDataSource(\"error\");\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchResults();\n  }, [query]);\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n  };\n  const handleSearch = async query => {\n    setIsLoading(true);\n    // setQuery(query); // This line seems to be missing in your code, assuming it's needed\n\n    try {\n      console.log('🔍 Starting search for:', query);\n\n      // Always try database first for food queries\n      const foodKeywords = ['quinoa', 'broccoli', 'apple', 'tomato', 'banana', 'food', 'nutrition'];\n      const isFoodQuery = foodKeywords.some(keyword => query.toLowerCase().includes(keyword.toLowerCase()));\n      console.log('Is food query?', isFoodQuery);\n      if (isFoodQuery) {\n        try {\n          console.log('🔍 Searching database for:', query);\n          // Assuming searchFoodDatabase is imported or available in this scope\n          const foodResult = await searchFoodDatabase(query);\n          console.log('📊 Database result:', foodResult);\n          if (foodResult.found) {\n            console.log('✅ Found in database - using database data');\n            setResults(JSON.stringify(foodResult, null, 2));\n            setDataSource('vnutrition'); // Important: Set correct source\n            setIsLoading(false);\n            return; // Exit early - don't fall back to OpenAI\n          }\n        } catch (error) {\n          console.error('Database search failed:', error);\n          // Continue to fallback\n        }\n      }\n\n      // Fallback to OpenAI\n      console.log('🤖 Using OpenAI fallback');\n      const generalResult = await openaiAPI.searchHealthInfo(query);\n      const resultText = typeof generalResult === 'string' ? generalResult : generalResult.details || generalResult.response || JSON.stringify(generalResult, null, 2);\n      setResults(resultText);\n      setDataSource('openai');\n    } catch (error) {\n      console.error('Search error:', error);\n      setResults('Error searching. Please try again.');\n      setDataSource('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: query,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App with routing\n_s(ResultsPage, \"X2PdXXkm0iSGXMCZYDLtT4OvLjk=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ResultsPage;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/results\",\n        element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","searchFoodDatabase","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","ResultsPage","_s","searchParams","navigate","query","get","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","fetchResults","console","log","result","searchHealthInfo","resultText","details","response","JSON","stringify","sources","medicalDisclaimer","error","handleBackToSearch","handleNewSearch","newQuery","encodeURIComponent","handleSearch","foodKeywords","isFoodQuery","some","keyword","toLowerCase","includes","foodResult","found","generalResult","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport { searchFoodDatabase } from './services/openaiAPI'; // or './services/apiService'\r\nimport './VHealthSearch.css';\r\n\r\n// Create or update this function in your existing API service\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Define a type for the allowed data sources that matches SearchResults requirements\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\n// Results page wrapper to handle URL parameters\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Fetching results for query:\", query);\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"Search result:\", result);\r\n        \r\n        // Safely extract the text content\r\n        const resultText = result.details || result.response || JSON.stringify(result);\r\n        setResults(resultText);\r\n        setDataSource(\"openai\");\r\n        \r\n        setCitations(result.sources || []);\r\n        setRecommendations(result.recommendations || []);\r\n        setDisclaimer(result.medicalDisclaimer || '');\r\n        \r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        setResults(\"Sorry, there was an error processing your request.\");\r\n        setDataSource(\"error\");\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query]);\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  const handleSearch = async (query: string) => {\r\n    setIsLoading(true);\r\n    // setQuery(query); // This line seems to be missing in your code, assuming it's needed\r\n  \r\n    try {\r\n      console.log('🔍 Starting search for:', query);\r\n      \r\n      // Always try database first for food queries\r\n      const foodKeywords = [\r\n        'quinoa', 'broccoli', 'apple', 'tomato', 'banana', 'food', 'nutrition'\r\n      ];\r\n      \r\n      const isFoodQuery = foodKeywords.some(keyword => \r\n        query.toLowerCase().includes(keyword.toLowerCase())\r\n      );\r\n      \r\n      console.log('Is food query?', isFoodQuery);\r\n      \r\n      if (isFoodQuery) {\r\n        try {\r\n          console.log('🔍 Searching database for:', query);\r\n          // Assuming searchFoodDatabase is imported or available in this scope\r\n          const foodResult = await searchFoodDatabase(query);\r\n          \r\n          console.log('📊 Database result:', foodResult);\r\n          \r\n          if (foodResult.found) {\r\n            console.log('✅ Found in database - using database data');\r\n            setResults(JSON.stringify(foodResult, null, 2));\r\n            setDataSource('vnutrition'); // Important: Set correct source\r\n            setIsLoading(false);\r\n            return; // Exit early - don't fall back to OpenAI\r\n          }\r\n        } catch (error) {\r\n          console.error('Database search failed:', error);\r\n          // Continue to fallback\r\n        }\r\n      }\r\n      \r\n      // Fallback to OpenAI\r\n      console.log('🤖 Using OpenAI fallback');\r\n      const generalResult: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n      const resultText = typeof generalResult === 'string' \r\n        ? generalResult \r\n        : generalResult.details || generalResult.response || JSON.stringify(generalResult, null, 2);\r\n\r\n      setResults(resultText);\r\n      setDataSource('openai');\r\n      \r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      setResults('Error searching. Please try again.');\r\n      setDataSource('error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\n// Main App with routing\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n  response?: string; // Alternative field name\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}