{"ast":null,"code":"// src/services/foodAnalysisService.ts\n\n// Add a type for the API response\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create or update this file to properly send images to your backend\n\nclass FoodAnalysisService {\n  constructor() {\n    this.baseUrl = 'http://localhost:5000/api';\n  }\n  async analyzeFoodImage(file) {\n    try {\n      // Create FormData to send the file\n      const formData = new FormData();\n      formData.append('image', file); // This must match your backend's upload.single('image')\n\n      // Send to your backend endpoint\n      const response = await fetch(`${this.baseUrl}/analyze-image`, {\n        method: 'POST',\n        body: formData\n        // Don't set Content-Type header - browser will set it with boundary\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('Backend analysis result:', result);\n\n      // Return the food name or relevant data\n      return result.foodName || result.name || result.analysis || 'Unknown food item';\n    } catch (error) {\n      console.error('Error analyzing food image:', error);\n      throw error;\n    }\n  }\n}\nexport const foodAnalysisService = new FoodAnalysisService();","map":{"version":3,"names":["API_URL","FoodAnalysisService","constructor","baseUrl","analyzeFoodImage","file","formData","FormData","append","response","fetch","method","body","ok","Error","status","result","json","console","log","foodName","name","analysis","error","foodAnalysisService"],"sources":["C:/vHealth/vhealth/client/src/components/foodAnalysisService.tsx"],"sourcesContent":["// src/services/foodAnalysisService.ts\r\nimport axios from 'axios';\r\n\r\ninterface FoodAnalysisResult {\r\n  classification: {\r\n    foodName: string;\r\n    confidence: number;\r\n    category: string;\r\n    portionSize?: string;\r\n    alternatives?: string[];\r\n  };\r\n  nutrition: {\r\n    calories: number;\r\n    macros: {\r\n      protein: number;\r\n      carbs: number;\r\n      fat: number;\r\n      saturatedFat: number;\r\n      sugar: number;\r\n      fiber: number;\r\n      sodium: number;\r\n    };\r\n    healthScore: number;\r\n    novaClassification: 1 | 2 | 3 | 4;\r\n    allergens: string[];\r\n    snapEligible: boolean;\r\n  };\r\n  healthInsight: string;\r\n  recommendations: string[];\r\n}\r\n\r\n// Add a type for the API response\r\ninterface AnalyzeImageResponse {\r\n  foodName: string;\r\n  name?: string;  // Alternative field name\r\n  nutrition?: any;\r\n  confidence?: number;\r\n  // Add other fields as needed\r\n}\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create or update this file to properly send images to your backend\r\n\r\nclass FoodAnalysisService {\r\n  private baseUrl = 'http://localhost:5000/api';\r\n\r\n  async analyzeFoodImage(file: File): Promise<any> {\r\n    try {\r\n      // Create FormData to send the file\r\n      const formData = new FormData();\r\n      formData.append('image', file); // This must match your backend's upload.single('image')\r\n\r\n      // Send to your backend endpoint\r\n      const response = await fetch(`${this.baseUrl}/analyze-image`, {\r\n        method: 'POST',\r\n        body: formData,\r\n        // Don't set Content-Type header - browser will set it with boundary\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Backend analysis result:', result);\r\n      \r\n      // Return the food name or relevant data\r\n      return result.foodName || result.name || result.analysis || 'Unknown food item';\r\n      \r\n    } catch (error) {\r\n      console.error('Error analyzing food image:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const foodAnalysisService = new FoodAnalysisService();"],"mappings":"AAAA;;AA+BA;;AASA,MAAMA,OAAO,GAAG,2BAA2B;;AAE3C;;AAEA,MAAMC,mBAAmB,CAAC;EAAAC,YAAA;IAAA,KAChBC,OAAO,GAAG,2BAA2B;EAAA;EAE7C,MAAMC,gBAAgBA,CAACC,IAAU,EAAgB;IAC/C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC,CAAC,CAAC;;MAEhC;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACP,OAAO,gBAAgB,EAAE;QAC5DQ,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;QACN;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,MAAM,CAAC;;MAE/C;MACA,OAAOA,MAAM,CAACI,QAAQ,IAAIJ,MAAM,CAACK,IAAI,IAAIL,MAAM,CAACM,QAAQ,IAAI,mBAAmB;IAEjF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMC,mBAAmB,GAAG,IAAIvB,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}