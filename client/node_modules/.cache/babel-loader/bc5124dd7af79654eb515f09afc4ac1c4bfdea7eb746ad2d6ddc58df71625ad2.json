{"ast":null,"code":"class OpenAIHealthService {\n  // Update the constructor to properly use the environment variable\n  constructor() {\n    this.apiKey = void 0;\n    this.baseURL = 'https://api.openai.com/v1/chat/completions';\n    this.model = void 0;\n    this.queryLog = void 0;\n    // Update the searchHealthInfo method to use the real OpenAI API\n    this.searchHealthInfo = async query => {\n      console.log(`Searching for health info: ${query}`);\n      if (!this.apiKey) {\n        console.error(\"OpenAI API key not configured\");\n        throw new Error(\"OpenAI API key not configured\");\n      }\n      try {\n        // Log this query\n        this.logQuery(query);\n\n        // For simplicity, let's define the API endpoint\n        const url = 'https://api.openai.com/v1/chat/completions';\n\n        // Make the API request\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.apiKey}`\n          },\n          body: JSON.stringify({\n            model: this.model,\n            messages: [{\n              role: 'system',\n              content: 'You are a health and nutrition expert. Provide accurate, science-based information with references.'\n            }, {\n              role: 'user',\n              content: `Please provide health and nutrition information about: ${query}. Include a brief summary, detailed information, sources, related topics, recommendations, and a medical disclaimer.`\n            }],\n            temperature: 0.3,\n            max_tokens: 1000\n          })\n        });\n        if (!response.ok) {\n          var _error$error;\n          const error = await response.json();\n          console.error(\"OpenAI API error:\", error);\n          throw new Error(`API error: ${((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || 'Unknown error'}`);\n        }\n        const data = await response.json();\n        const content = data.choices[0].message.content;\n\n        // Parse the content into sections\n        // This is a simple parsing logic - enhance as needed\n        const sections = content.split('\\n\\n');\n        return {\n          summary: sections[0] || 'No summary available',\n          details: sections.slice(1, 3).join('\\n\\n') || 'No details available',\n          sources: [sections.find(s => s.includes('Source') || s.includes('Reference')) || 'No sources available'],\n          relatedTopics: ['Nutrition', 'Health', 'Diet'].map(t => `${t} related to ${query}`),\n          recommendations: sections.find(s => s.includes('recommend')) ? [sections.find(s => s.includes('recommend'))] : ['Maintain a balanced diet', 'Consult healthcare professionals'],\n          medicalDisclaimer: \"This information is for educational purposes only and not intended as medical advice.\"\n        };\n      } catch (error) {\n        console.error(\"Error calling OpenAI API:\", error);\n        throw error;\n      }\n    };\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\n    this.model = 'gpt-4';\n    this.queryLog = [];\n    console.log(\"OpenAI API Service initialized\");\n    console.log(\"API Key configured:\", this.apiKey ? \"Yes\" : \"No\");\n  }\n  async moderateQuery(query) {\n    try {\n      var _data$results, _data$results$;\n      const response = await fetch('https://api.openai.com/v1/moderations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          input: query\n        })\n      });\n      const data = await response.json();\n      const flagged = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : _data$results$.flagged) || false;\n      if (flagged) {\n        console.warn('🚨 Query flagged by moderation:', query);\n      }\n      return !flagged;\n    } catch (error) {\n      console.error('Moderation check failed:', error);\n      return true;\n    }\n  }\n\n  // Fix the logQuery function to make parameters optional with default values\n  logQuery(query, rawResponse = '', citations = []) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      query: query,\n      rawResponse: rawResponse,\n      citationsExtracted: citations\n    };\n    try {\n      const existingLogs = JSON.parse(localStorage.getItem('healthQueryLogs') || '[]');\n      existingLogs.push(logEntry);\n      if (existingLogs.length > 100) {\n        existingLogs.splice(0, existingLogs.length - 100);\n      }\n      localStorage.setItem('healthQueryLogs', JSON.stringify(existingLogs));\n      console.log('📝 Query logged for audit trail');\n    } catch (error) {\n      console.warn('Failed to log query:', error);\n    }\n  }\n  extractRealCitations(text) {\n    const matches = [];\n    const pubmedMatches = text.match(/PMID\\s?:?\\s?\\d{6,10}/gi);\n    if (pubmedMatches) matches.push(...pubmedMatches);\n    const doiMatches = text.match(/10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+/gi);\n    if (doiMatches) matches.push(...doiMatches);\n    const urlMatches = text.match(/https?:\\/\\/[^\\s]+\\.(gov|org|edu|com|net)(\\/[^\\s)]*)?/gi);\n    if (urlMatches) {\n      const allowedDomains = ['cdc.gov', 'nih.gov', 'who.int', 'jamanetwork.com', 'nejm.org', 'amjmed.com', 'jmir.org', 'thelancet.com', 'bmj.com', 'nature.com', 'sciencedirect.com', 'ncbi.nlm.nih.gov', 'pubmed.ncbi.nlm.nih.gov'];\n      const filtered = urlMatches.filter(url => allowedDomains.some(domain => url.includes(domain)));\n      matches.push(...filtered);\n    }\n    return Array.from(new Set(matches));\n  }\n  formatResponse(content, query) {\n    const citations = this.extractRealCitations(content);\n\n    // Format citations into clickable links\n    const formattedCitations = citations.map(cite => {\n      if (/PMID\\s?:?\\s?\\d{6,10}/i.test(cite)) {\n        var _cite$match;\n        const pmid = (_cite$match = cite.match(/\\d{6,10}/)) === null || _cite$match === void 0 ? void 0 : _cite$match[0];\n        return `https://pubmed.ncbi.nlm.nih.gov/${pmid}`;\n      } else if (/^10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+$/i.test(cite)) {\n        return `https://doi.org/${cite}`;\n      } else {\n        return cite;\n      }\n    });\n\n    // Log the query for traceability\n    this.logQuery(query, content, citations);\n    return {\n      summary: `Research-backed health information about: ${query}`,\n      details: content,\n      sources: formattedCitations.length > 0 ? formattedCitations : ['NIH Guidelines', 'CDC & WHO Publications', 'PubMed and peer-reviewed studies', 'Academic Medical Journals', 'Evidence-Based Clinical Reviews'],\n      relatedTopics: ['Evidence-Based Medicine', 'Clinical Guidelines', 'Medical Research', 'Health Screening', 'Preventive Care'],\n      recommendations: ['Consult healthcare professionals for personalized medical advice', 'Verify information with your doctor or medical provider', 'Follow evidence-based medical guidelines', 'Seek regular medical check-ups and screenings'],\n      medicalDisclaimer: 'This information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.'\n    };\n  }\n  validateApiKey() {\n    if (!this.apiKey) {\n      return {\n        valid: false,\n        message: 'No API key found'\n      };\n    }\n    if (!this.apiKey.startsWith('sk-')) {\n      return {\n        valid: false,\n        message: 'API key should start with \"sk-\"'\n      };\n    }\n    if (this.apiKey.length < 48) {\n      return {\n        valid: false,\n        message: 'API key seems to be too short'\n      };\n    }\n    return {\n      valid: true,\n      message: 'API key is valid'\n    };\n  }\n}\nexport default new OpenAIHealthService();","map":{"version":3,"names":["OpenAIHealthService","constructor","apiKey","baseURL","model","queryLog","searchHealthInfo","query","console","log","error","Error","logQuery","url","response","fetch","method","headers","body","JSON","stringify","messages","role","content","temperature","max_tokens","ok","_error$error","json","message","data","choices","sections","split","summary","details","slice","join","sources","find","s","includes","relatedTopics","map","t","recommendations","medicalDisclaimer","process","env","REACT_APP_OPENAI_API_KEY","moderateQuery","_data$results","_data$results$","input","flagged","results","warn","rawResponse","citations","logEntry","timestamp","Date","toISOString","citationsExtracted","existingLogs","parse","localStorage","getItem","push","length","splice","setItem","extractRealCitations","text","matches","pubmedMatches","match","doiMatches","urlMatches","allowedDomains","filtered","filter","some","domain","Array","from","Set","formatResponse","formattedCitations","cite","test","_cite$match","pmid","validateApiKey","valid","startsWith"],"sources":["C:/vHealth/vhealth/client/src/services/openaiAPI.ts"],"sourcesContent":["interface ChatGPTResponse {\r\n  summary: string;\r\n  details: string;\r\n  sources: string[];\r\n  relatedTopics: string[];\r\n  recommendations: string[];\r\n  medicalDisclaimer: string;\r\n}\r\n\r\ninterface QueryLog {\r\n  timestamp: string;\r\n  query: string;\r\n  rawResponse: string;\r\n  citationsExtracted: string[];\r\n  userId?: string;\r\n}\r\n\r\nclass OpenAIHealthService {\r\n  private apiKey: string;\r\n  private baseURL = 'https://api.openai.com/v1/chat/completions';\r\n  private model: string;\r\n  private queryLog: QueryLog[];\r\n\r\n  // Update the constructor to properly use the environment variable\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\r\n    this.model = 'gpt-4';\r\n    this.queryLog = [];\r\n    console.log(\"OpenAI API Service initialized\");\r\n    console.log(\"API Key configured:\", this.apiKey ? \"Yes\" : \"No\");\r\n  }\r\n\r\n  private async moderateQuery(query: string): Promise<boolean> {\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/moderations', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          input: query\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      const flagged = data.results?.[0]?.flagged || false;\r\n      \r\n      if (flagged) {\r\n        console.warn('🚨 Query flagged by moderation:', query);\r\n      }\r\n      \r\n      return !flagged;\r\n    } catch (error) {\r\n      console.error('Moderation check failed:', error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Fix the logQuery function to make parameters optional with default values\r\n  private logQuery(query: string, rawResponse: string = '', citations: string[] = []): void {\r\n    const logEntry: QueryLog = {\r\n      timestamp: new Date().toISOString(),\r\n      query: query,\r\n      rawResponse: rawResponse,\r\n      citationsExtracted: citations\r\n    };\r\n    \r\n    try {\r\n      const existingLogs = JSON.parse(localStorage.getItem('healthQueryLogs') || '[]');\r\n      existingLogs.push(logEntry);\r\n      \r\n      if (existingLogs.length > 100) {\r\n        existingLogs.splice(0, existingLogs.length - 100);\r\n      }\r\n      \r\n      localStorage.setItem('healthQueryLogs', JSON.stringify(existingLogs));\r\n      console.log('📝 Query logged for audit trail');\r\n    } catch (error) {\r\n      console.warn('Failed to log query:', error);\r\n    }\r\n  }\r\n\r\n  // Update the searchHealthInfo method to use the real OpenAI API\r\n  searchHealthInfo = async (query: string): Promise<ChatGPTResponse> => {\r\n    console.log(`Searching for health info: ${query}`);\r\n\r\n    if (!this.apiKey) {\r\n      console.error(\"OpenAI API key not configured\");\r\n      throw new Error(\"OpenAI API key not configured\");\r\n    }\r\n\r\n    try {\r\n      // Log this query\r\n      this.logQuery(query);\r\n      \r\n      // For simplicity, let's define the API endpoint\r\n      const url = 'https://api.openai.com/v1/chat/completions';\r\n      \r\n      // Make the API request\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.model,\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: 'You are a health and nutrition expert. Provide accurate, science-based information with references.'\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: `Please provide health and nutrition information about: ${query}. Include a brief summary, detailed information, sources, related topics, recommendations, and a medical disclaimer.`\r\n            }\r\n          ],\r\n          temperature: 0.3,\r\n          max_tokens: 1000\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        console.error(\"OpenAI API error:\", error);\r\n        throw new Error(`API error: ${error.error?.message || 'Unknown error'}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const content = data.choices[0].message.content;\r\n      \r\n      // Parse the content into sections\r\n      // This is a simple parsing logic - enhance as needed\r\n      const sections = content.split('\\n\\n');\r\n      \r\n      return {\r\n        summary: sections[0] || 'No summary available',\r\n        details: sections.slice(1, 3).join('\\n\\n') || 'No details available',\r\n        sources: [sections.find(s => s.includes('Source') || s.includes('Reference')) || 'No sources available'],\r\n        relatedTopics: ['Nutrition', 'Health', 'Diet'].map(t => `${t} related to ${query}`),\r\n        recommendations: sections.find(s => s.includes('recommend')) \r\n          ? [sections.find(s => s.includes('recommend'))] \r\n          : ['Maintain a balanced diet', 'Consult healthcare professionals'],\r\n        medicalDisclaimer: \"This information is for educational purposes only and not intended as medical advice.\"\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error calling OpenAI API:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private extractRealCitations(text: string): string[] {\r\n    const matches: string[] = [];\r\n\r\n    const pubmedMatches = text.match(/PMID\\s?:?\\s?\\d{6,10}/gi);\r\n    if (pubmedMatches) matches.push(...pubmedMatches);\r\n\r\n    const doiMatches = text.match(/10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+/gi);\r\n    if (doiMatches) matches.push(...doiMatches);\r\n\r\n    const urlMatches = text.match(\r\n      /https?:\\/\\/[^\\s]+\\.(gov|org|edu|com|net)(\\/[^\\s)]*)?/gi\r\n    );\r\n    if (urlMatches) {\r\n      const allowedDomains = [\r\n        'cdc.gov', 'nih.gov', 'who.int', 'jamanetwork.com', 'nejm.org',\r\n        'amjmed.com', 'jmir.org', 'thelancet.com', 'bmj.com',\r\n        'nature.com', 'sciencedirect.com', 'ncbi.nlm.nih.gov', 'pubmed.ncbi.nlm.nih.gov'\r\n      ];\r\n\r\n      const filtered = urlMatches.filter(url =>\r\n        allowedDomains.some(domain => url.includes(domain))\r\n      );\r\n\r\n      matches.push(...filtered);\r\n    }\r\n\r\n    return Array.from(new Set(matches));\r\n  }\r\n\r\n  private formatResponse(content: string, query: string): ChatGPTResponse {\r\n    const citations = this.extractRealCitations(content);\r\n    \r\n    // Format citations into clickable links\r\n    const formattedCitations = citations.map(cite => {\r\n      if (/PMID\\s?:?\\s?\\d{6,10}/i.test(cite)) {\r\n        const pmid = cite.match(/\\d{6,10}/)?.[0];\r\n        return `https://pubmed.ncbi.nlm.nih.gov/${pmid}`;\r\n      } else if (/^10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+$/i.test(cite)) {\r\n        return `https://doi.org/${cite}`;\r\n      } else {\r\n        return cite;\r\n      }\r\n    });\r\n    \r\n    // Log the query for traceability\r\n    this.logQuery(query, content, citations);\r\n    \r\n    return {\r\n      summary: `Research-backed health information about: ${query}`,\r\n      details: content,\r\n      sources: formattedCitations.length > 0 ? formattedCitations : [\r\n        'NIH Guidelines',\r\n        'CDC & WHO Publications', \r\n        'PubMed and peer-reviewed studies',\r\n        'Academic Medical Journals',\r\n        'Evidence-Based Clinical Reviews'\r\n      ],\r\n      relatedTopics: [\r\n        'Evidence-Based Medicine',\r\n        'Clinical Guidelines',\r\n        'Medical Research',\r\n        'Health Screening',\r\n        'Preventive Care'\r\n      ],\r\n      recommendations: [\r\n        'Consult healthcare professionals for personalized medical advice',\r\n        'Verify information with your doctor or medical provider',\r\n        'Follow evidence-based medical guidelines',\r\n        'Seek regular medical check-ups and screenings'\r\n      ],\r\n      medicalDisclaimer: 'This information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.'\r\n    };\r\n  }\r\n\r\n  validateApiKey(): { valid: boolean; message: string } {\r\n    if (!this.apiKey) {\r\n      return { valid: false, message: 'No API key found' };\r\n    }\r\n    \r\n    if (!this.apiKey.startsWith('sk-')) {\r\n      return { valid: false, message: 'API key should start with \"sk-\"' };\r\n    }\r\n    \r\n    if (this.apiKey.length < 48) {\r\n      return { valid: false, message: 'API key seems to be too short' };\r\n    }\r\n    \r\n    return { valid: true, message: 'API key is valid' };\r\n  }\r\n}\r\n\r\nexport default new OpenAIHealthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}