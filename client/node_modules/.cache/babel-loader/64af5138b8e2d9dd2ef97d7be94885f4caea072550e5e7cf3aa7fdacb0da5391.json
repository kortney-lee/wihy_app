{"ast":null,"code":"import{WIHY_API_ENDPOINT}from'../config/apiConfig';import{logger}from'../utils/logger';// Types for the WiHy Unified API (updated to match documentation)\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj){return obj&&typeof obj==='object'&&'data'in obj&&'service_used'in obj;}// Legacy types for backward compatibility\nclass WihyAPIService{constructor(){this.baseURL=void 0;this.baseURL=WIHY_API_ENDPOINT;}/**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */async askAnything(request){try{logger.apiRequest('Making WiHy Unified API request',request);// Convert legacy WihyRequest to UnifiedRequest format if needed\nlet unifiedRequest;if('user_context'in request){// Legacy format - convert to unified format\nunifiedRequest={query:request.query,request_type:'auto',context:request.user_context||{}};}else{// Already in unified format\nunifiedRequest=request;}// Use fetch API to match the working example exactly with timeout\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 second timeout\nconst response=await fetch(this.baseURL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(unifiedRequest),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();logger.apiResponse('WiHy Unified API response received',data);return data;}catch(error){logger.error('WiHy API error:',error);if(error instanceof Error){// Check for timeout/abort errors\nif(error.name==='AbortError'){throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');}// Check for CORS errors\nif(error.message.includes('CORS')||error.message.includes('Access to fetch')||error.message.includes('No \\'Access-Control-Allow-Origin\\'')){throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');}// Check for network/connectivity issues\nif(error.message.includes('fetch')||error.message.includes('network')||error.name==='TypeError'||error.message.includes('Failed to fetch')){throw new Error('NETWORK_ERROR: Unable to connect to WiHy services');}// Check for server errors\nif(error.message.includes('HTTP error! status: 5')){throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');}throw new Error(error.message||'WiHy API request failed');}throw new Error('Unknown error occurred while contacting WiHy API');}}/**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */convertToLegacyFormat(unifiedResponse,originalQuery){var _unifiedResponse$data,_unifiedResponse$data2,_unifiedResponse$data3,_unifiedResponse$data4;// Handle chat service response\nif(unifiedResponse.service_used==='chat'&&unifiedResponse.data.response){return{success:unifiedResponse.success,timestamp:new Date().toISOString(),response_type:unifiedResponse.request_type,query:originalQuery,wihy_response:{query_type:unifiedResponse.request_type,query:originalQuery,core_principle:unifiedResponse.data.response,personalized_analysis:{identified_risk_factors:[],priority_health_goals:[unifiedResponse.data.response],action_items:[{action:unifiedResponse.data.response,priority:'medium',target_illness:'general_health',evidence_level:'ai_generated',mechanism:'chat_response',timeline:'immediate'}],timeline:'immediate'},research_foundation:[{citation_text:'WiHy AI Chat System',study_type:'ai_response',key_finding:unifiedResponse.data.response}],progress_tracking:{key_metrics:['general_health'],reassessment_period:'1 week'},biblical_wisdom:[]},message:unifiedResponse.data.response};}// Handle other service types (training, nutrition, etc.)\nreturn{success:unifiedResponse.success,timestamp:new Date().toISOString(),response_type:unifiedResponse.request_type,query:originalQuery,wihy_response:{query_type:unifiedResponse.request_type,query:originalQuery,core_principle:unifiedResponse.data.analysis||unifiedResponse.data.response||'Health Information',personalized_analysis:{identified_risk_factors:[],priority_health_goals:[],action_items:((_unifiedResponse$data=unifiedResponse.data.recommendations)===null||_unifiedResponse$data===void 0?void 0:(_unifiedResponse$data2=_unifiedResponse$data.immediate_actions)===null||_unifiedResponse$data2===void 0?void 0:_unifiedResponse$data2.map((rec,index)=>({action:rec,priority:'medium',target_illness:'general_health',evidence_level:'moderate',mechanism:'lifestyle_modification',timeline:'ongoing'})))||((_unifiedResponse$data3=unifiedResponse.data.legacy_recommendations)===null||_unifiedResponse$data3===void 0?void 0:_unifiedResponse$data3.map((rec,index)=>({action:rec,priority:'medium',target_illness:'general_health',evidence_level:'moderate',mechanism:'lifestyle_modification',timeline:'ongoing'})))||[],timeline:'ongoing'},research_foundation:((_unifiedResponse$data4=unifiedResponse.data.sources)===null||_unifiedResponse$data4===void 0?void 0:_unifiedResponse$data4.map(source=>({citation_text:source,study_type:'research',key_finding:source})))||[],progress_tracking:{key_metrics:['general_health'],reassessment_period:'1 month'},biblical_wisdom:[]},message:unifiedResponse.data.response||unifiedResponse.data.analysis||'Health information provided'};}/**\r\n   * Get health news articles using the unified API\r\n   */async getHealthNews(categories,limit){const query=categories&&categories.length>0?\"Latest health news about \".concat(categories.join(', ')):'Latest health news';const request={query:query,request_type:'health',context:{categories:categories,limit:limit}};const response=await this.askAnything(request);if('data'in response){// It's a UnifiedResponse, convert to legacy format\nreturn this.convertToLegacyFormat(response,query);}return response;}/**\r\n   * Search for nutrition information using the unified API\r\n   */async searchNutrition(foodQuery,userContext){const request={query:\"Nutrition information for \".concat(foodQuery),request_type:'nutrition',context:userContext||{}};const response=await this.askAnything(request);if('data'in response){// It's a UnifiedResponse, convert to legacy format\nreturn this.convertToLegacyFormat(response,request.query);}return response;}/**\r\n   * General health search using the unified API\r\n   */async searchHealth(query,userContext){const request={query:query,request_type:'auto',context:userContext||{}};const response=await this.askAnything(request);// Return the raw response (could be legacy WihyResponse or UnifiedResponse)\nreturn response;}/**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */formatWihyResponse(response){var _wihy_response$resear,_wihy_response$biblic;// Handle UnifiedResponse format (new API)\nif('data'in response&&'service_used'in response){const unifiedResp=response;let formatted=\"# WiHy Health Assistant\\n\\n\";if(unifiedResp.data.response){formatted+=unifiedResp.data.response;}else if(unifiedResp.data.analysis){formatted+=unifiedResp.data.analysis;}else if(unifiedResp.data.training_status){formatted+=\"## Training Service\\n\\n\";formatted+=\"\".concat(unifiedResp.data.training_status,\"\\n\\n\");if(unifiedResp.data.available_models&&unifiedResp.data.available_models.length>0){formatted+=\"**Available Models:**\\n\";unifiedResp.data.available_models.forEach(model=>{formatted+=\"- \".concat(model,\"\\n\");});}}else{formatted+=\"**Service:** \".concat(unifiedResp.service_used,\"\\n\\n\");formatted+=\"**Processing Time:** \".concat(unifiedResp.processing_time,\" seconds\\n\\n\");formatted+=\"**Data:**\\n```json\\n\".concat(JSON.stringify(unifiedResp.data,null,2),\"\\n```\");}formatted+=\"\\n\\n---\\n\\n*Response from \".concat(unifiedResp.service_used,\" service (\").concat(unifiedResp.processing_time,\"s)*\");return formatted;}// Handle legacy WihyResponse format\nconst legacyResp=response;const{wihy_response}=legacyResp;let formatted=\"# \".concat(wihy_response.core_principle,\"\\n\\n\");// Personalized Analysis\nif(wihy_response.personalized_analysis){var _wihy_response$person,_wihy_response$person2,_wihy_response$person3;formatted+=\"## \\uD83C\\uDFAF Personalized Health Analysis\\n\\n\";// Risk Factors\nif(((_wihy_response$person=wihy_response.personalized_analysis.identified_risk_factors)===null||_wihy_response$person===void 0?void 0:_wihy_response$person.length)>0){formatted+=\"### Identified Risk Factors:\\n\";wihy_response.personalized_analysis.identified_risk_factors.forEach(risk=>{formatted+=\"- **\".concat(risk.risk_factor.replace(/_/g,' ').toUpperCase(),\"**\\n\");formatted+=\"  - Associated with: \".concat(risk.associated_illnesses.replace(/_/g,' '),\"\\n\");formatted+=\"  - Prevalence: \".concat(risk.prevalence_rate,\"%\\n\");formatted+=\"  - Preventability: \".concat(risk.preventability_score,\"%\\n\\n\");});}// Priority Goals\nif(((_wihy_response$person2=wihy_response.personalized_analysis.priority_health_goals)===null||_wihy_response$person2===void 0?void 0:_wihy_response$person2.length)>0){formatted+=\"### \\uD83C\\uDFAF Priority Health Goals:\\n\";wihy_response.personalized_analysis.priority_health_goals.forEach(goal=>{formatted+=\"- \".concat(goal,\"\\n\");});formatted+='\\n';}// Action Items\nif(((_wihy_response$person3=wihy_response.personalized_analysis.action_items)===null||_wihy_response$person3===void 0?void 0:_wihy_response$person3.length)>0){formatted+=\"### \\uD83D\\uDCCB Action Items:\\n\";wihy_response.personalized_analysis.action_items.forEach((action,index)=>{formatted+=\"#### \".concat(index+1,\". \").concat(action.action,\"\\n\");formatted+=\"- **Priority:** \".concat(action.priority,\"\\n\");formatted+=\"- **Target:** \".concat(action.target_illness.replace(/_/g,' '),\"\\n\");formatted+=\"- **Evidence Level:** \".concat(action.evidence_level,\"\\n\");formatted+=\"- **How it works:** \".concat(action.mechanism,\"\\n\");formatted+=\"- **Timeline:** \".concat(action.timeline,\"\\n\\n\");});}// Timeline\nif(wihy_response.personalized_analysis.timeline){formatted+=\"**Implementation Timeline:** \".concat(wihy_response.personalized_analysis.timeline,\"\\n\\n\");}}// Research Foundation\nif(((_wihy_response$resear=wihy_response.research_foundation)===null||_wihy_response$resear===void 0?void 0:_wihy_response$resear.length)>0){formatted+=\"## \\uD83D\\uDCDA Research Foundation\\n\\n\";wihy_response.research_foundation.forEach(research=>{formatted+=\"- **\".concat(research.citation_text,\"** (\").concat(research.study_type,\")\\n\");formatted+=\"  \".concat(research.key_finding,\"\\n\\n\");});}// Progress Tracking\nif(wihy_response.progress_tracking){formatted+=\"## \\uD83D\\uDCCA Progress Tracking\\n\\n\";formatted+=\"**Key Metrics to Track:**\\n\";wihy_response.progress_tracking.key_metrics.forEach(metric=>{formatted+=\"- \".concat(metric,\"\\n\");});formatted+=\"\\n**Reassessment:** \".concat(wihy_response.progress_tracking.reassessment_period,\"\\n\\n\");}// Biblical Wisdom\nif(((_wihy_response$biblic=wihy_response.biblical_wisdom)===null||_wihy_response$biblic===void 0?void 0:_wihy_response$biblic.length)>0){formatted+=\"## \\u271D\\uFE0F Biblical Wisdom\\n\\n\";wihy_response.biblical_wisdom.forEach(wisdom=>{formatted+=\"> \".concat(wisdom,\"\\n\\n\");});}formatted+=\"---\\n\\n*WiHy health truth analysis generated at: \".concat(new Date(response.timestamp).toLocaleString(),\"*\\n\");return formatted;}/**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */extractRecommendations(response){const recommendations=[];if(isUnifiedResponse(response)){// Handle new structured recommendations\nif(response.data.recommendations){const recs=response.data.recommendations;if(recs.immediate_actions)recs.immediate_actions.forEach(r=>recommendations.push(r));if(recs.lifestyle_changes)recs.lifestyle_changes.forEach(r=>recommendations.push(r));if(recs.better_alternatives)recs.better_alternatives.forEach(r=>recommendations.push(r));if(recs.shopping_tips)recs.shopping_tips.forEach(r=>recommendations.push(r));if(recs.meal_planning)recs.meal_planning.forEach(r=>recommendations.push(r));}// Handle legacy recommendations\nif(response.data.legacy_recommendations&&response.data.legacy_recommendations.length>0){response.data.legacy_recommendations.forEach(r=>recommendations.push(r));}}else{var _response$wihy_respon;if((_response$wihy_respon=response.wihy_response.personalized_analysis)!==null&&_response$wihy_respon!==void 0&&_response$wihy_respon.action_items){response.wihy_response.personalized_analysis.action_items.forEach(action=>{recommendations.push(\"\".concat(action.action,\" (\").concat(action.priority,\" priority)\"));});}}return recommendations;}/**\r\n   * Extract citations from WiHy response for UI display\r\n   */extractCitations(response){const citations=[];if(isUnifiedResponse(response)){// Unified API may include sources array\nif(response.data.sources&&response.data.sources.length>0){response.data.sources.forEach(s=>citations.push(s));}}else{if(response.wihy_response.research_foundation){response.wihy_response.research_foundation.forEach(research=>{citations.push(\"\".concat(research.citation_text,\": \").concat(research.key_finding));});}}return citations;}/**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */formatUnifiedResponseForChat(response){// Handle chat service responses\nif(response.service_used==='chat'&&response.data.response){// For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n// We should provide more helpful information to the user\nconst briefResponse=response.data.response;if(briefResponse.includes('AI Chat response to:')){// The API gave us a placeholder response, provide something more useful\nconst query=response.data.query||'your question';return\"I received your question about \\\"\".concat(query,\"\\\" and I'm here to help! \\n\\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\\n\\n\\u2022 Understanding health and nutrition concepts\\n\\u2022 Providing general wellness guidance  \\n\\u2022 Explaining health data and metrics\\n\\u2022 Offering evidence-based health insights\\n\\nWhat specific aspect of health would you like to explore further?\");}return briefResponse;}// Handle other response types\nif(response.data.response){return response.data.response;}if(response.data.analysis){return response.data.analysis;}if(response.data.training_status){let message=\"\\uD83D\\uDD04 \".concat(response.data.training_status);if(response.data.available_models&&response.data.available_models.length>0){message+=\"\\n\\n\\uD83D\\uDCCA Available models: \".concat(response.data.available_models.join(', '));}return message;}// Fallback - show the raw data in a readable format\nreturn\"I received a response from the \".concat(response.service_used,\" service. Here's what I found:\\n\\n\").concat(JSON.stringify(response.data,null,2));}}// Export a singleton instance\nexport const wihyAPI=new WihyAPIService();export default wihyAPI;","map":{"version":3,"names":["WIHY_API_ENDPOINT","logger","isUnifiedResponse","obj","WihyAPIService","constructor","baseURL","askAnything","request","apiRequest","unifiedRequest","query","request_type","context","user_context","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","Error","concat","status","data","json","apiResponse","error","name","message","includes","convertToLegacyFormat","unifiedResponse","originalQuery","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","success","timestamp","Date","toISOString","response_type","wihy_response","query_type","core_principle","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","analysis","recommendations","immediate_actions","map","rec","index","legacy_recommendations","sources","source","getHealthNews","categories","limit","length","join","searchNutrition","foodQuery","userContext","searchHealth","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","unifiedResp","formatted","training_status","available_models","forEach","model","processing_time","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","risk","risk_factor","replace","toUpperCase","associated_illnesses","prevalence_rate","preventability_score","goal","research","metric","wisdom","toLocaleString","extractRecommendations","recs","r","push","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_response$wihy_respon","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, WIHY_API_ENDPOINT } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Types for the WiHy Unified API (updated to match documentation)\r\nexport interface UnifiedRequest {\r\n  query: string;                    // REQUIRED: Your health/nutrition question or request\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train'; // OPTIONAL: defaults to \"auto\"\r\n  context?: Record<string, any>;    // OPTIONAL: Additional context object\r\n  user_id?: string;                 // OPTIONAL: User identifier for personalization\r\n  session_id?: string;              // OPTIONAL: Session identifier for conversation tracking\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n\r\n  constructor() {\r\n    this.baseURL = WIHY_API_ENDPOINT;\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      logger.apiRequest('Making WiHy Unified API request', request);\r\n      \r\n      // Convert legacy WihyRequest to UnifiedRequest format if needed\r\n      let unifiedRequest: UnifiedRequest;\r\n      if ('user_context' in request) {\r\n        // Legacy format - convert to unified format\r\n        unifiedRequest = {\r\n          query: request.query,\r\n          request_type: 'auto',\r\n          context: request.user_context || {},\r\n        };\r\n      } else {\r\n        // Already in unified format\r\n        unifiedRequest = request as UnifiedRequest;\r\n      }\r\n      \r\n      // Use fetch API to match the working example exactly with timeout\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await fetch(this.baseURL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(unifiedRequest),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Unified API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy API error:', error);\r\n      \r\n      if (error instanceof Error) {\r\n        // Check for timeout/abort errors\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');\r\n        }\r\n        \r\n        // Check for CORS errors\r\n        if (error.message.includes('CORS') || \r\n            error.message.includes('Access to fetch') ||\r\n            error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n          throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');\r\n        }\r\n        \r\n        // Check for network/connectivity issues\r\n        if (error.message.includes('fetch') || \r\n            error.message.includes('network') || \r\n            error.name === 'TypeError' ||\r\n            error.message.includes('Failed to fetch')) {\r\n          throw new Error('NETWORK_ERROR: Unable to connect to WiHy services');\r\n        }\r\n        \r\n        // Check for server errors\r\n        if (error.message.includes('HTTP error! status: 5')) {\r\n          throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');\r\n        }\r\n        \r\n        throw new Error(error.message || 'WiHy API request failed');\r\n      }\r\n      \r\n      throw new Error('Unknown error occurred while contacting WiHy API');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type,\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type,\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\r\n  formatWihyResponse(response: WihyResponse | UnifiedResponse): string {\r\n    // Handle UnifiedResponse format (new API)\r\n    if ('data' in response && 'service_used' in response) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      if (unifiedResp.data.response) {\r\n        formatted += unifiedResp.data.response;\r\n      } else if (unifiedResp.data.analysis) {\r\n        formatted += unifiedResp.data.analysis;\r\n      } else if (unifiedResp.data.training_status) {\r\n        formatted += `## Training Service\\n\\n`;\r\n        formatted += `${unifiedResp.data.training_status}\\n\\n`;\r\n        if (unifiedResp.data.available_models && unifiedResp.data.available_models.length > 0) {\r\n          formatted += `**Available Models:**\\n`;\r\n          unifiedResp.data.available_models.forEach((model: string) => {\r\n            formatted += `- ${model}\\n`;\r\n          });\r\n        }\r\n      } else {\r\n        formatted += `**Service:** ${unifiedResp.service_used}\\n\\n`;\r\n        formatted += `**Processing Time:** ${unifiedResp.processing_time} seconds\\n\\n`;\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.service_used} service (${unifiedResp.processing_time}s)*`;\r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      if (response.wihy_response.personalized_analysis?.action_items) {\r\n        response.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      if (response.wihy_response.research_foundation) {\r\n        response.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}