{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Backend API response types\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'cnn.com': 0.8,\n  'npr.org': 0.9,\n  'pbs.org': 0.9,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'foxnews.com': 0.7,\n  'reuters.com': 0.9,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8,\n  'latimes.com': 0.8\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'Nutrition & Diet',\n  MEDICAL: 'Medical Research',\n  PUBLIC_HEALTH: 'Public Health',\n  CLINICAL: 'Clinical Studies',\n  PREVENTION: 'Disease Prevention',\n  MENTAL_HEALTH: 'Mental Health',\n  GENERAL: 'General Health'\n};\n\n// Helper function to validate if a domain is trusted\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\n\n// UPDATED: Use backend API instead of direct RSS fetching\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    console.log('🔍 Fetching health news from backend API...', {\n      categories,\n      limit\n    });\n\n    // Use your backend API to get articles\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params: {\n        limit: limit || 50,\n        category: (categories === null || categories === void 0 ? void 0 : categories[0]) || undefined,\n        country: undefined\n      }\n    });\n    const data = response.data;\n    if (!data.success) {\n      throw new Error(data.message || 'Failed to fetch news');\n    }\n    console.log('✅ Backend API response:', data);\n\n    // Convert backend article format to frontend format\n    const articles = (data.articles || []).map(article => {\n      var _article$id, _article$feed, _article$feed2;\n      return {\n        id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || `article_${Date.now()}`,\n        title: article.title || 'No title',\n        summary: article.description || 'No summary available',\n        url: article.link || '#',\n        source: ((_article$feed = article.feed) === null || _article$feed === void 0 ? void 0 : _article$feed.title) || article.author || 'Unknown Source',\n        domain: extractDomain(article.link || ''),\n        category: mapBackendCategory((_article$feed2 = article.feed) === null || _article$feed2 === void 0 ? void 0 : _article$feed2.category) || NEWS_CATEGORIES.GENERAL,\n        publishedDate: article.pub_date || article.created_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description),\n        tags: extractTags(article.title, article.description)\n      };\n    });\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      if (!categorizedArticles[article.category]) {\n        categorizedArticles[article.category] = [];\n      }\n      categorizedArticles[article.category].push(article);\n    });\n    console.log('✅ News feed processed successfully:', articles.length, 'articles');\n    return {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      message: 'Health news fetched successfully from database'\n    };\n  } catch (error) {\n    var _error$response;\n    console.error('❌ Error fetching news feed from backend:', error);\n\n    // If it's a network error, try fallback\n    if (error.code === 'ECONNREFUSED' || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 500) {\n      console.log('📱 Backend unavailable, using fallback news...');\n      return await getFallbackNews();\n    }\n\n    // For other errors, still provide fallback but with error message\n    const fallback = await getFallbackNews();\n    return {\n      ...fallback,\n      message: `Backend error: ${error.message}. Showing sample news.`\n    };\n  }\n};\n\n// Helper function to map backend categories to frontend categories\nconst mapBackendCategory = backendCategory => {\n  if (!backendCategory) return NEWS_CATEGORIES.GENERAL;\n  const categoryMap = {\n    'nutrition': NEWS_CATEGORIES.NUTRITION,\n    'diet': NEWS_CATEGORIES.NUTRITION,\n    'medical': NEWS_CATEGORIES.MEDICAL,\n    'health': NEWS_CATEGORIES.PUBLIC_HEALTH,\n    'mental': NEWS_CATEGORIES.MENTAL_HEALTH,\n    'prevention': NEWS_CATEGORIES.PREVENTION,\n    'clinical': NEWS_CATEGORIES.CLINICAL\n  };\n  const lowerCategory = backendCategory.toLowerCase();\n  for (const [key, value] of Object.entries(categoryMap)) {\n    if (lowerCategory.includes(key)) {\n      return value;\n    }\n  }\n  return NEWS_CATEGORIES.GENERAL;\n};\n\n// Fallback news data if backend is unavailable\nconst getFallbackNews = async () => {\n  const fallbackArticles = [{\n    id: 'fallback_1',\n    title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\n    summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%.\",\n    url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\n    source: \"NIH\",\n    domain: \"nih.gov\",\n    category: NEWS_CATEGORIES.NUTRITION,\n    publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['nutrition', 'heart-health', 'mediterranean-diet']\n  }, {\n    id: 'fallback_2',\n    title: \"Exercise and Mental Health: The Connection You Need to Know\",\n    summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being.\",\n    url: \"https://www.cdc.gov/mental-health/exercise-connection\",\n    source: \"CDC\",\n    domain: \"cdc.gov\",\n    category: NEWS_CATEGORIES.MENTAL_HEALTH,\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.90,\n    tags: ['mental-health', 'exercise', 'wellness']\n  }, {\n    id: 'fallback_3',\n    title: \"The Importance of Sleep for Immune System Function\",\n    summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system.\",\n    url: \"https://www.nih.gov/news-events/sleep-immune-system\",\n    source: \"NIH\",\n    domain: \"nih.gov\",\n    category: NEWS_CATEGORIES.GENERAL,\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.85,\n    tags: ['sleep', 'immune-system', 'health']\n  }, {\n    id: 'fallback_4',\n    title: \"Breakthrough in Cancer Research: New Treatment Shows Promise\",\n    summary: \"Scientists have developed a new immunotherapy approach that shows remarkable results in clinical trials.\",\n    url: \"https://www.nih.gov/news-events/cancer-breakthrough-2024\",\n    source: \"NIH\",\n    domain: \"nih.gov\",\n    category: NEWS_CATEGORIES.MEDICAL,\n    publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.98,\n    tags: ['cancer', 'research', 'immunotherapy']\n  }, {\n    id: 'fallback_5',\n    title: \"Preventive Care: Early Detection Saves Lives\",\n    summary: \"Regular health screenings can detect potential health issues before they become serious problems.\",\n    url: \"https://www.cdc.gov/prevention/early-detection\",\n    source: \"CDC\",\n    domain: \"cdc.gov\",\n    category: NEWS_CATEGORIES.PREVENTION,\n    publishedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.80,\n    tags: ['prevention', 'screening', 'early-detection']\n  }];\n\n  // Categorize fallback articles\n  const categorizedArticles = {};\n  fallbackArticles.forEach(article => {\n    if (!categorizedArticles[article.category]) {\n      categorizedArticles[article.category] = [];\n    }\n    categorizedArticles[article.category].push(article);\n  });\n  return {\n    success: true,\n    articles: fallbackArticles,\n    categories: categorizedArticles,\n    lastUpdated: new Date().toISOString(),\n    count: fallbackArticles.length,\n    message: 'Using fallback news data (backend unavailable)'\n  };\n};\n\n// Helper function to extract domain from URL\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname.toLowerCase();\n  } catch {\n    return 'unknown';\n  }\n};\n\n// Helper function to calculate relevance score based on health content\nconst calculateRelevanceScore = (title = '', description = '') => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n\n  // Base score + bonus for health relevance\n  let score = 0.5;\n  score += matchingKeywords.length * 0.1;\n  return Math.min(score, 1.0);\n};\n\n// Helper function to extract tags from content\nconst extractTags = (title = '', description = '') => {\n  const content = `${title} ${description}`.toLowerCase();\n  const tags = [];\n  const tagKeywords = ['health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise', 'mental-health', 'wellness', 'prevention', 'treatment', 'research', 'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor'];\n  tagKeywords.forEach(keyword => {\n    if (content.includes(keyword.replace('-', ' '))) {\n      tags.push(keyword);\n    }\n  });\n  return tags.slice(0, 5); // Limit to 5 tags\n};\n\n// Get articles by specific category\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\n\n// Search articles from backend\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n\n    // For now, fetch all articles and filter client-side\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available to search'\n      };\n    }\n    const searchTerm = query.toLowerCase();\n\n    // Filter articles based on search query\n    const matchingArticles = feedResponse.articles.filter(article => article.title.toLowerCase().includes(searchTerm) || article.summary.toLowerCase().includes(searchTerm) || article.tags.some(tag => tag.includes(searchTerm))).slice(0, limit || 10);\n    return {\n      success: true,\n      articles: matchingArticles,\n      lastUpdated: new Date().toISOString(),\n      count: matchingArticles.length,\n      message: `Search results for \"${query}\"`\n    };\n  } catch (error) {\n    console.error('❌ Error searching articles:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\n\n// Refresh news feed (triggers new fetch from backend)\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing news feed...');\n    return await fetchNewsFeed();\n  } catch (error) {\n    console.error('❌ Error refreshing news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\n\n// Get news feed stats from backend\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed();\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility function to format articles for display\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary\n  };\n};\n\n// Helper function to format time ago\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\n\n// Get available categories\nexport const getAvailableCategories = () => {\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: NEWS_CATEGORIES.NUTRITION,\n    label: 'Nutrition & Diet'\n  }, {\n    id: NEWS_CATEGORIES.MEDICAL,\n    label: 'Medical Research'\n  }, {\n    id: NEWS_CATEGORIES.PUBLIC_HEALTH,\n    label: 'Public Health'\n  }, {\n    id: NEWS_CATEGORIES.CLINICAL,\n    label: 'Clinical Studies'\n  }, {\n    id: NEWS_CATEGORIES.PREVENTION,\n    label: 'Disease Prevention'\n  }, {\n    id: NEWS_CATEGORIES.MENTAL_HEALTH,\n    label: 'Mental Health'\n  }, {\n    id: NEWS_CATEGORIES.GENERAL,\n    label: 'General Health'\n  }];\n};\n\n// Legacy compatibility - keep the NewsService class for any existing code\n\nexport class NewsService {\n  async fetchNews() {\n    var _response$articles;\n    const response = await fetchNewsFeed();\n\n    // Convert to legacy format\n    return ((_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.map(article => ({\n      title: article.title,\n      link: article.url,\n      description: article.summary,\n      pubDate: article.publishedDate,\n      source: article.source,\n      category: article.category\n    }))) || [];\n  }\n}\nexport const newsService = new NewsService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","isTrustedDomain","url","domain","URL","hostname","toLowerCase","Object","keys","some","trustedDomain","includes","fetchNewsFeed","categories","limit","console","log","response","get","params","category","undefined","country","data","success","Error","message","articles","map","article","_article$id","_article$feed","_article$feed2","id","toString","Date","now","title","summary","description","link","source","feed","author","extractDomain","mapBackendCategory","publishedDate","pub_date","created_at","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","categorizedArticles","forEach","push","length","lastUpdated","count","error","_error$response","code","status","getFallbackNews","fallback","backendCategory","categoryMap","lowerCategory","key","value","entries","fallbackArticles","content","healthKeywords","matchingKeywords","filter","keyword","score","Math","min","tagKeywords","replace","slice","getArticlesByCategory","searchNewsArticles","query","trim","feedResponse","searchTerm","matchingArticles","tag","refreshNewsFeed","getNewsFeedStats","categoryCounts","sourcesCounts","stats","totalArticles","formatArticleForDisplay","formattedDate","formatTimeAgo","isTrusted","relevancePercentage","round","shortSummary","substring","dateString","diffInHours","floor","getTime","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","label","NewsService","fetchNews","_response$articles","pubDate","newsService"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n}\r\n\r\n// Backend API response types\r\ninterface BackendArticle {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  pub_date: string;\r\n  created_at: string;\r\n  author: string;\r\n  guid: string;\r\n  feed: {\r\n    title: string;\r\n    url: string;\r\n    country_code: string;\r\n    category: string;\r\n  };\r\n}\r\n\r\ninterface BackendArticlesResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles: BackendArticle[];\r\n  count: number;\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'cnn.com': 0.8,\r\n  'npr.org': 0.9,\r\n  'pbs.org': 0.9,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'foxnews.com': 0.7,\r\n  'reuters.com': 0.9,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8,\r\n  'latimes.com': 0.8\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'Nutrition & Diet',\r\n  MEDICAL: 'Medical Research',\r\n  PUBLIC_HEALTH: 'Public Health',\r\n  CLINICAL: 'Clinical Studies',\r\n  PREVENTION: 'Disease Prevention',\r\n  MENTAL_HEALTH: 'Mental Health',\r\n  GENERAL: 'General Health'\r\n};\r\n\r\n// Helper function to validate if a domain is trusted\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// UPDATED: Use backend API instead of direct RSS fetching\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching health news from backend API...', { categories, limit });\r\n    \r\n    // Use your backend API to get articles\r\n    const response = await axios.get<BackendArticlesResponse>(`${API_URL}/news/articles`, {\r\n      params: {\r\n        limit: limit || 50,\r\n        category: categories?.[0] || undefined,\r\n        country: undefined\r\n      }\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    if (!data.success) {\r\n      throw new Error(data.message || 'Failed to fetch news');\r\n    }\r\n    \r\n    console.log('✅ Backend API response:', data);\r\n    \r\n    // Convert backend article format to frontend format\r\n    const articles: NewsArticle[] = (data.articles || []).map((article: BackendArticle) => ({\r\n      id: article.id?.toString() || `article_${Date.now()}`,\r\n      title: article.title || 'No title',\r\n      summary: article.description || 'No summary available',\r\n      url: article.link || '#',\r\n      source: article.feed?.title || article.author || 'Unknown Source',\r\n      domain: extractDomain(article.link || ''),\r\n      category: mapBackendCategory(article.feed?.category) || NEWS_CATEGORIES.GENERAL,\r\n      publishedDate: article.pub_date || article.created_at || new Date().toISOString(),\r\n      relevanceScore: calculateRelevanceScore(article.title, article.description),\r\n      tags: extractTags(article.title, article.description)\r\n    }));\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      if (!categorizedArticles[article.category]) {\r\n        categorizedArticles[article.category] = [];\r\n      }\r\n      categorizedArticles[article.category].push(article);\r\n    });\r\n    \r\n    console.log('✅ News feed processed successfully:', articles.length, 'articles');\r\n    \r\n    return {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      message: 'Health news fetched successfully from database'\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching news feed from backend:', error);\r\n    \r\n    // If it's a network error, try fallback\r\n    if (error.code === 'ECONNREFUSED' || error.response?.status === 500) {\r\n      console.log('📱 Backend unavailable, using fallback news...');\r\n      return await getFallbackNews();\r\n    }\r\n    \r\n    // For other errors, still provide fallback but with error message\r\n    const fallback = await getFallbackNews();\r\n    return {\r\n      ...fallback,\r\n      message: `Backend error: ${error.message}. Showing sample news.`\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to map backend categories to frontend categories\r\nconst mapBackendCategory = (backendCategory: string | undefined): string => {\r\n  if (!backendCategory) return NEWS_CATEGORIES.GENERAL;\r\n  \r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': NEWS_CATEGORIES.NUTRITION,\r\n    'diet': NEWS_CATEGORIES.NUTRITION,\r\n    'medical': NEWS_CATEGORIES.MEDICAL,\r\n    'health': NEWS_CATEGORIES.PUBLIC_HEALTH,\r\n    'mental': NEWS_CATEGORIES.MENTAL_HEALTH,\r\n    'prevention': NEWS_CATEGORIES.PREVENTION,\r\n    'clinical': NEWS_CATEGORIES.CLINICAL\r\n  };\r\n  \r\n  const lowerCategory = backendCategory.toLowerCase();\r\n  for (const [key, value] of Object.entries(categoryMap)) {\r\n    if (lowerCategory.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return NEWS_CATEGORIES.GENERAL;\r\n};\r\n\r\n// Fallback news data if backend is unavailable\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  const fallbackArticles: NewsArticle[] = [\r\n    {\r\n      id: 'fallback_1',\r\n      title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\r\n      summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%.\",\r\n      url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\r\n      source: \"NIH\",\r\n      domain: \"nih.gov\",\r\n      category: NEWS_CATEGORIES.NUTRITION,\r\n      publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['nutrition', 'heart-health', 'mediterranean-diet']\r\n    },\r\n    {\r\n      id: 'fallback_2',\r\n      title: \"Exercise and Mental Health: The Connection You Need to Know\",\r\n      summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being.\",\r\n      url: \"https://www.cdc.gov/mental-health/exercise-connection\",\r\n      source: \"CDC\",\r\n      domain: \"cdc.gov\",\r\n      category: NEWS_CATEGORIES.MENTAL_HEALTH,\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.90,\r\n      tags: ['mental-health', 'exercise', 'wellness']\r\n    },\r\n    {\r\n      id: 'fallback_3',\r\n      title: \"The Importance of Sleep for Immune System Function\",\r\n      summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system.\",\r\n      url: \"https://www.nih.gov/news-events/sleep-immune-system\",\r\n      source: \"NIH\",\r\n      domain: \"nih.gov\",\r\n      category: NEWS_CATEGORIES.GENERAL,\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.85,\r\n      tags: ['sleep', 'immune-system', 'health']\r\n    },\r\n    {\r\n      id: 'fallback_4',\r\n      title: \"Breakthrough in Cancer Research: New Treatment Shows Promise\",\r\n      summary: \"Scientists have developed a new immunotherapy approach that shows remarkable results in clinical trials.\",\r\n      url: \"https://www.nih.gov/news-events/cancer-breakthrough-2024\",\r\n      source: \"NIH\",\r\n      domain: \"nih.gov\",\r\n      category: NEWS_CATEGORIES.MEDICAL,\r\n      publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.98,\r\n      tags: ['cancer', 'research', 'immunotherapy']\r\n    },\r\n    {\r\n      id: 'fallback_5',\r\n      title: \"Preventive Care: Early Detection Saves Lives\",\r\n      summary: \"Regular health screenings can detect potential health issues before they become serious problems.\",\r\n      url: \"https://www.cdc.gov/prevention/early-detection\",\r\n      source: \"CDC\",\r\n      domain: \"cdc.gov\",\r\n      category: NEWS_CATEGORIES.PREVENTION,\r\n      publishedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.80,\r\n      tags: ['prevention', 'screening', 'early-detection']\r\n    }\r\n  ];\r\n\r\n  // Categorize fallback articles\r\n  const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n  fallbackArticles.forEach(article => {\r\n    if (!categorizedArticles[article.category]) {\r\n      categorizedArticles[article.category] = [];\r\n    }\r\n    categorizedArticles[article.category].push(article);\r\n  });\r\n\r\n  return {\r\n    success: true,\r\n    articles: fallbackArticles,\r\n    categories: categorizedArticles,\r\n    lastUpdated: new Date().toISOString(),\r\n    count: fallbackArticles.length,\r\n    message: 'Using fallback news data (backend unavailable)'\r\n  };\r\n};\r\n\r\n// Helper function to extract domain from URL\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname.toLowerCase();\r\n  } catch {\r\n    return 'unknown';\r\n  }\r\n};\r\n\r\n// Helper function to calculate relevance score based on health content\r\nconst calculateRelevanceScore = (title: string = '', description: string = ''): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  // Base score + bonus for health relevance\r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.1);\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\n// Helper function to extract tags from content\r\nconst extractTags = (title: string = '', description: string = ''): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const tags: string[] = [];\r\n  \r\n  const tagKeywords = [\r\n    'health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise',\r\n    'mental-health', 'wellness', 'prevention', 'treatment', 'research',\r\n    'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor'\r\n  ];\r\n  \r\n  tagKeywords.forEach(keyword => {\r\n    if (content.includes(keyword.replace('-', ' '))) {\r\n      tags.push(keyword);\r\n    }\r\n  });\r\n  \r\n  return tags.slice(0, 5); // Limit to 5 tags\r\n};\r\n\r\n// Get articles by specific category\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\n// Search articles from backend\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    // For now, fetch all articles and filter client-side\r\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available to search'\r\n      };\r\n    }\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    \r\n    // Filter articles based on search query\r\n    const matchingArticles = feedResponse.articles\r\n      .filter(article => \r\n        article.title.toLowerCase().includes(searchTerm) ||\r\n        article.summary.toLowerCase().includes(searchTerm) ||\r\n        article.tags.some(tag => tag.includes(searchTerm))\r\n      )\r\n      .slice(0, limit || 10);\r\n    \r\n    return {\r\n      success: true,\r\n      articles: matchingArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: matchingArticles.length,\r\n      message: `Search results for \"${query}\"`\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error searching articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\n// Refresh news feed (triggers new fetch from backend)\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing news feed...');\r\n    return await fetchNewsFeed();\r\n  } catch (error: any) {\r\n    console.error('❌ Error refreshing news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Get news feed stats from backend\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed();\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility function to format articles for display\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary\r\n  };\r\n};\r\n\r\n// Helper function to format time ago\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\n// Get available categories\r\nexport const getAvailableCategories = (): Array<{id: string, label: string}> => {\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: NEWS_CATEGORIES.NUTRITION, label: 'Nutrition & Diet' },\r\n    { id: NEWS_CATEGORIES.MEDICAL, label: 'Medical Research' },\r\n    { id: NEWS_CATEGORIES.PUBLIC_HEALTH, label: 'Public Health' },\r\n    { id: NEWS_CATEGORIES.CLINICAL, label: 'Clinical Studies' },\r\n    { id: NEWS_CATEGORIES.PREVENTION, label: 'Disease Prevention' },\r\n    { id: NEWS_CATEGORIES.MENTAL_HEALTH, label: 'Mental Health' },\r\n    { id: NEWS_CATEGORIES.GENERAL, label: 'General Health' }\r\n  ];\r\n};\r\n\r\n// Legacy compatibility - keep the NewsService class for any existing code\r\nexport interface NewsItem {\r\n  title: string;\r\n  link: string;\r\n  description: string;\r\n  pubDate: string;\r\n  source: string;\r\n  category: string;\r\n}\r\n\r\nexport class NewsService {\r\n  async fetchNews(): Promise<NewsItem[]> {\r\n    const response = await fetchNewsFeed();\r\n    \r\n    // Convert to legacy format\r\n    return response.articles?.map(article => ({\r\n      title: article.title,\r\n      link: article.url,\r\n      description: article.summary,\r\n      pubDate: article.publishedDate,\r\n      source: article.source,\r\n      category: article.category\r\n    })) || [];\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAwB5E;;AAyBA,OAAO,MAAMC,eAAuC,GAAG;EACrD,SAAS,EAAE,CAAC;EACZ,kBAAkB,EAAE,CAAC;EACrB,SAAS,EAAE,CAAC;EACZ,SAAS,EAAE,CAAC;EACZ,SAAS,EAAE,CAAC;EACZ,UAAU,EAAE,CAAC;EACb,iBAAiB,EAAE,CAAC;EACpB,UAAU,EAAE,CAAC;EACb,eAAe,EAAE,CAAC;EAClB,SAAS,EAAE,CAAC;EACZ,YAAY,EAAE,CAAC;EACf,aAAa,EAAE,CAAC;EAChB,gBAAgB,EAAE,CAAC;EACnB,aAAa,EAAE,CAAC;EAChB,cAAc,EAAE,CAAC;EACjB,qBAAqB,EAAE,CAAC;EACxB,cAAc,EAAE,CAAC;EACjB,qBAAqB,EAAE,CAAC;EACxB,yBAAyB,EAAE,CAAC;EAC5B,iBAAiB,EAAE,CAAC;EACpB,SAAS,EAAE,GAAG;EACd,SAAS,EAAE,GAAG;EACd,SAAS,EAAE,GAAG;EACd,aAAa,EAAE,GAAG;EAClB,aAAa,EAAE,GAAG;EAClB,aAAa,EAAE,GAAG;EAClB,aAAa,EAAE,GAAG;EAClB,oBAAoB,EAAE,GAAG;EACzB,aAAa,EAAE,GAAG;EAClB,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG;EAC7BC,SAAS,EAAE,kBAAkB;EAC7BC,OAAO,EAAE,kBAAkB;EAC3BC,aAAa,EAAE,eAAe;EAC9BC,QAAQ,EAAE,kBAAkB;EAC5BC,UAAU,EAAE,oBAAoB;EAChCC,aAAa,EAAE,eAAe;EAC9BC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,GAAW,IAAc;EACvD,IAAI;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC;IAClD,OAAOC,MAAM,CAACC,IAAI,CAAChB,eAAe,CAAC,CAACiB,IAAI,CAACC,aAAa,IACpDP,MAAM,CAACQ,QAAQ,CAACD,aAAa,CAACJ,WAAW,CAAC,CAAC,CAC7C,CAAC;EACH,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAOC,UAAqB,EAAEC,KAAc,KAAgC;EACvG,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE;MAAEH,UAAU;MAAEC;IAAM,CAAC,CAAC;;IAEjF;IACA,MAAMG,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,GAAG,CAA0B,GAAG9B,OAAO,gBAAgB,EAAE;MACpF+B,MAAM,EAAE;QACNL,KAAK,EAAEA,KAAK,IAAI,EAAE;QAClBM,QAAQ,EAAE,CAAAP,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,CAAC,CAAC,KAAIQ,SAAS;QACtCC,OAAO,EAAED;MACX;IACF,CAAC,CAAC;IAEF,MAAME,IAAI,GAAGN,QAAQ,CAACM,IAAI;IAE1B,IAAI,CAACA,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,sBAAsB,CAAC;IACzD;IAEAX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,IAAI,CAAC;;IAE5C;IACA,MAAMI,QAAuB,GAAG,CAACJ,IAAI,CAACI,QAAQ,IAAI,EAAE,EAAEC,GAAG,CAAEC,OAAuB;MAAA,IAAAC,WAAA,EAAAC,aAAA,EAAAC,cAAA;MAAA,OAAM;QACtFC,EAAE,EAAE,EAAAH,WAAA,GAAAD,OAAO,CAACI,EAAE,cAAAH,WAAA,uBAAVA,WAAA,CAAYI,QAAQ,CAAC,CAAC,KAAI,WAAWC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACrDC,KAAK,EAAER,OAAO,CAACQ,KAAK,IAAI,UAAU;QAClCC,OAAO,EAAET,OAAO,CAACU,WAAW,IAAI,sBAAsB;QACtDrC,GAAG,EAAE2B,OAAO,CAACW,IAAI,IAAI,GAAG;QACxBC,MAAM,EAAE,EAAAV,aAAA,GAAAF,OAAO,CAACa,IAAI,cAAAX,aAAA,uBAAZA,aAAA,CAAcM,KAAK,KAAIR,OAAO,CAACc,MAAM,IAAI,gBAAgB;QACjExC,MAAM,EAAEyC,aAAa,CAACf,OAAO,CAACW,IAAI,IAAI,EAAE,CAAC;QACzCpB,QAAQ,EAAEyB,kBAAkB,EAAAb,cAAA,GAACH,OAAO,CAACa,IAAI,cAAAV,cAAA,uBAAZA,cAAA,CAAcZ,QAAQ,CAAC,IAAI3B,eAAe,CAACO,OAAO;QAC/E8C,aAAa,EAAEjB,OAAO,CAACkB,QAAQ,IAAIlB,OAAO,CAACmB,UAAU,IAAI,IAAIb,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;QACjFC,cAAc,EAAEC,uBAAuB,CAACtB,OAAO,CAACQ,KAAK,EAAER,OAAO,CAACU,WAAW,CAAC;QAC3Ea,IAAI,EAAEC,WAAW,CAACxB,OAAO,CAACQ,KAAK,EAAER,OAAO,CAACU,WAAW;MACtD,CAAC;IAAA,CAAC,CAAC;;IAEH;IACA,MAAMe,mBAAkD,GAAG,CAAC,CAAC;IAC7D3B,QAAQ,CAAC4B,OAAO,CAAC1B,OAAO,IAAI;MAC1B,IAAI,CAACyB,mBAAmB,CAACzB,OAAO,CAACT,QAAQ,CAAC,EAAE;QAC1CkC,mBAAmB,CAACzB,OAAO,CAACT,QAAQ,CAAC,GAAG,EAAE;MAC5C;MACAkC,mBAAmB,CAACzB,OAAO,CAACT,QAAQ,CAAC,CAACoC,IAAI,CAAC3B,OAAO,CAAC;IACrD,CAAC,CAAC;IAEFd,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEW,QAAQ,CAAC8B,MAAM,EAAE,UAAU,CAAC;IAE/E,OAAO;MACLjC,OAAO,EAAE,IAAI;MACbG,QAAQ,EAAEA,QAAQ;MAClBd,UAAU,EAAEyC,mBAAmB;MAC/BI,WAAW,EAAE,IAAIvB,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;MACrCU,KAAK,EAAEhC,QAAQ,CAAC8B,MAAM;MACtB/B,OAAO,EAAE;IACX,CAAC;EAEH,CAAC,CAAC,OAAOkC,KAAU,EAAE;IAAA,IAAAC,eAAA;IACnB9C,OAAO,CAAC6C,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;;IAEhE;IACA,IAAIA,KAAK,CAACE,IAAI,KAAK,cAAc,IAAI,EAAAD,eAAA,GAAAD,KAAK,CAAC3C,QAAQ,cAAA4C,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;MACnEhD,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;MAC7D,OAAO,MAAMgD,eAAe,CAAC,CAAC;IAChC;;IAEA;IACA,MAAMC,QAAQ,GAAG,MAAMD,eAAe,CAAC,CAAC;IACxC,OAAO;MACL,GAAGC,QAAQ;MACXvC,OAAO,EAAE,kBAAkBkC,KAAK,CAAClC,OAAO;IAC1C,CAAC;EACH;AACF,CAAC;;AAED;AACA,MAAMmB,kBAAkB,GAAIqB,eAAmC,IAAa;EAC1E,IAAI,CAACA,eAAe,EAAE,OAAOzE,eAAe,CAACO,OAAO;EAEpD,MAAMmE,WAAmC,GAAG;IAC1C,WAAW,EAAE1E,eAAe,CAACC,SAAS;IACtC,MAAM,EAAED,eAAe,CAACC,SAAS;IACjC,SAAS,EAAED,eAAe,CAACE,OAAO;IAClC,QAAQ,EAAEF,eAAe,CAACG,aAAa;IACvC,QAAQ,EAAEH,eAAe,CAACM,aAAa;IACvC,YAAY,EAAEN,eAAe,CAACK,UAAU;IACxC,UAAU,EAAEL,eAAe,CAACI;EAC9B,CAAC;EAED,MAAMuE,aAAa,GAAGF,eAAe,CAAC5D,WAAW,CAAC,CAAC;EACnD,KAAK,MAAM,CAAC+D,GAAG,EAAEC,KAAK,CAAC,IAAI/D,MAAM,CAACgE,OAAO,CAACJ,WAAW,CAAC,EAAE;IACtD,IAAIC,aAAa,CAACzD,QAAQ,CAAC0D,GAAG,CAAC,EAAE;MAC/B,OAAOC,KAAK;IACd;EACF;EAEA,OAAO7E,eAAe,CAACO,OAAO;AAChC,CAAC;;AAED;AACA,MAAMgE,eAAe,GAAG,MAAAA,CAAA,KAAuC;EAC7D,MAAMQ,gBAA+B,GAAG,CACtC;IACEvC,EAAE,EAAE,YAAY;IAChBI,KAAK,EAAE,mEAAmE;IAC1EC,OAAO,EAAE,4GAA4G;IACrHpC,GAAG,EAAE,+EAA+E;IACpFuC,MAAM,EAAE,KAAK;IACbtC,MAAM,EAAE,SAAS;IACjBiB,QAAQ,EAAE3B,eAAe,CAACC,SAAS;IACnCoD,aAAa,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACa,WAAW,CAAC,CAAC;IACvEC,cAAc,EAAE,IAAI;IACpBE,IAAI,EAAE,CAAC,WAAW,EAAE,cAAc,EAAE,oBAAoB;EAC1D,CAAC,EACD;IACEnB,EAAE,EAAE,YAAY;IAChBI,KAAK,EAAE,6DAA6D;IACpEC,OAAO,EAAE,wGAAwG;IACjHpC,GAAG,EAAE,uDAAuD;IAC5DuC,MAAM,EAAE,KAAK;IACbtC,MAAM,EAAE,SAAS;IACjBiB,QAAQ,EAAE3B,eAAe,CAACM,aAAa;IACvC+C,aAAa,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACa,WAAW,CAAC,CAAC;IAC3EC,cAAc,EAAE,IAAI;IACpBE,IAAI,EAAE,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU;EAChD,CAAC,EACD;IACEnB,EAAE,EAAE,YAAY;IAChBI,KAAK,EAAE,oDAAoD;IAC3DC,OAAO,EAAE,2FAA2F;IACpGpC,GAAG,EAAE,qDAAqD;IAC1DuC,MAAM,EAAE,KAAK;IACbtC,MAAM,EAAE,SAAS;IACjBiB,QAAQ,EAAE3B,eAAe,CAACO,OAAO;IACjC8C,aAAa,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACa,WAAW,CAAC,CAAC;IAC3EC,cAAc,EAAE,IAAI;IACpBE,IAAI,EAAE,CAAC,OAAO,EAAE,eAAe,EAAE,QAAQ;EAC3C,CAAC,EACD;IACEnB,EAAE,EAAE,YAAY;IAChBI,KAAK,EAAE,8DAA8D;IACrEC,OAAO,EAAE,0GAA0G;IACnHpC,GAAG,EAAE,0DAA0D;IAC/DuC,MAAM,EAAE,KAAK;IACbtC,MAAM,EAAE,SAAS;IACjBiB,QAAQ,EAAE3B,eAAe,CAACE,OAAO;IACjCmD,aAAa,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACa,WAAW,CAAC,CAAC;IAC3EC,cAAc,EAAE,IAAI;IACpBE,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,eAAe;EAC9C,CAAC,EACD;IACEnB,EAAE,EAAE,YAAY;IAChBI,KAAK,EAAE,8CAA8C;IACrDC,OAAO,EAAE,mGAAmG;IAC5GpC,GAAG,EAAE,gDAAgD;IACrDuC,MAAM,EAAE,KAAK;IACbtC,MAAM,EAAE,SAAS;IACjBiB,QAAQ,EAAE3B,eAAe,CAACK,UAAU;IACpCgD,aAAa,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACa,WAAW,CAAC,CAAC;IAC3EC,cAAc,EAAE,IAAI;IACpBE,IAAI,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,iBAAiB;EACrD,CAAC,CACF;;EAED;EACA,MAAME,mBAAkD,GAAG,CAAC,CAAC;EAC7DkB,gBAAgB,CAACjB,OAAO,CAAC1B,OAAO,IAAI;IAClC,IAAI,CAACyB,mBAAmB,CAACzB,OAAO,CAACT,QAAQ,CAAC,EAAE;MAC1CkC,mBAAmB,CAACzB,OAAO,CAACT,QAAQ,CAAC,GAAG,EAAE;IAC5C;IACAkC,mBAAmB,CAACzB,OAAO,CAACT,QAAQ,CAAC,CAACoC,IAAI,CAAC3B,OAAO,CAAC;EACrD,CAAC,CAAC;EAEF,OAAO;IACLL,OAAO,EAAE,IAAI;IACbG,QAAQ,EAAE6C,gBAAgB;IAC1B3D,UAAU,EAAEyC,mBAAmB;IAC/BI,WAAW,EAAE,IAAIvB,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;IACrCU,KAAK,EAAEa,gBAAgB,CAACf,MAAM;IAC9B/B,OAAO,EAAE;EACX,CAAC;AACH,CAAC;;AAED;AACA,MAAMkB,aAAa,GAAI1C,GAAW,IAAa;EAC7C,IAAI;IACF,OAAO,IAAIE,GAAG,CAACF,GAAG,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC;EAC5C,CAAC,CAAC,MAAM;IACN,OAAO,SAAS;EAClB;AACF,CAAC;;AAED;AACA,MAAM6C,uBAAuB,GAAGA,CAACd,KAAa,GAAG,EAAE,EAAEE,WAAmB,GAAG,EAAE,KAAa;EACxF,MAAMkC,OAAO,GAAG,GAAGpC,KAAK,IAAIE,WAAW,EAAE,CAACjC,WAAW,CAAC,CAAC;EAEvD,MAAMoE,cAAc,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,eAAe,CAAC;EACrH,MAAMC,gBAAgB,GAAGD,cAAc,CAACE,MAAM,CAACC,OAAO,IAAIJ,OAAO,CAAC9D,QAAQ,CAACkE,OAAO,CAAC,CAAC;;EAEpF;EACA,IAAIC,KAAK,GAAG,GAAG;EACfA,KAAK,IAAKH,gBAAgB,CAAClB,MAAM,GAAG,GAAI;EAExC,OAAOsB,IAAI,CAACC,GAAG,CAACF,KAAK,EAAE,GAAG,CAAC;AAC7B,CAAC;;AAED;AACA,MAAMzB,WAAW,GAAGA,CAAChB,KAAa,GAAG,EAAE,EAAEE,WAAmB,GAAG,EAAE,KAAe;EAC9E,MAAMkC,OAAO,GAAG,GAAGpC,KAAK,IAAIE,WAAW,EAAE,CAACjC,WAAW,CAAC,CAAC;EACvD,MAAM8C,IAAc,GAAG,EAAE;EAEzB,MAAM6B,WAAW,GAAG,CAClB,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAC/D,eAAe,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,EAClE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,CACjE;EAEDA,WAAW,CAAC1B,OAAO,CAACsB,OAAO,IAAI;IAC7B,IAAIJ,OAAO,CAAC9D,QAAQ,CAACkE,OAAO,CAACK,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE;MAC/C9B,IAAI,CAACI,IAAI,CAACqB,OAAO,CAAC;IACpB;EACF,CAAC,CAAC;EAEF,OAAOzB,IAAI,CAAC+B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOhE,QAAgB,EAAEN,KAAc,KAAgC;EAC1G,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEI,QAAQ,CAAC;IAC3D,OAAO,MAAMR,aAAa,CAAC,CAACQ,QAAQ,CAAC,EAAEN,KAAK,CAAC;EAC/C,CAAC,CAAC,OAAO8C,KAAU,EAAE;IACnB7C,OAAO,CAAC6C,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO;MACLpC,OAAO,EAAE,KAAK;MACdE,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAM2D,kBAAkB,GAAG,MAAAA,CAAOC,KAAa,EAAElE,QAAiB,EAAEN,KAAc,KAAgC;EACvH,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;MAAEsE,KAAK;MAAElE,QAAQ;MAAEN;IAAM,CAAC,CAAC;IAEjE,IAAI,CAACwE,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;MACjB,OAAO;QACL/D,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,MAAM8D,YAAY,GAAG,MAAM5E,aAAa,CAACQ,QAAQ,GAAG,CAACA,QAAQ,CAAC,GAAGC,SAAS,EAAE,GAAG,CAAC;IAEhF,IAAI,CAACmE,YAAY,CAAChE,OAAO,IAAI,CAACgE,YAAY,CAAC7D,QAAQ,EAAE;MACnD,OAAO;QACLH,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE;MACX,CAAC;IACH;IAEA,MAAM+D,UAAU,GAAGH,KAAK,CAAChF,WAAW,CAAC,CAAC;;IAEtC;IACA,MAAMoF,gBAAgB,GAAGF,YAAY,CAAC7D,QAAQ,CAC3CiD,MAAM,CAAC/C,OAAO,IACbA,OAAO,CAACQ,KAAK,CAAC/B,WAAW,CAAC,CAAC,CAACK,QAAQ,CAAC8E,UAAU,CAAC,IAChD5D,OAAO,CAACS,OAAO,CAAChC,WAAW,CAAC,CAAC,CAACK,QAAQ,CAAC8E,UAAU,CAAC,IAClD5D,OAAO,CAACuB,IAAI,CAAC3C,IAAI,CAACkF,GAAG,IAAIA,GAAG,CAAChF,QAAQ,CAAC8E,UAAU,CAAC,CACnD,CAAC,CACAN,KAAK,CAAC,CAAC,EAAErE,KAAK,IAAI,EAAE,CAAC;IAExB,OAAO;MACLU,OAAO,EAAE,IAAI;MACbG,QAAQ,EAAE+D,gBAAgB;MAC1BhC,WAAW,EAAE,IAAIvB,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;MACrCU,KAAK,EAAE+B,gBAAgB,CAACjC,MAAM;MAC9B/B,OAAO,EAAE,uBAAuB4D,KAAK;IACvC,CAAC;EAEH,CAAC,CAAC,OAAO1B,KAAU,EAAE;IACnB7C,OAAO,CAAC6C,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MACLpC,OAAO,EAAE,KAAK;MACdE,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMkE,eAAe,GAAG,MAAAA,CAAA,KAAuC;EACpE,IAAI;IACF7E,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC,OAAO,MAAMJ,aAAa,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOgD,KAAU,EAAE;IACnB7C,OAAO,CAAC6C,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MACLpC,OAAO,EAAE,KAAK;MACdE,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMmE,gBAAgB,GAAG,MAAAA,CAAA,KAS1B;EACJ,IAAI;IACF,MAAML,YAAY,GAAG,MAAM5E,aAAa,CAAC,CAAC;IAE1C,IAAI,CAAC4E,YAAY,CAAChE,OAAO,IAAI,CAACgE,YAAY,CAAC7D,QAAQ,EAAE;MACnD,OAAO;QACLH,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE;MACX,CAAC;IACH;IAEA,MAAMoE,cAAsC,GAAG,CAAC,CAAC;IACjD,MAAMC,aAAqC,GAAG,CAAC,CAAC;IAEhDP,YAAY,CAAC7D,QAAQ,CAAC4B,OAAO,CAAC1B,OAAO,IAAI;MACvCiE,cAAc,CAACjE,OAAO,CAACT,QAAQ,CAAC,GAAG,CAAC0E,cAAc,CAACjE,OAAO,CAACT,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;MAC9E2E,aAAa,CAAClE,OAAO,CAACY,MAAM,CAAC,GAAG,CAACsD,aAAa,CAAClE,OAAO,CAACY,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IAC1E,CAAC,CAAC;IAEF,OAAO;MACLjB,OAAO,EAAE,IAAI;MACbwE,KAAK,EAAE;QACLC,aAAa,EAAET,YAAY,CAAC7D,QAAQ,CAAC8B,MAAM;QAC3CqC,cAAc;QACdpC,WAAW,EAAE8B,YAAY,CAAC9B,WAAW,IAAI,IAAIvB,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;QACjE8C;MACF;IACF,CAAC;EACH,CAAC,CAAC,OAAOnC,KAAU,EAAE;IACnB7C,OAAO,CAAC6C,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO;MACLpC,OAAO,EAAE,KAAK;MACdE,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMwE,uBAAuB,GAAIrE,OAAoB,IAAK;EAC/D,OAAO;IACL,GAAGA,OAAO;IACVsE,aAAa,EAAEC,aAAa,CAACvE,OAAO,CAACiB,aAAa,CAAC;IACnDuD,SAAS,EAAEpG,eAAe,CAAC4B,OAAO,CAAC3B,GAAG,CAAC;IACvCoG,mBAAmB,EAAEvB,IAAI,CAACwB,KAAK,CAAC1E,OAAO,CAACqB,cAAc,GAAG,GAAG,CAAC;IAC7DsD,YAAY,EAAE3E,OAAO,CAACS,OAAO,CAACmB,MAAM,GAAG,GAAG,GACtC5B,OAAO,CAACS,OAAO,CAACmE,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GACzC5E,OAAO,CAACS;EACd,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAM8D,aAAa,GAAIM,UAAkB,IAAa;EAC3D,IAAI;IACF,MAAMtE,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAMW,aAAa,GAAG,IAAIX,IAAI,CAACuE,UAAU,CAAC;IAC1C,MAAMC,WAAW,GAAG5B,IAAI,CAAC6B,KAAK,CAAC,CAACxE,GAAG,CAACyE,OAAO,CAAC,CAAC,GAAG/D,aAAa,CAAC+D,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAE5F,IAAIF,WAAW,GAAG,CAAC,EAAE,OAAO,UAAU;IACtC,IAAIA,WAAW,GAAG,EAAE,EAAE,OAAO,GAAGA,WAAW,OAAO;IAElD,MAAMG,UAAU,GAAG/B,IAAI,CAAC6B,KAAK,CAACD,WAAW,GAAG,EAAE,CAAC;IAC/C,IAAIG,UAAU,GAAG,CAAC,EAAE,OAAO,GAAGA,UAAU,OAAO;IAE/C,MAAMC,WAAW,GAAGhC,IAAI,CAAC6B,KAAK,CAACE,UAAU,GAAG,CAAC,CAAC;IAC9C,IAAIC,WAAW,GAAG,CAAC,EAAE,OAAO,GAAGA,WAAW,OAAO;IAEjD,MAAMC,YAAY,GAAGjC,IAAI,CAAC6B,KAAK,CAACE,UAAU,GAAG,EAAE,CAAC;IAChD,OAAO,GAAGE,YAAY,QAAQ;EAChC,CAAC,CAAC,MAAM;IACN,OAAO,SAAS;EAClB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,KAA0C;EAC9E,OAAO,CACL;IAAEhF,EAAE,EAAE,KAAK;IAAEiF,KAAK,EAAE;EAAkB,CAAC,EACvC;IAAEjF,EAAE,EAAExC,eAAe,CAACC,SAAS;IAAEwH,KAAK,EAAE;EAAmB,CAAC,EAC5D;IAAEjF,EAAE,EAAExC,eAAe,CAACE,OAAO;IAAEuH,KAAK,EAAE;EAAmB,CAAC,EAC1D;IAAEjF,EAAE,EAAExC,eAAe,CAACG,aAAa;IAAEsH,KAAK,EAAE;EAAgB,CAAC,EAC7D;IAAEjF,EAAE,EAAExC,eAAe,CAACI,QAAQ;IAAEqH,KAAK,EAAE;EAAmB,CAAC,EAC3D;IAAEjF,EAAE,EAAExC,eAAe,CAACK,UAAU;IAAEoH,KAAK,EAAE;EAAqB,CAAC,EAC/D;IAAEjF,EAAE,EAAExC,eAAe,CAACM,aAAa;IAAEmH,KAAK,EAAE;EAAgB,CAAC,EAC7D;IAAEjF,EAAE,EAAExC,eAAe,CAACO,OAAO;IAAEkH,KAAK,EAAE;EAAiB,CAAC,CACzD;AACH,CAAC;;AAED;;AAUA,OAAO,MAAMC,WAAW,CAAC;EACvB,MAAMC,SAASA,CAAA,EAAwB;IAAA,IAAAC,kBAAA;IACrC,MAAMpG,QAAQ,GAAG,MAAML,aAAa,CAAC,CAAC;;IAEtC;IACA,OAAO,EAAAyG,kBAAA,GAAApG,QAAQ,CAACU,QAAQ,cAAA0F,kBAAA,uBAAjBA,kBAAA,CAAmBzF,GAAG,CAACC,OAAO,KAAK;MACxCQ,KAAK,EAAER,OAAO,CAACQ,KAAK;MACpBG,IAAI,EAAEX,OAAO,CAAC3B,GAAG;MACjBqC,WAAW,EAAEV,OAAO,CAACS,OAAO;MAC5BgF,OAAO,EAAEzF,OAAO,CAACiB,aAAa;MAC9BL,MAAM,EAAEZ,OAAO,CAACY,MAAM;MACtBrB,QAAQ,EAAES,OAAO,CAACT;IACpB,CAAC,CAAC,CAAC,KAAI,EAAE;EACX;AACF;AAEA,OAAO,MAAMmG,WAAW,GAAG,IAAIJ,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}