{"ast":null,"code":"// src/services/visionAnalysisService.ts\n\nclass VisionAnalysisService {\n  /**\r\n   * Analyze image using browser-native APIs and backend services\r\n   */\n  async analyzeImage(imageFile) {\n    try {\n      console.log('🔍 Starting comprehensive image analysis...');\n\n      // Get basic image information\n      const imageInfo = this.getImageInfo(imageFile);\n      console.log('Image info:', imageInfo);\n\n      // Use existing WiHy API for comprehensive food analysis\n      let wihyAnalysis = '';\n      let nutritionInfo = '';\n      try {\n        var _wihyResult$data, _wihyResult$data$ai_r;\n        console.log('Attempting WiHy API analysis...');\n        const {\n          wihyAPI\n        } = await import('./wihyAPI');\n        const wihyResult = await wihyAPI.scanFood(imageFile);\n        if (wihyResult.success && 'data' in wihyResult && (_wihyResult$data = wihyResult.data) !== null && _wihyResult$data !== void 0 && (_wihyResult$data$ai_r = _wihyResult$data.ai_response) !== null && _wihyResult$data$ai_r !== void 0 && _wihyResult$data$ai_r.response) {\n          wihyAnalysis = wihyResult.data.ai_response.response;\n          console.log('WiHy analysis successful');\n        }\n      } catch (error) {\n        console.log('WiHy API analysis not available');\n      }\n\n      // Extract potential nutrition and food information\n      const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\n      const result = {\n        success: true,\n        data: {\n          description: wihyAnalysis || 'Image uploaded for analysis',\n          foodItems: foodAnalysis.foodItems,\n          brands: foodAnalysis.brands,\n          nutritionText: foodAnalysis.nutritionText,\n          barcodes: [],\n          // Future: could integrate barcode detection\n          qrCodes: [],\n          // Future: could integrate QR code detection\n          text: '',\n          // Future: could integrate OCR\n          imageInfo\n        }\n      };\n      console.log('Analysis complete:', result);\n      return result;\n    } catch (error) {\n      console.error('Vision analysis error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Analysis failed'\n      };\n    }\n  }\n\n  /**\r\n   * Get basic image file information\r\n   */\n  getImageInfo(file) {\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\n    return {\n      name: file.name,\n      size: `${sizeInMB} MB`,\n      type: file.type,\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\n    };\n  }\n\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\n  analyzeFoodContent(analysisText, imageInfo) {\n    const text = analysisText.toLowerCase();\n\n    // Common food keywords\n    const foodKeywords = ['apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef', 'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable', 'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'];\n\n    // Common brand keywords\n    const brandKeywords = ['coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills', 'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'];\n\n    // Nutrition-related keywords\n    const nutritionKeywords = ['calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber', 'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'];\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\n    return {\n      foodItems: detectedFood,\n      brands: detectedBrands,\n      nutritionText: nutritionMentions.length > 0 ? `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : ''\n    };\n  }\n\n  /**\r\n   * Format analysis results for display\r\n   */\n  formatForDisplay(result) {\n    if (!result.success || !result.data) {\n      return result.error || 'Image analysis failed';\n    }\n    const {\n      data\n    } = result;\n    const parts = [];\n\n    // Primary description from AI analysis\n    if (data.description) {\n      parts.push(data.description);\n    }\n\n    // Add detected food items\n    if (data.foodItems && data.foodItems.length > 0) {\n      parts.push(`Detected foods: ${data.foodItems.join(', ')}`);\n    }\n\n    // Add brands if detected\n    if (data.brands && data.brands.length > 0) {\n      parts.push(`Brands: ${data.brands.join(', ')}`);\n    }\n\n    // Add nutrition info\n    if (data.nutritionText) {\n      parts.push(data.nutritionText);\n    }\n\n    // Add basic image info\n    if (data.imageInfo) {\n      parts.push(`Image: ${data.imageInfo.name} (${data.imageInfo.size})`);\n    }\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - ready for health insights';\n  }\n}\nexport const visionAnalysisService = new VisionAnalysisService();","map":{"version":3,"names":["VisionAnalysisService","analyzeImage","imageFile","console","log","imageInfo","getImageInfo","wihyAnalysis","nutritionInfo","_wihyResult$data","_wihyResult$data$ai_r","wihyAPI","wihyResult","scanFood","success","data","ai_response","response","error","foodAnalysis","analyzeFoodContent","result","description","foodItems","brands","nutritionText","barcodes","qrCodes","text","Error","message","file","sizeInMB","size","toFixed","name","type","dimensions","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","length","join","formatForDisplay","parts","push","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n  };\r\n  error?: string;\r\n}\r\n\r\nclass VisionAnalysisService {\r\n  /**\r\n   * Analyze image using browser-native APIs and backend services\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Starting comprehensive image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // Use existing WiHy API for comprehensive food analysis\r\n      let wihyAnalysis = '';\r\n      let nutritionInfo = '';\r\n      \r\n      try {\r\n        console.log('Attempting WiHy API analysis...');\r\n        const { wihyAPI } = await import('./wihyAPI');\r\n        const wihyResult = await wihyAPI.scanFood(imageFile);\r\n        \r\n        if (wihyResult.success && 'data' in wihyResult && wihyResult.data?.ai_response?.response) {\r\n          wihyAnalysis = wihyResult.data.ai_response.response;\r\n          console.log('WiHy analysis successful');\r\n        }\r\n      } catch (error) {\r\n        console.log('WiHy API analysis not available');\r\n      }\r\n\r\n      // Extract potential nutrition and food information\r\n      const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n      \r\n      const result: VisionAnalysisResult = {\r\n        success: true,\r\n        data: {\r\n          description: wihyAnalysis || 'Image uploaded for analysis',\r\n          foodItems: foodAnalysis.foodItems,\r\n          brands: foodAnalysis.brands,\r\n          nutritionText: foodAnalysis.nutritionText,\r\n          barcodes: [], // Future: could integrate barcode detection\r\n          qrCodes: [], // Future: could integrate QR code detection\r\n          text: '', // Future: could integrate OCR\r\n          imageInfo\r\n        }\r\n      };\r\n\r\n      console.log('Analysis complete:', result);\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Image analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // Primary description from AI analysis\r\n    if (data.description) {\r\n      parts.push(data.description);\r\n    }\r\n\r\n    // Add detected food items\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`Detected foods: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Add brands if detected\r\n    if (data.brands && data.brands.length > 0) {\r\n      parts.push(`Brands: ${data.brands.join(', ')}`);\r\n    }\r\n\r\n    // Add nutrition info\r\n    if (data.nutritionText) {\r\n      parts.push(data.nutritionText);\r\n    }\r\n\r\n    // Add basic image info\r\n    if (data.imageInfo) {\r\n      parts.push(`Image: ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - ready for health insights';\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"AAAA;;AAsBA,MAAMA,qBAAqB,CAAC;EAC1B;AACF;AACA;EACE,MAAMC,YAAYA,CAACC,SAAe,EAAiC;IACjE,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;;MAE1D;MACA,MAAMC,SAAS,GAAG,IAAI,CAACC,YAAY,CAACJ,SAAS,CAAC;MAC9CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,SAAS,CAAC;;MAErC;MACA,IAAIE,YAAY,GAAG,EAAE;MACrB,IAAIC,aAAa,GAAG,EAAE;MAEtB,IAAI;QAAA,IAAAC,gBAAA,EAAAC,qBAAA;QACFP,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,MAAM;UAAEO;QAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC;QAC7C,MAAMC,UAAU,GAAG,MAAMD,OAAO,CAACE,QAAQ,CAACX,SAAS,CAAC;QAEpD,IAAIU,UAAU,CAACE,OAAO,IAAI,MAAM,IAAIF,UAAU,KAAAH,gBAAA,GAAIG,UAAU,CAACG,IAAI,cAAAN,gBAAA,gBAAAC,qBAAA,GAAfD,gBAAA,CAAiBO,WAAW,cAAAN,qBAAA,eAA5BA,qBAAA,CAA8BO,QAAQ,EAAE;UACxFV,YAAY,GAAGK,UAAU,CAACG,IAAI,CAACC,WAAW,CAACC,QAAQ;UACnDd,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACzC;MACF,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdf,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAChD;;MAEA;MACA,MAAMe,YAAY,GAAG,IAAI,CAACC,kBAAkB,CAACb,YAAY,EAAEF,SAAS,CAAC;MAErE,MAAMgB,MAA4B,GAAG;QACnCP,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;UACJO,WAAW,EAAEf,YAAY,IAAI,6BAA6B;UAC1DgB,SAAS,EAAEJ,YAAY,CAACI,SAAS;UACjCC,MAAM,EAAEL,YAAY,CAACK,MAAM;UAC3BC,aAAa,EAAEN,YAAY,CAACM,aAAa;UACzCC,QAAQ,EAAE,EAAE;UAAE;UACdC,OAAO,EAAE,EAAE;UAAE;UACbC,IAAI,EAAE,EAAE;UAAE;UACVvB;QACF;MACF,CAAC;MAEDF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiB,MAAM,CAAC;MACzC,OAAOA,MAAM;IAEf,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACLJ,OAAO,EAAE,KAAK;QACdI,KAAK,EAAEA,KAAK,YAAYW,KAAK,GAAGX,KAAK,CAACY,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACUxB,YAAYA,CAACyB,IAAU,EAAE;IAC/B,MAAMC,QAAQ,GAAG,CAACD,IAAI,CAACE,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC;IAEvD,OAAO;MACLC,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfF,IAAI,EAAE,GAAGD,QAAQ,KAAK;MACtBI,IAAI,EAAEL,IAAI,CAACK,IAAI;MACfC,UAAU,EAAE,cAAc,CAAC;IAC7B,CAAC;EACH;;EAEA;AACF;AACA;EACUjB,kBAAkBA,CAACkB,YAAoB,EAAEjC,SAAc,EAAE;IAC/D,MAAMuB,IAAI,GAAGU,YAAY,CAACC,WAAW,CAAC,CAAC;;IAEvC;IACA,MAAMC,YAAY,GAAG,CACnB,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EACzE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAC7E,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,CACpE;;IAED;IACA,MAAMC,aAAa,GAAG,CACpB,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,EACnE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAC9D;;IAED;IACA,MAAMC,iBAAiB,GAAG,CACxB,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EACjE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,CACnE;IAED,MAAMC,YAAY,GAAGH,YAAY,CAACI,MAAM,CAACC,OAAO,IAAIjB,IAAI,CAACkB,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC3E,MAAME,cAAc,GAAGN,aAAa,CAACG,MAAM,CAACC,OAAO,IAAIjB,IAAI,CAACkB,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC9E,MAAMG,iBAAiB,GAAGN,iBAAiB,CAACE,MAAM,CAACC,OAAO,IAAIjB,IAAI,CAACkB,QAAQ,CAACD,OAAO,CAAC,CAAC;IAErF,OAAO;MACLtB,SAAS,EAAEoB,YAAY;MACvBnB,MAAM,EAAEuB,cAAc;MACtBtB,aAAa,EAAEuB,iBAAiB,CAACC,MAAM,GAAG,CAAC,GACzC,uCAAuCD,iBAAiB,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,GACrE;IACJ,CAAC;EACH;;EAEA;AACF;AACA;EACEC,gBAAgBA,CAAC9B,MAA4B,EAAU;IACrD,IAAI,CAACA,MAAM,CAACP,OAAO,IAAI,CAACO,MAAM,CAACN,IAAI,EAAE;MACnC,OAAOM,MAAM,CAACH,KAAK,IAAI,uBAAuB;IAChD;IAEA,MAAM;MAAEH;IAAK,CAAC,GAAGM,MAAM;IACvB,MAAM+B,KAAe,GAAG,EAAE;;IAE1B;IACA,IAAIrC,IAAI,CAACO,WAAW,EAAE;MACpB8B,KAAK,CAACC,IAAI,CAACtC,IAAI,CAACO,WAAW,CAAC;IAC9B;;IAEA;IACA,IAAIP,IAAI,CAACQ,SAAS,IAAIR,IAAI,CAACQ,SAAS,CAAC0B,MAAM,GAAG,CAAC,EAAE;MAC/CG,KAAK,CAACC,IAAI,CAAC,mBAAmBtC,IAAI,CAACQ,SAAS,CAAC2B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC5D;;IAEA;IACA,IAAInC,IAAI,CAACS,MAAM,IAAIT,IAAI,CAACS,MAAM,CAACyB,MAAM,GAAG,CAAC,EAAE;MACzCG,KAAK,CAACC,IAAI,CAAC,WAAWtC,IAAI,CAACS,MAAM,CAAC0B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACjD;;IAEA;IACA,IAAInC,IAAI,CAACU,aAAa,EAAE;MACtB2B,KAAK,CAACC,IAAI,CAACtC,IAAI,CAACU,aAAa,CAAC;IAChC;;IAEA;IACA,IAAIV,IAAI,CAACV,SAAS,EAAE;MAClB+C,KAAK,CAACC,IAAI,CAAC,UAAUtC,IAAI,CAACV,SAAS,CAAC8B,IAAI,KAAKpB,IAAI,CAACV,SAAS,CAAC4B,IAAI,GAAG,CAAC;IACtE;IAEA,OAAOmB,KAAK,CAACH,MAAM,GAAG,CAAC,GAAGG,KAAK,CAACF,IAAI,CAAC,MAAM,CAAC,GAAG,4CAA4C;EAC7F;AACF;AAEA,OAAO,MAAMI,qBAAqB,GAAG,IAAItD,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}