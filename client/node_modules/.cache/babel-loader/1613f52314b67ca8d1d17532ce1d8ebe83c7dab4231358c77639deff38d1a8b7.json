{"ast":null,"code":"var _jsxFileName = \"C:\\\\repo\\\\wihy_ui\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate, useLocation } from 'react-router-dom';\nimport VHealthSearch from './components/search/VHealthSearch';\nimport SearchResults from './components/search/SearchResults';\nimport DashboardPage from './pages/DashboardPage';\nimport { wihyAPI } from './services/wihyAPI';\nimport { searchCache } from './services/searchCache';\nimport { fetchNewsFeed, refreshNewsFeed, searchNewsArticles } from './services/newsService';\nimport { logger } from './utils/logger';\nimport './styles/VHealthSearch.css';\nimport './index.css';\nimport { API_CONFIG } from './config/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = API_CONFIG.BASE_URL.replace(/\\/api$/, ''); // Remove /api suffix\n\nexport const searchFoodDatabase = async query => {\n  try {\n    logger.apiRequest('Food Database Search', {\n      query\n    });\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    logger.apiResponse('Food Database Search', data);\n    return data;\n  } catch (error) {\n    console.error('Food database API error:', error);\n    throw error;\n  }\n};\nexport const foodAPI = {\n  searchFood: searchFoodDatabase\n};\n\n// Export news API for use in other components\nexport const newsAPI = {\n  fetchNewsFeed,\n  refreshNewsFeed,\n  searchNewsArticles\n};\nconst ResultsPage = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const query = searchParams.get('q') || '';\n  const isHealthNews = searchParams.get('type') === 'health_news';\n  const category = searchParams.get('category') || 'all';\n  const [isLoading, setIsLoading] = useState(false);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n  const [apiResponse, setApiResponse] = useState(null);\n\n  // Track if this is initial load to prevent loading spinner on browser navigation\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  // Add ref to prevent duplicate API calls\n  const lastProcessedQuery = useRef('');\n  const isProcessing = useRef(false);\n\n  // Detect browser navigation type\n  const isBrowserNavigation = () => {\n    var _performance, _performance$getEntri, _performance$getEntri2;\n    const navigation = (_performance = window.performance) === null || _performance === void 0 ? void 0 : (_performance$getEntri = _performance.getEntriesByType) === null || _performance$getEntri === void 0 ? void 0 : (_performance$getEntri2 = _performance$getEntri.call(_performance, 'navigation')) === null || _performance$getEntri2 === void 0 ? void 0 : _performance$getEntri2[0];\n    return (navigation === null || navigation === void 0 ? void 0 : navigation.type) === 'back_forward';\n  };\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query && !isHealthNews) {\n        setIsLoading(false);\n        return;\n      }\n\n      // Check if we have fresh data from navigation (e.g., from Header search)\n      const navigationState = location.state;\n      if (navigationState !== null && navigationState !== void 0 && navigationState.fromSearch && navigationState !== null && navigationState !== void 0 && navigationState.results && navigationState !== null && navigationState !== void 0 && navigationState.apiResponse) {\n        console.log('üîç APP DEBUG: Using navigation state data:', navigationState);\n        setResults(navigationState.results.details || navigationState.results.summary || 'No results');\n        setApiResponse(navigationState.apiResponse); // Set the API response for ChatWidget\n        setDataSource(navigationState.dataSource || 'wihy');\n        setCitations(navigationState.results.sources || []);\n        setRecommendations(navigationState.results.recommendations || []);\n        setDisclaimer(navigationState.results.medicalDisclaimer || '');\n        setIsLoading(false);\n        return;\n      }\n\n      // Create cache key based on type\n      const cacheKey = isHealthNews ? `health_news_${category}` : query;\n\n      // Prevent duplicate processing\n      if (isProcessing.current || lastProcessedQuery.current === cacheKey) {\n        logger.debug('Skipping duplicate query', {\n          cacheKey\n        });\n        return;\n      }\n      logger.debug('Processing new query', {\n        cacheKey\n      });\n      lastProcessedQuery.current = cacheKey;\n      isProcessing.current = true;\n      logger.debug('Query type analysis', {\n        isHealthNews,\n        isBrowserNavigation: isBrowserNavigation()\n      });\n\n      // Always check cache first - especially for browser navigation\n      const cachedResult = searchCache.getCachedResult(cacheKey);\n      if (cachedResult) {\n        logger.cache('Using cached results', {\n          cacheKey\n        });\n        setResults(cachedResult);\n        setDataSource('local');\n        setIsLoading(false);\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n        setIsInitialLoad(false);\n        isProcessing.current = false; // Reset processing flag\n        return; // Exit early - no API calls needed\n      }\n\n      // If this is browser navigation and no cache, redirect to search page\n      if (isBrowserNavigation() || !isInitialLoad) {\n        logger.debug('Browser navigation detected with no cache - redirecting to search');\n        isProcessing.current = false; // Reset processing flag\n        navigate('/');\n        return;\n      }\n\n      // Only show loading for genuine new searches (not browser navigation)\n      setIsLoading(true);\n      try {\n        // Use WiHy Unified API for all types of searches\n        logger.apiRequest('WiHy Unified API', {\n          type: isHealthNews ? 'health_news' : 'search',\n          query: query || `health news - ${category}`\n        });\n        let wihyResult;\n        if (isHealthNews) {\n          // Handle health news requests\n          logger.debug('Fetching health news via WiHy API');\n          const categories = category === 'all' ? [] : [category];\n          wihyResult = await wihyAPI.getHealthNews(categories, 6);\n        } else {\n          // Handle regular search queries (health, nutrition, etc.)\n          logger.debug('Making WiHy API call for query', {\n            query\n          });\n          wihyResult = await wihyAPI.searchHealth(query);\n        }\n        logger.apiResponse('WiHy API result', wihyResult);\n        if (wihyResult.success) {\n          const formattedResult = wihyAPI.formatWihyResponse(wihyResult);\n          setResults(formattedResult);\n          setDataSource(\"wihy\");\n          setApiResponse(wihyResult); // Store the original API response\n\n          // Cache the WiHy results (still cache the formatted result for legacy compatibility)\n          searchCache.setCachedResult(cacheKey, formattedResult, window.location.href);\n          setCitations(wihyAPI.extractCitations(wihyResult));\n          setRecommendations(wihyAPI.extractRecommendations(wihyResult));\n          if (isHealthNews) {\n            setDisclaimer('Health news provided by WiHy AI. Always consult healthcare professionals for medical advice.');\n          } else {\n            setDisclaimer('This guidance is based on evidence-based health principles. Always consult healthcare professionals for personalized medical advice.');\n          }\n        } else {\n          // Fallback: If WiHy fails, try legacy APIs\n          logger.warn('WiHy API failed, trying fallback methods');\n          await handleFallbackAPIs();\n        }\n      } catch (error) {\n        logger.error(\"WiHy API error:\", error);\n        // Try fallback APIs if WiHy fails\n        try {\n          await handleFallbackAPIs();\n        } catch (fallbackError) {\n          logger.error(\"All APIs failed:\", fallbackError);\n\n          // Check for specific error types\n          const errorMessage = error.message || '';\n          const fallbackErrorMessage = fallbackError.message || '';\n          let userFriendlyMessage;\n          if (errorMessage.includes('CORS_ERROR')) {\n            userFriendlyMessage = \"Oops! There's a configuration issue preventing us from reaching our AI services. üîß Our team is working on it - please try again later!\";\n          } else if (errorMessage.includes('NETWORK_ERROR') || errorMessage.includes('TIMEOUT_ERROR')) {\n            userFriendlyMessage = \"Oops! Looks like we're having some technical difficulties. ü§ñ Please come back in a few minutes while we fix things up!\";\n          } else if (errorMessage.includes('SERVER_ERROR')) {\n            userFriendlyMessage = \"Our servers are taking a quick break! ‚òï Please try again in a few minutes.\";\n          } else if (fallbackErrorMessage.includes('fetch') || fallbackErrorMessage.includes('network') || error.name === 'TypeError') {\n            userFriendlyMessage = \"Looks like there's a connection hiccup! üì° Please check your internet and try again.\";\n          } else {\n            userFriendlyMessage = \"Sorry, we're experiencing some issues right now. Please try again in a moment or come back later! üòÖ\";\n          }\n          setResults(userFriendlyMessage);\n          setDataSource(\"error\");\n          setCitations([]);\n          setRecommendations([]);\n          setDisclaimer('If this issue persists, please try refreshing the page or contact support.');\n        }\n      } finally {\n        setIsLoading(false);\n        setIsInitialLoad(false);\n        isProcessing.current = false; // Always reset processing flag\n      }\n    };\n\n    // Fallback function for legacy APIs\n    const handleFallbackAPIs = async () => {\n      if (isHealthNews) {\n        logger.debug('Fallback: Fetching health news via newsService');\n        const healthNewsResult = await fetchNewsFeed([category], 6);\n        if (healthNewsResult.success && healthNewsResult.articles) {\n          logger.info('Health news fetched successfully');\n\n          // Format the news articles for display\n          const formattedNews = formatNewsArticles(healthNewsResult.articles);\n          setResults(formattedNews);\n          setDataSource('openai'); // Use openai as the display source\n\n          // Cache the health news results\n          const newsKey = `health_news_${category}`;\n          searchCache.setCachedResult(newsKey, formattedNews, window.location.href);\n          setDisclaimer('Health news provided by AI. Always consult healthcare professionals for medical advice.');\n        } else {\n          throw new Error('Failed to fetch health news');\n        }\n      } else {\n        // Try nutrition database for food-related queries\n        try {\n          logger.debug('Fallback: Trying nutrition database');\n          logger.debug('API URL', {\n            url: `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`\n          });\n          const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\n          if (nutritionResponse.ok) {\n            const nutritionData = await nutritionResponse.json();\n            logger.apiResponse('Nutrition API', nutritionData);\n            if (nutritionData && nutritionData.found === true) {\n              logger.info('Found nutrition data - using vnutrition source');\n              const resultString = JSON.stringify(nutritionData);\n              setResults(resultString);\n              setDataSource('vnutrition');\n\n              // Cache the nutrition results\n              searchCache.setCachedResult(query, resultString, window.location.href);\n              return;\n            }\n          }\n        } catch (nutritionError) {\n          logger.debug('Nutrition API also failed', {\n            error: nutritionError\n          });\n        }\n        throw new Error('All fallback APIs failed');\n      }\n    };\n    fetchResults();\n  }, [query, isHealthNews, category, location.state]); // Added location.state to dependencies\n\n  // Function to format news articles for display\n  const formatNewsArticles = articles => {\n    let formatted = '# Latest Health News\\n\\n';\n    articles.forEach((article, index) => {\n      formatted += `## ${article.title}\\n\\n`;\n      formatted += `**Source:** ${article.source} (${article.domain})\\n`;\n      formatted += `**Category:** ${article.category}\\n`;\n      formatted += `**Published:** ${new Date(article.publishedDate).toLocaleDateString()}\\n`;\n      formatted += `**Relevance:** ${Math.round(article.relevanceScore * 100)}%\\n\\n`;\n      formatted += `${article.summary}\\n\\n`;\n      if (article.tags && article.tags.length > 0) {\n        formatted += `**Tags:** ${article.tags.join(', ')}\\n\\n`;\n      }\n      formatted += `[Read Full Article](${article.url})\\n\\n`;\n      formatted += '---\\n\\n';\n    });\n    return formatted;\n  };\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    if (newQuery !== query) {\n      // Reset the initial load flag for new searches\n      setIsInitialLoad(true);\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: isHealthNews ? 'Latest Health News' : query,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer,\n    apiResponse: apiResponse\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultsPage, \"ZLN/aavrSeV+heqbNKWzMCL8Z5g=\", false, function () {\n  return [useSearchParams, useNavigate, useLocation];\n});\n_c = ResultsPage;\nconst App = () => {\n  logger.debug(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/results\",\n        element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(DashboardPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","useLocation","VHealthSearch","SearchResults","DashboardPage","wihyAPI","searchCache","fetchNewsFeed","refreshNewsFeed","searchNewsArticles","logger","API_CONFIG","jsxDEV","_jsxDEV","API_BASE_URL","BASE_URL","replace","searchFoodDatabase","query","apiRequest","response","fetch","encodeURIComponent","method","headers","ok","Error","status","data","json","apiResponse","error","console","foodAPI","searchFood","newsAPI","ResultsPage","_s","searchParams","navigate","location","get","isHealthNews","category","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","setApiResponse","isInitialLoad","setIsInitialLoad","lastProcessedQuery","isProcessing","isBrowserNavigation","_performance","_performance$getEntri","_performance$getEntri2","navigation","window","performance","getEntriesByType","call","type","fetchResults","navigationState","state","fromSearch","log","details","summary","sources","medicalDisclaimer","cacheKey","current","debug","cachedResult","getCachedResult","cache","wihyResult","categories","getHealthNews","searchHealth","success","formattedResult","formatWihyResponse","setCachedResult","href","extractCitations","extractRecommendations","warn","handleFallbackAPIs","fallbackError","errorMessage","message","fallbackErrorMessage","userFriendlyMessage","includes","name","healthNewsResult","articles","info","formattedNews","formatNewsArticles","newsKey","url","nutritionResponse","nutritionData","found","resultString","JSON","stringify","nutritionError","formatted","forEach","article","index","title","source","domain","Date","publishedDate","toLocaleDateString","Math","round","relevanceScore","tags","length","join","handleBackToSearch","handleNewSearch","newQuery","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","path","element","_c2","$RefreshReg$"],"sources":["C:/repo/wihy_ui/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport VHealthSearch from './components/search/VHealthSearch';\r\nimport SearchResults from './components/search/SearchResults';\r\nimport HealthNewsFeed from './components/HealthNewsFeed';\r\nimport DashboardPage from './pages/DashboardPage';\r\nimport TestChartsPage from './pages/TestChartsPage';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport { wihyAPI } from './services/wihyAPI';\r\nimport { searchCache } from './services/searchCache';\r\nimport { fetchNewsFeed, refreshNewsFeed, searchNewsArticles } from './services/newsService';\r\nimport { logger } from './utils/logger';\r\nimport './styles/VHealthSearch.css';\r\nimport './index.css';\r\nimport VHealthApp from './vHealthApp';\r\nimport { API_CONFIG, getApiEndpoint } from './config/apiConfig';\r\n\r\nconst API_BASE_URL = API_CONFIG.BASE_URL.replace(/\\/api$/, ''); // Remove /api suffix\r\n\r\nexport const searchFoodDatabase = async (query: string) => {\r\n  try {\r\n    logger.apiRequest('Food Database Search', { query });\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    logger.apiResponse('Food Database Search', data);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Food database API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const foodAPI = {\r\n  searchFood: searchFoodDatabase\r\n};\r\n\r\n// Export news API for use in other components\r\nexport const newsAPI = {\r\n  fetchNewsFeed,\r\n  refreshNewsFeed,\r\n  searchNewsArticles\r\n};\r\n\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const query = searchParams.get('q') || '';\r\n  const isHealthNews = searchParams.get('type') === 'health_news';\r\n  const category = searchParams.get('category') || 'all';\r\n  \r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  const [apiResponse, setApiResponse] = useState<any>(null);\r\n  \r\n  // Track if this is initial load to prevent loading spinner on browser navigation\r\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\r\n  \r\n  // Add ref to prevent duplicate API calls\r\n  const lastProcessedQuery = useRef<string>('');\r\n  const isProcessing = useRef<boolean>(false);\r\n  \r\n  // Detect browser navigation type\r\n  const isBrowserNavigation = () => {\r\n    const navigation = (window as any).performance?.getEntriesByType?.('navigation')?.[0];\r\n    return navigation?.type === 'back_forward';\r\n  };\r\n\r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query && !isHealthNews) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Check if we have fresh data from navigation (e.g., from Header search)\r\n      const navigationState = location.state as any;\r\n      if (navigationState?.fromSearch && navigationState?.results && navigationState?.apiResponse) {\r\n        console.log('üîç APP DEBUG: Using navigation state data:', navigationState);\r\n        setResults(navigationState.results.details || navigationState.results.summary || 'No results');\r\n        setApiResponse(navigationState.apiResponse); // Set the API response for ChatWidget\r\n        setDataSource(navigationState.dataSource || 'wihy');\r\n        setCitations(navigationState.results.sources || []);\r\n        setRecommendations(navigationState.results.recommendations || []);\r\n        setDisclaimer(navigationState.results.medicalDisclaimer || '');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Create cache key based on type\r\n      const cacheKey = isHealthNews ? `health_news_${category}` : query;\r\n      \r\n      // Prevent duplicate processing\r\n      if (isProcessing.current || lastProcessedQuery.current === cacheKey) {\r\n        logger.debug('Skipping duplicate query', { cacheKey });\r\n        return;\r\n      }\r\n      \r\n      logger.debug('Processing new query', { cacheKey });\r\n      lastProcessedQuery.current = cacheKey;\r\n      isProcessing.current = true;\r\n      \r\n      logger.debug('Query type analysis', { \r\n        isHealthNews, \r\n        isBrowserNavigation: isBrowserNavigation() \r\n      });\r\n      \r\n      // Always check cache first - especially for browser navigation\r\n      const cachedResult = searchCache.getCachedResult(cacheKey);\r\n      if (cachedResult) {\r\n        logger.cache('Using cached results', { cacheKey });\r\n        setResults(cachedResult);\r\n        setDataSource('local');\r\n        setIsLoading(false);\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n        setIsInitialLoad(false);\r\n        isProcessing.current = false; // Reset processing flag\r\n        return; // Exit early - no API calls needed\r\n      }\r\n      \r\n      // If this is browser navigation and no cache, redirect to search page\r\n      if (isBrowserNavigation() || !isInitialLoad) {\r\n        logger.debug('Browser navigation detected with no cache - redirecting to search');\r\n        isProcessing.current = false; // Reset processing flag\r\n        navigate('/');\r\n        return;\r\n      }\r\n      \r\n      // Only show loading for genuine new searches (not browser navigation)\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        // Use WiHy Unified API for all types of searches\r\n        logger.apiRequest('WiHy Unified API', { \r\n          type: isHealthNews ? 'health_news' : 'search',\r\n          query: query || `health news - ${category}` \r\n        });\r\n        \r\n        let wihyResult: any;\r\n        \r\n        if (isHealthNews) {\r\n          // Handle health news requests\r\n          logger.debug('Fetching health news via WiHy API');\r\n          const categories = category === 'all' ? [] : [category];\r\n          wihyResult = await wihyAPI.getHealthNews(categories, 6);\r\n        } else {\r\n          // Handle regular search queries (health, nutrition, etc.)\r\n          logger.debug('Making WiHy API call for query', { query });\r\n          wihyResult = await wihyAPI.searchHealth(query);\r\n        }\r\n        \r\n        logger.apiResponse('WiHy API result', wihyResult);\r\n        \r\n        if (wihyResult.success) {\r\n          const formattedResult = wihyAPI.formatWihyResponse(wihyResult);\r\n          setResults(formattedResult);\r\n          setDataSource(\"wihy\");\r\n          setApiResponse(wihyResult); // Store the original API response\r\n          \r\n          // Cache the WiHy results (still cache the formatted result for legacy compatibility)\r\n          searchCache.setCachedResult(cacheKey, formattedResult, window.location.href);\r\n          \r\n          setCitations(wihyAPI.extractCitations(wihyResult));\r\n          setRecommendations(wihyAPI.extractRecommendations(wihyResult));\r\n          \r\n          if (isHealthNews) {\r\n            setDisclaimer('Health news provided by WiHy AI. Always consult healthcare professionals for medical advice.');\r\n          } else {\r\n            setDisclaimer('This guidance is based on evidence-based health principles. Always consult healthcare professionals for personalized medical advice.');\r\n          }\r\n        } else {\r\n          // Fallback: If WiHy fails, try legacy APIs\r\n          logger.warn('WiHy API failed, trying fallback methods');\r\n          await handleFallbackAPIs();\r\n        }\r\n        \r\n      } catch (error) {\r\n        logger.error(\"WiHy API error:\", error);\r\n        // Try fallback APIs if WiHy fails\r\n        try {\r\n          await handleFallbackAPIs();\r\n        } catch (fallbackError) {\r\n          logger.error(\"All APIs failed:\", fallbackError);\r\n          \r\n          // Check for specific error types\r\n          const errorMessage = error.message || '';\r\n          const fallbackErrorMessage = fallbackError.message || '';\r\n          \r\n          let userFriendlyMessage;\r\n          \r\n          if (errorMessage.includes('CORS_ERROR')) {\r\n            userFriendlyMessage = \"Oops! There's a configuration issue preventing us from reaching our AI services. üîß Our team is working on it - please try again later!\";\r\n          } else if (errorMessage.includes('NETWORK_ERROR') || errorMessage.includes('TIMEOUT_ERROR')) {\r\n            userFriendlyMessage = \"Oops! Looks like we're having some technical difficulties. ü§ñ Please come back in a few minutes while we fix things up!\";\r\n          } else if (errorMessage.includes('SERVER_ERROR')) {\r\n            userFriendlyMessage = \"Our servers are taking a quick break! ‚òï Please try again in a few minutes.\";\r\n          } else if (fallbackErrorMessage.includes('fetch') || \r\n                     fallbackErrorMessage.includes('network') || \r\n                     error.name === 'TypeError') {\r\n            userFriendlyMessage = \"Looks like there's a connection hiccup! üì° Please check your internet and try again.\";\r\n          } else {\r\n            userFriendlyMessage = \"Sorry, we're experiencing some issues right now. Please try again in a moment or come back later! üòÖ\";\r\n          }\r\n          \r\n          setResults(userFriendlyMessage);\r\n          setDataSource(\"error\");\r\n          \r\n          setCitations([]);\r\n          setRecommendations([]);\r\n          setDisclaimer('If this issue persists, please try refreshing the page or contact support.');\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n        setIsInitialLoad(false);\r\n        isProcessing.current = false; // Always reset processing flag\r\n      }\r\n    };\r\n\r\n    // Fallback function for legacy APIs\r\n    const handleFallbackAPIs = async () => {\r\n      if (isHealthNews) {\r\n        logger.debug('Fallback: Fetching health news via newsService');\r\n        const healthNewsResult = await fetchNewsFeed([category], 6);\r\n        \r\n        if (healthNewsResult.success && healthNewsResult.articles) {\r\n          logger.info('Health news fetched successfully');\r\n          \r\n          // Format the news articles for display\r\n          const formattedNews = formatNewsArticles(healthNewsResult.articles);\r\n          \r\n          setResults(formattedNews);\r\n          setDataSource('openai'); // Use openai as the display source\r\n          \r\n          // Cache the health news results\r\n          const newsKey = `health_news_${category}`;\r\n          searchCache.setCachedResult(newsKey, formattedNews, window.location.href);\r\n          \r\n          setDisclaimer('Health news provided by AI. Always consult healthcare professionals for medical advice.');\r\n        } else {\r\n          throw new Error('Failed to fetch health news');\r\n        }\r\n      } else {\r\n        // Try nutrition database for food-related queries\r\n        try {\r\n          logger.debug('Fallback: Trying nutrition database');\r\n          logger.debug('API URL', { url: `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}` });\r\n          \r\n          const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          if (nutritionResponse.ok) {\r\n            const nutritionData = await nutritionResponse.json();\r\n            logger.apiResponse('Nutrition API', nutritionData);\r\n            \r\n            if (nutritionData && nutritionData.found === true) {\r\n              logger.info('Found nutrition data - using vnutrition source');\r\n              const resultString = JSON.stringify(nutritionData);\r\n              setResults(resultString);\r\n              setDataSource('vnutrition');\r\n              \r\n              // Cache the nutrition results\r\n              searchCache.setCachedResult(query, resultString, window.location.href);\r\n              return;\r\n            }\r\n          }\r\n        } catch (nutritionError) {\r\n          logger.debug('Nutrition API also failed', { error: nutritionError });\r\n        }\r\n        \r\n        throw new Error('All fallback APIs failed');\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query, isHealthNews, category, location.state]); // Added location.state to dependencies\r\n\r\n  // Function to format news articles for display\r\n  const formatNewsArticles = (articles: any[]): string => {\r\n    let formatted = '# Latest Health News\\n\\n';\r\n    \r\n    articles.forEach((article, index) => {\r\n      formatted += `## ${article.title}\\n\\n`;\r\n      formatted += `**Source:** ${article.source} (${article.domain})\\n`;\r\n      formatted += `**Category:** ${article.category}\\n`;\r\n      formatted += `**Published:** ${new Date(article.publishedDate).toLocaleDateString()}\\n`;\r\n      formatted += `**Relevance:** ${Math.round(article.relevanceScore * 100)}%\\n\\n`;\r\n      formatted += `${article.summary}\\n\\n`;\r\n      \r\n      if (article.tags && article.tags.length > 0) {\r\n        formatted += `**Tags:** ${article.tags.join(', ')}\\n\\n`;\r\n      }\r\n      \r\n      formatted += `[Read Full Article](${article.url})\\n\\n`;\r\n      formatted += '---\\n\\n';\r\n    });\r\n    \r\n    return formatted;\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    if (newQuery !== query) {\r\n      // Reset the initial load flag for new searches\r\n      setIsInitialLoad(true);\r\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={isHealthNews ? 'Latest Health News' : query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n      apiResponse={apiResponse}\r\n    />\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  logger.debug(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n        <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details?: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}