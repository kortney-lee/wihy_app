{"ast":null,"code":"// Simple newsService stub for user app\nexport const fetchNewsFeed=async(categories,limit)=>{// Stub implementation - in a real app this would connect to the news API\nreturn{success:true,articles:[{id:'1',title:'Sample Health News',summary:'This is a sample news article for the user dashboard.',url:'#',source:'Health Source',publishedDate:new Date().toISOString(),category:'general',tags:['health','wellness']}]};};export const getArticlesByCategory=async(category,limit)=>{const result=await fetchNewsFeed([category],limit);return result;};export const refreshNewsFeed=async()=>{// Refresh news feed - stub implementation\nreturn await fetchNewsFeed();};export const searchNewsArticles=async(query,limit)=>{// Search news articles - stub implementation\nreturn await fetchNewsFeed(undefined,limit);};","map":{"version":3,"names":["fetchNewsFeed","categories","limit","success","articles","id","title","summary","url","source","publishedDate","Date","toISOString","category","tags","getArticlesByCategory","result","refreshNewsFeed","searchNewsArticles","query","undefined"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// Simple newsService stub for user app\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  description?: string; // Optional description field\r\n  url: string;\r\n  link?: string; // Alternative URL field\r\n  source: string;\r\n  publishedDate: string;\r\n  pubDate?: string; // Alternative date field\r\n  category: string;\r\n  tags: string[];\r\n  media_url?: string; // Optional media URL\r\n  media_thumb_url?: string; // Optional thumbnail URL\r\n  relevanceScore?: number; // Optional relevance score\r\n}\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Stub implementation - in a real app this would connect to the news API\r\n  return {\r\n    success: true,\r\n    articles: [\r\n      {\r\n        id: '1',\r\n        title: 'Sample Health News',\r\n        summary: 'This is a sample news article for the user dashboard.',\r\n        url: '#',\r\n        source: 'Health Source',\r\n        publishedDate: new Date().toISOString(),\r\n        category: 'general',\r\n        tags: ['health', 'wellness']\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  const result = await fetchNewsFeed([category], limit);\r\n  return result;\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Refresh news feed - stub implementation\r\n  return await fetchNewsFeed();\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Search news articles - stub implementation\r\n  return await fetchNewsFeed(undefined, limit);\r\n};"],"mappings":"AAAA;AAkBA,MAAO,MAAM,CAAAA,aAAa,CAAG,KAAAA,CAAOC,UAAqB,CAAEC,KAAc,GAA6D,CACpI;AACA,MAAO,CACLC,OAAO,CAAE,IAAI,CACbC,QAAQ,CAAE,CACR,CACEC,EAAE,CAAE,GAAG,CACPC,KAAK,CAAE,oBAAoB,CAC3BC,OAAO,CAAE,uDAAuD,CAChEC,GAAG,CAAE,GAAG,CACRC,MAAM,CAAE,eAAe,CACvBC,aAAa,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACvCC,QAAQ,CAAE,SAAS,CACnBC,IAAI,CAAE,CAAC,QAAQ,CAAE,UAAU,CAC7B,CAAC,CAEL,CAAC,CACH,CAAC,CAED,MAAO,MAAM,CAAAC,qBAAqB,CAAG,KAAAA,CAAOF,QAAgB,CAAEX,KAAc,GAA6D,CACvI,KAAM,CAAAc,MAAM,CAAG,KAAM,CAAAhB,aAAa,CAAC,CAACa,QAAQ,CAAC,CAAEX,KAAK,CAAC,CACrD,MAAO,CAAAc,MAAM,CACf,CAAC,CAED,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAoE,CACjG;AACA,MAAO,MAAM,CAAAjB,aAAa,CAAC,CAAC,CAC9B,CAAC,CAED,MAAO,MAAM,CAAAkB,kBAAkB,CAAG,KAAAA,CAAOC,KAAa,CAAEjB,KAAc,GAA6D,CACjI;AACA,MAAO,MAAM,CAAAF,aAAa,CAACoB,SAAS,CAAElB,KAAK,CAAC,CAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}