{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'Nutrition & Diet',\n  MEDICAL: 'Medical Research',\n  PUBLIC_HEALTH: 'Public Health',\n  CLINICAL: 'Clinical Studies',\n  PREVENTION: 'Disease Prevention',\n  MENTAL_HEALTH: 'Mental Health',\n  GENERAL: 'General Health'\n};\n\n// Fetch categorized news feed\nexport const fetchNewsFeed = async categories => {\n  try {\n    const params = new URLSearchParams();\n    if (categories && categories.length > 0) {\n      params.append('categories', categories.join(','));\n    }\n    const response = await axios.get(`${API_URL}/news/feed?${params.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching news feed:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed'\n    };\n  }\n};\n\n// Refresh news feed (triggers backend to fetch latest articles)\nexport const refreshNewsFeed = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/news/refresh`);\n    return response.data;\n  } catch (error) {\n    console.error('Error refreshing news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\n\n// Get articles by specific category\nexport const getArticlesByCategory = async category => {\n  try {\n    const response = await axios.get(`${API_URL}/news/category/${encodeURIComponent(category)}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\n\n// Search articles\nexport const searchNewsArticles = async (query, category) => {\n  try {\n    const params = new URLSearchParams({\n      q: query\n    });\n    if (category) {\n      params.append('category', category);\n    }\n    const response = await axios.get(`${API_URL}/news/search?${params.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching news articles:', error);\n    return {\n      success: false,\n      message: 'Error searching news articles'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","fetchNewsFeed","categories","params","URLSearchParams","length","append","join","response","get","toString","data","error","console","success","message","refreshNewsFeed","post","getArticlesByCategory","category","encodeURIComponent","searchNewsArticles","query","q"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'Nutrition & Diet',\r\n  MEDICAL: 'Medical Research',\r\n  PUBLIC_HEALTH: 'Public Health',\r\n  CLINICAL: 'Clinical Studies',\r\n  PREVENTION: 'Disease Prevention',\r\n  MENTAL_HEALTH: 'Mental Health',\r\n  GENERAL: 'General Health'\r\n};\r\n\r\n// Fetch categorized news feed\r\nexport const fetchNewsFeed = async (categories?: string[]): Promise<NewsFeedResponse> => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    if (categories && categories.length > 0) {\r\n      params.append('categories', categories.join(','));\r\n    }\r\n    \r\n    const response = await axios.get(`${API_URL}/news/feed?${params.toString()}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Refresh news feed (triggers backend to fetch latest articles)\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/news/refresh`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error refreshing news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Get articles by specific category\r\nexport const getArticlesByCategory = async (category: string): Promise<NewsFeedResponse> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/news/category/${encodeURIComponent(category)}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\n// Search articles\r\nexport const searchNewsArticles = async (query: string, category?: string): Promise<NewsFeedResponse> => {\r\n  try {\r\n    const params = new URLSearchParams({ q: query });\r\n    if (category) {\r\n      params.append('category', category);\r\n    }\r\n    \r\n    const response = await axios.get(`${API_URL}/news/search?${params.toString()}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching news articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching news articles'\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}