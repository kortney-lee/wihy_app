{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\NovaChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n// Extract nutrition data function moved from SearchResults\nconst extractNutritionData = (results, dataSource) => {\n  console.log('=== EXTRACTING NUTRITION DATA IN NOVACHART ===');\n  console.log('DataSource:', dataSource);\n  console.log('Results type:', typeof results);\n  if (dataSource === 'vnutrition') {\n    try {\n      console.log('Processing vnutrition data source');\n      let nutrition;\n      if (typeof results === 'string') {\n        console.log('Parsing string results');\n        nutrition = JSON.parse(results);\n      } else {\n        console.log('Using object results directly');\n        nutrition = results;\n      }\n      console.log('=== RAW NUTRITION OBJECT ===');\n      console.log('Full object:', nutrition);\n      console.log('Object keys:', Object.keys(nutrition || {}));\n      if (nutrition && nutrition.found !== false) {\n        const extractedData = {\n          calories: nutrition.calories_per_serving || 0,\n          protein: nutrition.protein_g || 0,\n          carbs: nutrition.carbs_g || 0,\n          fat: nutrition.fat_g || 0,\n          fiber: nutrition.fiber_g || 0,\n          sugar: nutrition.sugar_g || 0,\n          sodium: nutrition.sodium_mg || 0,\n          novaScore: nutrition.nova_classification || 1,\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\n        };\n        console.log('=== EXTRACTED DATA ===');\n        console.log('Final extracted data:', extractedData);\n        console.log('NOVA Score:', extractedData.novaScore);\n        return extractedData;\n      } else {\n        var _nutrition;\n        console.log('No valid nutrition data - found:', (_nutrition = nutrition) === null || _nutrition === void 0 ? void 0 : _nutrition.found);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error parsing nutrition data:', error);\n      return null;\n    }\n  }\n  console.log('Not vnutrition source');\n  return null;\n};\nconst NovaChart = ({\n  query,\n  results,\n  dataSource\n}) => {\n  // Extract nutrition data using internal function\n  const nutritionData = extractNutritionData(results, dataSource);\n\n  // Only render if we have nutrition data\n  if (!nutritionData || dataSource !== 'vnutrition') {\n    return null;\n  }\n  const {\n    novaScore,\n    processedLevel\n  } = nutritionData;\n\n  // NOVA classification colors\n  const novaColors = {\n    1: '#10B981',\n    // Green - Good\n    2: '#F59E0B',\n    // Yellow - Okay\n    3: '#F97316',\n    // Orange - Caution\n    4: '#EF4444' // Red - Avoid\n  };\n\n  // Create data for the current NOVA score (100% fill)\n  const data = {\n    datasets: [{\n      data: [100, 0],\n      // 100% for the current score, 0% for remaining\n      backgroundColor: [novaColors[novaScore], '#E5E7EB' // Light gray for empty portion\n      ],\n      borderWidth: 0,\n      cutout: '70%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '2rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: novaScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.875rem',\n            color: '#6B7280'\n          },\n          children: \"NOVA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '16px',\n            height: '16px',\n            backgroundColor: novaColors[novaScore],\n            borderRadius: '3px',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '600',\n            color: '#374151',\n            fontSize: '1rem'\n          },\n          children: [\"Group \", novaScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '0.875rem',\n          color: '#374151',\n          fontStyle: 'italic'\n        },\n        children: processedLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_c = NovaChart;\nexport default NovaChart;\nvar _c;\n$RefreshReg$(_c, \"NovaChart\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","extractNutritionData","results","dataSource","console","log","nutrition","JSON","parse","Object","keys","found","extractedData","calories","calories_per_serving","protein","protein_g","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","novaScore","nova_classification","processedLevel","nova_description","processed_level","_nutrition","error","NovaChart","query","nutritionData","novaColors","data","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","style","textAlign","children","position","height","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","borderRadius","marginRight","fontStyle","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/NovaChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NovaChartProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n}\r\n\r\n// Extract nutrition data function moved from SearchResults\r\nconst extractNutritionData = (results: string, dataSource: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NOVACHART ===');\r\n  console.log('DataSource:', dataSource);\r\n  console.log('Results type:', typeof results);\r\n  \r\n  if (dataSource === 'vnutrition') {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        console.log('NOVA Score:', extractedData.novaScore);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NovaChart: React.FC<NovaChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { novaScore, processedLevel } = nutritionData;\r\n\r\n  // NOVA classification colors\r\n  const novaColors = {\r\n    1: '#10B981', // Green - Good\r\n    2: '#F59E0B', // Yellow - Okay\r\n    3: '#F97316', // Orange - Caution\r\n    4: '#EF4444'  // Red - Avoid\r\n  };\r\n\r\n  // Create data for the current NOVA score (100% fill)\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [100, 0], // 100% for the current score, 0% for remaining\r\n        backgroundColor: [\r\n          novaColors[novaScore as keyof typeof novaColors],\r\n          '#E5E7EB' // Light gray for empty portion\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        enabled: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {novaScore}\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            NOVA\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <div\r\n            style={{\r\n              width: '16px',\r\n              height: '16px',\r\n              backgroundColor: novaColors[novaScore as keyof typeof novaColors],\r\n              borderRadius: '3px',\r\n              marginRight: '0.5rem',\r\n            }}\r\n          />\r\n          <span style={{ \r\n            fontWeight: '600', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Group {novaScore}\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          fontSize: '0.875rem',\r\n          color: '#374151',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          {processedLevel}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovaChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}