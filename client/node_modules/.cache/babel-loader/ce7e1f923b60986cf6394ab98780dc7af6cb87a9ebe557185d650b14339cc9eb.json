{"ast":null,"code":"import { API_CONFIG, WIHY_API_ENDPOINT } from '../config/apiConfig';\nimport { logger } from '../utils/logger';\n\n// Types for the WiHy Unified API (updated to match actual API structure from /docs)\n\n// Keep the old interface for backward compatibility\n\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj) {\n  return obj && typeof obj === 'object' && 'data' in obj && 'service_used' in obj;\n}\n\n// Legacy types for backward compatibility\n\nclass WihyAPIService {\n  constructor() {\n    this.baseURL = void 0;\n    this.isLocalDevelopment = void 0;\n    this.baseURL = WIHY_API_ENDPOINT;\n    this.isLocalDevelopment = API_CONFIG.WIHY_UNIFIED_API_URL.includes('localhost');\n  }\n\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\n  async askAnything(request) {\n    try {\n      logger.apiRequest('Making WiHy Unified API request', request);\n\n      // Convert to the correct HealthQuestion format for the /ask endpoint\n      let healthQuestion;\n      if ('user_context' in request) {\n        // Legacy format - convert to new API format\n        healthQuestion = {\n          query: request.query,\n          user_context: request.user_context || {},\n          include_nutrition: true,\n          include_biblical_wisdom: true,\n          include_charts: true\n        };\n      } else {\n        // Convert UnifiedRequest to HealthQuestion format\n        const unifiedReq = request;\n        healthQuestion = {\n          query: unifiedReq.query,\n          user_context: unifiedReq.context || unifiedReq.user_context || {},\n          include_nutrition: unifiedReq.include_nutrition !== false,\n          include_biblical_wisdom: unifiedReq.include_biblical_wisdom !== false,\n          include_charts: unifiedReq.include_charts !== false\n        };\n      }\n\n      // Use fetch API to match the working example exactly with timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await fetch(this.baseURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(healthQuestion),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Unified API response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy API error:', error);\n      if (error instanceof Error) {\n        // Check for timeout/abort errors\n        if (error.name === 'AbortError') {\n          throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');\n        }\n\n        // Check for CORS errors\n        if (error.message.includes('CORS') || error.message.includes('Access to fetch') || error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\n          throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');\n        }\n\n        // Check for network/connectivity issues\n        if (error.message.includes('fetch') || error.message.includes('network') || error.name === 'TypeError' || error.message.includes('Failed to fetch')) {\n          throw new Error('NETWORK_ERROR: Unable to connect to WiHy services');\n        }\n\n        // Check for server errors\n        if (error.message.includes('HTTP error! status: 5')) {\n          throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');\n        }\n        throw new Error(error.message || 'WiHy API request failed');\n      }\n      throw new Error('Unknown error occurred while contacting WiHy API');\n    }\n  }\n\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\n  convertToLegacyFormat(unifiedResponse, originalQuery) {\n    var _unifiedResponse$data, _unifiedResponse$data2, _unifiedResponse$data3, _unifiedResponse$data4;\n    // Handle chat service response\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\n      return {\n        success: unifiedResponse.success,\n        timestamp: new Date().toISOString(),\n        response_type: unifiedResponse.request_type,\n        query: originalQuery,\n        wihy_response: {\n          query_type: unifiedResponse.request_type,\n          query: originalQuery,\n          core_principle: unifiedResponse.data.response,\n          personalized_analysis: {\n            identified_risk_factors: [],\n            priority_health_goals: [unifiedResponse.data.response],\n            action_items: [{\n              action: unifiedResponse.data.response,\n              priority: 'medium',\n              target_illness: 'general_health',\n              evidence_level: 'ai_generated',\n              mechanism: 'chat_response',\n              timeline: 'immediate'\n            }],\n            timeline: 'immediate'\n          },\n          research_foundation: [{\n            citation_text: 'WiHy AI Chat System',\n            study_type: 'ai_response',\n            key_finding: unifiedResponse.data.response\n          }],\n          progress_tracking: {\n            key_metrics: ['general_health'],\n            reassessment_period: '1 week'\n          },\n          biblical_wisdom: []\n        },\n        message: unifiedResponse.data.response\n      };\n    }\n\n    // Handle other service types (training, nutrition, etc.)\n    return {\n      success: unifiedResponse.success,\n      timestamp: new Date().toISOString(),\n      response_type: unifiedResponse.request_type,\n      query: originalQuery,\n      wihy_response: {\n        query_type: unifiedResponse.request_type,\n        query: originalQuery,\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [],\n          action_items: ((_unifiedResponse$data = unifiedResponse.data.recommendations) === null || _unifiedResponse$data === void 0 ? void 0 : (_unifiedResponse$data2 = _unifiedResponse$data.immediate_actions) === null || _unifiedResponse$data2 === void 0 ? void 0 : _unifiedResponse$data2.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || ((_unifiedResponse$data3 = unifiedResponse.data.legacy_recommendations) === null || _unifiedResponse$data3 === void 0 ? void 0 : _unifiedResponse$data3.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || [],\n          timeline: 'ongoing'\n        },\n        research_foundation: ((_unifiedResponse$data4 = unifiedResponse.data.sources) === null || _unifiedResponse$data4 === void 0 ? void 0 : _unifiedResponse$data4.map(source => ({\n          citation_text: source,\n          study_type: 'research',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['general_health'],\n          reassessment_period: '1 month'\n        },\n        biblical_wisdom: []\n      },\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\n    };\n  }\n\n  /**\r\n   * Get health news articles using the unified API\r\n   */\n  async getHealthNews(categories, limit) {\n    const query = categories && categories.length > 0 ? `Latest health news about ${categories.join(', ')}` : 'Latest health news';\n    const request = {\n      query: query,\n      request_type: 'health',\n      context: {\n        categories: categories,\n        limit: limit\n      }\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\n  async searchNutrition(foodQuery, userContext) {\n    const request = {\n      query: `Nutrition information for ${foodQuery}`,\n      request_type: 'nutrition',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, request.query);\n    }\n    return response;\n  }\n\n  /**\r\n   * General health search using the unified API\r\n   */\n  async searchHealth(query, userContext) {\n    const request = {\n      query: query,\n      request_type: 'auto',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\n    return response;\n  }\n\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\n  formatWihyResponse(response) {\n    var _wihy_response$resear, _wihy_response$biblic;\n    // Handle UnifiedResponse format (new API)\n    if ('data' in response && 'service_used' in response) {\n      const unifiedResp = response;\n      let formatted = `# WiHy Health Assistant\\n\\n`;\n      if (unifiedResp.data.response) {\n        formatted += unifiedResp.data.response;\n      } else if (unifiedResp.data.analysis) {\n        formatted += unifiedResp.data.analysis;\n      } else if (unifiedResp.data.training_status) {\n        formatted += `## Training Service\\n\\n`;\n        formatted += `${unifiedResp.data.training_status}\\n\\n`;\n        if (unifiedResp.data.available_models && unifiedResp.data.available_models.length > 0) {\n          formatted += `**Available Models:**\\n`;\n          unifiedResp.data.available_models.forEach(model => {\n            formatted += `- ${model}\\n`;\n          });\n        }\n      } else {\n        formatted += `**Service:** ${unifiedResp.service_used}\\n\\n`;\n        formatted += `**Processing Time:** ${unifiedResp.processing_time} seconds\\n\\n`;\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\n      }\n      formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.service_used} service (${unifiedResp.processing_time}s)*`;\n      return formatted;\n    }\n\n    // Handle legacy WihyResponse format\n    const legacyResp = response;\n    const {\n      wihy_response\n    } = legacyResp;\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\n\n    // Personalized Analysis\n    if (wihy_response.personalized_analysis) {\n      var _wihy_response$person, _wihy_response$person2, _wihy_response$person3;\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\n\n      // Risk Factors\n      if (((_wihy_response$person = wihy_response.personalized_analysis.identified_risk_factors) === null || _wihy_response$person === void 0 ? void 0 : _wihy_response$person.length) > 0) {\n        formatted += `### Identified Risk Factors:\\n`;\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\n        });\n      }\n\n      // Priority Goals\n      if (((_wihy_response$person2 = wihy_response.personalized_analysis.priority_health_goals) === null || _wihy_response$person2 === void 0 ? void 0 : _wihy_response$person2.length) > 0) {\n        formatted += `### 🎯 Priority Health Goals:\\n`;\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\n          formatted += `- ${goal}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Action Items\n      if (((_wihy_response$person3 = wihy_response.personalized_analysis.action_items) === null || _wihy_response$person3 === void 0 ? void 0 : _wihy_response$person3.length) > 0) {\n        formatted += `### 📋 Action Items:\\n`;\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\n          formatted += `- **Priority:** ${action.priority}\\n`;\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\n        });\n      }\n\n      // Timeline\n      if (wihy_response.personalized_analysis.timeline) {\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\n      }\n    }\n\n    // Research Foundation\n    if (((_wihy_response$resear = wihy_response.research_foundation) === null || _wihy_response$resear === void 0 ? void 0 : _wihy_response$resear.length) > 0) {\n      formatted += `## 📚 Research Foundation\\n\\n`;\n      wihy_response.research_foundation.forEach(research => {\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\n        formatted += `  ${research.key_finding}\\n\\n`;\n      });\n    }\n\n    // Progress Tracking\n    if (wihy_response.progress_tracking) {\n      formatted += `## 📊 Progress Tracking\\n\\n`;\n      formatted += `**Key Metrics to Track:**\\n`;\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\n        formatted += `- ${metric}\\n`;\n      });\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\n    }\n\n    // Biblical Wisdom\n    if (((_wihy_response$biblic = wihy_response.biblical_wisdom) === null || _wihy_response$biblic === void 0 ? void 0 : _wihy_response$biblic.length) > 0) {\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\n      wihy_response.biblical_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\n    return formatted;\n  }\n\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\n  extractRecommendations(response) {\n    const recommendations = [];\n    if (isUnifiedResponse(response)) {\n      // Handle new structured recommendations\n      if (response.data.recommendations) {\n        const recs = response.data.recommendations;\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\n      }\n      // Handle legacy recommendations\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\n        response.data.legacy_recommendations.forEach(r => recommendations.push(r));\n      }\n    } else {\n      var _response$wihy_respon;\n      if ((_response$wihy_respon = response.wihy_response.personalized_analysis) !== null && _response$wihy_respon !== void 0 && _response$wihy_respon.action_items) {\n        response.wihy_response.personalized_analysis.action_items.forEach(action => {\n          recommendations.push(`${action.action} (${action.priority} priority)`);\n        });\n      }\n    }\n    return recommendations;\n  }\n\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\n  extractCitations(response) {\n    const citations = [];\n    if (isUnifiedResponse(response)) {\n      // Unified API may include sources array\n      if (response.data.sources && response.data.sources.length > 0) {\n        response.data.sources.forEach(s => citations.push(s));\n      }\n    } else {\n      if (response.wihy_response.research_foundation) {\n        response.wihy_response.research_foundation.forEach(research => {\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\n        });\n      }\n    }\n    return citations;\n  }\n\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\n  formatUnifiedResponseForChat(response) {\n    // Handle chat service responses\n    if (response.service_used === 'chat' && response.data.response) {\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n      // We should provide more helpful information to the user\n      const briefResponse = response.data.response;\n      if (briefResponse.includes('AI Chat response to:')) {\n        // The API gave us a placeholder response, provide something more useful\n        const query = response.data.query || 'your question';\n        return `I received your question about \"${query}\" and I'm here to help! \n\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\n\n• Understanding health and nutrition concepts\n• Providing general wellness guidance  \n• Explaining health data and metrics\n• Offering evidence-based health insights\n\nWhat specific aspect of health would you like to explore further?`;\n      }\n      return briefResponse;\n    }\n\n    // Handle other response types\n    if (response.data.response) {\n      return response.data.response;\n    }\n    if (response.data.analysis) {\n      return response.data.analysis;\n    }\n    if (response.data.training_status) {\n      let message = `🔄 ${response.data.training_status}`;\n      if (response.data.available_models && response.data.available_models.length > 0) {\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\n      }\n      return message;\n    }\n\n    // Fallback - show the raw data in a readable format\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\n  }\n}\n\n// Export a singleton instance\nexport const wihyAPI = new WihyAPIService();\nexport default wihyAPI;","map":{"version":3,"names":["API_CONFIG","WIHY_API_ENDPOINT","logger","isUnifiedResponse","obj","WihyAPIService","constructor","baseURL","isLocalDevelopment","WIHY_UNIFIED_API_URL","includes","askAnything","request","apiRequest","healthQuestion","query","user_context","include_nutrition","include_biblical_wisdom","include_charts","unifiedReq","context","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","Error","status","data","json","apiResponse","error","name","message","convertToLegacyFormat","unifiedResponse","originalQuery","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","success","timestamp","Date","toISOString","response_type","request_type","wihy_response","query_type","core_principle","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","analysis","recommendations","immediate_actions","map","rec","index","legacy_recommendations","sources","source","getHealthNews","categories","limit","length","join","searchNutrition","foodQuery","userContext","searchHealth","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","unifiedResp","formatted","training_status","available_models","forEach","model","processing_time","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","risk","risk_factor","replace","toUpperCase","associated_illnesses","prevalence_rate","preventability_score","goal","research","metric","wisdom","toLocaleString","extractRecommendations","recs","r","push","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_response$wihy_respon","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, WIHY_API_ENDPOINT } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Types for the WiHy Unified API (updated to match actual API structure from /docs)\r\nexport interface HealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n  include_nutrition?: boolean;            // OPTIONAL: Include nutrition analysis (default: true)\r\n  include_biblical_wisdom?: boolean;      // OPTIONAL: Include biblical wisdom (default: true)\r\n  include_charts?: boolean;               // OPTIONAL: Include chart data (default: true)\r\n}\r\n\r\n// Keep the old interface for backward compatibility\r\nexport interface UnifiedRequest extends HealthQuestion {\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train';\r\n  context?: Record<string, any>;\r\n  user_id?: string;\r\n  session_id?: string;\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n  private isLocalDevelopment: boolean;\r\n\r\n  constructor() {\r\n    this.baseURL = WIHY_API_ENDPOINT;\r\n    this.isLocalDevelopment = API_CONFIG.WIHY_UNIFIED_API_URL.includes('localhost');\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      logger.apiRequest('Making WiHy Unified API request', request);\r\n      \r\n      // Convert to the correct HealthQuestion format for the /ask endpoint\r\n      let healthQuestion: HealthQuestion;\r\n      if ('user_context' in request) {\r\n        // Legacy format - convert to new API format\r\n        healthQuestion = {\r\n          query: request.query,\r\n          user_context: request.user_context || {},\r\n          include_nutrition: true,\r\n          include_biblical_wisdom: true,\r\n          include_charts: true\r\n        };\r\n      } else {\r\n        // Convert UnifiedRequest to HealthQuestion format\r\n        const unifiedReq = request as UnifiedRequest;\r\n        healthQuestion = {\r\n          query: unifiedReq.query,\r\n          user_context: unifiedReq.context || unifiedReq.user_context || {},\r\n          include_nutrition: unifiedReq.include_nutrition !== false,\r\n          include_biblical_wisdom: unifiedReq.include_biblical_wisdom !== false,\r\n          include_charts: unifiedReq.include_charts !== false\r\n        };\r\n      }\r\n      \r\n      // Use fetch API to match the working example exactly with timeout\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await fetch(this.baseURL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(healthQuestion),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Unified API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy API error:', error);\r\n      \r\n      if (error instanceof Error) {\r\n        // Check for timeout/abort errors\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');\r\n        }\r\n        \r\n        // Check for CORS errors\r\n        if (error.message.includes('CORS') || \r\n            error.message.includes('Access to fetch') ||\r\n            error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n          throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');\r\n        }\r\n        \r\n        // Check for network/connectivity issues\r\n        if (error.message.includes('fetch') || \r\n            error.message.includes('network') || \r\n            error.name === 'TypeError' ||\r\n            error.message.includes('Failed to fetch')) {\r\n          throw new Error('NETWORK_ERROR: Unable to connect to WiHy services');\r\n        }\r\n        \r\n        // Check for server errors\r\n        if (error.message.includes('HTTP error! status: 5')) {\r\n          throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');\r\n        }\r\n        \r\n        throw new Error(error.message || 'WiHy API request failed');\r\n      }\r\n      \r\n      throw new Error('Unknown error occurred while contacting WiHy API');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type,\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type,\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\r\n  formatWihyResponse(response: WihyResponse | UnifiedResponse): string {\r\n    // Handle UnifiedResponse format (new API)\r\n    if ('data' in response && 'service_used' in response) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      if (unifiedResp.data.response) {\r\n        formatted += unifiedResp.data.response;\r\n      } else if (unifiedResp.data.analysis) {\r\n        formatted += unifiedResp.data.analysis;\r\n      } else if (unifiedResp.data.training_status) {\r\n        formatted += `## Training Service\\n\\n`;\r\n        formatted += `${unifiedResp.data.training_status}\\n\\n`;\r\n        if (unifiedResp.data.available_models && unifiedResp.data.available_models.length > 0) {\r\n          formatted += `**Available Models:**\\n`;\r\n          unifiedResp.data.available_models.forEach((model: string) => {\r\n            formatted += `- ${model}\\n`;\r\n          });\r\n        }\r\n      } else {\r\n        formatted += `**Service:** ${unifiedResp.service_used}\\n\\n`;\r\n        formatted += `**Processing Time:** ${unifiedResp.processing_time} seconds\\n\\n`;\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.service_used} service (${unifiedResp.processing_time}s)*`;\r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      if (response.wihy_response.personalized_analysis?.action_items) {\r\n        response.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      if (response.wihy_response.research_foundation) {\r\n        response.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}