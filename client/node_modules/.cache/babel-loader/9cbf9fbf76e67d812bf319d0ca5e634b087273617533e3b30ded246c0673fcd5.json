{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useChartData = query => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!query || query.trim() === '') {\n      setChartData(null);\n      return;\n    }\n\n    // Don't load charts for non-food queries like \"test\" or general health topics\n    const foodKeywords = ['apple', 'banana', 'chicken', 'beef', 'salmon', 'rice', 'bread', 'milk', 'egg', 'potato', 'quinoa', 'spinach', 'broccoli', 'yogurt', 'cheese', 'pasta', 'oats', 'nuts', 'beans', 'avocado'];\n    const isLikelyFoodQuery = foodKeywords.some(keyword => query.toLowerCase().includes(keyword.toLowerCase())) || query.toLowerCase().includes('food') || query.toLowerCase().includes('nutrition');\n    if (!isLikelyFoodQuery) {\n      setChartData(null);\n      return;\n    }\n    const fetchChartData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`http://localhost:5000/api/search/${encodeURIComponent(query)}/charts`);\n        const data = await response.json();\n        if (data.success && data.data.totalFoods > 0) {\n          setChartData(data.data);\n        } else {\n          setChartData(null);\n        }\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError('Failed to load chart data');\n        setChartData(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Add a small delay to avoid too many API calls\n    const timeoutId = setTimeout(fetchChartData, 300);\n    return () => clearTimeout(timeoutId);\n  }, [query]);\n  return {\n    chartData,\n    isLoading,\n    error\n  };\n};\n_s(useChartData, \"QwH+tu/v0VL0R8pPv6rXQEZGoOY=\");","map":{"version":3,"names":["useState","useEffect","useChartData","query","_s","chartData","setChartData","isLoading","setIsLoading","error","setError","trim","foodKeywords","isLikelyFoodQuery","some","keyword","toLowerCase","includes","fetchChartData","response","fetch","encodeURIComponent","data","json","success","totalFoods","err","console","timeoutId","setTimeout","clearTimeout"],"sources":["C:/vHealth/vhealth/client/src/hooks/useChartData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ninterface ChartData {\r\n  novaDistribution: Array<{\r\n    label: string;\r\n    count: number;\r\n    color: string;\r\n    percentage: number;\r\n  }>;\r\n  nutritionBreakdown: Array<{\r\n    nutrient: string;\r\n    value: number;\r\n    color: string;\r\n  }>;\r\n  qualityScore: number;\r\n  nutritionAverages: {\r\n    calories: number;\r\n    protein: number;\r\n    carbs: number;\r\n    fat: number;\r\n    fiber: number;\r\n    sugar: number;\r\n    sodium: number;\r\n  };\r\n  healthInsights: {\r\n    unprocessed_percentage: number;\r\n    ultra_processed_percentage: number;\r\n    avg_fiber: number;\r\n    avg_sugar: number;\r\n  };\r\n  totalFoods: number;\r\n}\r\n\r\nexport const useChartData = (query: string) => {\r\n  const [chartData, setChartData] = useState<ChartData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!query || query.trim() === '') {\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    // Don't load charts for non-food queries like \"test\" or general health topics\r\n    const foodKeywords = ['apple', 'banana', 'chicken', 'beef', 'salmon', 'rice', 'bread', 'milk', 'egg', 'potato', 'quinoa', 'spinach', 'broccoli', 'yogurt', 'cheese', 'pasta', 'oats', 'nuts', 'beans', 'avocado'];\r\n    const isLikelyFoodQuery = foodKeywords.some(keyword => \r\n      query.toLowerCase().includes(keyword.toLowerCase())\r\n    ) || query.toLowerCase().includes('food') || query.toLowerCase().includes('nutrition');\r\n\r\n    if (!isLikelyFoodQuery) {\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    const fetchChartData = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/search/${encodeURIComponent(query)}/charts`);\r\n        const data = await response.json();\r\n\r\n        if (data.success && data.data.totalFoods > 0) {\r\n          setChartData(data.data);\r\n        } else {\r\n          setChartData(null);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching chart data:', err);\r\n        setError('Failed to load chart data');\r\n        setChartData(null);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    // Add a small delay to avoid too many API calls\r\n    const timeoutId = setTimeout(fetchChartData, 300);\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [query]);\r\n\r\n  return { chartData, isLoading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAiC3C,OAAO,MAAMC,YAAY,GAAIC,KAAa,IAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAmB,IAAI,CAAC;EAClE,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACE,KAAK,IAAIA,KAAK,CAACQ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACjCL,YAAY,CAAC,IAAI,CAAC;MAClB;IACF;;IAEA;IACA,MAAMM,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IACjN,MAAMC,iBAAiB,GAAGD,YAAY,CAACE,IAAI,CAACC,OAAO,IACjDZ,KAAK,CAACa,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,OAAO,CAACC,WAAW,CAAC,CAAC,CACpD,CAAC,IAAIb,KAAK,CAACa,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAId,KAAK,CAACa,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC;IAEtF,IAAI,CAACJ,iBAAiB,EAAE;MACtBP,YAAY,CAAC,IAAI,CAAC;MAClB;IACF;IAEA,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjCV,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoCC,kBAAkB,CAAClB,KAAK,CAAC,SAAS,CAAC;QACpG,MAAMmB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACA,IAAI,CAACG,UAAU,GAAG,CAAC,EAAE;UAC5CnB,YAAY,CAACgB,IAAI,CAACA,IAAI,CAAC;QACzB,CAAC,MAAM;UACLhB,YAAY,CAAC,IAAI,CAAC;QACpB;MACF,CAAC,CAAC,OAAOoB,GAAG,EAAE;QACZC,OAAO,CAAClB,KAAK,CAAC,4BAA4B,EAAEiB,GAAG,CAAC;QAChDhB,QAAQ,CAAC,2BAA2B,CAAC;QACrCJ,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,SAAS;QACRE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;;IAED;IACA,MAAMoB,SAAS,GAAGC,UAAU,CAACX,cAAc,EAAE,GAAG,CAAC;IAEjD,OAAO,MAAMY,YAAY,CAACF,SAAS,CAAC;EACtC,CAAC,EAAE,CAACzB,KAAK,CAAC,CAAC;EAEX,OAAO;IAAEE,SAAS;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACxC,CAAC;AAACL,EAAA,CAnDWF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}