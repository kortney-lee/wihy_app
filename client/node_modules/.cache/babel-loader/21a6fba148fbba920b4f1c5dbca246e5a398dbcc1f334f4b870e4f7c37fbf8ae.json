{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// RSS API response types\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'livemint.com': 0.8,\n  'npr.org': 0.9,\n  'reuters.com': 0.9,\n  'cnn.com': 0.8,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'nutrition',\n  MEDICAL: 'medical',\n  PUBLIC_HEALTH: 'health',\n  CLINICAL: 'clinical',\n  PREVENTION: 'prevention',\n  MENTAL_HEALTH: 'mental',\n  GENERAL: 'general',\n  SCIENCE: 'science',\n  TECH: 'tech',\n  POLITICAL: 'political',\n  SPORTS: 'sports',\n  ENTERTAINMENT: 'entertainment',\n  BUSINESS: 'business',\n  NATURE: 'nature'\n};\n\n// Add simple cache to prevent duplicate calls\nlet newsCache = {\n  data: null,\n  timestamp: 0\n};\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Main function to fetch RSS articles\nexport const fetchNewsFeed = async (categoriesOrCount, limit) => {\n  try {\n    var _categories, _data$articles;\n    // Determine if first parameter is count or categories\n    let categories;\n    let count = 100;\n    if (typeof categoriesOrCount === 'number') {\n      // It's a count parameter\n      count = categoriesOrCount;\n    } else if (Array.isArray(categoriesOrCount)) {\n      // It's categories array\n      categories = categoriesOrCount;\n      count = limit || 100;\n    }\n\n    // Check cache first to prevent duplicate calls\n    const now = Date.now();\n    const cacheKey = `${((_categories = categories) === null || _categories === void 0 ? void 0 : _categories.join(',')) || 'all'}_${count}`;\n    if (newsCache.data && newsCache.data.articles && newsCache.data.articles.length >= count && now - newsCache.timestamp < CACHE_DURATION) {\n      console.log('📦 Using cached RSS data');\n      return newsCache.data;\n    }\n    console.log('🔍 Fetching RSS articles...', {\n      categories,\n      count\n    });\n\n    // Only make ONE API call with health_relevant filter\n    const params = {\n      limit: count,\n      flat: true,\n      category: 'health',\n      country: 'US',\n      feed_id: 276,\n      health_relevant: true // NEW: Only get health-relevant content\n    };\n\n    // Override category if specified\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\n      if (mappedCategory) {\n        params.category = mappedCategory;\n      }\n    }\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params,\n      timeout: 10000\n    });\n    const data = response.data;\n    console.log('✅ RSS API response:', {\n      success: data.success,\n      articleCount: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n      count: data.count,\n      filtersApplied: data.filters_applied\n    });\n    if (!data.success) {\n      console.warn('⚠️ RSS API returned success=false, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Enhanced filtering and processing\n    const articles = (data.articles || []).filter(article => {\n      // Basic validation\n      if (!article.title || article.title.trim() === '') return false;\n\n      // Check for valid source\n      if (!article.feed_name || article.feed_name === 'undefined' || article.feed_name.trim() === '') {\n        console.log(`🚫 Filtering article with invalid source: \"${article.title}\"`);\n        return false;\n      }\n\n      // Check for valid description\n      if (!article.description || article.description.trim().length < 20) {\n        console.log(`🚫 Filtering article with poor description: \"${article.title}\"`);\n        return false;\n      }\n\n      // Filter out generic descriptions\n      const genericPhrases = ['read about', 'from undefined', 'click to read', 'no summary available'];\n      const hasGenericDescription = genericPhrases.some(phrase => article.description.toLowerCase().includes(phrase));\n      if (hasGenericDescription) {\n        console.log(`🚫 Filtering article with generic description: \"${article.title}\"`);\n        return false;\n      }\n      return true;\n    }).map((article, index) => {\n      var _article$id;\n      // Enhanced image URL extraction with better validation\n      const extractValidImageUrl = url => {\n        if (!url) return '';\n        const trimmed = url.trim();\n        if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\n        try {\n          // Validate URL format\n          new URL(trimmed);\n\n          // Check if it's a valid image URL\n          const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n          const hasImageExtension = imageExtensions.some(ext => trimmed.toLowerCase().includes(ext));\n\n          // Accept if it has image extension or contains image-related path\n          if (hasImageExtension || trimmed.includes('/image') || trimmed.includes('/photo') || trimmed.includes('/media') || trimmed.includes('unsplash') || trimmed.includes('pexels') || trimmed.includes('pixabay')) {\n            return trimmed;\n          }\n        } catch (urlError) {\n          console.warn(`Invalid image URL: ${trimmed}`);\n          return '';\n        }\n        return '';\n      };\n      const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\n      const imageUrl = extractValidImageUrl(article.media_url);\n\n      // Better summary handling - ensure we have actual content\n      let summary = article.description || article.content_encoded || '';\n\n      // Clean up HTML tags and decode entities\n      summary = summary.replace(/<[^>]*>/g, '').trim();\n      summary = summary.replace(/&[^;]+;/g, ' ').trim();\n      summary = summary.replace(/\\s+/g, ' ').trim(); // Normalize whitespace\n\n      // Validate summary quality\n      if (summary.length < 20) {\n        console.warn(`⚠️ Article has poor summary: \"${article.title}\"`);\n        return null; // This will be filtered out\n      }\n\n      // Don't create generic fallback summaries - use actual content only\n      const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\n\n      // Validate source\n      const source = article.feed_name && article.feed_name !== 'undefined' ? article.feed_name : extractDomain(article.link || '');\n      return {\n        id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || article.guid || `rss_${Date.now()}_${index}`,\n        title: article.title || 'No title',\n        summary: cleanSummary,\n        url: article.link || '#',\n        source: source,\n        domain: article.domain || extractDomain(article.link || ''),\n        category: mapBackendCategory(article.category),\n        publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description),\n        tags: extractTags(article.title, article.description),\n        // RSS enhanced fields - only include valid image URLs\n        thumbnailUrl,\n        imageUrl,\n        mediaType: article.media_type || '',\n        mediaDescription: article.media_description || '',\n        author: article.author || '',\n        fullContent: article.content_encoded || '',\n        wordCount: article.word_count || 0,\n        readingTime: article.reading_time || Math.ceil((article.word_count || 200) / 200),\n        hasMedia: !!(thumbnailUrl || imageUrl),\n        // Only true if we have valid image URLs\n        hasAuthor: !!(article.author && article.author.trim()),\n        contentLength: article.content_length || 0,\n        feedTitle: article.feed_name || '',\n        guid: article.guid || '',\n        commentsUrl: article.comments_url || '',\n        language: article.language || '',\n        rights: article.rights || '',\n        extractedAt: article.extracted_at || '',\n        lastModified: article.last_modified || '',\n        // RSS API specific fields\n        timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\n        isRecent: article.is_recent || false,\n        contentQuality: article.content_quality || 'medium',\n        completeness: article.completeness || 'partial',\n        country: article.country || '',\n        feedName: article.feed_name || '',\n        feedId: article.feed_id || 0\n      };\n    }).filter(article => article !== null); // Remove null entries\n\n    console.log('📰 Processed and filtered RSS articles:', {\n      total: articles.length,\n      withImages: articles.filter(a => a.hasMedia).length,\n      withAuthors: articles.filter(a => a.hasAuthor).length,\n      categories: [...new Set(articles.map(a => a.category))]\n    });\n\n    // If we got no valid articles after filtering, use fallback\n    if (articles.length === 0) {\n      console.warn('⚠️ No valid articles found after filtering, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      const category = article.category;\n      if (!categorizedArticles[category]) {\n        categorizedArticles[category] = [];\n      }\n      categorizedArticles[category].push(article);\n    });\n    const result = {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      filtersApplied: data.filters_applied,\n      message: `Fetched ${articles.length} quality health articles from RSS feeds`\n    };\n\n    // Cache the result\n    newsCache = {\n      data: result,\n      timestamp: now\n    };\n    return result;\n  } catch (error) {\n    console.error('❌ Error fetching RSS feed:', error);\n\n    // If we have cached data, use it even if it's old\n    if (newsCache.data) {\n      console.log('📦 Using stale cached data due to error');\n      return newsCache.data;\n    }\n    const fallback = await getFallbackNews();\n    return {\n      ...fallback,\n      message: `RSS service error (${error.message}). Showing sample news.`\n    };\n  }\n};\n\n// Clear cache function\nexport const clearNewsCache = () => {\n  newsCache = {\n    data: null,\n    timestamp: 0\n  };\n  console.log('🗑️ News cache cleared');\n};\n\n// Get available categories and countries from RSS API\nexport const getRSSFilters = async () => {\n  try {\n    console.log('🏷️ Fetching RSS categories and countries...');\n    const response = await axios.get(`${API_URL}/news/categories-countries`, {\n      timeout: 5000\n    });\n    const data = response.data;\n    console.log('✅ RSS filters response:', data);\n    return {\n      success: data.success,\n      categories: data.categories || [],\n      countries: data.countries || []\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS filters:', error);\n    return {\n      success: false,\n      message: `Failed to fetch filters: ${error.message}`\n    };\n  }\n};\n\n// Trigger RSS polling manually\nexport const triggerRSSPolling = async (force, feedId) => {\n  try {\n    console.log('🔄 Triggering RSS polling...', {\n      force,\n      feedId\n    });\n    const params = {};\n    if (force) params.force = 'true';\n    if (feedId) params.feed_id = feedId.toString();\n    const response = await axios.post(`${API_URL}/news/polling/trigger`, {}, {\n      params,\n      timeout: 30000 // Longer timeout for polling\n    });\n    const data = response.data;\n    console.log('✅ RSS polling response:', data);\n    return {\n      success: data.success,\n      results: data.results,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('❌ Error triggering RSS polling:', error);\n    return {\n      success: false,\n      message: `Failed to trigger polling: ${error.message}`\n    };\n  }\n};\n\n// Map frontend categories to backend RSS categories\nconst mapFrontendToBackendCategory = frontendCategory => {\n  const categoryMap = {\n    'nutrition': 'nutrition',\n    'medical': 'medical',\n    'health': 'health',\n    'clinical': 'medical',\n    'prevention': 'health',\n    'mental': 'mental',\n    'science': 'science',\n    'general': 'health',\n    'tech': 'tech',\n    'business': 'business'\n  };\n  return categoryMap[frontendCategory.toLowerCase()] || 'health'; // Default to 'health' instead of null\n};\n\n// Map backend categories to frontend display categories\nconst mapBackendCategory = backendCategory => {\n  if (!backendCategory) return 'General Health';\n  const categoryMap = {\n    'nutrition': 'Nutrition & Diet',\n    'diet': 'Nutrition & Diet',\n    'medical': 'Medical Research',\n    'health': 'Public Health',\n    'mental': 'Mental Health',\n    'prevention': 'Disease Prevention',\n    'clinical': 'Clinical Studies',\n    'science': 'Medical Research',\n    'tech': 'Medical Technology',\n    'political': 'Health Policy',\n    'sports': 'Fitness & Sports',\n    'entertainment': 'Wellness',\n    'business': 'Health Business',\n    'nature': 'Environmental Health'\n  };\n  const lowerCategory = backendCategory.toLowerCase();\n  for (const [key, value] of Object.entries(categoryMap)) {\n    if (lowerCategory.includes(key)) {\n      return value;\n    }\n  }\n  return 'General Health';\n};\n\n// Extract domain from URL\nconst extractDomain = url => {\n  try {\n    const hostname = new URL(url).hostname;\n    return hostname.replace(/^www\\./, '');\n  } catch (error) {\n    return url.split('/')[2] || '';\n  }\n};\n\n// Calculate relevance score based on title and content\nconst calculateRelevanceScore = (title, content) => {\n  // Simple scoring based on health keywords\n  const healthKeywords = ['health', 'medical', 'medicine', 'wellness', 'disease', 'treatment', 'research', 'study', 'clinical', 'nutrition', 'diet', 'fitness', 'prevention', 'therapy', 'diagnosis', 'doctor', 'patient', 'hospital', 'symptom', 'condition', 'vitamin', 'mineral', 'immune', 'exercise'];\n  let score = 0.5; // Base score\n\n  if (!title) return score;\n  const combinedText = (title + ' ' + (content || '')).toLowerCase();\n\n  // Add points for health keywords\n  healthKeywords.forEach(keyword => {\n    if (combinedText.includes(keyword.toLowerCase())) {\n      score += 0.05;\n    }\n  });\n\n  // Cap at 1.0\n  return Math.min(score, 1.0);\n};\n\n// Extract tags from text\nconst extractTags = (title, content) => {\n  if (!title) return [];\n  const healthTags = ['nutrition', 'diet', 'exercise', 'wellness', 'fitness', 'mental-health', 'research', 'medical', 'prevention', 'treatment', 'study', 'health-tech', 'sleep', 'heart-health', 'diabetes', 'cancer', 'vitamins', 'supplements', 'weight-loss', 'aging', 'longevity', 'stress', 'immune-system', 'covid'];\n  const combinedText = (title + ' ' + (content || '')).toLowerCase();\n  return healthTags.filter(tag => combinedText.includes(tag.replace('-', ' '))).slice(0, 5); // Limit to 5 tags\n};\n\n// Format time ago string\nconst formatTimeAgo = dateString => {\n  if (!dateString) return '';\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    if (isNaN(seconds)) return '';\n    if (seconds < 60) return 'just now';\n    if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`;\n    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;\n    if (seconds < 604800) return `${Math.floor(seconds / 86400)} days ago`;\n    return `${Math.floor(seconds / 604800)} weeks ago`;\n  } catch (error) {\n    return '';\n  }\n};\n\n// Enhanced fallback news with RSS structure\nconst getFallbackNews = async () => {\n  const fallbackArticles = [{\n    id: 'fallback_1',\n    title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\n    summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\n    url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\n    source: \"NIH Health News\",\n    domain: \"nih.gov\",\n    category: \"Nutrition & Diet\",\n    publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Sarah Johnson\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 150,\n    readingTime: 1,\n    contentLength: 750,\n    timeAgo: \"1 day ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_2',\n    title: \"Exercise and Mental Health: The Connection You Need to Know\",\n    summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\n    url: \"https://www.cdc.gov/mental-health/exercise-connection\",\n    source: \"CDC Health Updates\",\n    domain: \"cdc.gov\",\n    category: \"Mental Health\",\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.90,\n    tags: ['mental-health', 'exercise', 'wellness', 'depression'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Michael Chen\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 180,\n    readingTime: 1,\n    contentLength: 900,\n    timeAgo: \"2 days ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_3',\n    title: \"The Importance of Sleep for Immune System Function\",\n    summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\n    url: \"https://www.nih.gov/news-events/sleep-immune-system\",\n    source: \"Sleep Health Research\",\n    domain: \"nih.gov\",\n    category: \"General Health\",\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.85,\n    tags: ['sleep', 'immune-system', 'health', 'wellness'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Lisa Rodriguez\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 200,\n    readingTime: 1,\n    contentLength: 1000,\n    timeAgo: \"3 days ago\",\n    isRecent: false,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }];\n\n  // Categorize fallback articles\n  const categorizedArticles = {};\n  fallbackArticles.forEach(article => {\n    if (!categorizedArticles[article.category]) {\n      categorizedArticles[article.category] = [];\n    }\n    categorizedArticles[article.category].push(article);\n  });\n  return {\n    success: true,\n    articles: fallbackArticles,\n    categories: categorizedArticles,\n    lastUpdated: new Date().toISOString(),\n    count: fallbackArticles.length,\n    message: 'Using sample health news (RSS service unavailable)'\n  };\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","SCIENCE","TECH","POLITICAL","SPORTS","ENTERTAINMENT","BUSINESS","NATURE","newsCache","data","timestamp","CACHE_DURATION","fetchNewsFeed","categoriesOrCount","limit","_categories","_data$articles","categories","count","Array","isArray","now","Date","cacheKey","join","articles","length","console","log","params","flat","category","country","feed_id","health_relevant","mappedCategory","mapFrontendToBackendCategory","response","get","timeout","success","articleCount","filtersApplied","filters_applied","warn","getFallbackNews","filter","article","title","trim","feed_name","description","genericPhrases","hasGenericDescription","some","phrase","toLowerCase","includes","map","index","_article$id","extractValidImageUrl","url","trimmed","URL","imageExtensions","hasImageExtension","ext","urlError","thumbnailUrl","media_thumb_url","imageUrl","media_url","summary","content_encoded","replace","cleanSummary","substring","source","extractDomain","link","id","toString","guid","domain","mapBackendCategory","publishedDate","published_date","extracted_at","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","mediaType","media_type","mediaDescription","media_description","author","fullContent","wordCount","word_count","readingTime","reading_time","Math","ceil","hasMedia","hasAuthor","contentLength","content_length","feedTitle","commentsUrl","comments_url","language","rights","extractedAt","lastModified","last_modified","timeAgo","time_ago","formatTimeAgo","isRecent","is_recent","contentQuality","content_quality","completeness","feedName","feedId","total","withImages","a","withAuthors","Set","categorizedArticles","forEach","push","result","lastUpdated","message","error","fallback","clearNewsCache","getRSSFilters","countries","triggerRSSPolling","force","post","results","frontendCategory","categoryMap","backendCategory","lowerCategory","key","value","Object","entries","hostname","split","content","healthKeywords","score","combinedText","keyword","min","healthTags","tag","slice","dateString","date","seconds","floor","getTime","isNaN","fallbackArticles"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n  // Enhanced RSS fields\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  mediaType?: string;\r\n  mediaDescription?: string;\r\n  author?: string;\r\n  fullContent?: string;\r\n  wordCount?: number;\r\n  readingTime?: number;\r\n  hasMedia: boolean;\r\n  hasAuthor: boolean;\r\n  contentLength?: number;\r\n  feedTitle?: string;\r\n  feedImageUrl?: string;\r\n  feedThumbnailUrl?: string;\r\n  guid?: string;\r\n  commentsUrl?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  extractedAt?: string;\r\n  lastModified?: string;\r\n  // RSS API enhanced fields\r\n  timeAgo?: string;\r\n  isRecent?: boolean;\r\n  contentQuality?: 'low' | 'medium' | 'high';\r\n  completeness?: 'minimal' | 'partial' | 'complete';\r\n  country?: string;\r\n  feedName?: string;\r\n  feedId?: number;\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n  filtersApplied?: {\r\n    category?: string | null;\r\n    country?: string | null;\r\n    feed_id?: string | null;\r\n    limit?: number;\r\n  };\r\n}\r\n\r\n// RSS API response types\r\ninterface RSSArticleResponse {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  published_date: string;\r\n  author?: string;\r\n  category?: string;\r\n  country?: string;\r\n  feed_name: string;\r\n  feed_id: number;\r\n  time_ago: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  is_recent: boolean;\r\n  content_quality: 'low' | 'medium' | 'high';\r\n  completeness: 'minimal' | 'partial' | 'complete';\r\n  domain: string;\r\n  extracted_at: string;\r\n  // Additional possible fields\r\n  media_thumb_url?: string;\r\n  media_url?: string;\r\n  media_type?: string;\r\n  media_description?: string;\r\n  content_encoded?: string;\r\n  guid?: string;\r\n  comments_url?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  last_modified?: string;\r\n  has_media?: boolean;\r\n  has_author?: boolean;\r\n  content_length?: number;\r\n}\r\n\r\ninterface RSSResponse {\r\n  success: boolean;\r\n  articles: RSSArticleResponse[];\r\n  count: number;\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: string | null;\r\n    limit: number;\r\n  };\r\n  message?: string;\r\n}\r\n\r\ninterface RSSHealthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  status: {\r\n    controller_created: boolean;\r\n    database_available: boolean;\r\n    parser_available: boolean;\r\n    polling_available: boolean;\r\n    is_initialized: boolean;\r\n    initialization_error: string | null;\r\n    database_connection?: string;\r\n    timestamp: string;\r\n  };\r\n}\r\n\r\ninterface RSSCategoriesResponse {\r\n  success: boolean;\r\n  categories: string[];\r\n  countries: string[];\r\n}\r\n\r\ninterface RSSPollingResponse {\r\n  success: boolean;\r\n  message: string;\r\n  results: {\r\n    total: number;\r\n    successful: number;\r\n    failed: number;\r\n    articles_fetched: number;\r\n    duration: string;\r\n  };\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'livemint.com': 0.8,\r\n  'npr.org': 0.9,\r\n  'reuters.com': 0.9,\r\n  'cnn.com': 0.8,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'nutrition',\r\n  MEDICAL: 'medical',\r\n  PUBLIC_HEALTH: 'health',\r\n  CLINICAL: 'clinical',\r\n  PREVENTION: 'prevention',\r\n  MENTAL_HEALTH: 'mental',\r\n  GENERAL: 'general',\r\n  SCIENCE: 'science',\r\n  TECH: 'tech',\r\n  POLITICAL: 'political',\r\n  SPORTS: 'sports',\r\n  ENTERTAINMENT: 'entertainment',\r\n  BUSINESS: 'business',\r\n  NATURE: 'nature'\r\n};\r\n\r\n// Add simple cache to prevent duplicate calls\r\nlet newsCache: { data: NewsFeedResponse | null; timestamp: number } = {\r\n  data: null,\r\n  timestamp: 0\r\n};\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\n// Main function to fetch RSS articles\r\nexport const fetchNewsFeed = async (\r\n  categoriesOrCount?: string[] | number, \r\n  limit?: number\r\n): Promise<NewsFeedResponse> => {\r\n  try {\r\n    // Determine if first parameter is count or categories\r\n    let categories: string[] | undefined;\r\n    let count: number = 100;\r\n    \r\n    if (typeof categoriesOrCount === 'number') {\r\n      // It's a count parameter\r\n      count = categoriesOrCount;\r\n    } else if (Array.isArray(categoriesOrCount)) {\r\n      // It's categories array\r\n      categories = categoriesOrCount;\r\n      count = limit || 100;\r\n    }\r\n    \r\n    // Check cache first to prevent duplicate calls\r\n    const now = Date.now();\r\n    const cacheKey = `${categories?.join(',') || 'all'}_${count}`;\r\n    \r\n    if (newsCache.data && \r\n        newsCache.data.articles && \r\n        newsCache.data.articles.length >= (count) &&\r\n        (now - newsCache.timestamp) < CACHE_DURATION) {\r\n      console.log('📦 Using cached RSS data');\r\n      return newsCache.data;\r\n    }\r\n    \r\n    console.log('🔍 Fetching RSS articles...', { categories, count });\r\n    \r\n    // Only make ONE API call with health_relevant filter\r\n    const params: any = {\r\n      limit: count,\r\n      flat: true,\r\n      category: 'health',\r\n      country: 'US',\r\n      feed_id: 276,\r\n      health_relevant: true // NEW: Only get health-relevant content\r\n    };\r\n    \r\n    // Override category if specified\r\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\r\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\r\n      if (mappedCategory) {\r\n        params.category = mappedCategory;\r\n      }\r\n    }\r\n    \r\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\r\n    \r\n    const response = await axios.get<RSSResponse>(`${API_URL}/news/articles`, {\r\n      params,\r\n      timeout: 10000\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    console.log('✅ RSS API response:', {\r\n      success: data.success,\r\n      articleCount: data.articles?.length || 0,\r\n      count: data.count,\r\n      filtersApplied: data.filters_applied\r\n    });\r\n\r\n    if (!data.success) {\r\n      console.warn('⚠️ RSS API returned success=false, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n\r\n    // Enhanced filtering and processing\r\n    const articles: NewsArticle[] = (data.articles || [])\r\n      .filter(article => {\r\n        // Basic validation\r\n        if (!article.title || article.title.trim() === '') return false;\r\n        \r\n        // Check for valid source\r\n        if (!article.feed_name || article.feed_name === 'undefined' || article.feed_name.trim() === '') {\r\n          console.log(`🚫 Filtering article with invalid source: \"${article.title}\"`);\r\n          return false;\r\n        }\r\n        \r\n        // Check for valid description\r\n        if (!article.description || article.description.trim().length < 20) {\r\n          console.log(`🚫 Filtering article with poor description: \"${article.title}\"`);\r\n          return false;\r\n        }\r\n        \r\n        // Filter out generic descriptions\r\n        const genericPhrases = ['read about', 'from undefined', 'click to read', 'no summary available'];\r\n        const hasGenericDescription = genericPhrases.some(phrase => \r\n          article.description.toLowerCase().includes(phrase)\r\n        );\r\n        \r\n        if (hasGenericDescription) {\r\n          console.log(`🚫 Filtering article with generic description: \"${article.title}\"`);\r\n          return false;\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .map((article: RSSArticleResponse, index: number) => {\r\n        \r\n        // Enhanced image URL extraction with better validation\r\n        const extractValidImageUrl = (url: string | undefined): string => {\r\n          if (!url) return '';\r\n          const trimmed = url.trim();\r\n          if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\r\n          \r\n          try {\r\n            // Validate URL format\r\n            new URL(trimmed);\r\n            \r\n            // Check if it's a valid image URL\r\n            const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\r\n            const hasImageExtension = imageExtensions.some(ext => \r\n              trimmed.toLowerCase().includes(ext)\r\n            );\r\n            \r\n            // Accept if it has image extension or contains image-related path\r\n            if (hasImageExtension || \r\n                trimmed.includes('/image') || \r\n                trimmed.includes('/photo') || \r\n                trimmed.includes('/media') ||\r\n                trimmed.includes('unsplash') ||\r\n                trimmed.includes('pexels') ||\r\n                trimmed.includes('pixabay')) {\r\n              return trimmed;\r\n            }\r\n          } catch (urlError) {\r\n            console.warn(`Invalid image URL: ${trimmed}`);\r\n            return '';\r\n          }\r\n          \r\n          return '';\r\n        };\r\n        \r\n        const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\r\n        const imageUrl = extractValidImageUrl(article.media_url);\r\n        \r\n        // Better summary handling - ensure we have actual content\r\n        let summary = article.description || article.content_encoded || '';\r\n        \r\n        // Clean up HTML tags and decode entities\r\n        summary = summary.replace(/<[^>]*>/g, '').trim();\r\n        summary = summary.replace(/&[^;]+;/g, ' ').trim();\r\n        summary = summary.replace(/\\s+/g, ' ').trim(); // Normalize whitespace\r\n        \r\n        // Validate summary quality\r\n        if (summary.length < 20) {\r\n          console.warn(`⚠️ Article has poor summary: \"${article.title}\"`);\r\n          return null; // This will be filtered out\r\n        }\r\n        \r\n        // Don't create generic fallback summaries - use actual content only\r\n        const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\r\n        \r\n        // Validate source\r\n        const source = article.feed_name && article.feed_name !== 'undefined' \r\n          ? article.feed_name \r\n          : extractDomain(article.link || '');\r\n        \r\n        return {\r\n          id: article.id?.toString() || article.guid || `rss_${Date.now()}_${index}`,\r\n          title: article.title || 'No title',\r\n          summary: cleanSummary,\r\n          url: article.link || '#',\r\n          source: source,\r\n          domain: article.domain || extractDomain(article.link || ''),\r\n          category: mapBackendCategory(article.category),\r\n          publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\r\n          relevanceScore: calculateRelevanceScore(article.title, article.description),\r\n          tags: extractTags(article.title, article.description),\r\n          \r\n          // RSS enhanced fields - only include valid image URLs\r\n          thumbnailUrl,\r\n          imageUrl,\r\n          mediaType: article.media_type || '',\r\n          mediaDescription: article.media_description || '',\r\n          author: article.author || '',\r\n          fullContent: article.content_encoded || '',\r\n          wordCount: article.word_count || 0,\r\n          readingTime: article.reading_time || Math.ceil((article.word_count || 200) / 200),\r\n          hasMedia: !!(thumbnailUrl || imageUrl), // Only true if we have valid image URLs\r\n          hasAuthor: !!(article.author && article.author.trim()),\r\n          contentLength: article.content_length || 0,\r\n          feedTitle: article.feed_name || '',\r\n          guid: article.guid || '',\r\n          commentsUrl: article.comments_url || '',\r\n          language: article.language || '',\r\n          rights: article.rights || '',\r\n          extractedAt: article.extracted_at || '',\r\n          lastModified: article.last_modified || '',\r\n          \r\n          // RSS API specific fields\r\n          timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\r\n          isRecent: article.is_recent || false,\r\n          contentQuality: article.content_quality || 'medium',\r\n          completeness: article.completeness || 'partial',\r\n          country: article.country || '',\r\n          feedName: article.feed_name || '',\r\n          feedId: article.feed_id || 0\r\n        };\r\n      })\r\n      .filter(article => article !== null) as NewsArticle[]; // Remove null entries\r\n    \r\n    console.log('📰 Processed and filtered RSS articles:', {\r\n      total: articles.length,\r\n      withImages: articles.filter(a => a.hasMedia).length,\r\n      withAuthors: articles.filter(a => a.hasAuthor).length,\r\n      categories: [...new Set(articles.map(a => a.category))]\r\n    });\r\n    \r\n    // If we got no valid articles after filtering, use fallback\r\n    if (articles.length === 0) {\r\n      console.warn('⚠️ No valid articles found after filtering, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      const category = article.category;\r\n      if (!categorizedArticles[category]) {\r\n        categorizedArticles[category] = [];\r\n      }\r\n      categorizedArticles[category].push(article);\r\n    });\r\n    \r\n    const result = {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      filtersApplied: data.filters_applied,\r\n      message: `Fetched ${articles.length} quality health articles from RSS feeds`\r\n    };\r\n    \r\n    // Cache the result\r\n    newsCache = {\r\n      data: result,\r\n      timestamp: now\r\n    };\r\n    \r\n    return result;\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS feed:', error);\r\n    \r\n    // If we have cached data, use it even if it's old\r\n    if (newsCache.data) {\r\n      console.log('📦 Using stale cached data due to error');\r\n      return newsCache.data;\r\n    }\r\n    \r\n    const fallback = await getFallbackNews();\r\n    return {\r\n      ...fallback,\r\n      message: `RSS service error (${error.message}). Showing sample news.`\r\n    };\r\n  }\r\n};\r\n\r\n// Clear cache function\r\nexport const clearNewsCache = () => {\r\n  newsCache = { data: null, timestamp: 0 };\r\n  console.log('🗑️ News cache cleared');\r\n};\r\n\r\n// Get available categories and countries from RSS API\r\nexport const getRSSFilters = async (): Promise<{\r\n  success: boolean;\r\n  categories?: string[];\r\n  countries?: string[];\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🏷️ Fetching RSS categories and countries...');\r\n    \r\n    const response = await axios.get<RSSCategoriesResponse>(`${API_URL}/news/categories-countries`, {\r\n      timeout: 5000\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS filters response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      categories: data.categories || [],\r\n      countries: data.countries || []\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS filters:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to fetch filters: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Trigger RSS polling manually\r\nexport const triggerRSSPolling = async (force?: boolean, feedId?: number): Promise<{\r\n  success: boolean;\r\n  results?: any;\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🔄 Triggering RSS polling...', { force, feedId });\r\n    \r\n    const params: any = {};\r\n    if (force) params.force = 'true';\r\n    if (feedId) params.feed_id = feedId.toString();\r\n    \r\n    const response = await axios.post<RSSPollingResponse>(`${API_URL}/news/polling/trigger`, {}, {\r\n      params,\r\n      timeout: 30000 // Longer timeout for polling\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS polling response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      results: data.results,\r\n      message: data.message\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error triggering RSS polling:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to trigger polling: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Map frontend categories to backend RSS categories\r\nconst mapFrontendToBackendCategory = (frontendCategory: string): string | null => {\r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'nutrition',\r\n    'medical': 'medical',\r\n    'health': 'health',\r\n    'clinical': 'medical',\r\n    'prevention': 'health',\r\n    'mental': 'mental',\r\n    'science': 'science',\r\n    'general': 'health',\r\n    'tech': 'tech',\r\n    'business': 'business'\r\n  };\r\n  \r\n  return categoryMap[frontendCategory.toLowerCase()] || 'health'; // Default to 'health' instead of null\r\n};\r\n\r\n// Map backend categories to frontend display categories\r\nconst mapBackendCategory = (backendCategory: string | undefined): string => {\r\n  if (!backendCategory) return 'General Health';\r\n  \r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'Nutrition & Diet',\r\n    'diet': 'Nutrition & Diet',\r\n    'medical': 'Medical Research',\r\n    'health': 'Public Health',\r\n    'mental': 'Mental Health',\r\n    'prevention': 'Disease Prevention',\r\n    'clinical': 'Clinical Studies',\r\n    'science': 'Medical Research',\r\n    'tech': 'Medical Technology',\r\n    'political': 'Health Policy',\r\n    'sports': 'Fitness & Sports',\r\n    'entertainment': 'Wellness',\r\n    'business': 'Health Business',\r\n    'nature': 'Environmental Health'\r\n  };\r\n  \r\n  const lowerCategory = backendCategory.toLowerCase();\r\n  for (const [key, value] of Object.entries(categoryMap)) {\r\n    if (lowerCategory.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return 'General Health';\r\n};\r\n\r\n// Extract domain from URL\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    const hostname = new URL(url).hostname;\r\n    return hostname.replace(/^www\\./, '');\r\n  } catch (error) {\r\n    return url.split('/')[2] || '';\r\n  }\r\n};\r\n\r\n// Calculate relevance score based on title and content\r\nconst calculateRelevanceScore = (title: string, content?: string): number => {\r\n  // Simple scoring based on health keywords\r\n  const healthKeywords = [\r\n    'health', 'medical', 'medicine', 'wellness', 'disease', 'treatment',\r\n    'research', 'study', 'clinical', 'nutrition', 'diet', 'fitness',\r\n    'prevention', 'therapy', 'diagnosis', 'doctor', 'patient', 'hospital',\r\n    'symptom', 'condition', 'vitamin', 'mineral', 'immune', 'exercise'\r\n  ];\r\n  \r\n  let score = 0.5; // Base score\r\n  \r\n  if (!title) return score;\r\n  \r\n  const combinedText = (title + ' ' + (content || '')).toLowerCase();\r\n  \r\n  // Add points for health keywords\r\n  healthKeywords.forEach(keyword => {\r\n    if (combinedText.includes(keyword.toLowerCase())) {\r\n      score += 0.05;\r\n    }\r\n  });\r\n  \r\n  // Cap at 1.0\r\n  return Math.min(score, 1.0);\r\n};\r\n\r\n// Extract tags from text\r\nconst extractTags = (title: string, content?: string): string[] => {\r\n  if (!title) return [];\r\n  \r\n  const healthTags = [\r\n    'nutrition', 'diet', 'exercise', 'wellness', 'fitness', 'mental-health',\r\n    'research', 'medical', 'prevention', 'treatment', 'study', 'health-tech',\r\n    'sleep', 'heart-health', 'diabetes', 'cancer', 'vitamins', 'supplements',\r\n    'weight-loss', 'aging', 'longevity', 'stress', 'immune-system', 'covid'\r\n  ];\r\n  \r\n  const combinedText = (title + ' ' + (content || '')).toLowerCase();\r\n  \r\n  return healthTags.filter(tag => combinedText.includes(tag.replace('-', ' ')))\r\n    .slice(0, 5); // Limit to 5 tags\r\n};\r\n\r\n// Format time ago string\r\nconst formatTimeAgo = (dateString: string): string => {\r\n  if (!dateString) return '';\r\n  \r\n  try {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n    \r\n    if (isNaN(seconds)) return '';\r\n    \r\n    if (seconds < 60) return 'just now';\r\n    if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`;\r\n    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;\r\n    if (seconds < 604800) return `${Math.floor(seconds / 86400)} days ago`;\r\n    \r\n    return `${Math.floor(seconds / 604800)} weeks ago`;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n};\r\n\r\n// Enhanced fallback news with RSS structure\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  const fallbackArticles: NewsArticle[] = [\r\n    {\r\n      id: 'fallback_1',\r\n      title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\r\n      summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\r\n      url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\r\n      source: \"NIH Health News\",\r\n      domain: \"nih.gov\",\r\n      category: \"Nutrition & Diet\",\r\n      publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Sarah Johnson\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 150,\r\n      readingTime: 1,\r\n      contentLength: 750,\r\n      timeAgo: \"1 day ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_2',\r\n      title: \"Exercise and Mental Health: The Connection You Need to Know\",\r\n      summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\r\n      url: \"https://www.cdc.gov/mental-health/exercise-connection\",\r\n      source: \"CDC Health Updates\",\r\n      domain: \"cdc.gov\",\r\n      category: \"Mental Health\",\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.90,\r\n      tags: ['mental-health', 'exercise', 'wellness', 'depression'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Michael Chen\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 180,\r\n      readingTime: 1,\r\n      contentLength: 900,\r\n      timeAgo: \"2 days ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_3',\r\n      title: \"The Importance of Sleep for Immune System Function\",\r\n      summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\r\n      url: \"https://www.nih.gov/news-events/sleep-immune-system\",\r\n      source: \"Sleep Health Research\",\r\n      domain: \"nih.gov\",\r\n      category: \"General Health\",\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.85,\r\n      tags: ['sleep', 'immune-system', 'health', 'wellness'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Lisa Rodriguez\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 200,\r\n      readingTime: 1,\r\n      contentLength: 1000,\r\n      timeAgo: \"3 days ago\",\r\n      isRecent: false,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    }\r\n  ];\r\n\r\n  // Categorize fallback articles\r\n  const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n  fallbackArticles.forEach(article => {\r\n    if (!categorizedArticles[article.category]) {\r\n      categorizedArticles[article.category] = [];\r\n    }\r\n    categorizedArticles[article.category].push(article);\r\n  });\r\n\r\n  return {\r\n    success: true,\r\n    articles: fallbackArticles,\r\n    categories: categorizedArticles,\r\n    lastUpdated: new Date().toISOString(),\r\n    count: fallbackArticles.length,\r\n    message: 'Using sample health news (RSS service unavailable)'\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}