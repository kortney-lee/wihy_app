{"ast":null,"code":"var _jsxFileName = \"C:\\\\repo\\\\wihy_ui\\\\client\\\\src\\\\components\\\\charts\\\\NovaChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n// Extract nova/processing data from unified API response\nconst extractNovaData = apiResponse => {\n  console.log('=== EXTRACTING NOVA DATA FROM NEW API ===');\n  console.log('API Response:', apiResponse);\n\n  // Handle unified API response\n  if (apiResponse && apiResponse.success && apiResponse.data) {\n    var _apiResponse$data$cha;\n    console.log('Processing unified API nova data');\n\n    // Use charts_data if available for direct rendering\n    if ((_apiResponse$data$cha = apiResponse.data.charts_data) !== null && _apiResponse$data$cha !== void 0 && _apiResponse$data$cha.nova_chart) {\n      const chartData = apiResponse.data.charts_data.nova_chart;\n      console.log('Using charts_data for nova chart:', chartData);\n      return {\n        type: 'chart_data',\n        novaScore: chartData.nova_score,\n        processedLevel: chartData.description,\n        chart_type: chartData.chart_type\n      };\n    }\n\n    // Use nutrition_data from the API response\n    if (apiResponse.data.nutrition_data) {\n      const nutrition = apiResponse.data.nutrition_data;\n      const extractedData = {\n        type: 'nutrition_facts',\n        novaScore: nutrition.nova_score || 1,\n        processedLevel: nutrition.processing_level || 'Unknown'\n      };\n      console.log('=== EXTRACTED NOVA DATA FROM NEW API ===');\n      console.log('Final extracted data:', extractedData);\n      return extractedData;\n    }\n  }\n  console.log('No nova data available in API response');\n  return null;\n};\nconst NovaChart = ({\n  apiResponse,\n  query\n}) => {\n  // Extract nova data using new unified approach\n  const novaData = extractNovaData(apiResponse);\n\n  // Only render if we have nova data\n  if (!novaData) {\n    return null;\n  }\n  const {\n    novaScore,\n    processedLevel\n  } = novaData;\n\n  // NOVA classification colors\n  const novaColors = {\n    1: '#10B981',\n    // Green - Good\n    2: '#F59E0B',\n    // Yellow - Okay\n    3: '#F97316',\n    // Orange - Caution\n    4: '#EF4444' // Red - Avoid\n  };\n\n  // Create data for the current NOVA score (100% fill)\n  const data = {\n    datasets: [{\n      data: [100, 0],\n      // 100% for the current score, 0% for remaining\n      backgroundColor: [novaColors[novaScore], '#E5E7EB' // Light gray for empty portion\n      ],\n      borderWidth: 0,\n      cutout: '70%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '2rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: novaScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.875rem',\n            color: '#6B7280'\n          },\n          children: \"NOVA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '16px',\n            height: '16px',\n            backgroundColor: novaColors[novaScore],\n            borderRadius: '3px',\n            marginRight: '0.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '600',\n            color: '#374151',\n            fontSize: '1rem'\n          },\n          children: [\"Group \", novaScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '0.875rem',\n          color: '#374151',\n          fontStyle: 'italic'\n        },\n        children: processedLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_c = NovaChart;\nexport default NovaChart;\nvar _c;\n$RefreshReg$(_c, \"NovaChart\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","extractNovaData","apiResponse","console","log","success","data","_apiResponse$data$cha","charts_data","nova_chart","chartData","type","novaScore","nova_score","processedLevel","description","chart_type","nutrition_data","nutrition","extractedData","processing_level","NovaChart","query","novaData","novaColors","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","style","textAlign","children","position","height","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","borderRadius","marginRight","fontStyle","_c","$RefreshReg$"],"sources":["C:/repo/wihy_ui/client/src/components/charts/NovaChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NovaChartProps {\r\n  apiResponse?: UnifiedResponse | any;\r\n  query?: string;\r\n}\r\n\r\n// Extract nova/processing data from unified API response\r\nconst extractNovaData = (apiResponse?: UnifiedResponse | any) => {\r\n  console.log('=== EXTRACTING NOVA DATA FROM NEW API ===');\r\n  console.log('API Response:', apiResponse);\r\n  \r\n  // Handle unified API response\r\n  if (apiResponse && apiResponse.success && apiResponse.data) {\r\n    console.log('Processing unified API nova data');\r\n    \r\n    // Use charts_data if available for direct rendering\r\n    if (apiResponse.data.charts_data?.nova_chart) {\r\n      const chartData = apiResponse.data.charts_data.nova_chart;\r\n      console.log('Using charts_data for nova chart:', chartData);\r\n      return {\r\n        type: 'chart_data',\r\n        novaScore: chartData.nova_score,\r\n        processedLevel: chartData.description,\r\n        chart_type: chartData.chart_type\r\n      };\r\n    }\r\n    \r\n    // Use nutrition_data from the API response\r\n    if (apiResponse.data.nutrition_data) {\r\n      const nutrition = apiResponse.data.nutrition_data;\r\n      const extractedData = {\r\n        type: 'nutrition_facts',\r\n        novaScore: nutrition.nova_score || 1,\r\n        processedLevel: nutrition.processing_level || 'Unknown'\r\n      };\r\n      \r\n      console.log('=== EXTRACTED NOVA DATA FROM NEW API ===');\r\n      console.log('Final extracted data:', extractedData);\r\n      return extractedData;\r\n    }\r\n  }\r\n  \r\n  console.log('No nova data available in API response');\r\n  return null;\r\n};\r\n\r\nconst NovaChart: React.FC<NovaChartProps> = ({ apiResponse, query }) => {\r\n  // Extract nova data using new unified approach\r\n  const novaData = extractNovaData(apiResponse);\r\n\r\n  // Only render if we have nova data\r\n  if (!novaData) {\r\n    return null;\r\n  }\r\n\r\n  const { novaScore, processedLevel } = novaData;\r\n\r\n  // NOVA classification colors\r\n  const novaColors = {\r\n    1: '#10B981', // Green - Good\r\n    2: '#F59E0B', // Yellow - Okay\r\n    3: '#F97316', // Orange - Caution\r\n    4: '#EF4444'  // Red - Avoid\r\n  };\r\n\r\n  // Create data for the current NOVA score (100% fill)\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [100, 0], // 100% for the current score, 0% for remaining\r\n        backgroundColor: [\r\n          novaColors[novaScore as keyof typeof novaColors],\r\n          '#E5E7EB' // Light gray for empty portion\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        enabled: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {novaScore}\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            NOVA\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <div\r\n            style={{\r\n              width: '16px',\r\n              height: '16px',\r\n              backgroundColor: novaColors[novaScore as keyof typeof novaColors],\r\n              borderRadius: '3px',\r\n              marginRight: '0.5rem',\r\n            }}\r\n          />\r\n          <span style={{ \r\n            fontWeight: '600', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Group {novaScore}\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          fontSize: '0.875rem',\r\n          color: '#374151',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          {processedLevel}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovaChart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,KAAK,IAAIC,OAAO,EAChBC,UAAU,EACVC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG3CN,OAAO,CAACO,QAAQ,CAACN,UAAU,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAO7C;AACA,MAAMK,eAAe,GAAIC,WAAmC,IAAK;EAC/DC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EACxDD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,WAAW,CAAC;;EAEzC;EACA,IAAIA,WAAW,IAAIA,WAAW,CAACG,OAAO,IAAIH,WAAW,CAACI,IAAI,EAAE;IAAA,IAAAC,qBAAA;IAC1DJ,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,KAAAG,qBAAA,GAAIL,WAAW,CAACI,IAAI,CAACE,WAAW,cAAAD,qBAAA,eAA5BA,qBAAA,CAA8BE,UAAU,EAAE;MAC5C,MAAMC,SAAS,GAAGR,WAAW,CAACI,IAAI,CAACE,WAAW,CAACC,UAAU;MACzDN,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEM,SAAS,CAAC;MAC3D,OAAO;QACLC,IAAI,EAAE,YAAY;QAClBC,SAAS,EAAEF,SAAS,CAACG,UAAU;QAC/BC,cAAc,EAAEJ,SAAS,CAACK,WAAW;QACrCC,UAAU,EAAEN,SAAS,CAACM;MACxB,CAAC;IACH;;IAEA;IACA,IAAId,WAAW,CAACI,IAAI,CAACW,cAAc,EAAE;MACnC,MAAMC,SAAS,GAAGhB,WAAW,CAACI,IAAI,CAACW,cAAc;MACjD,MAAME,aAAa,GAAG;QACpBR,IAAI,EAAE,iBAAiB;QACvBC,SAAS,EAAEM,SAAS,CAACL,UAAU,IAAI,CAAC;QACpCC,cAAc,EAAEI,SAAS,CAACE,gBAAgB,IAAI;MAChD,CAAC;MAEDjB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEe,aAAa,CAAC;MACnD,OAAOA,aAAa;IACtB;EACF;EAEAhB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACrD,OAAO,IAAI;AACb,CAAC;AAED,MAAMiB,SAAmC,GAAGA,CAAC;EAAEnB,WAAW;EAAEoB;AAAM,CAAC,KAAK;EACtE;EACA,MAAMC,QAAQ,GAAGtB,eAAe,CAACC,WAAW,CAAC;;EAE7C;EACA,IAAI,CAACqB,QAAQ,EAAE;IACb,OAAO,IAAI;EACb;EAEA,MAAM;IAAEX,SAAS;IAAEE;EAAe,CAAC,GAAGS,QAAQ;;EAE9C;EACA,MAAMC,UAAU,GAAG;IACjB,CAAC,EAAE,SAAS;IAAE;IACd,CAAC,EAAE,SAAS;IAAE;IACd,CAAC,EAAE,SAAS;IAAE;IACd,CAAC,EAAE,SAAS,CAAE;EAChB,CAAC;;EAED;EACA,MAAMlB,IAAI,GAAG;IACXmB,QAAQ,EAAE,CACR;MACEnB,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;MAAE;MAChBoB,eAAe,EAAE,CACfF,UAAU,CAACZ,SAAS,CAA4B,EAChD,SAAS,CAAC;MAAA,CACX;MACDe,WAAW,EAAE,CAAC;MACdC,MAAM,EAAE;IACV,CAAC;EAEL,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,OAAO,EAAE;MACX,CAAC;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;MACX;IACF;EACF,CAAC;EAED,oBACErC,OAAA;IAAKsC,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAClCxC,OAAA;MAAKsC,KAAK,EAAE;QAAEG,QAAQ,EAAE,UAAU;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAJ,QAAA,gBACtFxC,OAAA,CAACF,QAAQ;QAACS,IAAI,EAAEA,IAAK;QAACuB,OAAO,EAAEA;MAAQ;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1ChD,OAAA;QACEsC,KAAK,EAAE;UACLG,QAAQ,EAAE,UAAU;UACpBQ,GAAG,EAAE,KAAK;UACVC,IAAI,EAAE,KAAK;UACXC,SAAS,EAAE,uBAAuB;UAClCZ,SAAS,EAAE;QACb,CAAE;QAAAC,QAAA,gBAEFxC,OAAA;UAAKsC,KAAK,EAAE;YAAEc,QAAQ,EAAE,MAAM;YAAEC,UAAU,EAAE,MAAM;YAAEC,KAAK,EAAE;UAAU,CAAE;UAAAd,QAAA,EACpE3B;QAAS;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,eACNhD,OAAA;UAAKsC,KAAK,EAAE;YAAEc,QAAQ,EAAE,UAAU;YAAEE,KAAK,EAAE;UAAU,CAAE;UAAAd,QAAA,EAAC;QAExD;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENhD,OAAA;MAAKsC,KAAK,EAAE;QAAEiB,SAAS,EAAE;MAAO,CAAE;MAAAf,QAAA,gBAChCxC,OAAA;QAAKsC,KAAK,EAAE;UACVH,OAAO,EAAE,MAAM;UACfqB,UAAU,EAAE,QAAQ;UACpBC,cAAc,EAAE,QAAQ;UACxBC,YAAY,EAAE;QAChB,CAAE;QAAAlB,QAAA,gBACAxC,OAAA;UACEsC,KAAK,EAAE;YACLK,KAAK,EAAE,MAAM;YACbD,MAAM,EAAE,MAAM;YACdf,eAAe,EAAEF,UAAU,CAACZ,SAAS,CAA4B;YACjE8C,YAAY,EAAE,KAAK;YACnBC,WAAW,EAAE;UACf;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACFhD,OAAA;UAAMsC,KAAK,EAAE;YACXe,UAAU,EAAE,KAAK;YACjBC,KAAK,EAAE,SAAS;YAChBF,QAAQ,EAAE;UACZ,CAAE;UAAAZ,QAAA,GAAC,QACK,EAAC3B,SAAS;QAAA;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAENhD,OAAA;QAAKsC,KAAK,EAAE;UACVc,QAAQ,EAAE,UAAU;UACpBE,KAAK,EAAE,SAAS;UAChBO,SAAS,EAAE;QACb,CAAE;QAAArB,QAAA,EACCzB;MAAc;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACc,EAAA,GAxGIxC,SAAmC;AA0GzC,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}