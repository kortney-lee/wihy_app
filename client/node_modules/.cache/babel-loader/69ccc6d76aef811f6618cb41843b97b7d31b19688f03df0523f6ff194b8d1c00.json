{"ast":null,"code":"var _jsxFileName = \"C:\\\\repo\\\\wihy_ui\\\\client\\\\src\\\\SearchResults.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { searchCache } from './services/searchCache';\nimport ImageUploadModal from './components/ImageUploadModal';\nimport './styles/VHealthSearch.css';\nimport Header from './components/shared/components/Header';\nimport Spinner from './components/Spinner';\n\n/* Define default topics and resources */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultRelatedTopics = [\"Nutrition and Diet Guidelines\", \"Exercise and Physical Activity\", \"Mental Health and Wellness\", \"Preventive Care and Screenings\", \"Chronic Disease Management\", \"Healthy Lifestyle Choices\"];\nconst defaultResources = [{\n  text: \"Nutrition ED - Learn More\",\n  url: \"https://vowels.com\"\n}, {\n  text: \"Nutrition 101\",\n  url: \"https://members.vowels.com\"\n}, {\n  text: \"The World Counts\",\n  url: \"https://www.theworldcounts.com/\"\n}];\n\n// Define the dummy data for \"test\" queries\nconst dummyTestData = {\n  query: \"test\",\n  healthInfo: `I'm sorry, but your query \"test\" is too vague. Could you please provide more details or specify the type of test you are interested in? It could be a medical test, a psychological test, or a physical fitness test, among others. Please provide more context so I can give you a more accurate and helpful response.\n\n**Recommendations:**\n• Consult healthcare professionals for personalized medical advice\n• Verify information with your doctor or medical provider\n• Follow evidence-based medical guidelines\n• Seek regular medical check-ups and screenings\n\n**Sources:** NIH Guidelines, CDC & WHO Publications, PubMed and peer-reviewed studies, Academic Medical Journals, Evidence-Based Clinical Reviews\n\nThis information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.`,\n  relatedTopics: [\"Nutrition and Diet Guidelines\", \"Exercise and Physical Activity\", \"Mental Health and Wellness\", \"Preventive Care and Screenings\", \"Chronic Disease Management\", \"Healthy Lifestyle Choices\"],\n  resources: [{\n    text: \"🩺 mHealth - Mobile Health Solutions\",\n    url: \"#\"\n  }, {\n    text: \"🏥 CDC - Health Guidelines\",\n    url: \"#\"\n  }, {\n    text: \"🌍 WHO - Global Health Information\",\n    url: \"#\"\n  }]\n};\n\n// Update the SearchResultsProps interface to include the new properties\n\n// Add this function before the SearchResults component\nconst convertLinksToClickable = text => {\n  // Handle non-string inputs\n  if (!text) return null;\n\n  // If text is not a string, convert it to string first\n  if (typeof text !== 'string') {\n    // If it's an object, try to stringify it or extract meaningful content\n    if (typeof text === 'object') {\n      // If it has specific properties we can use\n      if (text.content) {\n        text = text.content;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.details) {\n        text = text.details;\n      } else {\n        // Last resort - stringify the object\n        text = JSON.stringify(text);\n      }\n    } else {\n      // Convert other types to string\n      text = String(text);\n    }\n  }\n\n  // Now we're sure text is a string, proceed with original logic\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  const parts = text.split(urlRegex);\n  return parts.map((part, index) => {\n    if (part.match(urlRegex)) {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: part,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        style: {\n          color: '#2563eb',\n          textDecoration: 'underline'\n        },\n        children: part\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this);\n    }\n    return part;\n  });\n};\nconst SearchResults = ({\n  query,\n  results,\n  onBackToSearch,\n  onNewSearch,\n  isLoading = false,\n  dataSource,\n  citations\n}) => {\n  _s();\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [lastProcessedQuery, setLastProcessedQuery] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n\n  // Check if we have valid results to display\n  const hasValidResults = results && results.trim() !== '' && !isLoading;\n\n  // Cache results when they change\n  useEffect(() => {\n    if (query && results && !isLoading) {\n      searchCache.setCachedResult(query, results, window.location.href);\n    }\n  }, [query, results, isLoading]);\n\n  // Update last processed query when props change\n  useEffect(() => {\n    if (query && query !== lastProcessedQuery) {\n      setLastProcessedQuery(query);\n    }\n  }, [query]);\n\n  // Header search handler\n  const handleHeaderSearch = async newQuery => {\n    if (newQuery.trim() && newQuery !== query) {\n      setIsSearching(true);\n      try {\n        await onNewSearch(newQuery);\n      } catch (error) {\n        console.error('Header search error:', error);\n      } finally {\n        setIsSearching(false);\n      }\n    }\n  };\n  const handleLogoClick = () => {\n    onBackToSearch();\n  };\n  const handleNewSearch = newQuery => {\n    if (newQuery !== lastProcessedQuery && newQuery !== query && !isLoading) {\n      setLastProcessedQuery(newQuery);\n      onNewSearch(newQuery);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: '100vh',\n      backgroundColor: '#ffffff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      searchQuery: query,\n      onSearchSubmit: handleHeaderSearch,\n      onVoiceInput: () => {/* voice logic */},\n      onImageUpload: () => setIsUploadModalOpen(true),\n      onLogoClick: handleLogoClick,\n      isListening: false,\n      variant: \"results\",\n      showLogin: true,\n      className: \"search-results-header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), (isLoading || isSearching) && /*#__PURE__*/_jsxDEV(Spinner, {\n      overlay: true,\n      title: \"Analyzing with AI...\",\n      subtitle: \"Processing your health query...\",\n      disableEsc: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '1200px',\n        margin: '0 auto',\n        padding: '20px 20px 60px 20px',\n        minHeight: 'calc(100vh - 120px)'\n      },\n      children: hasValidResults ? /*#__PURE__*/_jsxDEV(SearchResultsContent, {\n        query: query,\n        results: results,\n        dataSource: dataSource,\n        citations: citations,\n        onNewSearch: handleNewSearch,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this) : !isLoading && !isSearching && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '60px 20px',\n          color: '#6b7280'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '18px',\n            margin: 0\n          },\n          children: \"No results to display. Try searching for something else.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageUploadModal, {\n      isOpen: isUploadModalOpen,\n      onClose: () => setIsUploadModalOpen(false),\n      onAnalysisComplete: foodName => {\n        if (foodName && foodName !== lastProcessedQuery && foodName !== query) {\n          setLastProcessedQuery(foodName);\n          onNewSearch(foodName);\n        }\n      },\n      title: \"Upload Image\",\n      subtitle: \"Upload images for analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchResults, \"6YN0K0uY4kHxmkDSLIK086zwxgo=\");\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["React","useState","useEffect","searchCache","ImageUploadModal","Header","Spinner","jsxDEV","_jsxDEV","defaultRelatedTopics","defaultResources","text","url","dummyTestData","query","healthInfo","relatedTopics","resources","convertLinksToClickable","content","message","details","JSON","stringify","String","urlRegex","parts","split","map","part","index","match","href","target","rel","style","color","textDecoration","children","fileName","_jsxFileName","lineNumber","columnNumber","SearchResults","results","onBackToSearch","onNewSearch","isLoading","dataSource","citations","_s","isUploadModalOpen","setIsUploadModalOpen","lastProcessedQuery","setLastProcessedQuery","isSearching","setIsSearching","hasValidResults","trim","setCachedResult","window","location","handleHeaderSearch","newQuery","error","console","handleLogoClick","handleNewSearch","minHeight","backgroundColor","searchQuery","onSearchSubmit","onVoiceInput","onImageUpload","onLogoClick","isListening","variant","showLogin","className","overlay","title","subtitle","disableEsc","maxWidth","margin","padding","SearchResultsContent","textAlign","fontSize","isOpen","onClose","onAnalysisComplete","foodName","_c","$RefreshReg$"],"sources":["C:/repo/wihy_ui/client/src/SearchResults.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { searchCache } from './services/searchCache';\r\nimport { photoStorageService } from './services/photoStorageService';\r\nimport { foodAnalysisService } from './components/foodAnalysisService';\r\nimport ImageUploadModal from './components/ImageUploadModal';\r\nimport MultiAuthLogin from './components/shared/components/MultiAuthLogin';\r\nimport ResultQualityPie from './components/ResultQualityPie';\r\nimport NutritionChart from './components/NutritionChart';\r\nimport NovaChart from './components/NovaChart';\r\nimport './styles/VHealthSearch.css';\r\nimport Header from './components/shared/components/Header';\r\nimport Spinner from './components/Spinner';\r\n\r\n/* Define default topics and resources */\r\nconst defaultRelatedTopics = [\r\n  \"Nutrition and Diet Guidelines\",\r\n  \"Exercise and Physical Activity\", \r\n  \"Mental Health and Wellness\",\r\n  \"Preventive Care and Screenings\",\r\n  \"Chronic Disease Management\",\r\n  \"Healthy Lifestyle Choices\"\r\n];\r\n\r\nconst defaultResources = [\r\n  { text: \"Nutrition ED - Learn More\", url: \"https://vowels.com\" },\r\n  { text: \"Nutrition 101\", url: \"https://members.vowels.com\" },\r\n  { text: \"The World Counts\", url: \"https://www.theworldcounts.com/\" }\r\n];\r\n\r\n// Define the dummy data for \"test\" queries\r\nconst dummyTestData = {\r\n  query: \"test\",\r\n  healthInfo: `I'm sorry, but your query \"test\" is too vague. Could you please provide more details or specify the type of test you are interested in? It could be a medical test, a psychological test, or a physical fitness test, among others. Please provide more context so I can give you a more accurate and helpful response.\r\n\r\n**Recommendations:**\r\n• Consult healthcare professionals for personalized medical advice\r\n• Verify information with your doctor or medical provider\r\n• Follow evidence-based medical guidelines\r\n• Seek regular medical check-ups and screenings\r\n\r\n**Sources:** NIH Guidelines, CDC & WHO Publications, PubMed and peer-reviewed studies, Academic Medical Journals, Evidence-Based Clinical Reviews\r\n\r\nThis information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.`,\r\n  relatedTopics: [\r\n    \"Nutrition and Diet Guidelines\",\r\n    \"Exercise and Physical Activity\", \r\n    \"Mental Health and Wellness\",\r\n    \"Preventive Care and Screenings\",\r\n    \"Chronic Disease Management\",\r\n    \"Healthy Lifestyle Choices\"\r\n  ],\r\n  resources: [\r\n    { text: \"🩺 mHealth - Mobile Health Solutions\", url: \"#\" },\r\n    { text: \"🏥 CDC - Health Guidelines\", url: \"#\" },\r\n    { text: \"🌍 WHO - Global Health Information\", url: \"#\" }\r\n  ]\r\n};\r\n\r\n// Update the SearchResultsProps interface to include the new properties\r\ninterface SearchResultsProps {\r\n  query: string;\r\n  results: string;\r\n  onBackToSearch: () => void;\r\n  onNewSearch: (query: string) => void;\r\n  isLoading: boolean;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n  citations?: string[];\r\n  recommendations?: string[];\r\n  disclaimer?: string;\r\n}\r\n\r\n// Add this function before the SearchResults component\r\nconst convertLinksToClickable = (text: any): React.ReactNode => {\r\n  // Handle non-string inputs\r\n  if (!text) return null;\r\n  \r\n  // If text is not a string, convert it to string first\r\n  if (typeof text !== 'string') {\r\n    // If it's an object, try to stringify it or extract meaningful content\r\n    if (typeof text === 'object') {\r\n      // If it has specific properties we can use\r\n      if (text.content) {\r\n        text = text.content;\r\n      } else if (text.message) {\r\n        text = text.message;\r\n      } else if (text.details) {\r\n        text = text.details;\r\n      } else {\r\n        // Last resort - stringify the object\r\n        text = JSON.stringify(text);\r\n      }\r\n    } else {\r\n      // Convert other types to string\r\n      text = String(text);\r\n    }\r\n  }\r\n\r\n  // Now we're sure text is a string, proceed with original logic\r\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n  const parts = text.split(urlRegex);\r\n  \r\n  return parts.map((part: string, index: number) => {\r\n    if (part.match(urlRegex)) {\r\n      return (\r\n        <a \r\n          key={index} \r\n          href={part} \r\n          target=\"_blank\" \r\n          rel=\"noopener noreferrer\"\r\n          style={{ color: '#2563eb', textDecoration: 'underline' }}\r\n        >\r\n          {part}\r\n        </a>\r\n      );\r\n    }\r\n    return part;\r\n  });\r\n};\r\n\r\nconst SearchResults: React.FC<SearchResultsProps> = ({ \r\n  query, \r\n  results, \r\n  onBackToSearch,\r\n  onNewSearch,\r\n  isLoading = false,\r\n  dataSource,\r\n  citations\r\n}) => {\r\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\r\n  const [lastProcessedQuery, setLastProcessedQuery] = useState<string>('');\r\n  const [isSearching, setIsSearching] = useState(false);\r\n\r\n  // Check if we have valid results to display\r\n  const hasValidResults = results && results.trim() !== '' && !isLoading;\r\n  \r\n  // Cache results when they change\r\n  useEffect(() => {\r\n    if (query && results && !isLoading) {\r\n      searchCache.setCachedResult(query, results, window.location.href);\r\n    }\r\n  }, [query, results, isLoading]);\r\n\r\n  // Update last processed query when props change\r\n  useEffect(() => {\r\n    if (query && query !== lastProcessedQuery) {\r\n      setLastProcessedQuery(query);\r\n    }\r\n  }, [query]);\r\n\r\n  // Header search handler\r\n  const handleHeaderSearch = async (newQuery: string) => {\r\n    if (newQuery.trim() && newQuery !== query) {\r\n      setIsSearching(true);\r\n      \r\n      try {\r\n        await onNewSearch(newQuery);\r\n      } catch (error) {\r\n        console.error('Header search error:', error);\r\n      } finally {\r\n        setIsSearching(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLogoClick = () => {\r\n    onBackToSearch();\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    if (newQuery !== lastProcessedQuery && newQuery !== query && !isLoading) {\r\n      setLastProcessedQuery(newQuery);\r\n      onNewSearch(newQuery);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ minHeight: '100vh', backgroundColor: '#ffffff' }}>\r\n      <Header\r\n        searchQuery={query}\r\n        onSearchSubmit={handleHeaderSearch}\r\n        onVoiceInput={() => {/* voice logic */}}\r\n        onImageUpload={() => setIsUploadModalOpen(true)}\r\n        onLogoClick={handleLogoClick}\r\n        isListening={false}\r\n        variant=\"results\"\r\n        showLogin={true}\r\n        className=\"search-results-header\"\r\n      />\r\n\r\n      {/* Show spinner when searching from header */}\r\n      {(isLoading || isSearching) && (\r\n        <Spinner\r\n          overlay={true}\r\n          title=\"Analyzing with AI...\"\r\n          subtitle=\"Processing your health query...\"\r\n          disableEsc={true}\r\n        />\r\n      )}\r\n      \r\n      {/* Main Content Area */}\r\n      <div style={{\r\n        maxWidth: '1200px',\r\n        margin: '0 auto',\r\n        padding: '20px 20px 60px 20px',\r\n        minHeight: 'calc(100vh - 120px)'\r\n      }}>\r\n        {hasValidResults ? (\r\n          <SearchResultsContent\r\n            query={query}\r\n            results={results}\r\n            dataSource={dataSource}\r\n            citations={citations}\r\n            onNewSearch={handleNewSearch}\r\n            isLoading={isLoading}\r\n          />\r\n        ) : (\r\n          !isLoading && !isSearching && (\r\n            <div style={{\r\n              textAlign: 'center',\r\n              padding: '60px 20px',\r\n              color: '#6b7280'\r\n            }}>\r\n              <p style={{ fontSize: '18px', margin: 0 }}>\r\n                No results to display. Try searching for something else.\r\n              </p>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n\r\n      {/* ImageUploadModal */}\r\n      <ImageUploadModal\r\n        isOpen={isUploadModalOpen}\r\n        onClose={() => setIsUploadModalOpen(false)}\r\n        onAnalysisComplete={(foodName: string) => {\r\n          if (foodName && foodName !== lastProcessedQuery && foodName !== query) {\r\n            setLastProcessedQuery(foodName);\r\n            onNewSearch(foodName);\r\n          }\r\n        }}\r\n        title=\"Upload Image\"\r\n        subtitle=\"Upload images for analysis\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAgB,OAAO;AAC1D,SAASC,WAAW,QAAQ,wBAAwB;AAGpD,OAAOC,gBAAgB,MAAM,+BAA+B;AAK5D,OAAO,4BAA4B;AACnC,OAAOC,MAAM,MAAM,uCAAuC;AAC1D,OAAOC,OAAO,MAAM,sBAAsB;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,oBAAoB,GAAG,CAC3B,+BAA+B,EAC/B,gCAAgC,EAChC,4BAA4B,EAC5B,gCAAgC,EAChC,4BAA4B,EAC5B,2BAA2B,CAC5B;AAED,MAAMC,gBAAgB,GAAG,CACvB;EAAEC,IAAI,EAAE,2BAA2B;EAAEC,GAAG,EAAE;AAAqB,CAAC,EAChE;EAAED,IAAI,EAAE,eAAe;EAAEC,GAAG,EAAE;AAA6B,CAAC,EAC5D;EAAED,IAAI,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAkC,CAAC,CACrE;;AAED;AACA,MAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE,MAAM;EACbC,UAAU,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qWAAqW;EACnWC,aAAa,EAAE,CACb,+BAA+B,EAC/B,gCAAgC,EAChC,4BAA4B,EAC5B,gCAAgC,EAChC,4BAA4B,EAC5B,2BAA2B,CAC5B;EACDC,SAAS,EAAE,CACT;IAAEN,IAAI,EAAE,sCAAsC;IAAEC,GAAG,EAAE;EAAI,CAAC,EAC1D;IAAED,IAAI,EAAE,4BAA4B;IAAEC,GAAG,EAAE;EAAI,CAAC,EAChD;IAAED,IAAI,EAAE,oCAAoC;IAAEC,GAAG,EAAE;EAAI,CAAC;AAE5D,CAAC;;AAED;;AAaA;AACA,MAAMM,uBAAuB,GAAIP,IAAS,IAAsB;EAC9D;EACA,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;;EAEtB;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B;IACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5B;MACA,IAAIA,IAAI,CAACQ,OAAO,EAAE;QAChBR,IAAI,GAAGA,IAAI,CAACQ,OAAO;MACrB,CAAC,MAAM,IAAIR,IAAI,CAACS,OAAO,EAAE;QACvBT,IAAI,GAAGA,IAAI,CAACS,OAAO;MACrB,CAAC,MAAM,IAAIT,IAAI,CAACU,OAAO,EAAE;QACvBV,IAAI,GAAGA,IAAI,CAACU,OAAO;MACrB,CAAC,MAAM;QACL;QACAV,IAAI,GAAGW,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC;MAC7B;IACF,CAAC,MAAM;MACL;MACAA,IAAI,GAAGa,MAAM,CAACb,IAAI,CAAC;IACrB;EACF;;EAEA;EACA,MAAMc,QAAQ,GAAG,sBAAsB;EACvC,MAAMC,KAAK,GAAGf,IAAI,CAACgB,KAAK,CAACF,QAAQ,CAAC;EAElC,OAAOC,KAAK,CAACE,GAAG,CAAC,CAACC,IAAY,EAAEC,KAAa,KAAK;IAChD,IAAID,IAAI,CAACE,KAAK,CAACN,QAAQ,CAAC,EAAE;MACxB,oBACEjB,OAAA;QAEEwB,IAAI,EAAEH,IAAK;QACXI,MAAM,EAAC,QAAQ;QACfC,GAAG,EAAC,qBAAqB;QACzBC,KAAK,EAAE;UAAEC,KAAK,EAAE,SAAS;UAAEC,cAAc,EAAE;QAAY,CAAE;QAAAC,QAAA,EAExDT;MAAI,GANAC,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOT,CAAC;IAER;IACA,OAAOb,IAAI;EACb,CAAC,CAAC;AACJ,CAAC;AAED,MAAMc,aAA2C,GAAGA,CAAC;EACnD7B,KAAK;EACL8B,OAAO;EACPC,cAAc;EACdC,WAAW;EACXC,SAAS,GAAG,KAAK;EACjBC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACoD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrD,QAAQ,CAAS,EAAE,CAAC;EACxE,MAAM,CAACsD,WAAW,EAAEC,cAAc,CAAC,GAAGvD,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMwD,eAAe,GAAGb,OAAO,IAAIA,OAAO,CAACc,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACX,SAAS;;EAEtE;EACA7C,SAAS,CAAC,MAAM;IACd,IAAIY,KAAK,IAAI8B,OAAO,IAAI,CAACG,SAAS,EAAE;MAClC5C,WAAW,CAACwD,eAAe,CAAC7C,KAAK,EAAE8B,OAAO,EAAEgB,MAAM,CAACC,QAAQ,CAAC7B,IAAI,CAAC;IACnE;EACF,CAAC,EAAE,CAAClB,KAAK,EAAE8B,OAAO,EAAEG,SAAS,CAAC,CAAC;;EAE/B;EACA7C,SAAS,CAAC,MAAM;IACd,IAAIY,KAAK,IAAIA,KAAK,KAAKuC,kBAAkB,EAAE;MACzCC,qBAAqB,CAACxC,KAAK,CAAC;IAC9B;EACF,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMgD,kBAAkB,GAAG,MAAOC,QAAgB,IAAK;IACrD,IAAIA,QAAQ,CAACL,IAAI,CAAC,CAAC,IAAIK,QAAQ,KAAKjD,KAAK,EAAE;MACzC0C,cAAc,CAAC,IAAI,CAAC;MAEpB,IAAI;QACF,MAAMV,WAAW,CAACiB,QAAQ,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,SAAS;QACRR,cAAc,CAAC,KAAK,CAAC;MACvB;IACF;EACF,CAAC;EAED,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC5BrB,cAAc,CAAC,CAAC;EAClB,CAAC;EAED,MAAMsB,eAAe,GAAIJ,QAAgB,IAAK;IAC5C,IAAIA,QAAQ,KAAKV,kBAAkB,IAAIU,QAAQ,KAAKjD,KAAK,IAAI,CAACiC,SAAS,EAAE;MACvEO,qBAAqB,CAACS,QAAQ,CAAC;MAC/BjB,WAAW,CAACiB,QAAQ,CAAC;IACvB;EACF,CAAC;EAED,oBACEvD,OAAA;IAAK2B,KAAK,EAAE;MAAEiC,SAAS,EAAE,OAAO;MAAEC,eAAe,EAAE;IAAU,CAAE;IAAA/B,QAAA,gBAC7D9B,OAAA,CAACH,MAAM;MACLiE,WAAW,EAAExD,KAAM;MACnByD,cAAc,EAAET,kBAAmB;MACnCU,YAAY,EAAEA,CAAA,KAAM,CAAC,kBAAmB;MACxCC,aAAa,EAAEA,CAAA,KAAMrB,oBAAoB,CAAC,IAAI,CAAE;MAChDsB,WAAW,EAAER,eAAgB;MAC7BS,WAAW,EAAE,KAAM;MACnBC,OAAO,EAAC,SAAS;MACjBC,SAAS,EAAE,IAAK;MAChBC,SAAS,EAAC;IAAuB;MAAAvC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EAGD,CAACK,SAAS,IAAIQ,WAAW,kBACxB/C,OAAA,CAACF,OAAO;MACNyE,OAAO,EAAE,IAAK;MACdC,KAAK,EAAC,sBAAsB;MAC5BC,QAAQ,EAAC,iCAAiC;MAC1CC,UAAU,EAAE;IAAK;MAAA3C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACF,eAGDlC,OAAA;MAAK2B,KAAK,EAAE;QACVgD,QAAQ,EAAE,QAAQ;QAClBC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE,qBAAqB;QAC9BjB,SAAS,EAAE;MACb,CAAE;MAAA9B,QAAA,EACCmB,eAAe,gBACdjD,OAAA,CAAC8E,oBAAoB;QACnBxE,KAAK,EAAEA,KAAM;QACb8B,OAAO,EAAEA,OAAQ;QACjBI,UAAU,EAAEA,UAAW;QACvBC,SAAS,EAAEA,SAAU;QACrBH,WAAW,EAAEqB,eAAgB;QAC7BpB,SAAS,EAAEA;MAAU;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,GAEF,CAACK,SAAS,IAAI,CAACQ,WAAW,iBACxB/C,OAAA;QAAK2B,KAAK,EAAE;UACVoD,SAAS,EAAE,QAAQ;UACnBF,OAAO,EAAE,WAAW;UACpBjD,KAAK,EAAE;QACT,CAAE;QAAAE,QAAA,eACA9B,OAAA;UAAG2B,KAAK,EAAE;YAAEqD,QAAQ,EAAE,MAAM;YAAEJ,MAAM,EAAE;UAAE,CAAE;UAAA9C,QAAA,EAAC;QAE3C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAER;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGNlC,OAAA,CAACJ,gBAAgB;MACfqF,MAAM,EAAEtC,iBAAkB;MAC1BuC,OAAO,EAAEA,CAAA,KAAMtC,oBAAoB,CAAC,KAAK,CAAE;MAC3CuC,kBAAkB,EAAGC,QAAgB,IAAK;QACxC,IAAIA,QAAQ,IAAIA,QAAQ,KAAKvC,kBAAkB,IAAIuC,QAAQ,KAAK9E,KAAK,EAAE;UACrEwC,qBAAqB,CAACsC,QAAQ,CAAC;UAC/B9C,WAAW,CAAC8C,QAAQ,CAAC;QACvB;MACF,CAAE;MACFZ,KAAK,EAAC,cAAc;MACpBC,QAAQ,EAAC;IAA4B;MAAA1C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACQ,EAAA,CA9HIP,aAA2C;AAAAkD,EAAA,GAA3ClD,aAA2C;AAgIjD,eAAeA,aAAa;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}