{"ast":null,"code":"import { EncodeHintType, IllegalArgumentException, IllegalStateException, QRCodeDecoderErrorCorrectionLevel, QRCodeEncoder } from '@zxing/library';\nvar svgNs = 'http://www.w3.org/2000/svg';\n/**/\nvar BrowserCodeSvgWriter = /** @class */function () {\n  /**\n   * Constructs. ðŸ˜‰\n   */\n  function BrowserCodeSvgWriter(containerElement) {\n    if (typeof containerElement === 'string') {\n      var container = document.getElementById(containerElement);\n      if (!container) {\n        throw new Error(\"Could not find a Container element with '\".concat(containerElement, \"'.\"));\n      }\n      this.containerElement = container;\n    } else {\n      this.containerElement = containerElement;\n    }\n  }\n  /**\n   * Writes the QR code to a SVG and renders it in the container.\n   */\n  BrowserCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException('Found empty contents');\n    }\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n    var quietZone = hints && hints.get(EncodeHintType.MARGIN) !== undefined ? Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10) : BrowserCodeSvgWriter.QUIET_ZONE_SIZE;\n    var code = this.encode(hints, contents);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\n   * Creates a SVG element.\n   */\n  BrowserCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'svg');\n    el.setAttributeNS(svgNs, 'width', h.toString());\n    el.setAttributeNS(svgNs, 'height', w.toString());\n    return el;\n  };\n  /**\n   * Creates a SVG rect.\n   */\n  BrowserCodeSvgWriter.prototype.createSvgPathPlaceholderElement = function (w, h) {\n    var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'path');\n    el.setAttributeNS(svgNs, 'd', \"M0 0h\".concat(w, \"v\").concat(h, \"H0z\"));\n    el.setAttributeNS(svgNs, 'fill', 'none');\n    return el;\n  };\n  /**\n   * Creates a SVG rect.\n   */\n  BrowserCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'rect');\n    el.setAttributeNS(svgNs, 'x', x.toString());\n    el.setAttributeNS(svgNs, 'y', y.toString());\n    el.setAttributeNS(svgNs, 'height', w.toString());\n    el.setAttributeNS(svgNs, 'width', h.toString());\n    el.setAttributeNS(svgNs, 'fill', '#000000');\n    return el;\n  };\n  /**\n   * Encodes the content to a Barcode type.\n   */\n  BrowserCodeSvgWriter.prototype.encode = function (hints, contents) {\n    var errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.L;\n    if (hints && hints.get(EncodeHintType.ERROR_CORRECTION) !== undefined) {\n      var correctionStr = hints.get(EncodeHintType.ERROR_CORRECTION).toString();\n      errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.fromString(correctionStr);\n    }\n    var code = QRCodeEncoder.encode(contents, errorCorrectionLevel, hints);\n    return code;\n  };\n  /**\n   * Renders the SVG in the container.\n   *\n   * @note the input matrix uses 0 == white, 1 == black. The output matrix\n   *  uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n   */\n  BrowserCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n    // if (this.format && format != this.format) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n    var input = code.getMatrix();\n    if (input === null) {\n      throw new IllegalStateException();\n    }\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n    // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n    var placeholder = this.createSvgPathPlaceholderElement(width, height);\n    svgElement.appendChild(placeholder);\n    this.containerElement.appendChild(svgElement);\n    // 2D loop\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n    return svgElement;\n  };\n  /**\n   * Default quiet zone in pixels.\n   */\n  BrowserCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  /**\n   * SVG markup NameSpace\n   */\n  BrowserCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n  return BrowserCodeSvgWriter;\n}();\nexport { BrowserCodeSvgWriter };","map":{"version":3,"names":["EncodeHintType","IllegalArgumentException","IllegalStateException","QRCodeDecoderErrorCorrectionLevel","QRCodeEncoder","svgNs","BrowserCodeSvgWriter","containerElement","container","document","getElementById","Error","concat","prototype","write","contents","width","height","hints","length","quietZone","get","MARGIN","undefined","Number","parseInt","toString","QUIET_ZONE_SIZE","code","encode","renderResult","createSVGElement","w","h","el","createElementNS","SVG_NS","setAttributeNS","createSvgPathPlaceholderElement","createSvgRectElement","x","y","errorCorrectionLevel","L","ERROR_CORRECTION","correctionStr","fromString","input","getMatrix","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","svgElement","placeholder","appendChild","inputY","outputY","inputX","outputX","svgRectElement"],"sources":["../../../src/writers/BrowserCodeSvgWriter.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}