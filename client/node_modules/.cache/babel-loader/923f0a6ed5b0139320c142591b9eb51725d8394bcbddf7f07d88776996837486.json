{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\HealthNewsFeed.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport openaiAPI from '../services/openaiAPI';\nimport './HealthNewsFeed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthNewsFeed = ({\n  maxArticles = 6\n}) => {\n  _s();\n  const [articles, setArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const categories = [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: 'nutrition',\n    label: 'Nutrition'\n  }, {\n    id: 'fitness',\n    label: 'Fitness'\n  }, {\n    id: 'mental-health',\n    label: 'Mental Health'\n  }, {\n    id: 'medical',\n    label: 'Medical Research'\n  }, {\n    id: 'wellness',\n    label: 'Wellness'\n  }];\n  useEffect(() => {\n    fetchHealthNews();\n  }, [selectedCategory, maxArticles]);\n  const fetchHealthNews = async () => {\n    setLoading(true);\n    try {\n      const categoryText = selectedCategory === 'all' ? 'general health' : selectedCategory;\n      const prompt = `Generate ${maxArticles} health news articles about ${categoryText}. \n      \n      Format each article as:\n      TITLE: [title here]\n      SUMMARY: [summary here]\n      SOURCE: [source name]\n      ---\n      \n      Focus on current health topics and research.`;\n      const response = await openaiAPI.searchHealthInfo(prompt);\n      if (response && (response.details || response.response)) {\n        const responseText = response.details || response.response || '';\n        const generatedArticles = parseOpenAINewsResponse(responseText);\n        setArticles(generatedArticles);\n      } else {\n        setArticles([]);\n      }\n    } catch (error) {\n      console.error('Error fetching health news:', error);\n      setArticles([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const parseOpenAINewsResponse = responseText => {\n    const articles = [];\n    const sections = responseText.split('---').filter(section => section.trim());\n    sections.forEach((section, index) => {\n      if (index >= maxArticles) return;\n      const lines = section.split('\\n').filter(line => line.trim());\n      let title = '';\n      let summary = '';\n      let source = 'AI Health News';\n      lines.forEach(line => {\n        const trimmedLine = line.trim();\n        if (trimmedLine.toLowerCase().startsWith('title:')) {\n          title = trimmedLine.replace(/^title:\\s*/i, '');\n        } else if (trimmedLine.toLowerCase().startsWith('summary:')) {\n          summary = trimmedLine.replace(/^summary:\\s*/i, '');\n        } else if (trimmedLine.toLowerCase().startsWith('source:')) {\n          source = trimmedLine.replace(/^source:\\s*/i, '');\n        }\n      });\n      if (title) {\n        articles.push({\n          id: `ai-${Date.now()}-${index}`,\n          title: title,\n          summary: summary || 'Health news update',\n          url: '#',\n          source: source,\n          publishedAt: new Date().toISOString(),\n          imageUrl: `/assets/health-news-${index % 6 + 1}.jpg`,\n          category: selectedCategory === 'all' ? 'wellness' : selectedCategory\n        });\n      }\n    });\n    return articles;\n  };\n  const formatTimeAgo = dateString => {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n  const getSourceIcon = source => {\n    return 'ðŸ“°';\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-feed-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"news-feed-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Latest Health News\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-news\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading health news...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news-feed-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-feed-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Latest Health News\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"AI-generated health news and insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-categories\",\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `category-btn ${selectedCategory === category.id ? 'active' : ''}`,\n        onClick: () => setSelectedCategory(category.id),\n        children: category.label\n      }, category.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-grid\",\n      children: articles.map(article => /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"news-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"news-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"news-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"news-source\",\n              children: [getSourceIcon(article.source), \" \", article.source]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"news-time\",\n              children: formatTimeAgo(article.publishedAt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"news-title\",\n            children: article.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"news-summary\",\n            children: article.summary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)\n      }, article.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"load-more-btn\",\n        onClick: fetchHealthNews,\n        children: \"Refresh Articles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthNewsFeed, \"kktUbVx0z1iRAhAquNn2nVk+6To=\");\n_c = HealthNewsFeed;\nexport default HealthNewsFeed;\nvar _c;\n$RefreshReg$(_c, \"HealthNewsFeed\");","map":{"version":3,"names":["React","useState","useEffect","openaiAPI","jsxDEV","_jsxDEV","HealthNewsFeed","maxArticles","_s","articles","setArticles","loading","setLoading","selectedCategory","setSelectedCategory","categories","id","label","fetchHealthNews","categoryText","prompt","response","searchHealthInfo","details","responseText","generatedArticles","parseOpenAINewsResponse","error","console","sections","split","filter","section","trim","forEach","index","lines","line","title","summary","source","trimmedLine","toLowerCase","startsWith","replace","push","Date","now","url","publishedAt","toISOString","imageUrl","category","formatTimeAgo","dateString","publishedDate","diffInHours","Math","floor","getTime","diffInDays","getSourceIcon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","article","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/HealthNewsFeed.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport openaiAPI from '../services/openaiAPI';\r\nimport './HealthNewsFeed.css';\r\n\r\ninterface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  publishedAt: string;\r\n  imageUrl?: string;\r\n  category: string;\r\n}\r\n\r\ninterface NewsFeedProps {\r\n  maxArticles?: number;\r\n}\r\n\r\nconst HealthNewsFeed: React.FC<NewsFeedProps> = ({ maxArticles = 6 }) => {\r\n  const [articles, setArticles] = useState<NewsArticle[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n\r\n  const categories = [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: 'nutrition', label: 'Nutrition' },\r\n    { id: 'fitness', label: 'Fitness' },\r\n    { id: 'mental-health', label: 'Mental Health' },\r\n    { id: 'medical', label: 'Medical Research' },\r\n    { id: 'wellness', label: 'Wellness' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchHealthNews();\r\n  }, [selectedCategory, maxArticles]);\r\n\r\n  const fetchHealthNews = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const categoryText = selectedCategory === 'all' ? 'general health' : selectedCategory;\r\n      const prompt = `Generate ${maxArticles} health news articles about ${categoryText}. \r\n      \r\n      Format each article as:\r\n      TITLE: [title here]\r\n      SUMMARY: [summary here]\r\n      SOURCE: [source name]\r\n      ---\r\n      \r\n      Focus on current health topics and research.`;\r\n      \r\n      const response = await openaiAPI.searchHealthInfo(prompt);\r\n      \r\n      if (response && (response.details || response.response)) {\r\n        const responseText = response.details || response.response || '';\r\n        const generatedArticles = parseOpenAINewsResponse(responseText);\r\n        setArticles(generatedArticles);\r\n      } else {\r\n        setArticles([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching health news:', error);\r\n      setArticles([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const parseOpenAINewsResponse = (responseText: string): NewsArticle[] => {\r\n    const articles: NewsArticle[] = [];\r\n    const sections = responseText.split('---').filter(section => section.trim());\r\n    \r\n    sections.forEach((section, index) => {\r\n      if (index >= maxArticles) return;\r\n      \r\n      const lines = section.split('\\n').filter(line => line.trim());\r\n      let title = '';\r\n      let summary = '';\r\n      let source = 'AI Health News';\r\n      \r\n      lines.forEach(line => {\r\n        const trimmedLine = line.trim();\r\n        if (trimmedLine.toLowerCase().startsWith('title:')) {\r\n          title = trimmedLine.replace(/^title:\\s*/i, '');\r\n        } else if (trimmedLine.toLowerCase().startsWith('summary:')) {\r\n          summary = trimmedLine.replace(/^summary:\\s*/i, '');\r\n        } else if (trimmedLine.toLowerCase().startsWith('source:')) {\r\n          source = trimmedLine.replace(/^source:\\s*/i, '');\r\n        }\r\n      });\r\n      \r\n      if (title) {\r\n        articles.push({\r\n          id: `ai-${Date.now()}-${index}`,\r\n          title: title,\r\n          summary: summary || 'Health news update',\r\n          url: '#',\r\n          source: source,\r\n          publishedAt: new Date().toISOString(),\r\n          imageUrl: `/assets/health-news-${(index % 6) + 1}.jpg`,\r\n          category: selectedCategory === 'all' ? 'wellness' : selectedCategory\r\n        });\r\n      }\r\n    });\r\n    \r\n    return articles;\r\n  };\r\n\r\n  const formatTimeAgo = (dateString: string) => {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    return `${diffInDays}d ago`;\r\n  };\r\n\r\n  const getSourceIcon = (source: string) => {\r\n    return 'ðŸ“°';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"news-feed-container\">\r\n        <div className=\"news-feed-header\">\r\n          <h2>Latest Health News</h2>\r\n        </div>\r\n        <div className=\"loading-news\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Loading health news...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"news-feed-container\">\r\n      <div className=\"news-feed-header\">\r\n        <h2>Latest Health News</h2>\r\n        <p>AI-generated health news and insights</p>\r\n      </div>\r\n\r\n      <div className=\"news-categories\">\r\n        {categories.map(category => (\r\n          <button\r\n            key={category.id}\r\n            className={`category-btn ${selectedCategory === category.id ? 'active' : ''}`}\r\n            onClick={() => setSelectedCategory(category.id)}\r\n          >\r\n            {category.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"news-grid\">\r\n        {articles.map((article) => (\r\n          <article key={article.id} className=\"news-card\">\r\n            <div className=\"news-content\">\r\n              <div className=\"news-meta\">\r\n                <span className=\"news-source\">\r\n                  {getSourceIcon(article.source)} {article.source}\r\n                </span>\r\n                <span className=\"news-time\">{formatTimeAgo(article.publishedAt)}</span>\r\n              </div>\r\n              <h3 className=\"news-title\">{article.title}</h3>\r\n              <p className=\"news-summary\">{article.summary}</p>\r\n            </div>\r\n          </article>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"news-footer\">\r\n        <button className=\"load-more-btn\" onClick={fetchHealthNews}>\r\n          Refresh Articles\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthNewsFeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}