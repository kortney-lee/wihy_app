{"ast":null,"code":"// ==================== WIHY HEALTH INTELLIGENCE API v4.0.0 ====================\n// Simplified implementation using ONLY the ASK endpoint\n// All legacy functionality removed per user request\n// Documentation: WIHY Health Intelligence API v4.0.0\nimport logger from'../utils/logger';import{API_CONFIG}from'../config/apiConfig';// ==================== API v4.0.0 INTERFACES ====================\n// ASK endpoint request interface (OpenAPI v4.0.0)\n// ASK endpoint response interface (OpenAPI v4.0.0)\n// Legacy compatibility types (minimal set for existing components)\n// Legacy response interface for backward compatibility\n// Legacy UnifiedResponse interface for chart components compatibility\n// Type guard for detecting unified responses at runtime (for chart compatibility)\nexport function isUnifiedResponse(obj){return obj&&typeof obj==='object'&&'data'in obj&&'service_used'in obj;}// ==================== WIHY API SERVICE CLASS ====================\nclass WihyAPIService{constructor(){this.baseURL=void 0;this.baseURL=API_CONFIG.WIHY_API_URL;}/**\r\n   * Ask WiHy Health Intelligence a question using the v4.0.0 ASK endpoint\r\n   */async askHealthQuestion(request){try{logger.info('Making WiHy API v4.0.0 ASK request',{query:request.query});const endpoint=\"\".concat(this.baseURL,\"/ask\");const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 second timeout\nconst response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify(request),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){const errorText=await response.text();logger.error(\"WiHy API error: \".concat(response.status,\" \").concat(response.statusText),{error:errorText});throw new Error(\"HTTP error! status: \".concat(response.status,\", message: \").concat(errorText));}const data=await response.json();logger.info('WiHy API response received',{success:data.success,processor:data.data.processor_used,processingTime:data.data.processing_time});return data;}catch(error){logger.error('WiHy API request failed:',error);throw this.handleError(error);}}/**\r\n   * Check API health status\r\n   */async checkHealth(){try{const response=await fetch(\"\".concat(this.baseURL,\"/health\"),{method:'GET',headers:{'Accept':'application/json'}});if(!response.ok){throw new Error(\"Health check failed: \".concat(response.status));}return await response.json();}catch(error){logger.error('WiHy API health check failed:',error);throw error;}}/**\r\n   * Legacy compatibility method - converts old request format to new format\r\n   */async askAnything(request){try{// Convert legacy request to v4.0.0 format\nconst healthRequest={query:request.query,user_context:request.user_context?{age:request.user_context.age,health_concerns:request.user_context.health_concerns,dietary_restrictions:request.user_context.dietary_restrictions,activity_level:request.user_context.activity_level}:undefined};// Call the new API\nconst response=await this.askHealthQuestion(healthRequest);// Convert response to legacy format for backward compatibility\nreturn this.convertToLegacyFormat(response,request.query);}catch(error){logger.error('Legacy askAnything failed:',error);throw error;}}/**\r\n   * Legacy compatibility method - general health search\r\n   */async searchHealth(query,userContext){const request={query:query,user_context:userContext};// If conversation_mode is enabled, use new API and convert to legacy format\nif(userContext!==null&&userContext!==void 0&&userContext.conversation_mode){const healthRequest={query:query,user_context:userContext?{age:userContext.age,health_concerns:userContext.health_concerns,dietary_restrictions:userContext.dietary_restrictions,activity_level:userContext.activity_level}:undefined};const newResponse=await this.askHealthQuestion(healthRequest);return this.convertToLegacyFormat(newResponse,query);}return this.askAnything(request);}/**\r\n   * Legacy compatibility method - nutrition search  \r\n   */async searchNutrition(foodQuery,userContext){const query=\"Nutrition information for \".concat(foodQuery);return this.searchHealth(query,userContext);}/**\r\n   * Legacy compatibility method - health news (now uses general health search)\r\n   */async getHealthNews(categories,limit){const query=categories&&categories.length>0?\"Latest health news about \".concat(categories.join(', ')):'Latest health news and wellness updates';return this.searchHealth(query);}/**\r\n   * Convert new API response to legacy format for backward compatibility\r\n   */convertToLegacyFormat(response,originalQuery){return{success:response.success,timestamp:response.timestamp,response_type:'health_intelligence_v4',query:originalQuery,wihy_response:{query_type:'health_intelligence',query:originalQuery,core_principle:response.data.response,personalized_analysis:{identified_risk_factors:[],priority_health_goals:response.data.health_insights.key_benefits,action_items:response.data.health_insights.recommendations.map((rec,index)=>({action:rec,priority:'high',target_illness:'general_health',evidence_level:'high',mechanism:'lifestyle_modification',timeline:'ongoing'})),timeline:'ongoing'},research_foundation:[{citation_text:\"WiHy Health Intelligence v4.0.0 (\".concat(response.data.processor_used,\")\"),study_type:'ai_analysis',key_finding:response.data.response}],progress_tracking:{key_metrics:['health_understanding','wellness_improvement'],reassessment_period:'2 weeks'},biblical_wisdom:[]},message:response.data.response};}/**\r\n   * Enhanced error handling\r\n   */handleError(error){if(error instanceof Error){// Check for timeout/abort errors\nif(error.name==='AbortError'){return new Error('Request timed out - WiHy Health Intelligence services may be under heavy load');}// Check for CORS errors\nif(error.message.includes('CORS')||error.message.includes('Access to fetch')||error.message.includes('No \\'Access-Control-Allow-Origin\\'')){return new Error('Unable to connect to WiHy Health Intelligence from this domain');}// Check for network/connectivity issues\nif(error.message.includes('fetch')||error.message.includes('network')||error.name==='TypeError'||error.message.includes('Failed to fetch')){return new Error('Network error - Unable to connect to WiHy Health Intelligence services');}// Check for server errors\nif(error.message.includes('HTTP error! status: 5')){return new Error('WiHy Health Intelligence services temporarily unavailable');}return error;}return new Error('Unknown error occurred while contacting WiHy Health Intelligence');}/**\r\n   * Format response for display in the UI\r\n   */formatResponse(response){var _response$analysis,_response$analysis2,_response$analysis3;let formatted=\"# WiHy Health Intelligence\\n\\n\";// Main response content (prioritize analysis summary if available)\nif((_response$analysis=response.analysis)!==null&&_response$analysis!==void 0&&_response$analysis.summary){formatted+=response.analysis.summary;}else{formatted+=response.data.response;}// Add health insights if available\nif(response.data.health_insights){var _response$data$health,_response$data$health2,_response$data$health3;if((_response$data$health=response.data.health_insights.key_benefits)!==null&&_response$data$health!==void 0&&_response$data$health.length){formatted+=\"\\n\\n## \\uD83C\\uDF1F Key Benefits\\n\";response.data.health_insights.key_benefits.forEach(benefit=>{formatted+=\"- \".concat(benefit,\"\\n\");});}if((_response$data$health2=response.data.health_insights.potential_risks)!==null&&_response$data$health2!==void 0&&_response$data$health2.length){formatted+=\"\\n\\n## \\u26A0\\uFE0F Potential Risks\\n\";response.data.health_insights.potential_risks.forEach(risk=>{formatted+=\"- \".concat(risk,\"\\n\");});}if((_response$data$health3=response.data.health_insights.recommendations)!==null&&_response$data$health3!==void 0&&_response$data$health3.length){formatted+=\"\\n\\n## \\uD83D\\uDCCB Recommendations\\n\";response.data.health_insights.recommendations.forEach(rec=>{formatted+=\"- \".concat(rec,\"\\n\");});}}// Add enhanced OpenAI analysis if available\nif((_response$analysis2=response.analysis)!==null&&_response$analysis2!==void 0&&_response$analysis2.openai_analysis){var _openai$sources,_openai$related_topic,_openai$recommendatio;const openai=response.analysis.openai_analysis;formatted+=\"\\n\\n## \\uD83E\\uDDE0 Enhanced Scientific Analysis\\n\\n\";formatted+=openai.details;if((_openai$sources=openai.sources)!==null&&_openai$sources!==void 0&&_openai$sources.length){formatted+=\"\\n\\n### \\uD83D\\uDCDA Research Sources\\n\";openai.sources.forEach((source,index)=>{formatted+=\"\".concat(index+1,\". \").concat(source,\"\\n\");});}if((_openai$related_topic=openai.related_topics)!==null&&_openai$related_topic!==void 0&&_openai$related_topic.length){formatted+=\"\\n\\n### \\uD83D\\uDD17 Related Topics\\n\";openai.related_topics.forEach(topic=>{formatted+=\"- \".concat(topic,\"\\n\");});}if((_openai$recommendatio=openai.recommendations)!==null&&_openai$recommendatio!==void 0&&_openai$recommendatio.length){formatted+=\"\\n\\n### \\uD83D\\uDCA1 Evidence-Based Recommendations\\n\";openai.recommendations.forEach(rec=>{formatted+=\"- \".concat(rec,\"\\n\");});}if(openai.medical_disclaimer){formatted+=\"\\n\\n### \\u2695\\uFE0F Medical Disclaimer\\n\";formatted+=\"*\".concat(openai.medical_disclaimer,\"*\");}}// Add confidence score if available\nif(((_response$analysis3=response.analysis)===null||_response$analysis3===void 0?void 0:_response$analysis3.confidence_score)!==undefined){formatted+=\"\\n\\n**Confidence Score**: \".concat(Math.round(response.analysis.confidence_score*100),\"%\");}// Add processing info\nconst processingTime=response.processing_time||response.data.processing_time;formatted+=\"\\n\\n---\\n\\n*Processed by \".concat(response.data.processor_used,\" in \").concat(processingTime.toFixed(2),\"ms*\");return formatted;}/**\r\n   * Format legacy response for display\r\n   */formatWihyResponse(response){var _response$wihy_respon,_response$wihy_respon2;let formatted=\"# \".concat(response.wihy_response.core_principle,\"\\n\\n\");// Add recommendations\nif(((_response$wihy_respon=response.wihy_response.personalized_analysis.action_items)===null||_response$wihy_respon===void 0?void 0:_response$wihy_respon.length)>0){formatted+=\"## \\uD83D\\uDCCB Recommendations\\n\";response.wihy_response.personalized_analysis.action_items.forEach(item=>{formatted+=\"- \".concat(item.action,\"\\n\");});formatted+='\\n';}// Add health goals\nif(((_response$wihy_respon2=response.wihy_response.personalized_analysis.priority_health_goals)===null||_response$wihy_respon2===void 0?void 0:_response$wihy_respon2.length)>0){formatted+=\"## \\uD83C\\uDFAF Health Benefits\\n\";response.wihy_response.personalized_analysis.priority_health_goals.forEach(goal=>{formatted+=\"- \".concat(goal,\"\\n\");});formatted+='\\n';}// Add timestamp\nformatted+=\"---\\n\\n*WiHy Health Intelligence analysis generated at: \".concat(new Date(response.timestamp).toLocaleString(),\"*\\n\");return formatted;}/**\r\n   * Extract recommendations from response for UI display\r\n   */extractRecommendations(response){if('data'in response&&response.data){var _healthResp$analysis,_healthResp$analysis$,_healthResp$analysis2;// New format - check both standard and enhanced recommendations\nconst healthResp=response;const recommendations=[];// Add standard recommendations\nif(healthResp.data.health_insights.recommendations){recommendations.push(...healthResp.data.health_insights.recommendations);}// Add enhanced OpenAI recommendations if available\nif((_healthResp$analysis=healthResp.analysis)!==null&&_healthResp$analysis!==void 0&&(_healthResp$analysis$=_healthResp$analysis.openai_analysis)!==null&&_healthResp$analysis$!==void 0&&_healthResp$analysis$.recommendations){recommendations.push(...healthResp.analysis.openai_analysis.recommendations);}// Add analysis-level recommendations if available\nif((_healthResp$analysis2=healthResp.analysis)!==null&&_healthResp$analysis2!==void 0&&_healthResp$analysis2.recommendations){recommendations.push(...healthResp.analysis.recommendations);}return recommendations;}else{var _legacyResp$wihy_resp;// Legacy format\nconst legacyResp=response;return((_legacyResp$wihy_resp=legacyResp.wihy_response.personalized_analysis.action_items)===null||_legacyResp$wihy_resp===void 0?void 0:_legacyResp$wihy_resp.map(item=>item.action))||[];}}/**\r\n   * Extract key benefits from response for UI display\r\n   */extractBenefits(response){if('data'in response&&response.data){// New format\nreturn response.data.health_insights.key_benefits||[];}else{// Legacy format  \nconst legacyResp=response;return legacyResp.wihy_response.personalized_analysis.priority_health_goals||[];}}/**\r\n   * Extract citations from response for UI display (legacy compatibility)\r\n   */extractCitations(response){// Handle new HealthQuestionResponse format\nif('data'in response&&response.data&&'processor_used'in response.data){var _healthResp$analysis3,_healthResp$analysis4;const healthResp=response;const citations=[];// Add standard processor citation\ncitations.push(\"WiHy Health Intelligence v4.0.0 (\".concat(healthResp.data.processor_used,\")\"));// Add OpenAI sources if available\nif((_healthResp$analysis3=healthResp.analysis)!==null&&_healthResp$analysis3!==void 0&&(_healthResp$analysis4=_healthResp$analysis3.openai_analysis)!==null&&_healthResp$analysis4!==void 0&&_healthResp$analysis4.sources){citations.push(...healthResp.analysis.openai_analysis.sources);}return citations;}// Handle legacy WihyResponse format\nif('wihy_response'in response){var _legacyResp$wihy_resp2;const legacyResp=response;return((_legacyResp$wihy_resp2=legacyResp.wihy_response.research_foundation)===null||_legacyResp$wihy_resp2===void 0?void 0:_legacyResp$wihy_resp2.map(research=>\"\".concat(research.citation_text,\": \").concat(research.key_finding)))||[];}// Handle UnifiedResponse format\nif('service_used'in response){const unifiedResp=response;return unifiedResp.data.sources||[\"\".concat(unifiedResp.service_used,\" service\")];}return[];}/**\r\n   * Legacy compatibility - Enhanced health question (renamed method)\r\n   * NOTE: This method now defaults to analyse: false unless explicitly specified\r\n   */async askEnhancedHealthQuestion(request){var _request$analyse;const healthRequest={query:request.query,analyse:(_request$analyse=request.analyse)!==null&&_request$analyse!==void 0?_request$analyse:false,// Default to basic analysis unless explicitly requested\nuser_context:request.context?JSON.parse(request.context):undefined};return this.askHealthQuestion(healthRequest);}/**\r\n   * Legacy compatibility - Scan food (removed functionality, returns helpful message)\r\n   */async scanFood(file,options){logger.warn('scanFood method called but scanning functionality has been removed per API v4.0.0 update');const query=\"Analyze the food in this image: general food analysis\";const response=await this.searchHealth(query);// Add a note about the removed functionality  \nresponse.message=\"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\";return response;}/**\r\n   * Legacy compatibility - Scan food image (removed functionality, returns helpful message)\r\n   */async scanFoodImage(file,context){logger.warn('scanFoodImage method called but scanning functionality has been removed per API v4.0.0 update');const query=context?\"Analyze food: \".concat(context):'General food analysis and nutrition information';const response=await this.searchHealth(query);return{success:true,message:\"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\",analysis:response.message,recommendations:this.extractRecommendations(response)};}/**\r\n   * Ask a health question with enhanced OpenAI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param analyse - Whether to include enhanced OpenAI analysis (default: false)\r\n   */async askWithAnalysis(query,userContext){let analyse=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const healthRequest={query:query,analyse:analyse,user_context:userContext?{age:userContext.age,health_concerns:userContext.health_concerns,dietary_restrictions:userContext.dietary_restrictions,activity_level:userContext.activity_level,health_goals:userContext.health_concerns// Map health_concerns to health_goals for v4.0.0\n}:undefined};return this.askHealthQuestion(healthRequest);}/**\r\n   * Ask a health question with enhanced OpenAI analysis enabled\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   */async askWithEnhancedAnalysis(query,userContext){return this.askWithAnalysis(query,userContext,true);}/**\r\n   * ENHANCED ANALYSIS - Use this method from \"Analyze with WiHy\" buttons\r\n   * This method explicitly enables the analyse flag for comprehensive AI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param source - Source component calling this method (for logging)\r\n   */async analyzeWithWiHy(query,userContext,source){logger.info(\"Enhanced WiHy analysis requested from \".concat(source||'unknown component'),{query});const healthRequest={query:query,analyse:true,// Always enable enhanced analysis for \"Analyze with WiHy\" buttons\nuser_context:userContext?{age:userContext.age,health_concerns:userContext.health_concerns,dietary_restrictions:userContext.dietary_restrictions,activity_level:userContext.activity_level,health_goals:userContext.health_concerns// Map health_concerns to health_goals for v4.0.0\n}:undefined};return this.askHealthQuestion(healthRequest);}}// Export singleton instance\nexport const wihyAPI=new WihyAPIService();// Default export for compatibility\nexport default wihyAPI;","map":{"version":3,"names":["logger","API_CONFIG","isUnifiedResponse","obj","WihyAPIService","constructor","baseURL","WIHY_API_URL","askHealthQuestion","request","info","query","endpoint","concat","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","errorText","text","error","status","statusText","Error","data","json","success","processor","processor_used","processingTime","processing_time","handleError","checkHealth","askAnything","healthRequest","user_context","age","health_concerns","dietary_restrictions","activity_level","undefined","convertToLegacyFormat","searchHealth","userContext","conversation_mode","newResponse","searchNutrition","foodQuery","getHealthNews","categories","limit","length","join","originalQuery","timestamp","response_type","wihy_response","query_type","core_principle","personalized_analysis","identified_risk_factors","priority_health_goals","health_insights","key_benefits","action_items","recommendations","map","rec","index","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","message","name","includes","formatResponse","_response$analysis","_response$analysis2","_response$analysis3","formatted","analysis","summary","_response$data$health","_response$data$health2","_response$data$health3","forEach","benefit","potential_risks","risk","openai_analysis","_openai$sources","_openai$related_topic","_openai$recommendatio","openai","details","sources","source","related_topics","topic","medical_disclaimer","confidence_score","Math","round","toFixed","formatWihyResponse","_response$wihy_respon","_response$wihy_respon2","item","goal","Date","toLocaleString","extractRecommendations","_healthResp$analysis","_healthResp$analysis$","_healthResp$analysis2","healthResp","push","_legacyResp$wihy_resp","legacyResp","extractBenefits","extractCitations","_healthResp$analysis3","_healthResp$analysis4","citations","_legacyResp$wihy_resp2","research","unifiedResp","service_used","askEnhancedHealthQuestion","_request$analyse","analyse","context","parse","scanFood","file","options","warn","scanFoodImage","askWithAnalysis","arguments","health_goals","askWithEnhancedAnalysis","analyzeWithWiHy","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["// ==================== WIHY HEALTH INTELLIGENCE API v4.0.0 ====================\r\n// Simplified implementation using ONLY the ASK endpoint\r\n// All legacy functionality removed per user request\r\n// Documentation: WIHY Health Intelligence API v4.0.0\r\n\r\nimport logger from '../utils/logger';\r\nimport { API_CONFIG } from '../config/apiConfig';\r\n\r\n// ==================== API v4.0.0 INTERFACES ====================\r\n\r\n// ASK endpoint request interface (OpenAPI v4.0.0)\r\nexport interface HealthQuestionRequest {\r\n  query: string;\r\n  analyse?: boolean; // Optional OpenAI enhanced analysis\r\n  user_context?: {\r\n    age?: number;\r\n    health_goals?: string[];\r\n    dietary_restrictions?: string[];\r\n    current_medications?: string[];\r\n    activity_level?: 'low' | 'moderate' | 'high' | 'very_high';\r\n    health_concerns?: string[];\r\n  };\r\n}\r\n\r\n// ASK endpoint response interface (OpenAPI v4.0.0)\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  data: {\r\n    response: string;\r\n    health_insights: {\r\n      key_benefits: string[];\r\n      potential_risks: string[];\r\n      recommendations: string[];\r\n    };\r\n    processor_used: string;\r\n    processing_time: number;\r\n  };\r\n  analysis?: {\r\n    summary: string;\r\n    recommendations: string[];\r\n    confidence_score: number;\r\n    charts?: {\r\n      [key: string]: {\r\n        type: string;\r\n        title: string;\r\n        data: any[];\r\n        colors?: string[];\r\n      };\r\n    };\r\n    metadata?: {\r\n      processor: string;\r\n      nova_group?: number;\r\n      health_score?: number;\r\n    };\r\n    openai_analysis?: {\r\n      summary: string;\r\n      details: string;\r\n      sources: string[];\r\n      related_topics: string[];\r\n      recommendations: string[];\r\n      medical_disclaimer: string;\r\n    };\r\n  };\r\n  timestamp: string;\r\n  processing_time?: number;\r\n}\r\n\r\n// Legacy compatibility types (minimal set for existing components)\r\nexport interface UserContext {\r\n  age?: number;\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  conversation_mode?: boolean; // For ChatWidget compatibility\r\n  response_style?: string; // For ChatWidget compatibility\r\n  current_context?: string; // For ChatWidget compatibility\r\n  is_followup?: boolean; // For ChatWidget compatibility\r\n  conversation_context?: any; // For ChatWidget conversation history\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\n// Legacy response interface for backward compatibility\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: {\r\n    query_type: string;\r\n    query: string;\r\n    core_principle: string;\r\n    personalized_analysis: {\r\n      identified_risk_factors: any[];\r\n      priority_health_goals: string[];\r\n      action_items: Array<{\r\n        action: string;\r\n        priority: string;\r\n        target_illness: string;\r\n        evidence_level: string;\r\n        mechanism: string;\r\n        timeline: string;\r\n      }>;\r\n      timeline: string;\r\n    };\r\n    research_foundation: Array<{\r\n      citation_text: string;\r\n      study_type: string;\r\n      key_finding: string;\r\n    }>;\r\n    progress_tracking: {\r\n      key_metrics: string[];\r\n      reassessment_period: string;\r\n    };\r\n    biblical_wisdom: string[];\r\n  };\r\n  message: string;\r\n}\r\n\r\n// Legacy UnifiedResponse interface for chart components compatibility\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    response?: string;\r\n    analysis?: string;\r\n    recommendations?: {\r\n      immediate_actions?: string[];\r\n      lifestyle_changes?: string[];\r\n      better_alternatives?: string[];\r\n      shopping_tips?: string[];\r\n      meal_planning?: string[];\r\n    };\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime (for chart compatibility)\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// ==================== WIHY API SERVICE CLASS ====================\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n\r\n  constructor() {\r\n    this.baseURL = API_CONFIG.WIHY_API_URL;\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy Health Intelligence a question using the v4.0.0 ASK endpoint\r\n   */\r\n  async askHealthQuestion(request: HealthQuestionRequest): Promise<HealthQuestionResponse> {\r\n    try {\r\n      logger.info('Making WiHy API v4.0.0 ASK request', { query: request.query });\r\n      \r\n      const endpoint = `${this.baseURL}/ask`;\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(request),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        logger.error(`WiHy API error: ${response.status} ${response.statusText}`, { error: errorText });\r\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n      }\r\n\r\n      const data: HealthQuestionResponse = await response.json();\r\n      logger.info('WiHy API response received', { \r\n        success: data.success, \r\n        processor: data.data.processor_used,\r\n        processingTime: data.data.processing_time \r\n      });\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy API request failed:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API health status\r\n   */\r\n  async checkHealth(): Promise<{ status: string; version: string }> {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/health`, {\r\n        method: 'GET',\r\n        headers: { 'Accept': 'application/json' }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WiHy API health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - converts old request format to new format\r\n   */\r\n  async askAnything(request: WihyRequest): Promise<WihyResponse> {\r\n    try {\r\n      // Convert legacy request to v4.0.0 format\r\n      const healthRequest: HealthQuestionRequest = {\r\n        query: request.query,\r\n        user_context: request.user_context ? {\r\n          age: request.user_context.age,\r\n          health_concerns: request.user_context.health_concerns,\r\n          dietary_restrictions: request.user_context.dietary_restrictions,\r\n          activity_level: request.user_context.activity_level\r\n        } : undefined\r\n      };\r\n      \r\n      // Call the new API\r\n      const response = await this.askHealthQuestion(healthRequest);\r\n      \r\n      // Convert response to legacy format for backward compatibility\r\n      return this.convertToLegacyFormat(response, request.query);\r\n      \r\n    } catch (error) {\r\n      logger.error('Legacy askAnything failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - general health search\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: WihyRequest = {\r\n      query: query,\r\n      user_context: userContext\r\n    };\r\n\r\n    // If conversation_mode is enabled, use new API and convert to legacy format\r\n    if (userContext?.conversation_mode) {\r\n      const healthRequest: HealthQuestionRequest = {\r\n        query: query,\r\n        user_context: userContext ? {\r\n          age: userContext.age,\r\n          health_concerns: userContext.health_concerns,\r\n          dietary_restrictions: userContext.dietary_restrictions,\r\n          activity_level: userContext.activity_level\r\n        } : undefined\r\n      };\r\n      \r\n      const newResponse = await this.askHealthQuestion(healthRequest);\r\n      return this.convertToLegacyFormat(newResponse, query);\r\n    }\r\n\r\n    return this.askAnything(request);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - nutrition search  \r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const query = `Nutrition information for ${foodQuery}`;\r\n    return this.searchHealth(query, userContext);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - health news (now uses general health search)\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news and wellness updates';\r\n    \r\n    return this.searchHealth(query);\r\n  }\r\n\r\n  /**\r\n   * Convert new API response to legacy format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(response: HealthQuestionResponse, originalQuery: string): WihyResponse {\r\n    return {\r\n      success: response.success,\r\n      timestamp: response.timestamp,\r\n      response_type: 'health_intelligence_v4',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: 'health_intelligence',\r\n        query: originalQuery,\r\n        core_principle: response.data.response,\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: response.data.health_insights.key_benefits,\r\n          action_items: response.data.health_insights.recommendations.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'high',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })),\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: [{\r\n          citation_text: `WiHy Health Intelligence v4.0.0 (${response.data.processor_used})`,\r\n          study_type: 'ai_analysis',\r\n          key_finding: response.data.response\r\n        }],\r\n        progress_tracking: {\r\n          key_metrics: ['health_understanding', 'wellness_improvement'],\r\n          reassessment_period: '2 weeks'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: response.data.response\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling\r\n   */\r\n  private handleError(error: any): Error {\r\n    if (error instanceof Error) {\r\n      // Check for timeout/abort errors\r\n      if (error.name === 'AbortError') {\r\n        return new Error('Request timed out - WiHy Health Intelligence services may be under heavy load');\r\n      }\r\n      \r\n      // Check for CORS errors\r\n      if (error.message.includes('CORS') || \r\n          error.message.includes('Access to fetch') ||\r\n          error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n        return new Error('Unable to connect to WiHy Health Intelligence from this domain');\r\n      }\r\n      \r\n      // Check for network/connectivity issues\r\n      if (error.message.includes('fetch') || \r\n          error.message.includes('network') || \r\n          error.name === 'TypeError' ||\r\n          error.message.includes('Failed to fetch')) {\r\n        return new Error('Network error - Unable to connect to WiHy Health Intelligence services');\r\n      }\r\n      \r\n      // Check for server errors\r\n      if (error.message.includes('HTTP error! status: 5')) {\r\n        return new Error('WiHy Health Intelligence services temporarily unavailable');\r\n      }\r\n      \r\n      return error;\r\n    }\r\n    \r\n    return new Error('Unknown error occurred while contacting WiHy Health Intelligence');\r\n  }\r\n\r\n  /**\r\n   * Format response for display in the UI\r\n   */\r\n  formatResponse(response: HealthQuestionResponse): string {\r\n    let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n    \r\n    // Main response content (prioritize analysis summary if available)\r\n    if (response.analysis?.summary) {\r\n      formatted += response.analysis.summary;\r\n    } else {\r\n      formatted += response.data.response;\r\n    }\r\n    \r\n    // Add health insights if available\r\n    if (response.data.health_insights) {\r\n      if (response.data.health_insights.key_benefits?.length) {\r\n        formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n        response.data.health_insights.key_benefits.forEach(benefit => {\r\n          formatted += `- ${benefit}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (response.data.health_insights.potential_risks?.length) {\r\n        formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n        response.data.health_insights.potential_risks.forEach(risk => {\r\n          formatted += `- ${risk}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (response.data.health_insights.recommendations?.length) {\r\n        formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n        response.data.health_insights.recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add enhanced OpenAI analysis if available\r\n    if (response.analysis?.openai_analysis) {\r\n      const openai = response.analysis.openai_analysis;\r\n      \r\n      formatted += `\\n\\n## 🧠 Enhanced Scientific Analysis\\n\\n`;\r\n      formatted += openai.details;\r\n      \r\n      if (openai.sources?.length) {\r\n        formatted += `\\n\\n### 📚 Research Sources\\n`;\r\n        openai.sources.forEach((source, index) => {\r\n          formatted += `${index + 1}. ${source}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (openai.related_topics?.length) {\r\n        formatted += `\\n\\n### 🔗 Related Topics\\n`;\r\n        openai.related_topics.forEach(topic => {\r\n          formatted += `- ${topic}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (openai.recommendations?.length) {\r\n        formatted += `\\n\\n### 💡 Evidence-Based Recommendations\\n`;\r\n        openai.recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (openai.medical_disclaimer) {\r\n        formatted += `\\n\\n### ⚕️ Medical Disclaimer\\n`;\r\n        formatted += `*${openai.medical_disclaimer}*`;\r\n      }\r\n    }\r\n    \r\n    // Add confidence score if available\r\n    if (response.analysis?.confidence_score !== undefined) {\r\n      formatted += `\\n\\n**Confidence Score**: ${Math.round(response.analysis.confidence_score * 100)}%`;\r\n    }\r\n    \r\n    // Add processing info\r\n    const processingTime = response.processing_time || response.data.processing_time;\r\n    formatted += `\\n\\n---\\n\\n*Processed by ${response.data.processor_used} in ${processingTime.toFixed(2)}ms*`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format legacy response for display\r\n   */\r\n  formatWihyResponse(response: WihyResponse): string {\r\n    let formatted = `# ${response.wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Add recommendations\r\n    if (response.wihy_response.personalized_analysis.action_items?.length > 0) {\r\n      formatted += `## 📋 Recommendations\\n`;\r\n      response.wihy_response.personalized_analysis.action_items.forEach(item => {\r\n        formatted += `- ${item.action}\\n`;\r\n      });\r\n      formatted += '\\n';\r\n    }\r\n    \r\n    // Add health goals\r\n    if (response.wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n      formatted += `## 🎯 Health Benefits\\n`;\r\n      response.wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n        formatted += `- ${goal}\\n`;\r\n      });\r\n      formatted += '\\n';\r\n    }\r\n    \r\n    // Add timestamp\r\n    formatted += `---\\n\\n*WiHy Health Intelligence analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse): string[] {\r\n    if ('data' in response && response.data) {\r\n      // New format - check both standard and enhanced recommendations\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const recommendations: string[] = [];\r\n      \r\n      // Add standard recommendations\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        recommendations.push(...healthResp.data.health_insights.recommendations);\r\n      }\r\n      \r\n      // Add enhanced OpenAI recommendations if available\r\n      if (healthResp.analysis?.openai_analysis?.recommendations) {\r\n        recommendations.push(...healthResp.analysis.openai_analysis.recommendations);\r\n      }\r\n      \r\n      // Add analysis-level recommendations if available\r\n      if (healthResp.analysis?.recommendations) {\r\n        recommendations.push(...healthResp.analysis.recommendations);\r\n      }\r\n      \r\n      return recommendations;\r\n    } else {\r\n      // Legacy format\r\n      const legacyResp = response as WihyResponse;\r\n      return legacyResp.wihy_response.personalized_analysis.action_items?.map(item => item.action) || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract key benefits from response for UI display\r\n   */\r\n  extractBenefits(response: HealthQuestionResponse | WihyResponse): string[] {\r\n    if ('data' in response && response.data) {\r\n      // New format\r\n      return (response as HealthQuestionResponse).data.health_insights.key_benefits || [];\r\n    } else {\r\n      // Legacy format  \r\n      const legacyResp = response as WihyResponse;\r\n      return legacyResp.wihy_response.personalized_analysis.priority_health_goals || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract citations from response for UI display (legacy compatibility)\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    // Handle new HealthQuestionResponse format\r\n    if ('data' in response && response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const citations: string[] = [];\r\n      \r\n      // Add standard processor citation\r\n      citations.push(`WiHy Health Intelligence v4.0.0 (${healthResp.data.processor_used})`);\r\n      \r\n      // Add OpenAI sources if available\r\n      if (healthResp.analysis?.openai_analysis?.sources) {\r\n        citations.push(...healthResp.analysis.openai_analysis.sources);\r\n      }\r\n      \r\n      return citations;\r\n    }\r\n\r\n    // Handle legacy WihyResponse format\r\n    if ('wihy_response' in response) {\r\n      const legacyResp = response as WihyResponse;\r\n      return legacyResp.wihy_response.research_foundation?.map(research => \r\n        `${research.citation_text}: ${research.key_finding}`\r\n      ) || [];\r\n    }\r\n\r\n    // Handle UnifiedResponse format\r\n    if ('service_used' in response) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      return unifiedResp.data.sources || [`${unifiedResp.service_used} service`];\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility - Enhanced health question (renamed method)\r\n   * NOTE: This method now defaults to analyse: false unless explicitly specified\r\n   */\r\n  async askEnhancedHealthQuestion(request: { query: string; context?: string; user_id?: string; analyse?: boolean }): Promise<HealthQuestionResponse> {\r\n    const healthRequest: HealthQuestionRequest = {\r\n      query: request.query,\r\n      analyse: request.analyse ?? false, // Default to basic analysis unless explicitly requested\r\n      user_context: request.context ? JSON.parse(request.context) : undefined\r\n    };\r\n    \r\n    return this.askHealthQuestion(healthRequest);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility - Scan food (removed functionality, returns helpful message)\r\n   */\r\n  async scanFood(file?: File, options?: any): Promise<WihyResponse> {\r\n    logger.warn('scanFood method called but scanning functionality has been removed per API v4.0.0 update');\r\n    \r\n    const query = `Analyze the food in this image: general food analysis`;\r\n    const response = await this.searchHealth(query);\r\n    \r\n    // Add a note about the removed functionality  \r\n    response.message = \"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\";\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility - Scan food image (removed functionality, returns helpful message)\r\n   */\r\n  async scanFoodImage(file: File, context?: string): Promise<any> {\r\n    logger.warn('scanFoodImage method called but scanning functionality has been removed per API v4.0.0 update');\r\n    \r\n    const query = context ? `Analyze food: ${context}` : 'General food analysis and nutrition information';\r\n    const response = await this.searchHealth(query);\r\n    \r\n    return {\r\n      success: true,\r\n      message: \"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\",\r\n      analysis: response.message,\r\n      recommendations: this.extractRecommendations(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ask a health question with enhanced OpenAI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param analyse - Whether to include enhanced OpenAI analysis (default: false)\r\n   */\r\n  async askWithAnalysis(query: string, userContext?: UserContext, analyse: boolean = false): Promise<HealthQuestionResponse> {\r\n    const healthRequest: HealthQuestionRequest = {\r\n      query: query,\r\n      analyse: analyse,\r\n      user_context: userContext ? {\r\n        age: userContext.age,\r\n        health_concerns: userContext.health_concerns,\r\n        dietary_restrictions: userContext.dietary_restrictions,\r\n        activity_level: userContext.activity_level,\r\n        health_goals: userContext.health_concerns // Map health_concerns to health_goals for v4.0.0\r\n      } : undefined\r\n    };\r\n    \r\n    return this.askHealthQuestion(healthRequest);\r\n  }\r\n\r\n  /**\r\n   * Ask a health question with enhanced OpenAI analysis enabled\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   */\r\n  async askWithEnhancedAnalysis(query: string, userContext?: UserContext): Promise<HealthQuestionResponse> {\r\n    return this.askWithAnalysis(query, userContext, true);\r\n  }\r\n\r\n  /**\r\n   * ENHANCED ANALYSIS - Use this method from \"Analyze with WiHy\" buttons\r\n   * This method explicitly enables the analyse flag for comprehensive AI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param source - Source component calling this method (for logging)\r\n   */\r\n  async analyzeWithWiHy(query: string, userContext?: UserContext, source?: string): Promise<HealthQuestionResponse> {\r\n    logger.info(`Enhanced WiHy analysis requested from ${source || 'unknown component'}`, { query });\r\n    \r\n    const healthRequest: HealthQuestionRequest = {\r\n      query: query,\r\n      analyse: true, // Always enable enhanced analysis for \"Analyze with WiHy\" buttons\r\n      user_context: userContext ? {\r\n        age: userContext.age,\r\n        health_concerns: userContext.health_concerns,\r\n        dietary_restrictions: userContext.dietary_restrictions,\r\n        activity_level: userContext.activity_level,\r\n        health_goals: userContext.health_concerns // Map health_concerns to health_goals for v4.0.0\r\n      } : undefined\r\n    };\r\n    \r\n    return this.askHealthQuestion(healthRequest);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\n\r\n// Default export for compatibility\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}