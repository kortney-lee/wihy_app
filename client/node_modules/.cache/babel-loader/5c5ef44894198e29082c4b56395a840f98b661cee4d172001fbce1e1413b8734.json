{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\ResultQualityPie.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n\n/* ====================== Verdict & Utilities ====================== */\n\nconst TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'heart.org': 1 // American Heart Association\n};\nconst FAST_FOOD_DOMAINS = new Set(['mcdonalds.com', 'burgerking.com', 'wendys.com', 'kfc.com', 'tacobell.com', 'subway.com', 'arbys.com', 'dominos.com', 'pizzahut.com', 'chipotle.com', 'panerabread.com', 'sonicdrivein.com', 'jackinthebox.com', 'popeyes.com', 'dairyqueen.com', 'littlecaesars.com', 'fiveguys.com']);\nconst extractUrls = text => {\n  const urlRegex = /(https?:\\/\\/[^\\s)]+)(?=\\)|\\s|$)/g;\n  return [...text.matchAll(urlRegex)].map(m => m[1]);\n};\nconst domainKey = url => {\n  try {\n    const u = new URL(url);\n    const parts = u.hostname.split('.');\n    return parts.slice(-2).join('.');\n  } catch {\n    return null;\n  }\n};\nconst hasStrongId = text => /doi\\.org\\/10\\./i.test(text) || /pubmed\\.ncbi\\.nlm\\.nih\\.gov\\/\\d+/i.test(text);\nconst hasSpecificNumbers = lower => /\\b\\d+(\\.\\d+)?\\s?(mg|g|mcg|iu|kcal|calories|%)\\b/.test(lower) || /\\b\\d+(\\.\\d+)?%/.test(lower);\nconst hypeOrBS = lower => /(miracle|cure-all|100% guaranteed|secret|instantly|revolutionary|breakthrough|detox scam|shocking)/i.test(lower);\nconst contradictionWithoutRefs = lower => /(contradictory|no consensus|insufficient evidence)/i.test(lower) && !hasStrongId(lower) && extractUrls(lower).length === 0;\nconst recencyOK = lower => {\n  const years = (lower.match(/\\b(20\\d{2}|19\\d{2})\\b/g) || []).map(y => parseInt(y, 10));\n  if (years.length === 0) return true;\n  const mostRecent = Math.max(...years);\n  return new Date().getFullYear() - mostRecent <= 5;\n};\nconst isNormativeQuery = q => /\\b(is|are)?\\s*(.+)?\\b(good|healthy|healthy\\?|bad|ok|okay|safe|unhealthy)\\b\\??/i.test(q);\n\n/** At least one trusted, non-brand source present */\nconst hasIndependentTrustedSource = text => {\n  const urls = extractUrls(text);\n  if (hasStrongId(text)) return true;\n  for (const u of urls) {\n    const key = domainKey(u);\n    if (!key) continue;\n    if (TRUSTED_DOMAINS[key] && !FAST_FOOD_DOMAINS.has(key)) return true;\n  }\n  return false;\n};\nconst sourceGate = (textWithCites, dataSource, normative) => {\n  if (dataSource === 'vnutrition' || dataSource === 'local') return true;\n  // For normative questions, require an independent source (not just brand).\n  if (normative) return hasIndependentTrustedSource(textWithCites);\n  // Otherwise, accept strong id OR any trusted domain link.\n  if (hasStrongId(textWithCites)) return true;\n  const urls = extractUrls(textWithCites);\n  for (const u of urls) {\n    const key = domainKey(u);\n    if (key && TRUSTED_DOMAINS[key]) return true;\n  }\n  return false;\n};\n\n/* ---------------- Nutrition extraction from free text ---------------- */\n\nconst findNumberNear = (text, label, unit) => {\n  // label ... number unit\n  const p1 = new RegExp(label.source + '[^\\\\d]{0,12}(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*' + unit.source, 'i');\n  const m1 = text.match(p1);\n  if (m1) return parseFloat(m1[1]);\n  // number unit ... label\n  const p2 = new RegExp('(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*' + unit.source + '[^a-zA-Z]{0,14}' + label.source, 'i');\n  const m2 = text.match(p2);\n  if (m2) return parseFloat(m2[1]);\n  return undefined;\n};\nconst parseNutritionFromText = text => {\n  var _findNumberNear, _findNumberNear2, _findNumberNear3, _findNumberNear4, _findNumberNear5, _findNumberNear6;\n  const lower = text.toLowerCase();\n  const out = {};\n  out.calories = (_findNumberNear = findNumberNear(lower, /(calories?|kcal)/, /(kcal|calories?)/)) !== null && _findNumberNear !== void 0 ? _findNumberNear : out.calories;\n  out.sodium_mg = (_findNumberNear2 = findNumberNear(lower, /(sodium)/, /(mg)/)) !== null && _findNumberNear2 !== void 0 ? _findNumberNear2 : out.sodium_mg;\n  out.satfat_g = (_findNumberNear3 = findNumberNear(lower, /(saturated\\s*fat|sat\\s*fat)/, /(g|grams?)/)) !== null && _findNumberNear3 !== void 0 ? _findNumberNear3 : out.satfat_g;\n  out.transfat_g = (_findNumberNear4 = findNumberNear(lower, /(trans\\s*fat)/, /(g|grams?)/)) !== null && _findNumberNear4 !== void 0 ? _findNumberNear4 : out.transfat_g;\n  // total fat (avoid double counting with sat/trans)\n  out.fat_g = (_findNumberNear5 = findNumberNear(lower, /(^|\\s)(total\\s*)?fat\\b/, /(g|grams?)/)) !== null && _findNumberNear5 !== void 0 ? _findNumberNear5 : out.fat_g;\n  out.sugar_g = (_findNumberNear6 = findNumberNear(lower, /(sugars?|added sugar)/, /(g|grams?)/)) !== null && _findNumberNear6 !== void 0 ? _findNumberNear6 : out.sugar_g;\n  return out;\n};\n\n/** Simple threshold-based health impact analysis (per item). */\nconst evaluateHealthImpact = text => {\n  const n = parseNutritionFromText(text);\n  const reasons = [];\n  let riskCount = 0;\n\n  // Thresholds (coarse and conservative)\n  if (typeof n.sodium_mg === 'number' && n.sodium_mg >= 600) {\n    reasons.push(`High sodium per item (~${Math.round(n.sodium_mg)} mg)`);\n    riskCount++;\n  }\n  if (typeof n.calories === 'number' && n.calories >= 500) {\n    reasons.push(`High calories per item (~${Math.round(n.calories)})`);\n    riskCount++;\n  }\n  if (typeof n.satfat_g === 'number' && n.satfat_g >= 6) {\n    reasons.push(`High saturated fat (~${n.satfat_g} g)`);\n    riskCount++;\n  }\n  if (typeof n.fat_g === 'number' && n.fat_g >= 20) {\n    reasons.push(`High total fat (~${n.fat_g} g)`);\n    riskCount++;\n  }\n  if (typeof n.transfat_g === 'number' && n.transfat_g >= 0.5) {\n    reasons.push(`Trans fat present (~${n.transfat_g} g)`);\n    riskCount++;\n  }\n  if (typeof n.sugar_g === 'number' && n.sugar_g >= 10) {\n    reasons.push(`High sugars (~${n.sugar_g} g)`);\n    riskCount++;\n  }\n  if (riskCount >= 2) return {\n    verdict: 'BAD',\n    reasons\n  };\n  if (riskCount === 1) return {\n    verdict: 'REVIEW',\n    reasons\n  };\n  // No numbers found at all â†’ inconclusive\n  if (!hasSpecificNumbers(text.toLowerCase())) return {\n    verdict: 'REVIEW',\n    reasons: ['No per-item nutrition to assess health impact']\n  };\n  return {\n    verdict: 'GOOD',\n    reasons\n  };\n};\n\n/* --------------- Evidence confidence with hard gates ---------------- */\n\nfunction evaluateEvidenceConfidence(query, results, dataSource, citations) {\n  const text = results || '';\n  const lower = text.toLowerCase();\n  if (!text.trim() || /please (provide|clarify)/i.test(text)) return {\n    evidenceVerdict: 'BAD',\n    reasons: ['No usable answer']\n  };\n  if (/not (a|the) recognized|no information found|could not find|doesn'?t seem/i.test(text)) return {\n    evidenceVerdict: 'BAD',\n    reasons: ['Unrecognized topic']\n  };\n  if (/^[a-z0-9]{1,7}$/i.test(query) && !/^(hiv|flu|cold|covid|bp|bmi|gerd|ibs|std|uti)$/i.test(query)) return {\n    evidenceVerdict: 'BAD',\n    reasons: ['Query looks invalid']\n  };\n  const normative = isNormativeQuery(query);\n  const citationsText = (citations || []).join(' ');\n  const textWithCites = text + ' ' + citationsText;\n  const gates = {\n    source: sourceGate(textWithCites, dataSource, normative),\n    citations: hasStrongId(textWithCites) || extractUrls(textWithCites).length > 0,\n    specificity: hasSpecificNumbers(lower),\n    consistency: !(hypeOrBS(lower) || contradictionWithoutRefs(lower)),\n    recency: recencyOK(lower)\n  };\n  const passed = Object.values(gates).filter(Boolean).length;\n  const criticalOkay = (gates.source || gates.citations) && gates.specificity;\n  let verdict;\n  if ((dataSource === 'vnutrition' || dataSource === 'local') && criticalOkay) {\n    verdict = 'GOOD';\n  } else if (passed >= 4 && criticalOkay) {\n    verdict = 'GOOD';\n  } else if (passed === 3 && !hypeOrBS(lower)) {\n    verdict = 'REVIEW';\n  } else {\n    verdict = 'BAD';\n  }\n  const reasons = [];\n  if (!gates.source) reasons.push('Needs independent source');\n  if (!gates.citations) reasons.push('No citations');\n  if (!gates.specificity) reasons.push('Low numeric specificity');\n  if (!gates.consistency) reasons.push('Inconsistent language');\n  if (!gates.recency) reasons.push('Out-of-date');\n  return {\n    evidenceVerdict: verdict,\n    reasons\n  };\n}\n\n/* -------------------- Combine evidence + health --------------------- */\n\nconst combineVerdicts = (a, b) => {\n  // BAD < REVIEW < GOOD\n  const order = {\n    BAD: 0,\n    REVIEW: 1,\n    GOOD: 2\n  };\n  return Object.keys(order).find(v => order[v] === Math.min(order[a], order[b]));\n};\nconst scoreFromVerdict = v => v === 'GOOD' ? 0.90 : v === 'REVIEW' ? 0.60 : 0.20;\n\n/* ====================== Component ====================== */\n\nconst ResultQualityPie = ({\n  query,\n  results,\n  dataSource,\n  citations\n}) => {\n  const {\n    evidenceVerdict,\n    reasons: evidenceReasons\n  } = evaluateEvidenceConfidence(query, results, dataSource, citations);\n\n  // Only compute health impact when the query is normative or the text includes food nutrition.\n  const runHealth = isNormativeQuery(query) || /calories|kcal|sodium|fat|sugar|carb/i.test(results);\n  const {\n    verdict: healthVerdict,\n    reasons: healthReasons\n  } = runHealth ? evaluateHealthImpact(results) : {\n    verdict: 'REVIEW',\n    reasons: []\n  };\n  const finalVerdict = combineVerdicts(evidenceVerdict, healthVerdict);\n  const percentage = Math.round(scoreFromVerdict(finalVerdict) * 100);\n  const remaining = 100 - percentage;\n  const colorByVerdict = v => v === 'GOOD' ? '#10B981' : v === 'REVIEW' ? '#F59E0B' : '#EF4444';\n  const labelByVerdict = v => v === 'GOOD' ? 'Good' : v === 'REVIEW' ? 'Needs review' : 'Poor';\n  const ringColor = colorByVerdict(finalVerdict);\n  const verdictLabel = labelByVerdict(finalVerdict);\n  const data = {\n    datasets: [{\n      data: [percentage, remaining],\n      backgroundColor: [ringColor, '#E5E7EB'],\n      borderWidth: 0,\n      cutout: '70%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: false\n      }\n    }\n  };\n  const legendGoodColor = finalVerdict === 'BAD' ? '#E5E7EB' : '#10B981';\n  const legendBadColor = finalVerdict === 'BAD' ? '#EF4444' : '#E5E7EB';\n\n  // Build a compact rationale line (1â€“2 top reasons prioritizing health impact)\n  const reasons = [...healthReasons, ...evidenceReasons];\n  const rationale = reasons.slice(0, 2).join(' â€¢ ');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '2rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: [percentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.875rem',\n            color: '#6B7280'\n          },\n          children: \"Evidence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 500,\n            color: ringColor,\n            fontSize: '1rem'\n          },\n          children: verdictLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '1rem',\n          fontSize: '0.875rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: legendGoodColor,\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Good: \", percentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: legendBadColor,\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Bad: \", remaining, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), rationale && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '0.5rem',\n          fontSize: '0.85rem',\n          color: '#6B7280'\n        },\n        children: rationale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n};\n_c = ResultQualityPie;\nexport default ResultQualityPie;\nvar _c;\n$RefreshReg$(_c, \"ResultQualityPie\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","TRUSTED_DOMAINS","FAST_FOOD_DOMAINS","Set","extractUrls","text","urlRegex","matchAll","map","m","domainKey","url","u","URL","parts","hostname","split","slice","join","hasStrongId","test","hasSpecificNumbers","lower","hypeOrBS","contradictionWithoutRefs","length","recencyOK","years","match","y","parseInt","mostRecent","Math","max","Date","getFullYear","isNormativeQuery","q","hasIndependentTrustedSource","urls","key","has","sourceGate","textWithCites","dataSource","normative","findNumberNear","label","unit","p1","RegExp","source","m1","parseFloat","p2","m2","undefined","parseNutritionFromText","_findNumberNear","_findNumberNear2","_findNumberNear3","_findNumberNear4","_findNumberNear5","_findNumberNear6","toLowerCase","out","calories","sodium_mg","satfat_g","transfat_g","fat_g","sugar_g","evaluateHealthImpact","n","reasons","riskCount","push","round","verdict","evaluateEvidenceConfidence","query","results","citations","trim","evidenceVerdict","citationsText","gates","specificity","consistency","recency","passed","Object","values","filter","Boolean","criticalOkay","combineVerdicts","a","b","order","BAD","REVIEW","GOOD","keys","find","v","min","scoreFromVerdict","ResultQualityPie","evidenceReasons","runHealth","healthVerdict","healthReasons","finalVerdict","percentage","remaining","colorByVerdict","labelByVerdict","ringColor","verdictLabel","data","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","legendGoodColor","legendBadColor","rationale","style","textAlign","children","position","height","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","gap","borderRadius","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/ResultQualityPie.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface ResultQualityPieProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n  citations?: string[];\r\n}\r\n\r\n/* ====================== Verdict & Utilities ====================== */\r\n\r\ntype Verdict = 'GOOD' | 'REVIEW' | 'BAD';\r\n\r\nconst TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'heart.org': 1, // American Heart Association\r\n};\r\n\r\nconst FAST_FOOD_DOMAINS = new Set<string>([\r\n  'mcdonalds.com','burgerking.com','wendys.com','kfc.com','tacobell.com',\r\n  'subway.com','arbys.com','dominos.com','pizzahut.com','chipotle.com',\r\n  'panerabread.com','sonicdrivein.com','jackinthebox.com','popeyes.com',\r\n  'dairyqueen.com','littlecaesars.com','fiveguys.com'\r\n]);\r\n\r\nconst extractUrls = (text: string): string[] => {\r\n  const urlRegex = /(https?:\\/\\/[^\\s)]+)(?=\\)|\\s|$)/g;\r\n  return [...text.matchAll(urlRegex)].map(m => m[1]);\r\n};\r\n\r\nconst domainKey = (url: string): string | null => {\r\n  try {\r\n    const u = new URL(url);\r\n    const parts = u.hostname.split('.');\r\n    return parts.slice(-2).join('.');\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst hasStrongId = (text: string) =>\r\n  /doi\\.org\\/10\\./i.test(text) || /pubmed\\.ncbi\\.nlm\\.nih\\.gov\\/\\d+/i.test(text);\r\n\r\nconst hasSpecificNumbers = (lower: string) =>\r\n  /\\b\\d+(\\.\\d+)?\\s?(mg|g|mcg|iu|kcal|calories|%)\\b/.test(lower) || /\\b\\d+(\\.\\d+)?%/.test(lower);\r\n\r\nconst hypeOrBS = (lower: string) =>\r\n  /(miracle|cure-all|100% guaranteed|secret|instantly|revolutionary|breakthrough|detox scam|shocking)/i.test(lower);\r\n\r\nconst contradictionWithoutRefs = (lower: string) =>\r\n  /(contradictory|no consensus|insufficient evidence)/i.test(lower) &&\r\n  !hasStrongId(lower) &&\r\n  extractUrls(lower).length === 0;\r\n\r\nconst recencyOK = (lower: string) => {\r\n  const years = (lower.match(/\\b(20\\d{2}|19\\d{2})\\b/g) || []).map(y => parseInt(y, 10));\r\n  if (years.length === 0) return true;\r\n  const mostRecent = Math.max(...years);\r\n  return new Date().getFullYear() - mostRecent <= 5;\r\n};\r\n\r\nconst isNormativeQuery = (q: string) =>\r\n  /\\b(is|are)?\\s*(.+)?\\b(good|healthy|healthy\\?|bad|ok|okay|safe|unhealthy)\\b\\??/i.test(q);\r\n\r\n/** At least one trusted, non-brand source present */\r\nconst hasIndependentTrustedSource = (text: string): boolean => {\r\n  const urls = extractUrls(text);\r\n  if (hasStrongId(text)) return true;\r\n  for (const u of urls) {\r\n    const key = domainKey(u);\r\n    if (!key) continue;\r\n    if (TRUSTED_DOMAINS[key] && !FAST_FOOD_DOMAINS.has(key)) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst sourceGate = (\r\n  textWithCites: string,\r\n  dataSource: ResultQualityPieProps['dataSource'],\r\n  normative: boolean\r\n) => {\r\n  if (dataSource === 'vnutrition' || dataSource === 'local') return true;\r\n  // For normative questions, require an independent source (not just brand).\r\n  if (normative) return hasIndependentTrustedSource(textWithCites);\r\n  // Otherwise, accept strong id OR any trusted domain link.\r\n  if (hasStrongId(textWithCites)) return true;\r\n  const urls = extractUrls(textWithCites);\r\n  for (const u of urls) {\r\n    const key = domainKey(u);\r\n    if (key && TRUSTED_DOMAINS[key]) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/* ---------------- Nutrition extraction from free text ---------------- */\r\n\r\ntype ParsedNutrition = {\r\n  calories?: number;      // kcal\r\n  sodium_mg?: number;     // mg\r\n  fat_g?: number;         // g (total fat)\r\n  satfat_g?: number;      // g\r\n  transfat_g?: number;    // g\r\n  sugar_g?: number;       // g\r\n};\r\n\r\nconst findNumberNear = (text: string, label: RegExp, unit: RegExp): number | undefined => {\r\n  // label ... number unit\r\n  const p1 = new RegExp(label.source + '[^\\\\d]{0,12}(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*' + unit.source, 'i');\r\n  const m1 = text.match(p1);\r\n  if (m1) return parseFloat(m1[1]);\r\n  // number unit ... label\r\n  const p2 = new RegExp('(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*' + unit.source + '[^a-zA-Z]{0,14}' + label.source, 'i');\r\n  const m2 = text.match(p2);\r\n  if (m2) return parseFloat(m2[1]);\r\n  return undefined;\r\n};\r\n\r\nconst parseNutritionFromText = (text: string): ParsedNutrition => {\r\n  const lower = text.toLowerCase();\r\n  const out: ParsedNutrition = {};\r\n  out.calories   = findNumberNear(lower, /(calories?|kcal)/, /(kcal|calories?)/) ?? out.calories;\r\n  out.sodium_mg  = findNumberNear(lower, /(sodium)/, /(mg)/) ?? out.sodium_mg;\r\n  out.satfat_g   = findNumberNear(lower, /(saturated\\s*fat|sat\\s*fat)/, /(g|grams?)/) ?? out.satfat_g;\r\n  out.transfat_g = findNumberNear(lower, /(trans\\s*fat)/, /(g|grams?)/) ?? out.transfat_g;\r\n  // total fat (avoid double counting with sat/trans)\r\n  out.fat_g      = findNumberNear(lower, /(^|\\s)(total\\s*)?fat\\b/, /(g|grams?)/) ?? out.fat_g;\r\n  out.sugar_g    = findNumberNear(lower, /(sugars?|added sugar)/, /(g|grams?)/) ?? out.sugar_g;\r\n  return out;\r\n};\r\n\r\n/** Simple threshold-based health impact analysis (per item). */\r\nconst evaluateHealthImpact = (text: string): { verdict: Verdict; reasons: string[] } => {\r\n  const n = parseNutritionFromText(text);\r\n  const reasons: string[] = [];\r\n  let riskCount = 0;\r\n\r\n  // Thresholds (coarse and conservative)\r\n  if (typeof n.sodium_mg === 'number' && n.sodium_mg >= 600) {\r\n    reasons.push(`High sodium per item (~${Math.round(n.sodium_mg)} mg)`);\r\n    riskCount++;\r\n  }\r\n  if (typeof n.calories === 'number' && n.calories >= 500) {\r\n    reasons.push(`High calories per item (~${Math.round(n.calories)})`);\r\n    riskCount++;\r\n  }\r\n  if (typeof n.satfat_g === 'number' && n.satfat_g >= 6) {\r\n    reasons.push(`High saturated fat (~${n.satfat_g} g)`);\r\n    riskCount++;\r\n  }\r\n  if (typeof n.fat_g === 'number' && n.fat_g >= 20) {\r\n    reasons.push(`High total fat (~${n.fat_g} g)`);\r\n    riskCount++;\r\n  }\r\n  if (typeof n.transfat_g === 'number' && n.transfat_g >= 0.5) {\r\n    reasons.push(`Trans fat present (~${n.transfat_g} g)`);\r\n    riskCount++;\r\n  }\r\n  if (typeof n.sugar_g === 'number' && n.sugar_g >= 10) {\r\n    reasons.push(`High sugars (~${n.sugar_g} g)`);\r\n    riskCount++;\r\n  }\r\n\r\n  if (riskCount >= 2) return { verdict: 'BAD', reasons };\r\n  if (riskCount === 1) return { verdict: 'REVIEW', reasons };\r\n  // No numbers found at all â†’ inconclusive\r\n  if (!hasSpecificNumbers(text.toLowerCase())) return { verdict: 'REVIEW', reasons: ['No per-item nutrition to assess health impact'] };\r\n  return { verdict: 'GOOD', reasons };\r\n};\r\n\r\n/* --------------- Evidence confidence with hard gates ---------------- */\r\n\r\nfunction evaluateEvidenceConfidence(\r\n  query: string,\r\n  results: string,\r\n  dataSource: ResultQualityPieProps['dataSource'],\r\n  citations?: string[]\r\n): { evidenceVerdict: Verdict; reasons: string[] } {\r\n  const text = results || '';\r\n  const lower = text.toLowerCase();\r\n\r\n  if (!text.trim() || /please (provide|clarify)/i.test(text))\r\n    return { evidenceVerdict: 'BAD', reasons: ['No usable answer'] };\r\n\r\n  if (/not (a|the) recognized|no information found|could not find|doesn'?t seem/i.test(text))\r\n    return { evidenceVerdict: 'BAD', reasons: ['Unrecognized topic'] };\r\n\r\n  if (/^[a-z0-9]{1,7}$/i.test(query) && !/^(hiv|flu|cold|covid|bp|bmi|gerd|ibs|std|uti)$/i.test(query))\r\n    return { evidenceVerdict: 'BAD', reasons: ['Query looks invalid'] };\r\n\r\n  const normative = isNormativeQuery(query);\r\n  const citationsText = (citations || []).join(' ');\r\n  const textWithCites = text + ' ' + citationsText;\r\n\r\n  const gates = {\r\n    source: sourceGate(textWithCites, dataSource, normative),\r\n    citations: hasStrongId(textWithCites) || extractUrls(textWithCites).length > 0,\r\n    specificity: hasSpecificNumbers(lower),\r\n    consistency: !(hypeOrBS(lower) || contradictionWithoutRefs(lower)),\r\n    recency: recencyOK(lower),\r\n  };\r\n\r\n  const passed = Object.values(gates).filter(Boolean).length;\r\n  const criticalOkay = (gates.source || gates.citations) && gates.specificity;\r\n\r\n  let verdict: Verdict;\r\n  if ((dataSource === 'vnutrition' || dataSource === 'local') && criticalOkay) {\r\n    verdict = 'GOOD';\r\n  } else if (passed >= 4 && criticalOkay) {\r\n    verdict = 'GOOD';\r\n  } else if (passed === 3 && !hypeOrBS(lower)) {\r\n    verdict = 'REVIEW';\r\n  } else {\r\n    verdict = 'BAD';\r\n  }\r\n\r\n  const reasons: string[] = [];\r\n  if (!gates.source) reasons.push('Needs independent source');\r\n  if (!gates.citations) reasons.push('No citations');\r\n  if (!gates.specificity) reasons.push('Low numeric specificity');\r\n  if (!gates.consistency) reasons.push('Inconsistent language');\r\n  if (!gates.recency) reasons.push('Out-of-date');\r\n\r\n  return { evidenceVerdict: verdict, reasons };\r\n}\r\n\r\n/* -------------------- Combine evidence + health --------------------- */\r\n\r\nconst combineVerdicts = (a: Verdict, b: Verdict): Verdict => {\r\n  // BAD < REVIEW < GOOD\r\n  const order = { BAD: 0, REVIEW: 1, GOOD: 2 } as const;\r\n  return (Object.keys(order) as Verdict[]).find(v => order[v] === Math.min(order[a], order[b])) as Verdict;\r\n};\r\n\r\nconst scoreFromVerdict = (v: Verdict) => (v === 'GOOD' ? 0.90 : v === 'REVIEW' ? 0.60 : 0.20);\r\n\r\n/* ====================== Component ====================== */\r\n\r\nconst ResultQualityPie: React.FC<ResultQualityPieProps> = ({\r\n  query,\r\n  results,\r\n  dataSource,\r\n  citations\r\n}) => {\r\n  const { evidenceVerdict, reasons: evidenceReasons } = evaluateEvidenceConfidence(\r\n    query,\r\n    results,\r\n    dataSource,\r\n    citations\r\n  );\r\n\r\n  // Only compute health impact when the query is normative or the text includes food nutrition.\r\n  const runHealth = isNormativeQuery(query) || /calories|kcal|sodium|fat|sugar|carb/i.test(results);\r\n  const { verdict: healthVerdict, reasons: healthReasons } = runHealth\r\n    ? evaluateHealthImpact(results)\r\n    : { verdict: 'REVIEW' as Verdict, reasons: [] };\r\n\r\n  const finalVerdict = combineVerdicts(evidenceVerdict, healthVerdict);\r\n  const percentage = Math.round(scoreFromVerdict(finalVerdict) * 100);\r\n  const remaining = 100 - percentage;\r\n\r\n  const colorByVerdict = (v: Verdict) =>\r\n    v === 'GOOD' ? '#10B981' : v === 'REVIEW' ? '#F59E0B' : '#EF4444';\r\n\r\n  const labelByVerdict = (v: Verdict) =>\r\n    v === 'GOOD' ? 'Good' : v === 'REVIEW' ? 'Needs review' : 'Poor';\r\n\r\n  const ringColor = colorByVerdict(finalVerdict);\r\n  const verdictLabel = labelByVerdict(finalVerdict);\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [percentage, remaining],\r\n        backgroundColor: [ringColor, '#E5E7EB'],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: { display: false },\r\n      tooltip: { enabled: false },\r\n    },\r\n  };\r\n\r\n  const legendGoodColor = finalVerdict === 'BAD' ? '#E5E7EB' : '#10B981';\r\n  const legendBadColor  = finalVerdict === 'BAD' ? '#EF4444' : '#E5E7EB';\r\n\r\n  // Build a compact rationale line (1â€“2 top reasons prioritizing health impact)\r\n  const reasons: string[] = [...healthReasons, ...evidenceReasons];\r\n  const rationale = reasons.slice(0, 2).join(' â€¢ ');\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {percentage}%\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            Evidence\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            marginBottom: '0.5rem'\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              fontWeight: 500,\r\n              color: ringColor,\r\n              fontSize: '1rem'\r\n            }}\r\n          >\r\n            {verdictLabel}\r\n          </span>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            gap: '1rem',\r\n            fontSize: '0.875rem'\r\n          }}\r\n        >\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: legendGoodColor,\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Good: {percentage}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: legendBadColor,\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Bad: {remaining}%</span>\r\n          </div>\r\n        </div>\r\n\r\n        {rationale && (\r\n          <div\r\n            style={{\r\n              marginTop: '0.5rem',\r\n              fontSize: '0.85rem',\r\n              color: '#6B7280'\r\n            }}\r\n          >\r\n            {rationale}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultQualityPie;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}