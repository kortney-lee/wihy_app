{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __generator } from \"tslib\";\nimport { Constants as MSRestConstants } from \"../util/constants\";\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n/**\n * Resource manager endpoints to match in order to specify a valid scope to the AzureIdentityCredentialAdapter.\n */\nexport var azureResourceManagerEndpoints = [\"https://management.windows.net\", \"https://management.chinacloudapi.cn\", \"https://management.usgovcloudapi.net\", \"https://management.cloudapi.de\"];\n/**\n * This class provides a simple extension to use {@link TokenCredential} from `@azure/identity` library to\n * use with legacy Azure SDKs that accept {@link ServiceClientCredentials} family of credentials for authentication.\n */\nvar AzureIdentityCredentialAdapter = /** @class */function () {\n  function AzureIdentityCredentialAdapter(azureTokenCredential, scopes) {\n    if (scopes === void 0) {\n      scopes = \"https://management.azure.com/.default\";\n    }\n    this.azureTokenCredential = azureTokenCredential;\n    this.scopes = scopes;\n  }\n  AzureIdentityCredentialAdapter.prototype.getToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.azureTokenCredential.getToken(this.scopes)];\n          case 1:\n            accessToken = _a.sent();\n            if (accessToken !== null) {\n              result = {\n                accessToken: accessToken.token,\n                tokenType: DEFAULT_AUTHORIZATION_SCHEME,\n                expiresOn: accessToken.expiresOnTimestamp\n              };\n              return [2 /*return*/, result];\n            } else {\n              throw new Error(\"Could find token for scope\");\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AzureIdentityCredentialAdapter.prototype.signRequest = function (webResource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getToken()];\n          case 1:\n            tokenResponse = _a.sent();\n            webResource.headers.set(MSRestConstants.HeaderConstants.AUTHORIZATION, tokenResponse.tokenType + \" \" + tokenResponse.accessToken);\n            return [2 /*return*/, Promise.resolve(webResource)];\n        }\n      });\n    });\n  };\n  return AzureIdentityCredentialAdapter;\n}();\nexport { AzureIdentityCredentialAdapter };","map":{"version":3,"names":["Constants","MSRestConstants","DEFAULT_AUTHORIZATION_SCHEME","azureResourceManagerEndpoints","AzureIdentityCredentialAdapter","azureTokenCredential","scopes","prototype","getToken","accessToken","_a","sent","result","token","tokenType","expiresOn","expiresOnTimestamp","Error","signRequest","webResource","tokenResponse","headers","set","HeaderConstants","AUTHORIZATION","Promise","resolve"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\credentials\\azureIdentityTokenCredentialAdapter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nimport { Constants as MSRestConstants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\n\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { TokenResponse } from \"./tokenResponse\";\n\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n\n/**\n * Resource manager endpoints to match in order to specify a valid scope to the AzureIdentityCredentialAdapter.\n */\nexport const azureResourceManagerEndpoints = [\n  \"https://management.windows.net\",\n  \"https://management.chinacloudapi.cn\",\n  \"https://management.usgovcloudapi.net\",\n  \"https://management.cloudapi.de\",\n];\n\n/**\n * This class provides a simple extension to use {@link TokenCredential} from `@azure/identity` library to\n * use with legacy Azure SDKs that accept {@link ServiceClientCredentials} family of credentials for authentication.\n */\nexport class AzureIdentityCredentialAdapter implements ServiceClientCredentials {\n  private azureTokenCredential: TokenCredential;\n  private scopes: string | string[];\n  constructor(\n    azureTokenCredential: TokenCredential,\n    scopes: string | string[] = \"https://management.azure.com/.default\"\n  ) {\n    this.azureTokenCredential = azureTokenCredential;\n    this.scopes = scopes;\n  }\n\n  public async getToken(): Promise<TokenResponse> {\n    const accessToken = await this.azureTokenCredential.getToken(this.scopes);\n    if (accessToken !== null) {\n      const result: TokenResponse = {\n        accessToken: accessToken.token,\n        tokenType: DEFAULT_AUTHORIZATION_SCHEME,\n        expiresOn: accessToken.expiresOnTimestamp,\n      };\n      return result;\n    } else {\n      throw new Error(\"Could find token for scope\");\n    }\n  }\n\n  public async signRequest(webResource: WebResource) {\n    const tokenResponse = await this.getToken();\n    webResource.headers.set(\n      MSRestConstants.HeaderConstants.AUTHORIZATION,\n      `${tokenResponse.tokenType} ${tokenResponse.accessToken}`\n    );\n    return Promise.resolve(webResource);\n  }\n}\n"],"mappings":"AAAA;AACA;;AAGA,SAASA,SAAS,IAAIC,eAAe,QAAQ,mBAAmB;AAMhE,IAAMC,4BAA4B,GAAG,QAAQ;AAE7C;;;AAGA,OAAO,IAAMC,6BAA6B,GAAG,CAC3C,gCAAgC,EAChC,qCAAqC,EACrC,sCAAsC,EACtC,gCAAgC,CACjC;AAED;;;;AAIA,IAAAC,8BAAA;EAGE,SAAAA,+BACEC,oBAAqC,EACrCC,MAAmE;IAAnE,IAAAA,MAAA;MAAAA,MAAA,0CAAmE;IAAA;IAEnE,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEaF,8BAAA,CAAAG,SAAA,CAAAC,QAAQ,GAArB;;;;;;YACsB,qBAAM,IAAI,CAACH,oBAAoB,CAACG,QAAQ,CAAC,IAAI,CAACF,MAAM,CAAC;;YAAnEG,WAAW,GAAGC,EAAA,CAAAC,IAAA,EAAqD;YACzE,IAAIF,WAAW,KAAK,IAAI,EAAE;cAClBG,MAAM,GAAkB;gBAC5BH,WAAW,EAAEA,WAAW,CAACI,KAAK;gBAC9BC,SAAS,EAAEZ,4BAA4B;gBACvCa,SAAS,EAAEN,WAAW,CAACO;eACxB;cACD,sBAAOJ,MAAM;aACd,MAAM;cACL,MAAM,IAAIK,KAAK,CAAC,4BAA4B,CAAC;;;;;;GAEhD;EAEYb,8BAAA,CAAAG,SAAA,CAAAW,WAAW,GAAxB,UAAyBC,WAAwB;;;;;;YACzB,qBAAM,IAAI,CAACX,QAAQ,EAAE;;YAArCY,aAAa,GAAGV,EAAA,CAAAC,IAAA,EAAqB;YAC3CQ,WAAW,CAACE,OAAO,CAACC,GAAG,CACrBrB,eAAe,CAACsB,eAAe,CAACC,aAAa,EAC1CJ,aAAa,CAACN,SAAS,SAAIM,aAAa,CAACX,WAAa,CAC1D;YACD,sBAAOgB,OAAO,CAACC,OAAO,CAACP,WAAW,CAAC;;;;GACpC;EACH,OAAAf,8BAAC;AAAD,CAAC,CAjCD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}