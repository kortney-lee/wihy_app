{"ast":null,"code":"class SearchCacheService{constructor(){this.cacheKey='vhealth_search_cache';this.maxCacheSize=50;// Maximum number of cached searches\nthis.cacheExpiry=30*60*1000;}// 30 minutes in milliseconds\n// Get cached result for a query\ngetCachedResult(query){try{const cache=this.getCache();const normalizedQuery=query.toLowerCase().trim();const cached=cache.find(item=>item.query.toLowerCase().trim()===normalizedQuery&&Date.now()-item.timestamp<this.cacheExpiry);return cached?cached.results:null;}catch(error){console.error('Error retrieving cached result:',error);return null;}}// Cache a search result\nsetCachedResult(query,results,url){try{const cache=this.getCache();const normalizedQuery=query.toLowerCase().trim();// Remove existing entry for this query\nconst filteredCache=cache.filter(item=>item.query.toLowerCase().trim()!==normalizedQuery);// Add new entry at the beginning\nconst newEntry={query:normalizedQuery,results,timestamp:Date.now(),url};filteredCache.unshift(newEntry);// Keep only the most recent entries\nif(filteredCache.length>this.maxCacheSize){filteredCache.splice(this.maxCacheSize);}this.saveCache(filteredCache);}catch(error){console.error('Error caching result:',error);}}// Get cached result by URL (for browser navigation)\ngetCachedResultByUrl(url){try{const cache=this.getCache();const cached=cache.find(item=>item.url===url);if(cached&&Date.now()-cached.timestamp<this.cacheExpiry){return{query:cached.query,results:cached.results};}return null;}catch(error){console.error('Error retrieving cached result by URL:',error);return null;}}// Clear expired cache entries\nclearExpiredCache(){try{const cache=this.getCache();const validCache=cache.filter(item=>Date.now()-item.timestamp<this.cacheExpiry);if(validCache.length!==cache.length){this.saveCache(validCache);}}catch(error){console.error('Error clearing expired cache:',error);}}// Clear all cache\nclearAllCache(){try{sessionStorage.removeItem(this.cacheKey);}catch(error){console.error('Error clearing cache:',error);}}// Get all cached results\ngetCache(){try{const cached=sessionStorage.getItem(this.cacheKey);return cached?JSON.parse(cached):[];}catch(error){console.error('Error parsing cache:',error);return[];}}// Save cache to sessionStorage\nsaveCache(cache){try{sessionStorage.setItem(this.cacheKey,JSON.stringify(cache));}catch(error){console.error('Error saving cache:',error);}}// Get cache statistics\ngetCacheStats(){const cache=this.getCache();const oldestTimestamp=cache.length>0?Math.min(...cache.map(item=>item.timestamp)):null;return{size:cache.length,oldestEntry:oldestTimestamp?new Date(oldestTimestamp):null};}}export const searchCache=new SearchCacheService();","map":{"version":3,"names":["SearchCacheService","constructor","cacheKey","maxCacheSize","cacheExpiry","getCachedResult","query","cache","getCache","normalizedQuery","toLowerCase","trim","cached","find","item","Date","now","timestamp","results","error","console","setCachedResult","url","filteredCache","filter","newEntry","unshift","length","splice","saveCache","getCachedResultByUrl","clearExpiredCache","validCache","clearAllCache","sessionStorage","removeItem","getItem","JSON","parse","setItem","stringify","getCacheStats","oldestTimestamp","Math","min","map","size","oldestEntry","searchCache"],"sources":["C:/repo/wihy_ui/client/src/services/searchCache.ts"],"sourcesContent":["interface CachedResult {\r\n  query: string;\r\n  results: string;\r\n  timestamp: number;\r\n  url: string;\r\n}\r\n\r\nclass SearchCacheService {\r\n  private cacheKey = 'vhealth_search_cache';\r\n  private maxCacheSize = 50; // Maximum number of cached searches\r\n  private cacheExpiry = 30 * 60 * 1000; // 30 minutes in milliseconds\r\n\r\n  // Get cached result for a query\r\n  getCachedResult(query: string): string | null {\r\n    try {\r\n      const cache = this.getCache();\r\n      const normalizedQuery = query.toLowerCase().trim();\r\n      \r\n      const cached = cache.find(item => \r\n        item.query.toLowerCase().trim() === normalizedQuery &&\r\n        (Date.now() - item.timestamp) < this.cacheExpiry\r\n      );\r\n\r\n      return cached ? cached.results : null;\r\n    } catch (error) {\r\n      console.error('Error retrieving cached result:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Cache a search result\r\n  setCachedResult(query: string, results: string, url: string): void {\r\n    try {\r\n      const cache = this.getCache();\r\n      const normalizedQuery = query.toLowerCase().trim();\r\n      \r\n      // Remove existing entry for this query\r\n      const filteredCache = cache.filter(item => \r\n        item.query.toLowerCase().trim() !== normalizedQuery\r\n      );\r\n\r\n      // Add new entry at the beginning\r\n      const newEntry: CachedResult = {\r\n        query: normalizedQuery,\r\n        results,\r\n        timestamp: Date.now(),\r\n        url\r\n      };\r\n\r\n      filteredCache.unshift(newEntry);\r\n\r\n      // Keep only the most recent entries\r\n      if (filteredCache.length > this.maxCacheSize) {\r\n        filteredCache.splice(this.maxCacheSize);\r\n      }\r\n\r\n      this.saveCache(filteredCache);\r\n    } catch (error) {\r\n      console.error('Error caching result:', error);\r\n    }\r\n  }\r\n\r\n  // Get cached result by URL (for browser navigation)\r\n  getCachedResultByUrl(url: string): { query: string; results: string } | null {\r\n    try {\r\n      const cache = this.getCache();\r\n      const cached = cache.find(item => item.url === url);\r\n      \r\n      if (cached && (Date.now() - cached.timestamp) < this.cacheExpiry) {\r\n        return {\r\n          query: cached.query,\r\n          results: cached.results\r\n        };\r\n      }\r\n      \r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error retrieving cached result by URL:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Clear expired cache entries\r\n  clearExpiredCache(): void {\r\n    try {\r\n      const cache = this.getCache();\r\n      const validCache = cache.filter(item => \r\n        (Date.now() - item.timestamp) < this.cacheExpiry\r\n      );\r\n      \r\n      if (validCache.length !== cache.length) {\r\n        this.saveCache(validCache);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing expired cache:', error);\r\n    }\r\n  }\r\n\r\n  // Clear all cache\r\n  clearAllCache(): void {\r\n    try {\r\n      sessionStorage.removeItem(this.cacheKey);\r\n    } catch (error) {\r\n      console.error('Error clearing cache:', error);\r\n    }\r\n  }\r\n\r\n  // Get all cached results\r\n  private getCache(): CachedResult[] {\r\n    try {\r\n      const cached = sessionStorage.getItem(this.cacheKey);\r\n      return cached ? JSON.parse(cached) : [];\r\n    } catch (error) {\r\n      console.error('Error parsing cache:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Save cache to sessionStorage\r\n  private saveCache(cache: CachedResult[]): void {\r\n    try {\r\n      sessionStorage.setItem(this.cacheKey, JSON.stringify(cache));\r\n    } catch (error) {\r\n      console.error('Error saving cache:', error);\r\n    }\r\n  }\r\n\r\n  // Get cache statistics\r\n  getCacheStats(): { size: number; oldestEntry: Date | null } {\r\n    const cache = this.getCache();\r\n    const oldestTimestamp = cache.length > 0 \r\n      ? Math.min(...cache.map(item => item.timestamp))\r\n      : null;\r\n    \r\n    return {\r\n      size: cache.length,\r\n      oldestEntry: oldestTimestamp ? new Date(oldestTimestamp) : null\r\n    };\r\n  }\r\n}\r\n\r\nexport const searchCache = new SearchCacheService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}