{"ast":null,"code":"import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\nimport { logger } from '../utils/logger';\n\n// Updated API endpoint to use the working configuration\nconst WIHY_API_ENDPOINT = getApiEndpoint('/ask');\n\n// Types for the WiHy API (updated to match OpenAPI specification v4.0.0)\n\n// Chart data structure from OpenAPI spec\n\n// Core response data structure from OpenAPI spec\n\n// Main response structure from OpenAPI spec\n\n// Keep the old interface for backward compatibility\n\n// Interface for the /scan endpoint\n\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj) {\n  return obj && typeof obj === 'object' && 'data' in obj && 'service_used' in obj;\n}\n\n// Legacy types for backward compatibility\n\nclass WihyAPIService {\n  constructor() {\n    this.baseURL = void 0;\n    this.isLocalDevelopment = void 0;\n    this.baseURL = WIHY_API_ENDPOINT;\n    this.isLocalDevelopment = API_CONFIG.WIHY_API_URL.includes('localhost');\n  }\n\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\n  async askAnything(request) {\n    // 🔍 WIHY API LOGGING: Request initiated\n    const requestStartTime = performance.now();\n    console.log('🔍 WIHY API REQUEST INITIATED:', {\n      timestamp: new Date().toISOString(),\n      component: 'wihyAPI',\n      action: 'requestInitiated',\n      query: request.query,\n      requestType: 'user_context' in request ? 'WihyRequest' : 'UnifiedRequest',\n      hasUserContext: !!('user_context' in request ? request.user_context : request.context),\n      isLocalDev: this.isLocalDevelopment\n    });\n    try {\n      logger.apiRequest('Making WiHy Unified API request', request);\n      let requestBody;\n      let endpoint;\n\n      // Both local and remote APIs use the same /ask endpoint with HealthQuestion format\n      endpoint = this.isLocalDevelopment ? this.baseURL : `${API_CONFIG.WIHY_API_URL}/ask`;\n\n      // Build HealthQuestion object according to OpenAPI spec\n      if ('user_context' in request) {\n        requestBody = {\n          query: request.query,\n          user_context: request.user_context || {},\n          include_nutrition: true,\n          include_biblical_wisdom: false,\n          include_charts: true\n        };\n      } else {\n        const unifiedReq = request;\n        requestBody = {\n          query: unifiedReq.query,\n          user_context: unifiedReq.context || unifiedReq.user_context || {},\n          include_nutrition: unifiedReq.include_nutrition !== false,\n          include_biblical_wisdom: unifiedReq.include_biblical_wisdom === true,\n          include_charts: unifiedReq.include_charts !== false\n        };\n      }\n\n      // Use fetch API to match the working example exactly with timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      // 🔍 WIHY API LOGGING: Fetch request starting\n      console.log('🔍 WIHY API FETCH START:', {\n        timestamp: new Date().toISOString(),\n        component: 'wihyAPI',\n        action: 'fetchRequestStart',\n        endpoint: endpoint,\n        requestBody: {\n          query: requestBody.query,\n          include_nutrition: requestBody.include_nutrition,\n          include_biblical_wisdom: requestBody.include_biblical_wisdom,\n          include_charts: requestBody.include_charts,\n          hasUserContext: !!requestBody.user_context\n        },\n        timeout: '30000ms'\n      });\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      // 🔍 WIHY API LOGGING: Fetch response received\n      const requestDuration = performance.now() - requestStartTime;\n      console.log('🔍 WIHY API FETCH RESPONSE:', {\n        timestamp: new Date().toISOString(),\n        component: 'wihyAPI',\n        action: 'fetchResponseReceived',\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n        duration: `${requestDuration.toFixed(2)}ms`,\n        headers: {\n          contentType: response.headers.get('content-type'),\n          contentLength: response.headers.get('content-length')\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Unified API response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy API error:', error);\n      if (error instanceof Error) {\n        // Check for timeout/abort errors\n        if (error.name === 'AbortError') {\n          throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');\n        }\n\n        // Check for CORS errors\n        if (error.message.includes('CORS') || error.message.includes('Access to fetch') || error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\n          throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');\n        }\n\n        // Check for network/connectivity issues\n        if (error.message.includes('fetch') || error.message.includes('network') || error.name === 'TypeError' || error.message.includes('Failed to fetch')) {\n          throw new Error('NETWORK_ERROR: Unable to connect to WiHy services');\n        }\n\n        // Check for server errors\n        if (error.message.includes('HTTP error! status: 5')) {\n          throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');\n        }\n        throw new Error(error.message || 'WiHy API request failed');\n      }\n      throw new Error('Unknown error occurred while contacting WiHy API');\n    }\n  }\n\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\n  convertToLegacyFormat(unifiedResponse, originalQuery) {\n    var _unifiedResponse$data, _unifiedResponse$data2, _unifiedResponse$data3, _unifiedResponse$data4;\n    // Handle chat service response\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\n      return {\n        success: unifiedResponse.success,\n        timestamp: new Date().toISOString(),\n        response_type: unifiedResponse.request_type || 'chat',\n        query: originalQuery,\n        wihy_response: {\n          query_type: unifiedResponse.request_type || 'chat',\n          query: originalQuery,\n          core_principle: unifiedResponse.data.response,\n          personalized_analysis: {\n            identified_risk_factors: [],\n            priority_health_goals: [unifiedResponse.data.response],\n            action_items: [{\n              action: unifiedResponse.data.response,\n              priority: 'medium',\n              target_illness: 'general_health',\n              evidence_level: 'ai_generated',\n              mechanism: 'chat_response',\n              timeline: 'immediate'\n            }],\n            timeline: 'immediate'\n          },\n          research_foundation: [{\n            citation_text: 'WiHy AI Chat System',\n            study_type: 'ai_response',\n            key_finding: unifiedResponse.data.response\n          }],\n          progress_tracking: {\n            key_metrics: ['general_health'],\n            reassessment_period: '1 week'\n          },\n          biblical_wisdom: []\n        },\n        message: unifiedResponse.data.response\n      };\n    }\n\n    // Handle other service types (training, nutrition, etc.)\n    return {\n      success: unifiedResponse.success,\n      timestamp: new Date().toISOString(),\n      response_type: unifiedResponse.request_type || 'health',\n      query: originalQuery,\n      wihy_response: {\n        query_type: unifiedResponse.request_type || 'health',\n        query: originalQuery,\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [],\n          action_items: ((_unifiedResponse$data = unifiedResponse.data.recommendations) === null || _unifiedResponse$data === void 0 ? void 0 : (_unifiedResponse$data2 = _unifiedResponse$data.immediate_actions) === null || _unifiedResponse$data2 === void 0 ? void 0 : _unifiedResponse$data2.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || ((_unifiedResponse$data3 = unifiedResponse.data.legacy_recommendations) === null || _unifiedResponse$data3 === void 0 ? void 0 : _unifiedResponse$data3.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || [],\n          timeline: 'ongoing'\n        },\n        research_foundation: ((_unifiedResponse$data4 = unifiedResponse.data.sources) === null || _unifiedResponse$data4 === void 0 ? void 0 : _unifiedResponse$data4.map(source => ({\n          citation_text: source,\n          study_type: 'research',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['general_health'],\n          reassessment_period: '1 month'\n        },\n        biblical_wisdom: []\n      },\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\n    };\n  }\n\n  /**\r\n   * Get health news articles using the unified API\r\n   */\n  async getHealthNews(categories, limit) {\n    const query = categories && categories.length > 0 ? `Latest health news about ${categories.join(', ')}` : 'Latest health news';\n    const request = {\n      query: query,\n      request_type: 'health',\n      context: {\n        categories: categories,\n        limit: limit\n      }\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\n  async searchNutrition(foodQuery, userContext) {\n    const request = {\n      query: `Nutrition information for ${foodQuery}`,\n      request_type: 'nutrition',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, request.query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Scan food images, barcodes, or products using the unified API\r\n   */\n  async scanFood(file, scanOptions) {\n    try {\n      let endpoint;\n      let requestBody;\n      if (this.isLocalDevelopment) {\n        // Local API uses /scan endpoint\n        endpoint = `${API_CONFIG.WIHY_API_URL}/scan`;\n        if (file) {\n          // Convert file to base64 for the API\n          const base64 = await this.fileToBase64(file);\n          requestBody = {\n            image_base64: base64,\n            user_context: (scanOptions === null || scanOptions === void 0 ? void 0 : scanOptions.user_context) || {},\n            ...scanOptions\n          };\n        } else {\n          requestBody = scanOptions || {};\n        }\n      } else {\n        // Remote API - fallback to legacy image analysis\n        // This would need to be implemented based on what the remote API supports\n        throw new Error('Image scanning not yet supported on remote API');\n      }\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000);\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      logger.apiResponse('WiHy Scan API response received', data);\n      return data;\n    } catch (error) {\n      logger.error('WiHy Scan API error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Convert File to base64 string\r\n   */\n  fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const result = reader.result;\n        // Remove the data:image/jpeg;base64, prefix\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  /**\r\n   * Scan food image - alias for scanFood for compatibility\r\n   */\n  async scanFoodImage(file, scanOptions) {\n    return this.scanFood(file, scanOptions);\n  }\n\n  /**\r\n   * Ask health question - compatibility method\r\n   */\n  async askHealthQuestion(request) {\n    var _wihyResp$wihy_respon;\n    const unifiedRequest = {\n      query: request.query,\n      request_type: 'health',\n      context: {}\n    };\n    const response = await this.askAnything(unifiedRequest);\n\n    // Ensure we return a HealthQuestionResponse format\n    if ('success' in response && 'data' in response) {\n      return response;\n    }\n\n    // Convert WihyResponse to HealthQuestionResponse format\n    const wihyResp = response;\n    const timestamp = Date.now();\n    return {\n      success: wihyResp.success,\n      timestamp: new Date().toISOString(),\n      endpoint: '/health/question',\n      data: {\n        query: request.query,\n        timestamp: timestamp,\n        response: ((_wihyResp$wihy_respon = wihyResp.wihy_response) === null || _wihyResp$wihy_respon === void 0 ? void 0 : _wihyResp$wihy_respon.core_principle) || wihyResp.message,\n        processor_used: 'wihy_api',\n        processing_time: 100,\n        nutrition_data: {},\n        health_insights: {\n          key_benefits: [],\n          potential_risks: [],\n          recommendations: []\n        },\n        biblical_wisdom: {},\n        charts_data: {\n          nutrition_breakdown: {\n            chart_type: 'pie',\n            labels: [],\n            values: [],\n            colors: []\n          },\n          health_quality: {\n            chart_type: 'bar',\n            labels: [],\n            values: [],\n            colors: []\n          }\n        }\n      }\n    };\n  }\n\n  /**\r\n   * General health search using the unified API\r\n   */\n  async searchHealth(query, userContext) {\n    const request = {\n      query: query,\n      request_type: 'auto',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\n    return response;\n  }\n\n  /**\r\n   * Enhanced analysis method for special cases (compatibility method)\r\n   */\n  async analyzeWithWiHy(query, userContext, source) {\n    const request = {\n      query: query,\n      request_type: 'auto',\n      context: {\n        enhanced_analysis: true,\n        source: source,\n        ...userContext\n      }\n    };\n    const response = await this.askAnything(request);\n    return response;\n  }\n\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\n  formatWihyResponse(response) {\n    var _wihy_response$resear, _wihy_response$biblic;\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\n      const healthResp = response;\n      const data = healthResp.data;\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\n\n      // Main response content\n      formatted += data.response;\n\n      // Add health insights if available\n      if (data.health_insights) {\n        var _data$health_insights, _data$health_insights2, _data$health_insights3;\n        if ((_data$health_insights = data.health_insights.key_benefits) !== null && _data$health_insights !== void 0 && _data$health_insights.length) {\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\n          data.health_insights.key_benefits.forEach(benefit => {\n            formatted += `- ${benefit}\\n`;\n          });\n        }\n        if ((_data$health_insights2 = data.health_insights.potential_risks) !== null && _data$health_insights2 !== void 0 && _data$health_insights2.length) {\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\n          data.health_insights.potential_risks.forEach(risk => {\n            formatted += `- ${risk}\\n`;\n          });\n        }\n        if ((_data$health_insights3 = data.health_insights.recommendations) !== null && _data$health_insights3 !== void 0 && _data$health_insights3.length) {\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\n          data.health_insights.recommendations.forEach(rec => {\n            formatted += `- ${rec}\\n`;\n          });\n        }\n      }\n\n      // Add processing info\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\n      return formatted;\n    }\n\n    // Handle UnifiedResponse format (legacy API)\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\n      var _unifiedResp$data$ai_;\n      const unifiedResp = response;\n      let formatted = `# WiHy Health Assistant\\n\\n`;\n\n      // Use the ai_response.response field which contains the actual response\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\n        formatted += unifiedResp.data.ai_response.response;\n      } else {\n        // Fallback to showing raw data if ai_response is not available\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\n      }\n\n      // Add service information if available\n      if ((_unifiedResp$data$ai_ = unifiedResp.data.ai_response) !== null && _unifiedResp$data$ai_ !== void 0 && _unifiedResp$data$ai_.service) {\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\n        if (unifiedResp.data.ai_response.confidence) {\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\n        }\n      }\n      return formatted;\n    }\n\n    // Handle legacy WihyResponse format\n    const legacyResp = response;\n    const {\n      wihy_response\n    } = legacyResp;\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\n\n    // Personalized Analysis\n    if (wihy_response.personalized_analysis) {\n      var _wihy_response$person, _wihy_response$person2, _wihy_response$person3;\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\n\n      // Risk Factors\n      if (((_wihy_response$person = wihy_response.personalized_analysis.identified_risk_factors) === null || _wihy_response$person === void 0 ? void 0 : _wihy_response$person.length) > 0) {\n        formatted += `### Identified Risk Factors:\\n`;\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\n        });\n      }\n\n      // Priority Goals\n      if (((_wihy_response$person2 = wihy_response.personalized_analysis.priority_health_goals) === null || _wihy_response$person2 === void 0 ? void 0 : _wihy_response$person2.length) > 0) {\n        formatted += `### 🎯 Priority Health Goals:\\n`;\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\n          formatted += `- ${goal}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Action Items\n      if (((_wihy_response$person3 = wihy_response.personalized_analysis.action_items) === null || _wihy_response$person3 === void 0 ? void 0 : _wihy_response$person3.length) > 0) {\n        formatted += `### 📋 Action Items:\\n`;\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\n          formatted += `- **Priority:** ${action.priority}\\n`;\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\n        });\n      }\n\n      // Timeline\n      if (wihy_response.personalized_analysis.timeline) {\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\n      }\n    }\n\n    // Research Foundation\n    if (((_wihy_response$resear = wihy_response.research_foundation) === null || _wihy_response$resear === void 0 ? void 0 : _wihy_response$resear.length) > 0) {\n      formatted += `## 📚 Research Foundation\\n\\n`;\n      wihy_response.research_foundation.forEach(research => {\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\n        formatted += `  ${research.key_finding}\\n\\n`;\n      });\n    }\n\n    // Progress Tracking\n    if (wihy_response.progress_tracking) {\n      formatted += `## 📊 Progress Tracking\\n\\n`;\n      formatted += `**Key Metrics to Track:**\\n`;\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\n        formatted += `- ${metric}\\n`;\n      });\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\n    }\n\n    // Biblical Wisdom\n    if (((_wihy_response$biblic = wihy_response.biblical_wisdom) === null || _wihy_response$biblic === void 0 ? void 0 : _wihy_response$biblic.length) > 0) {\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\n      wihy_response.biblical_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n\n    // Add timestamp if available (different field names in different response formats)\n    const timestamp = response.timestamp || response.created_at || new Date().toISOString();\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\n    return formatted;\n  }\n\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\n  extractRecommendations(response) {\n    const recommendations = [];\n\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\n      const healthResp = response;\n      if (healthResp.data.health_insights.recommendations) {\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\n      }\n      return recommendations;\n    }\n    if (isUnifiedResponse(response)) {\n      // Handle new structured recommendations\n      if (response.data.recommendations) {\n        const recs = response.data.recommendations;\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\n      }\n      // Handle legacy recommendations\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\n        response.data.legacy_recommendations.forEach(r => recommendations.push(r));\n      }\n    } else {\n      var _legacyResp$wihy_resp;\n      // Handle legacy WihyResponse format\n      const legacyResp = response;\n      if ((_legacyResp$wihy_resp = legacyResp.wihy_response.personalized_analysis) !== null && _legacyResp$wihy_resp !== void 0 && _legacyResp$wihy_resp.action_items) {\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\n          recommendations.push(`${action.action} (${action.priority} priority)`);\n        });\n      }\n    }\n    return recommendations;\n  }\n\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\n  extractCitations(response) {\n    const citations = [];\n\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\n      // For now, the new API doesn't include specific citation fields in the schema\n      // We could parse citations from the response text if needed\n      return citations;\n    }\n    if (isUnifiedResponse(response)) {\n      // Unified API may include sources array\n      if (response.data.sources && response.data.sources.length > 0) {\n        response.data.sources.forEach(s => citations.push(s));\n      }\n    } else {\n      // Handle legacy WihyResponse format\n      const legacyResp = response;\n      if (legacyResp.wihy_response.research_foundation) {\n        legacyResp.wihy_response.research_foundation.forEach(research => {\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\n        });\n      }\n    }\n    return citations;\n  }\n\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\n  formatUnifiedResponseForChat(response) {\n    // Handle chat service responses\n    if (response.service_used === 'chat' && response.data.response) {\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n      // We should provide more helpful information to the user\n      const briefResponse = response.data.response;\n      if (briefResponse.includes('AI Chat response to:')) {\n        // The API gave us a placeholder response, provide something more useful\n        const query = response.data.query || 'your question';\n        return `I received your question about \"${query}\" and I'm here to help! \n\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\n\n• Understanding health and nutrition concepts\n• Providing general wellness guidance  \n• Explaining health data and metrics\n• Offering evidence-based health insights\n\nWhat specific aspect of health would you like to explore further?`;\n      }\n      return briefResponse;\n    }\n\n    // Handle other response types\n    if (response.data.response) {\n      return response.data.response;\n    }\n    if (response.data.analysis) {\n      return response.data.analysis;\n    }\n    if (response.data.training_status) {\n      let message = `🔄 ${response.data.training_status}`;\n      if (response.data.available_models && response.data.available_models.length > 0) {\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\n      }\n      return message;\n    }\n\n    // Fallback - show the raw data in a readable format\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\n  }\n\n  /**\r\n   * Format response for display - compatibility alias for formatWihyResponse\r\n   */\n  formatResponse(response) {\n    return this.formatWihyResponse(response);\n  }\n}\n\n// Export a singleton instance\nexport const wihyAPI = new WihyAPIService();\nexport default wihyAPI;","map":{"version":3,"names":["API_CONFIG","getApiEndpoint","logger","WIHY_API_ENDPOINT","isUnifiedResponse","obj","WihyAPIService","constructor","baseURL","isLocalDevelopment","WIHY_API_URL","includes","askAnything","request","requestStartTime","performance","now","console","log","timestamp","Date","toISOString","component","action","query","requestType","hasUserContext","user_context","context","isLocalDev","apiRequest","requestBody","endpoint","include_nutrition","include_biblical_wisdom","include_charts","unifiedReq","controller","AbortController","timeoutId","setTimeout","abort","timeout","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","requestDuration","status","statusText","ok","duration","toFixed","contentType","get","contentLength","Error","data","json","apiResponse","error","name","message","convertToLegacyFormat","unifiedResponse","originalQuery","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","success","response_type","request_type","wihy_response","query_type","core_principle","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","analysis","recommendations","immediate_actions","map","rec","index","legacy_recommendations","sources","source","getHealthNews","categories","limit","length","join","searchNutrition","foodQuery","userContext","scanFood","file","scanOptions","base64","fileToBase64","image_base64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","scanFoodImage","askHealthQuestion","_wihyResp$wihy_respon","unifiedRequest","wihyResp","processor_used","processing_time","nutrition_data","health_insights","key_benefits","potential_risks","charts_data","nutrition_breakdown","chart_type","labels","values","colors","health_quality","searchHealth","analyzeWithWiHy","enhanced_analysis","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","healthResp","formatted","_data$health_insights","_data$health_insights2","_data$health_insights3","forEach","benefit","risk","_unifiedResp$data$ai_","unifiedResp","ai_response","service","confidence","Math","round","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","risk_factor","replace","toUpperCase","associated_illnesses","prevalence_rate","preventability_score","goal","research","metric","wisdom","created_at","toLocaleString","extractRecommendations","r","push","recs","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_legacyResp$wihy_resp","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","training_status","available_models","formatResponse","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, getApiEndpoint } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Updated API endpoint to use the working configuration\r\nconst WIHY_API_ENDPOINT = getApiEndpoint('/ask');\r\n\r\n// Types for the WiHy API (updated to match OpenAPI specification v4.0.0)\r\nexport interface HealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n  include_nutrition?: boolean;            // OPTIONAL: Include nutrition analysis (default: true)\r\n  include_biblical_wisdom?: boolean;      // OPTIONAL: Include biblical wisdom (default: true)\r\n  include_charts?: boolean;               // OPTIONAL: Include chart data (default: true)\r\n}\r\n\r\n// Chart data structure from OpenAPI spec\r\nexport interface ChartData {\r\n  chart_type: string;\r\n  labels: string[];\r\n  values: number[];\r\n  colors: string[];\r\n  verdict?: string;\r\n  reasons?: string[];\r\n}\r\n\r\nexport interface ChartsData {\r\n  nutrition_breakdown?: ChartData;\r\n  health_quality?: ChartData;\r\n}\r\n\r\nexport interface HealthInsights {\r\n  key_benefits?: string[];\r\n  potential_risks?: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\n// Core response data structure from OpenAPI spec\r\nexport interface ProcessedHealthData {\r\n  query: string;\r\n  timestamp: number;\r\n  processor_used: string;\r\n  processing_time: number;\r\n  response: string;\r\n  nutrition_data: Record<string, any>;\r\n  health_insights: HealthInsights;\r\n  biblical_wisdom: Record<string, any>;\r\n  charts_data: ChartsData;\r\n}\r\n\r\n// Main response structure from OpenAPI spec\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ProcessedHealthData;\r\n}\r\n\r\n// Keep the old interface for backward compatibility\r\nexport interface UnifiedRequest extends HealthQuestion {\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train';\r\n  context?: Record<string, any>;\r\n  user_id?: string;\r\n  session_id?: string;\r\n}\r\n\r\n// Interface for the /scan endpoint\r\nexport interface ScanRequest {\r\n  image_url?: string;                     // OPTIONAL: URL to image\r\n  image_base64?: string;                  // OPTIONAL: Base64 encoded image\r\n  product_name?: string;                  // OPTIONAL: Product name to scan\r\n  barcode?: string;                       // OPTIONAL: Barcode/UPC to scan  \r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n  private isLocalDevelopment: boolean;\r\n\r\n  constructor() {\r\n    this.baseURL = WIHY_API_ENDPOINT;\r\n    this.isLocalDevelopment = API_CONFIG.WIHY_API_URL.includes('localhost');\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    // 🔍 WIHY API LOGGING: Request initiated\r\n    const requestStartTime = performance.now();\r\n    console.log('🔍 WIHY API REQUEST INITIATED:', {\r\n      timestamp: new Date().toISOString(),\r\n      component: 'wihyAPI',\r\n      action: 'requestInitiated',\r\n      query: request.query,\r\n      requestType: 'user_context' in request ? 'WihyRequest' : 'UnifiedRequest',\r\n      hasUserContext: !!('user_context' in request ? request.user_context : (request as UnifiedRequest).context),\r\n      isLocalDev: this.isLocalDevelopment\r\n    });\r\n    \r\n    try {\r\n      logger.apiRequest('Making WiHy Unified API request', request);\r\n      \r\n      let requestBody: any;\r\n      let endpoint: string;\r\n      \r\n      // Both local and remote APIs use the same /ask endpoint with HealthQuestion format\r\n      endpoint = this.isLocalDevelopment ? this.baseURL : `${API_CONFIG.WIHY_API_URL}/ask`;\r\n      \r\n      // Build HealthQuestion object according to OpenAPI spec\r\n      if ('user_context' in request) {\r\n        requestBody = {\r\n          query: request.query,\r\n          user_context: request.user_context || {},\r\n          include_nutrition: true,\r\n          include_biblical_wisdom: false,\r\n          include_charts: true\r\n        };\r\n      } else {\r\n        const unifiedReq = request as UnifiedRequest;\r\n        requestBody = {\r\n          query: unifiedReq.query,\r\n          user_context: unifiedReq.context || unifiedReq.user_context || {},\r\n          include_nutrition: unifiedReq.include_nutrition !== false,\r\n          include_biblical_wisdom: unifiedReq.include_biblical_wisdom === true,\r\n          include_charts: unifiedReq.include_charts !== false\r\n        };\r\n      }\r\n      \r\n      // Use fetch API to match the working example exactly with timeout\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      // 🔍 WIHY API LOGGING: Fetch request starting\r\n      console.log('🔍 WIHY API FETCH START:', {\r\n        timestamp: new Date().toISOString(),\r\n        component: 'wihyAPI',\r\n        action: 'fetchRequestStart',\r\n        endpoint: endpoint,\r\n        requestBody: {\r\n          query: requestBody.query,\r\n          include_nutrition: requestBody.include_nutrition,\r\n          include_biblical_wisdom: requestBody.include_biblical_wisdom,\r\n          include_charts: requestBody.include_charts,\r\n          hasUserContext: !!requestBody.user_context\r\n        },\r\n        timeout: '30000ms'\r\n      });\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n      \r\n      // 🔍 WIHY API LOGGING: Fetch response received\r\n      const requestDuration = performance.now() - requestStartTime;\r\n      console.log('🔍 WIHY API FETCH RESPONSE:', {\r\n        timestamp: new Date().toISOString(),\r\n        component: 'wihyAPI',\r\n        action: 'fetchResponseReceived',\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        ok: response.ok,\r\n        duration: `${requestDuration.toFixed(2)}ms`,\r\n        headers: {\r\n          contentType: response.headers.get('content-type'),\r\n          contentLength: response.headers.get('content-length')\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Unified API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy API error:', error);\r\n      \r\n      if (error instanceof Error) {\r\n        // Check for timeout/abort errors\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('TIMEOUT_ERROR: Request timed out - services may be unavailable');\r\n        }\r\n        \r\n        // Check for CORS errors\r\n        if (error.message.includes('CORS') || \r\n            error.message.includes('Access to fetch') ||\r\n            error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n          throw new Error('CORS_ERROR: Unable to connect to WiHy services from this domain');\r\n        }\r\n        \r\n        // Check for network/connectivity issues\r\n        if (error.message.includes('fetch') || \r\n            error.message.includes('network') || \r\n            error.name === 'TypeError' ||\r\n            error.message.includes('Failed to fetch')) {\r\n          throw new Error('NETWORK_ERROR: Unable to connect to WiHy services');\r\n        }\r\n        \r\n        // Check for server errors\r\n        if (error.message.includes('HTTP error! status: 5')) {\r\n          throw new Error('SERVER_ERROR: WiHy services are temporarily unavailable');\r\n        }\r\n        \r\n        throw new Error(error.message || 'WiHy API request failed');\r\n      }\r\n      \r\n      throw new Error('Unknown error occurred while contacting WiHy API');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type || 'chat',\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type || 'chat',\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type || 'health',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type || 'health',\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Scan food images, barcodes, or products using the unified API\r\n   */\r\n  async scanFood(file?: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      let endpoint: string;\r\n      let requestBody: any;\r\n      \r\n      if (this.isLocalDevelopment) {\r\n        // Local API uses /scan endpoint\r\n        endpoint = `${API_CONFIG.WIHY_API_URL}/scan`;\r\n        \r\n        if (file) {\r\n          // Convert file to base64 for the API\r\n          const base64 = await this.fileToBase64(file);\r\n          requestBody = {\r\n            image_base64: base64,\r\n            user_context: scanOptions?.user_context || {},\r\n            ...scanOptions\r\n          };\r\n        } else {\r\n          requestBody = scanOptions || {};\r\n        }\r\n      } else {\r\n        // Remote API - fallback to legacy image analysis\r\n        // This would need to be implemented based on what the remote API supports\r\n        throw new Error('Image scanning not yet supported on remote API');\r\n      }\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000);\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Scan API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Scan API error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert File to base64 string\r\n   */\r\n  private fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        // Remove the data:image/jpeg;base64, prefix\r\n        const base64 = result.split(',')[1];\r\n        resolve(base64);\r\n      };\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Scan food image - alias for scanFood for compatibility\r\n   */\r\n  async scanFoodImage(file: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    return this.scanFood(file, scanOptions);\r\n  }\r\n\r\n  /**\r\n   * Ask health question - compatibility method\r\n   */\r\n  async askHealthQuestion(request: { query: string }): Promise<HealthQuestionResponse> {\r\n    const unifiedRequest: UnifiedRequest = {\r\n      query: request.query,\r\n      request_type: 'health',\r\n      context: {}\r\n    };\r\n\r\n    const response = await this.askAnything(unifiedRequest);\r\n    \r\n    // Ensure we return a HealthQuestionResponse format\r\n    if ('success' in response && 'data' in response) {\r\n      return response as HealthQuestionResponse;\r\n    }\r\n    \r\n    // Convert WihyResponse to HealthQuestionResponse format\r\n    const wihyResp = response as WihyResponse;\r\n    const timestamp = Date.now();\r\n    \r\n    return {\r\n      success: wihyResp.success,\r\n      timestamp: new Date().toISOString(),\r\n      endpoint: '/health/question',\r\n      data: {\r\n        query: request.query,\r\n        timestamp: timestamp,\r\n        response: wihyResp.wihy_response?.core_principle || wihyResp.message,\r\n        processor_used: 'wihy_api',\r\n        processing_time: 100,\r\n        nutrition_data: {},\r\n        health_insights: {\r\n          key_benefits: [],\r\n          potential_risks: [],\r\n          recommendations: []\r\n        },\r\n        biblical_wisdom: {},\r\n        charts_data: {\r\n          nutrition_breakdown: {\r\n            chart_type: 'pie',\r\n            labels: [],\r\n            values: [],\r\n            colors: []\r\n          },\r\n          health_quality: {\r\n            chart_type: 'bar',\r\n            labels: [],\r\n            values: [],\r\n            colors: []\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Enhanced analysis method for special cases (compatibility method)\r\n   */\r\n  async analyzeWithWiHy(query: string, userContext?: UserContext, source?: string): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: {\r\n        enhanced_analysis: true,\r\n        source: source,\r\n        ...userContext\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\r\n  formatWihyResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const data = healthResp.data;\r\n      \r\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n      \r\n      // Main response content\r\n      formatted += data.response;\r\n      \r\n      // Add health insights if available\r\n      if (data.health_insights) {\r\n        if (data.health_insights.key_benefits?.length) {\r\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n          data.health_insights.key_benefits.forEach(benefit => {\r\n            formatted += `- ${benefit}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.potential_risks?.length) {\r\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n          data.health_insights.potential_risks.forEach(risk => {\r\n            formatted += `- ${risk}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.recommendations?.length) {\r\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n          data.health_insights.recommendations.forEach(rec => {\r\n            formatted += `- ${rec}\\n`;\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Add processing info\r\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle UnifiedResponse format (legacy API)\r\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      // Use the ai_response.response field which contains the actual response\r\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\r\n        formatted += unifiedResp.data.ai_response.response;\r\n      } else {\r\n        // Fallback to showing raw data if ai_response is not available\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      // Add service information if available\r\n      if (unifiedResp.data.ai_response?.service) {\r\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\r\n        if (unifiedResp.data.ai_response.confidence) {\r\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\r\n        }\r\n      }\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add timestamp if available (different field names in different response formats)\r\n    const timestamp = (response as any).timestamp || (response as any).created_at || new Date().toISOString();\r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\r\n      }\r\n      return recommendations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.personalized_analysis?.action_items) {\r\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\r\n      // For now, the new API doesn't include specific citation fields in the schema\r\n      // We could parse citations from the response text if needed\r\n      return citations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.research_foundation) {\r\n        legacyResp.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n\r\n  /**\r\n   * Format response for display - compatibility alias for formatWihyResponse\r\n   */\r\n  formatResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    return this.formatWihyResponse(response);\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}