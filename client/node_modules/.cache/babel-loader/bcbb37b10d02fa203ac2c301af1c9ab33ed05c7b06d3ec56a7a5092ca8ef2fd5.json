{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\SearchResults.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport './styles/VHealthSearch.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContent = () => {\n  _s();\n  const [currentPage, setCurrentPage] = useState('search');\n  const [searchResults, setSearchResults] = useState(null);\n  const [currentQuery, setCurrentQuery] = useState('');\n  const [dataSource, setDataSource] = useState('openai');\n  const [citations, setCitations] = useState([]);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Handle URL changes and load data from sessionStorage\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search);\n    const query = urlParams.get('q');\n    if (query && location.pathname === '/results') {\n      setCurrentQuery(query);\n      setCurrentPage('results');\n\n      // Load results from sessionStorage\n      const storedData = sessionStorage.getItem('searchResults');\n      if (storedData) {\n        try {\n          const parsedData = JSON.parse(storedData);\n          setSearchResults(parsedData.results);\n          setDataSource(parsedData.dataSource);\n          setCitations(parsedData.citations);\n          console.log('Loaded results from sessionStorage:', parsedData);\n        } catch (error) {\n          console.error('Error parsing stored results:', error);\n        }\n      }\n    } else {\n      setCurrentPage('search');\n    }\n  }, [location]);\n  const handleBackToSearch = () => {\n    setCurrentPage('search');\n    setSearchResults(null);\n    setCurrentQuery('');\n    sessionStorage.removeItem('searchResults'); // Clear stored results\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    setCurrentQuery(newQuery);\n    setCurrentPage('search');\n    sessionStorage.removeItem('searchResults'); // Clear stored results\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [currentPage === 'search' && /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), currentPage === 'results' && /*#__PURE__*/_jsxDEV(SearchResults, {\n      query: currentQuery,\n      results: searchResults,\n      onBackToSearch: handleBackToSearch,\n      onNewSearch: handleNewSearch,\n      isLoading: false,\n      dataSource: dataSource,\n      citations: citations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(AppContent, \"xSfSLlOsWLNr5cOYBZ5J/I4mcT0=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AppContent;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/*\",\n        element: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","useLocation","VHealthSearch","SearchResults","jsxDEV","_jsxDEV","AppContent","_s","currentPage","setCurrentPage","searchResults","setSearchResults","currentQuery","setCurrentQuery","dataSource","setDataSource","citations","setCitations","navigate","location","urlParams","URLSearchParams","search","query","get","pathname","storedData","sessionStorage","getItem","parsedData","JSON","parse","results","console","log","error","handleBackToSearch","removeItem","handleNewSearch","newQuery","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onBackToSearch","onNewSearch","isLoading","_c","App","path","element","_c2","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/SearchResults.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport './styles/VHealthSearch.css';\r\n\r\nconst AppContent: React.FC = () => {\r\n  const [currentPage, setCurrentPage] = useState('search');\r\n  const [searchResults, setSearchResults] = useState<any>(null);\r\n  const [currentQuery, setCurrentQuery] = useState('');\r\n  const [dataSource, setDataSource] = useState<'error' | 'openai' | 'local' | 'vnutrition'>('openai');\r\n  const [citations, setCitations] = useState<any[]>([]);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Handle URL changes and load data from sessionStorage\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(location.search);\r\n    const query = urlParams.get('q');\r\n    \r\n    if (query && location.pathname === '/results') {\r\n      setCurrentQuery(query);\r\n      setCurrentPage('results');\r\n      \r\n      // Load results from sessionStorage\r\n      const storedData = sessionStorage.getItem('searchResults');\r\n      if (storedData) {\r\n        try {\r\n          const parsedData = JSON.parse(storedData);\r\n          setSearchResults(parsedData.results);\r\n          setDataSource(parsedData.dataSource);\r\n          setCitations(parsedData.citations);\r\n          console.log('Loaded results from sessionStorage:', parsedData);\r\n        } catch (error) {\r\n          console.error('Error parsing stored results:', error);\r\n        }\r\n      }\r\n    } else {\r\n      setCurrentPage('search');\r\n    }\r\n  }, [location]);\r\n\r\n  const handleBackToSearch = () => {\r\n    setCurrentPage('search');\r\n    setSearchResults(null);\r\n    setCurrentQuery('');\r\n    sessionStorage.removeItem('searchResults'); // Clear stored results\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    setCurrentQuery(newQuery);\r\n    setCurrentPage('search');\r\n    sessionStorage.removeItem('searchResults'); // Clear stored results\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {currentPage === 'search' && (\r\n        <VHealthSearch />\r\n      )}\r\n      \r\n      {currentPage === 'results' && (\r\n        <SearchResults\r\n          query={currentQuery}\r\n          results={searchResults}\r\n          onBackToSearch={handleBackToSearch}\r\n          onNewSearch={handleNewSearch}\r\n          isLoading={false}\r\n          dataSource={dataSource}\r\n          citations={citations}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/*\" element={<AppContent />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}