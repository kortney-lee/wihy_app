{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { replaceAll } from \"./util/utils\";\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nvar URLQuery = /** @class */function () {\n  function URLQuery() {\n    this._rawQuery = {};\n  }\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  URLQuery.prototype.any = function () {\n    return Object.keys(this._rawQuery).length > 0;\n  };\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  URLQuery.prototype.set = function (parameterName, parameterValue) {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        var newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  };\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  URLQuery.prototype.get = function (parameterName) {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  };\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  URLQuery.prototype.toString = function () {\n    var result = \"\";\n    for (var parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      var parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        var parameterStrings = [];\n        for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {\n          var parameterValueElement = parameterValue_1[_i];\n          parameterStrings.push(parameterName + \"=\" + parameterValueElement);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += parameterName + \"=\" + parameterValue;\n      }\n    }\n    return result;\n  };\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  URLQuery.parse = function (text) {\n    var result = new URLQuery();\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n      var currentState = \"ParameterName\";\n      var parameterName = \"\";\n      var parameterValue = \"\";\n      for (var i = 0; i < text.length; ++i) {\n        var currentCharacter = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n    return result;\n  };\n  return URLQuery;\n}();\nexport { URLQuery };\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nvar URLBuilder = /** @class */function () {\n  function URLBuilder() {}\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  URLBuilder.prototype.setScheme = function (scheme) {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  };\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  URLBuilder.prototype.getScheme = function () {\n    return this._scheme;\n  };\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  URLBuilder.prototype.setHost = function (host) {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  };\n  /**\n   * Get the host that has been set in this URL.\n   */\n  URLBuilder.prototype.getHost = function () {\n    return this._host;\n  };\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  URLBuilder.prototype.setPort = function (port) {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  };\n  /**\n   * Get the port that has been set in this URL.\n   */\n  URLBuilder.prototype.getPort = function () {\n    return this._port;\n  };\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  URLBuilder.prototype.setPath = function (path) {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      var schemeIndex = path.indexOf(\"://\");\n      if (schemeIndex !== -1) {\n        var schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n        // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  };\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  URLBuilder.prototype.appendPath = function (path) {\n    if (path) {\n      var currentPath = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  };\n  /**\n   * Get the path that has been set in this URL.\n   */\n  URLBuilder.prototype.getPath = function () {\n    return this._path;\n  };\n  /**\n   * Set the query in this URL.\n   */\n  URLBuilder.prototype.setQuery = function (query) {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  };\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  };\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  };\n  /**\n   * Get the query in this URL.\n   */\n  URLBuilder.prototype.getQuery = function () {\n    return this._query ? this._query.toString() : undefined;\n  };\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  URLBuilder.prototype.set = function (text, startState) {\n    var tokenizer = new URLTokenizer(text, startState);\n    while (tokenizer.next()) {\n      var token = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n          case \"PATH\":\n            var tokenPath = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n          default:\n            throw new Error(\"Unrecognized URLTokenType: \" + token.type);\n        }\n      }\n    }\n  };\n  URLBuilder.prototype.toString = function () {\n    var result = \"\";\n    if (this._scheme) {\n      result += this._scheme + \"://\";\n    }\n    if (this._host) {\n      result += this._host;\n    }\n    if (this._port) {\n      result += \":\" + this._port;\n    }\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n    if (this._query && this._query.any()) {\n      result += \"?\" + this._query.toString();\n    }\n    return result;\n  };\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  };\n  URLBuilder.parse = function (text) {\n    var result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  };\n  return URLBuilder;\n}();\nexport { URLBuilder };\nvar URLToken = /** @class */function () {\n  function URLToken(text, type) {\n    this.text = text;\n    this.type = type;\n  }\n  URLToken.scheme = function (text) {\n    return new URLToken(text, \"SCHEME\");\n  };\n  URLToken.host = function (text) {\n    return new URLToken(text, \"HOST\");\n  };\n  URLToken.port = function (text) {\n    return new URLToken(text, \"PORT\");\n  };\n  URLToken.path = function (text) {\n    return new URLToken(text, \"PATH\");\n  };\n  URLToken.query = function (text) {\n    return new URLToken(text, \"QUERY\");\n  };\n  return URLToken;\n}();\nexport { URLToken };\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character) {\n  var characterCode = character.charCodeAt(0);\n  return 48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */ || 65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */ || 97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */;\n}\n/**\n * A class that tokenizes URL strings.\n */\nvar URLTokenizer = /** @class */function () {\n  function URLTokenizer(_text, state) {\n    this._text = _text;\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  URLTokenizer.prototype.current = function () {\n    return this._currentToken;\n  };\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  URLTokenizer.prototype.next = function () {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n        case \"HOST\":\n          nextHost(this);\n          break;\n        case \"PORT\":\n          nextPort(this);\n          break;\n        case \"PATH\":\n          nextPath(this);\n          break;\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n        default:\n          throw new Error(\"Unrecognized URLTokenizerState: \" + this._currentState);\n      }\n    }\n    return !!this._currentToken;\n  };\n  return URLTokenizer;\n}();\nexport { URLTokenizer };\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer) {\n  var result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer) {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer) {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer, step) {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer, charactersToPeek) {\n  var endIndex = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer, condition) {\n  var result = \"\";\n  while (hasCurrentCharacter(tokenizer)) {\n    var currentCharacter = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n  return result;\n}\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer) {\n  return readWhile(tokenizer, function (character) {\n    return isAlphaNumericCharacter(character);\n  });\n}\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer) {\n  var terminatingCharacters = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    terminatingCharacters[_i - 1] = arguments[_i];\n  }\n  return readWhile(tokenizer, function (character) {\n    return terminatingCharacters.indexOf(character) === -1;\n  });\n}\nfunction nextScheme(tokenizer) {\n  var scheme = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\nfunction nextSchemeOrHost(tokenizer) {\n  var schemeOrHost = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\nfunction nextHost(tokenizer) {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n  var host = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextPort(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n  var port = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextPath(tokenizer) {\n  var path = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextQuery(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n  var query = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}","map":{"version":3,"names":["replaceAll","URLQuery","_rawQuery","prototype","any","Object","keys","length","set","parameterName","parameterValue","undefined","newValue","Array","isArray","toString","get","result","parameterStrings","_i","parameterValue_1","parameterValueElement","push","join","parse","text","startsWith","substring","currentState","i","currentCharacter","Error","URLBuilder","setScheme","scheme","_scheme","getScheme","setHost","host","_host","getHost","setPort","port","_port","getPort","setPath","path","_path","schemeIndex","indexOf","schemeStart","lastIndexOf","substr","appendPath","currentPath","getPath","endsWith","setQuery","query","_query","setQueryParameter","queryParameterName","queryParameterValue","getQueryParameterValue","getQuery","startState","tokenizer","URLTokenizer","next","token","current","type","tokenPath","searchValue","replaceValue","URLToken","isAlphaNumericCharacter","character","characterCode","charCodeAt","_text","state","_textLength","_currentState","_currentIndex","_currentToken","hasCurrentCharacter","nextScheme","nextSchemeOrHost","nextHost","nextPort","nextPath","nextQuery","readRemaining","getCurrentCharacter","nextCharacter","step","peekCharacters","charactersToPeek","endIndex","readWhile","condition","readWhileLetterOrDigit","readUntilCharacter","terminatingCharacters","arguments","schemeOrHost"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\url.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      const schemeIndex = path.indexOf(\"://\");\n      if (schemeIndex !== -1) {\n        const schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n        // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            const tokenPath: string | undefined = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {}\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (\n    (48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */\n  );\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(\n    tokenizer,\n    (character: string) => terminatingCharacters.indexOf(character) === -1\n  );\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}