{"ast":null,"code":"import{API_CONFIG,WIHY_HEALTH_CHECK_URL,WIHY_SCAN_IMAGE_URL,WIHY_SCAN_BARCODE_URL}from'../config/apiConfig';import{logger}from'../utils/logger';// Types for the WiHy Enhanced Model API (2,325 training examples)\n// Enhanced Model Response Structure\n// Image Scanner Response Structure\n// Barcode Scanner Response Structure  \n// Legacy interfaces for backward compatibility\n// Chart data structure from OpenAPI spec\n// Core response data structure from OpenAPI spec\n// Main response structure from OpenAPI spec\n// Keep the old interface for backward compatibility\n// Interface for the /scan endpoint\n// Type guard for detecting unified responses at runtime\nexport function isUnifiedResponse(obj){return obj&&typeof obj==='object'&&'data'in obj&&'service_used'in obj;}// Legacy types for backward compatibility\nclass WihyEnhancedAPIService{constructor(){this.baseURL=void 0;this.backupURLs=void 0;this.isLocalDevelopment=void 0;this.baseURL=API_CONFIG.WIHY_ENHANCED_API_URL;this.backupURLs=[API_CONFIG.WIHY_ENHANCED_API_BACKUP,API_CONFIG.WIHY_ENHANCED_API_CONTAINER];this.isLocalDevelopment=this.baseURL.includes('localhost');}/**\r\n   * Ask WiHy Enhanced Model a health-related question (2,325 training examples)\r\n   */async askEnhancedHealthQuestion(request){try{logger.apiRequest('Making WiHy Enhanced Model API request',request);const endpoint=\"\".concat(this.baseURL,\"/ask\");// Use fetch API with timeout and retry logic\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 second timeout\nconst response=await this.fetchWithRetry(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();logger.apiResponse('WiHy Enhanced Model API response received',data);return data;}catch(error){logger.error('WiHy Enhanced Model API error:',error);throw this.handleEnhancedError(error);}}/**\r\n   * Scan food image using enhanced vision analysis\r\n   */async scanFoodImage(imageFile){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const formData=new FormData();formData.append('image',imageFile);formData.append('context',context);const endpoint=WIHY_SCAN_IMAGE_URL;const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),45000);// 45 second timeout for images\nconst response=await this.fetchWithRetry(endpoint,{method:'POST',body:formData,signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();logger.apiResponse('WiHy Image Scanner response received',data);return data;}catch(error){logger.error('WiHy Image Scanner error:',error);throw this.handleScannerError(error,'image');}}/**\r\n   * Scan barcode using enhanced nutrition database\r\n   */async scanBarcode(barcode){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const requestBody={query:barcode,scan_location:context.scan_location||'web_app',device_type:context.device_type||'desktop'};const endpoint=WIHY_SCAN_BARCODE_URL;const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),20000);// 20 second timeout\nconst response=await this.fetchWithRetry(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();logger.apiResponse('WiHy Barcode Scanner response received',data);return data;}catch(error){logger.error('WiHy Barcode Scanner error:',error);throw this.handleScannerError(error,'barcode');}}/**\r\n   * Check API health and get status\r\n   */async checkAPIHealth(){try{const response=await fetch(WIHY_HEALTH_CHECK_URL,{method:'GET',headers:{'Accept':'application/json'}});if(!response.ok){throw new Error(\"Health check failed: \".concat(response.status));}return await response.json();}catch(error){logger.error('WiHy API health check failed:',error);throw error;}}/**\r\n   * Fetch with automatic retry logic and fallback endpoints\r\n   */async fetchWithRetry(url,options){let retries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;const endpoints=[this.baseURL,...this.backupURLs];for(let attempt=0;attempt<=retries;attempt++){for(const endpoint of endpoints){try{const fullUrl=url.replace(this.baseURL,endpoint);const response=await fetch(fullUrl,options);if(response.ok){return response;}// If primary endpoint fails, try backup\nif(endpoint===this.baseURL&&response.status>=500){continue;}return response;// Return even if not ok for error handling\n}catch(error){logger.warn(\"Attempt \".concat(attempt+1,\" failed for \").concat(endpoint,\":\"),error);// If this is the last endpoint and last attempt, throw error\nif(endpoint===endpoints[endpoints.length-1]&&attempt===retries){throw error;}}}}throw new Error('All endpoints and retries failed');}/**\r\n   * Enhanced error handling for API responses\r\n   */handleEnhancedError(error){if(error instanceof Error){// Check for timeout/abort errors\nif(error.name==='AbortError'){return new Error('TIMEOUT_ERROR: Enhanced model request timed out - services may be under heavy load');}// Check for CORS errors\nif(error.message.includes('CORS')||error.message.includes('Access to fetch')||error.message.includes('No \\'Access-Control-Allow-Origin\\'')){return new Error('CORS_ERROR: Unable to connect to WiHy Enhanced Model from this domain');}// Check for network/connectivity issues\nif(error.message.includes('fetch')||error.message.includes('network')||error.name==='TypeError'||error.message.includes('Failed to fetch')){return new Error('NETWORK_ERROR: Unable to connect to WiHy Enhanced Model services');}// Check for server errors\nif(error.message.includes('HTTP error! status: 5')){return new Error('SERVER_ERROR: WiHy Enhanced Model temporarily unavailable');}return new Error(error.message||'WiHy Enhanced Model request failed');}return new Error('Unknown error occurred while contacting WiHy Enhanced Model');}/**\r\n   * Scanner-specific error handling\r\n   */handleScannerError(error,scanType){const context=scanType==='image'?'Image Scanner':'Barcode Scanner';if(error instanceof Error){if(error.name==='AbortError'){return new Error(\"TIMEOUT_ERROR: \".concat(context,\" request timed out\"));}if(error.message.includes('HTTP error! status: 400')){return new Error(\"VALIDATION_ERROR: Invalid \".concat(scanType,\" format or data\"));}if(error.message.includes('HTTP error! status: 404')){return new Error(\"NOT_FOUND: \".concat(scanType==='barcode'?'Product not found in nutrition databases':'Unable to analyze image'));}return new Error(\"\".concat(context.toUpperCase(),\"_ERROR: \").concat(error.message));}return new Error(\"Unknown \".concat(context.toLowerCase(),\" error occurred\"));}/**\r\n   * Legacy compatibility method - Ask WiHy a health-related question\r\n   * Now routes to Enhanced Model for better responses\r\n   */async askAnything(request){try{// Convert legacy request to enhanced format\nconst enhancedRequest={query:request.query,context:'user_context'in request?JSON.stringify(request.user_context):'',user_id:'user_id'in request?request.user_id:undefined};// Try enhanced model first\ntry{const enhancedResponse=await this.askEnhancedHealthQuestion(enhancedRequest);// Convert enhanced response to legacy format for backward compatibility\nreturn this.convertEnhancedToLegacy(enhancedResponse,request.query);}catch(enhancedError){logger.warn('Enhanced model failed, falling back to legacy format:',enhancedError);// Fallback to legacy unified API if enhanced model fails\nreturn this.askLegacyUnified(request);}}catch(error){logger.error('All WiHy API methods failed:',error);throw error;}}/**\r\n   * Fallback method for legacy unified API\r\n   */async askLegacyUnified(request){logger.apiRequest('Making WiHy Legacy API request',request);let requestBody;let endpoint;// Use legacy endpoints\nendpoint=this.isLocalDevelopment?\"\".concat(API_CONFIG.WIHY_UNIFIED_API_URL,\"/ask\"):\"\".concat(API_CONFIG.WIHY_UNIFIED_API_URL,\"/ask\");// Build HealthQuestion object according to legacy spec\nif('user_context'in request){requestBody={query:request.query,user_context:request.user_context||{},include_nutrition:true,include_biblical_wisdom:false,include_charts:true};}else{const unifiedReq=request;requestBody={query:unifiedReq.query,user_context:unifiedReq.context||{},include_nutrition:true,include_biblical_wisdom:true,include_charts:true};}// Use fetch API to match the working example exactly with timeout\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30 second timeout\nconst response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();logger.apiResponse('WiHy Legacy API response received',data);return data;}/**\r\n   * Convert Enhanced Model response to legacy format for backward compatibility\r\n   */convertEnhancedToLegacy(enhancedResponse,originalQuery){return{success:true,timestamp:enhancedResponse.timestamp||new Date().toISOString(),response_type:'enhanced_model',query:originalQuery,wihy_response:{query_type:'enhanced_model',query:originalQuery,core_principle:enhancedResponse.answer,personalized_analysis:{identified_risk_factors:[],priority_health_goals:[enhancedResponse.answer],action_items:enhancedResponse.wihy_wisdom.map((wisdom,index)=>({action:wisdom,priority:'high',target_illness:'general_health',evidence_level:'enhanced_model',mechanism:'biblical_wisdom',timeline:'immediate'})),timeline:'immediate'},research_foundation:enhancedResponse.research_citations.map(citation=>({citation_text:citation,study_type:'enhanced_model_research',key_finding:citation})),progress_tracking:{key_metrics:['enhanced_health_understanding'],reassessment_period:'1 week'},biblical_wisdom:enhancedResponse.wihy_wisdom},message:enhancedResponse.answer};}/**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */convertToLegacyFormat(unifiedResponse,originalQuery){var _unifiedResponse$data,_unifiedResponse$data2,_unifiedResponse$data3,_unifiedResponse$data4;// Handle chat service response\nif(unifiedResponse.service_used==='chat'&&unifiedResponse.data.response){return{success:unifiedResponse.success,timestamp:new Date().toISOString(),response_type:unifiedResponse.request_type,query:originalQuery,wihy_response:{query_type:unifiedResponse.request_type,query:originalQuery,core_principle:unifiedResponse.data.response,personalized_analysis:{identified_risk_factors:[],priority_health_goals:[unifiedResponse.data.response],action_items:[{action:unifiedResponse.data.response,priority:'medium',target_illness:'general_health',evidence_level:'ai_generated',mechanism:'chat_response',timeline:'immediate'}],timeline:'immediate'},research_foundation:[{citation_text:'WiHy AI Chat System',study_type:'ai_response',key_finding:unifiedResponse.data.response}],progress_tracking:{key_metrics:['general_health'],reassessment_period:'1 week'},biblical_wisdom:[]},message:unifiedResponse.data.response};}// Handle other service types (training, nutrition, etc.)\nreturn{success:unifiedResponse.success,timestamp:new Date().toISOString(),response_type:unifiedResponse.request_type,query:originalQuery,wihy_response:{query_type:unifiedResponse.request_type,query:originalQuery,core_principle:unifiedResponse.data.analysis||unifiedResponse.data.response||'Health Information',personalized_analysis:{identified_risk_factors:[],priority_health_goals:[],action_items:((_unifiedResponse$data=unifiedResponse.data.recommendations)===null||_unifiedResponse$data===void 0?void 0:(_unifiedResponse$data2=_unifiedResponse$data.immediate_actions)===null||_unifiedResponse$data2===void 0?void 0:_unifiedResponse$data2.map((rec,index)=>({action:rec,priority:'medium',target_illness:'general_health',evidence_level:'moderate',mechanism:'lifestyle_modification',timeline:'ongoing'})))||((_unifiedResponse$data3=unifiedResponse.data.legacy_recommendations)===null||_unifiedResponse$data3===void 0?void 0:_unifiedResponse$data3.map((rec,index)=>({action:rec,priority:'medium',target_illness:'general_health',evidence_level:'moderate',mechanism:'lifestyle_modification',timeline:'ongoing'})))||[],timeline:'ongoing'},research_foundation:((_unifiedResponse$data4=unifiedResponse.data.sources)===null||_unifiedResponse$data4===void 0?void 0:_unifiedResponse$data4.map(source=>({citation_text:source,study_type:'research',key_finding:source})))||[],progress_tracking:{key_metrics:['general_health'],reassessment_period:'1 month'},biblical_wisdom:[]},message:unifiedResponse.data.response||unifiedResponse.data.analysis||'Health information provided'};}/**\r\n   * Get health news articles using the unified API\r\n   */async getHealthNews(categories,limit){const query=categories&&categories.length>0?\"Latest health news about \".concat(categories.join(', ')):'Latest health news';const request={query:query,request_type:'health',context:{categories:categories,limit:limit}};const response=await this.askAnything(request);if('data'in response){// It's a UnifiedResponse, convert to legacy format\nreturn this.convertToLegacyFormat(response,query);}return response;}/**\r\n   * Search for nutrition information using the unified API\r\n   */async searchNutrition(foodQuery,userContext){const request={query:\"Nutrition information for \".concat(foodQuery),request_type:'nutrition',context:userContext||{}};const response=await this.askAnything(request);if('data'in response){// It's a UnifiedResponse, convert to legacy format\nreturn this.convertToLegacyFormat(response,request.query);}return response;}/**\r\n   * Legacy scan food images method - now uses enhanced scanner\r\n   */async scanFood(file,scanOptions){try{if(file){// Use enhanced image scanner\nconst enhancedResponse=await this.scanFoodImage(file,scanOptions!==null&&scanOptions!==void 0&&scanOptions.user_context?JSON.stringify(scanOptions.user_context):'');// Convert to legacy format\nreturn this.convertImageScanToLegacy(enhancedResponse,'Image scan analysis');}else if(scanOptions!==null&&scanOptions!==void 0&&scanOptions.barcode){// Use enhanced barcode scanner\nconst enhancedResponse=await this.scanBarcode(scanOptions.barcode,scanOptions.user_context);// Convert to legacy format\nreturn this.convertBarcodeScanToLegacy(enhancedResponse,\"Barcode scan: \".concat(scanOptions.barcode));}else{throw new Error('No file or barcode provided for scanning');}}catch(error){logger.error('WiHy Scan error:',error);throw error;}}/**\r\n   * Convert Image Scanner response to legacy format\r\n   */convertImageScanToLegacy(response,query){var _response$overall_ass,_response$data_source;const recommendations=response.wihy_recommendations||[];const warnings=response.carcinogen_warnings||[];return{success:response.success,timestamp:new Date().toISOString(),response_type:'image_scan',query:query,wihy_response:{query_type:'image_scan',query:query,core_principle:((_response$overall_ass=response.overall_assessment)===null||_response$overall_ass===void 0?void 0:_response$overall_ass.verdict)||'Image analysis complete',personalized_analysis:{identified_risk_factors:warnings.map(warning=>({risk_factor:warning,associated_illnesses:'various',prevalence_rate:0,preventability_score:100})),priority_health_goals:recommendations,action_items:recommendations.map(rec=>({action:rec,priority:'high',target_illness:'general_health',evidence_level:'image_analysis',mechanism:'food_choice',timeline:'immediate'})),timeline:'immediate'},research_foundation:((_response$data_source=response.data_sources)===null||_response$data_source===void 0?void 0:_response$data_source.map(source=>({citation_text:source,study_type:'database',key_finding:source})))||[],progress_tracking:{key_metrics:['food_quality_awareness'],reassessment_period:'1 week'},biblical_wisdom:['Choose foods that nourish your temple - 1 Corinthians 6:19']},message:this.formatImageScanResponse(response)};}/**\r\n   * Convert Barcode Scanner response to legacy format\r\n   */convertBarcodeScanToLegacy(response,query){var _response$health_anal,_response$health_anal2,_response$data_source2;const recommendations=response.wihy_recommendations||[];const warnings=[...(((_response$health_anal=response.health_analysis)===null||_response$health_anal===void 0?void 0:_response$health_anal.carcinogen_alerts)||[]),...(((_response$health_anal2=response.health_analysis)===null||_response$health_anal2===void 0?void 0:_response$health_anal2.toxic_additives)||[])];return{success:response.success,timestamp:new Date().toISOString(),response_type:'barcode_scan',query:query,wihy_response:{query_type:'barcode_scan',query:query,core_principle:\"Product Analysis: \".concat(response.product_name),personalized_analysis:{identified_risk_factors:warnings.map(warning=>({risk_factor:warning,associated_illnesses:'various',prevalence_rate:0,preventability_score:100})),priority_health_goals:recommendations,action_items:recommendations.map(rec=>({action:rec,priority:'high',target_illness:'general_health',evidence_level:'product_analysis',mechanism:'ingredient_awareness',timeline:'immediate'})),timeline:'immediate'},research_foundation:((_response$data_source2=response.data_sources)===null||_response$data_source2===void 0?void 0:_response$data_source2.map(source=>({citation_text:source,study_type:'nutrition_database',key_finding:source})))||[],progress_tracking:{key_metrics:['product_awareness','nova_understanding'],reassessment_period:'1 week'},biblical_wisdom:['Real food doesn\\'t need complicated analysis - choose whole foods']},message:this.formatBarcodeScanResponse(response)};}/**\r\n   * Convert File to base64 string\r\n   */fileToBase64(file){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.readAsDataURL(file);reader.onload=()=>{const result=reader.result;// Remove the data:image/jpeg;base64, prefix\nconst base64=result.split(',')[1];resolve(base64);};reader.onerror=error=>reject(error);});}/**\r\n   * General health search using the unified API\r\n   */async searchHealth(query,userContext){const request={query:query,request_type:'auto',context:userContext||{}};const response=await this.askAnything(request);// Return the raw response (could be legacy WihyResponse or UnifiedResponse)\nreturn response;}/**\r\n   * Format Enhanced Model response for display in the UI\r\n   */formatEnhancedResponse(response){let formatted=\"# WiHy Enhanced Health Intelligence\\n\\n\";// Main response content\nformatted+=response.answer;// Add research citations if available\nif(response.research_citations&&response.research_citations.length>0){formatted+=\"\\n\\n## \\uD83D\\uDCDA Research Citations\\n\";response.research_citations.forEach((citation,index)=>{formatted+=\"\".concat(index+1,\". \").concat(citation,\"\\n\");});}// Add biblical wisdom if available\nif(response.wihy_wisdom&&response.wihy_wisdom.length>0){formatted+=\"\\n\\n## \\u271D\\uFE0F Biblical Wisdom\\n\";response.wihy_wisdom.forEach(wisdom=>{formatted+=\"> \".concat(wisdom,\"\\n\\n\");});}// Add enhanced model info\nformatted+=\"\\n\\n---\\n\\n\";formatted+=\"*Enhanced Model Response (\".concat(response.training_examples_used,\" training examples)*\\n\");formatted+=\"*Confidence Score: \".concat(Math.round(response.confidence_score*100),\"%*\\n\");formatted+=\"*Model Version: \".concat(response.model_version,\"*\");return formatted;}/**\r\n   * Format Image Scanner response for display\r\n   */formatImageScanResponse(response){let formatted=\"# \\uD83D\\uDCF7 WiHy Image Analysis Results\\n\\n\";if(response.success&&response.overall_assessment){var _response$nova_chart_;const{health_score,verdict,nova_group}=response.overall_assessment;const guidance=(_response$nova_chart_=response.nova_chart_reference)===null||_response$nova_chart_===void 0?void 0:_response$nova_chart_.client_guidance;formatted+=\"## Health Assessment\\n\";formatted+=\"**Health Score:** \".concat(health_score,\"/100\\n\");formatted+=\"**Verdict:** \".concat(verdict,\"\\n\");formatted+=\"**NOVA Group:** \".concat(nova_group,\" (\").concat(this.getNovaLabel(nova_group),\")\\n\");if(guidance){formatted+=\"**Recommendation:** \".concat(guidance.action,\" - \").concat(guidance.message,\"\\n\\n\");}// Detected foods\nif(response.detected_foods&&response.detected_foods.length>0){formatted+=\"## \\uD83C\\uDF7D\\uFE0F Detected Foods\\n\";response.detected_foods.forEach(food=>{formatted+=\"- **\".concat(food.name,\"** (Confidence: \").concat(Math.round(food.confidence*100),\"%, NOVA: \").concat(food.nova_group,\")\\n\");});formatted+='\\n';}// WIHY recommendations\nif(response.wihy_recommendations&&response.wihy_recommendations.length>0){formatted+=\"## \\uD83D\\uDCA1 WIHY Recommendations\\n\";response.wihy_recommendations.forEach(rec=>{formatted+=\"- \".concat(rec,\"\\n\");});formatted+='\\n';}// Health warnings\nif(response.carcinogen_warnings&&response.carcinogen_warnings.length>0){formatted+=\"## \\u26A0\\uFE0F Health Warnings\\n\";response.carcinogen_warnings.forEach(warning=>{formatted+=\"- \".concat(warning,\"\\n\");});formatted+='\\n';}// Family safety\nif(response.family_safety){formatted+=\"## \\uD83D\\uDC68\\u200D\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D\\uD83D\\uDC66 Family Safety\\n\";formatted+=\"**Status:** \".concat(response.family_safety.family_safe?'✅ Safe':'❌ Not Recommended',\"\\n\");formatted+=\"**Verdict:** \".concat(response.family_safety.family_verdict,\"\\n\\n\");}}else{formatted+=\"Analysis failed. Please try again or choose whole foods when in doubt.\\n\\n\";}// Data sources\nif(response.data_sources&&response.data_sources.length>0){formatted+=\"---\\n\\n*Data sources: \".concat(response.data_sources.join(', '),\"*\");}return formatted;}/**\r\n   * Format Barcode Scanner response for display\r\n   */formatBarcodeScanResponse(response){let formatted=\"# \\uD83D\\uDD0D WiHy Barcode Analysis\\n\\n\";if(response.success){formatted+=\"## Product Information\\n\";formatted+=\"**Product:** \".concat(response.product_name,\"\\n\");formatted+=\"**Health Score:** \".concat(response.health_score,\"/100\\n\");formatted+=\"**NOVA Group:** \".concat(response.nova_group,\" (\").concat(this.getNovaLabel(response.nova_group),\")\\n\\n\");// Nutritional data\nif(response.nutritional_data){const nutrition=response.nutritional_data;formatted+=\"## \\uD83D\\uDCCA Nutrition Facts (per 100g)\\n\";formatted+=\"- **Calories:** \".concat(nutrition.calories_per_100g,\"\\n\");formatted+=\"- **Protein:** \".concat(nutrition.protein_g,\"g\\n\");formatted+=\"- **Carbohydrates:** \".concat(nutrition.carbs_g,\"g\\n\");formatted+=\"- **Fat:** \".concat(nutrition.fat_g,\"g\\n\");formatted+=\"- **Fiber:** \".concat(nutrition.fiber_g,\"g\\n\");formatted+=\"- **Sodium:** \".concat(nutrition.sodium_mg,\"mg\\n\\n\");}// Health analysis\nif(response.health_analysis){const analysis=response.health_analysis;formatted+=\"## \\uD83D\\uDD2C Health Analysis\\n\";formatted+=\"**Processing Level:** \".concat(analysis.processing_level,\"\\n\");if(analysis.carcinogen_alerts&&analysis.carcinogen_alerts.length>0){formatted+=\"**\\u26A0\\uFE0F Carcinogen Alerts:**\\n\";analysis.carcinogen_alerts.forEach(alert=>{formatted+=\"- \".concat(alert,\"\\n\");});}if(analysis.toxic_additives&&analysis.toxic_additives.length>0){formatted+=\"**\\uD83E\\uDDEA Toxic Additives:**\\n\";analysis.toxic_additives.forEach(additive=>{formatted+=\"- \".concat(additive,\"\\n\");});}formatted+='\\n';}// WIHY recommendations\nif(response.wihy_recommendations&&response.wihy_recommendations.length>0){formatted+=\"## \\uD83D\\uDCA1 WIHY Recommendations\\n\";response.wihy_recommendations.forEach(rec=>{formatted+=\"- \".concat(rec,\"\\n\");});formatted+='\\n';}// Ingredients\nif(response.ingredients&&response.ingredients.length>0){formatted+=\"## \\uD83E\\uDDFE Ingredients\\n\";formatted+=response.ingredients.join(', ')+'\\n\\n';}}else{formatted+=\"Product not found or analysis failed. Choose foods with 5 or fewer ingredients when in doubt.\\n\\n\";}// Data sources\nif(response.data_sources&&response.data_sources.length>0){formatted+=\"---\\n\\n*Data sources: \".concat(response.data_sources.join(', '),\"*\");}return formatted;}/**\r\n   * Get NOVA group label\r\n   */getNovaLabel(novaGroup){const labels={1:'Natural/Unprocessed',2:'Processed Culinary Ingredients',3:'Processed Foods',4:'Ultra-Processed Foods'};return labels[novaGroup]||'Unknown';}/**\r\n   * Get NOVA guidance for UI display\r\n   */getNovaGuidance(novaGroup){const guidance={1:{action:'CHOOSE',color:'green',message:'Real food as God intended'},2:{action:'MODERATE',color:'yellow',message:'Use sparingly'},3:{action:'LIMIT',color:'orange',message:'Find alternatives'},4:{action:'AVOID',color:'red',message:'Your family deserves better'}};return guidance[novaGroup]||guidance[4];}formatWihyResponse(response){var _wihy_response$resear,_wihy_response$biblic;// Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\nif('success'in response&&'data'in response&&response.data&&'response'in response.data&&'processor_used'in response.data){const healthResp=response;const data=healthResp.data;let formatted=\"# WiHy Health Intelligence\\n\\n\";// Main response content\nformatted+=data.response;// Add health insights if available\nif(data.health_insights){var _data$health_insights,_data$health_insights2,_data$health_insights3;if((_data$health_insights=data.health_insights.key_benefits)!==null&&_data$health_insights!==void 0&&_data$health_insights.length){formatted+=\"\\n\\n## \\uD83C\\uDF1F Key Benefits\\n\";data.health_insights.key_benefits.forEach(benefit=>{formatted+=\"- \".concat(benefit,\"\\n\");});}if((_data$health_insights2=data.health_insights.potential_risks)!==null&&_data$health_insights2!==void 0&&_data$health_insights2.length){formatted+=\"\\n\\n## \\u26A0\\uFE0F Potential Risks\\n\";data.health_insights.potential_risks.forEach(risk=>{formatted+=\"- \".concat(risk,\"\\n\");});}if((_data$health_insights3=data.health_insights.recommendations)!==null&&_data$health_insights3!==void 0&&_data$health_insights3.length){formatted+=\"\\n\\n## \\uD83D\\uDCCB Recommendations\\n\";data.health_insights.recommendations.forEach(rec=>{formatted+=\"- \".concat(rec,\"\\n\");});}}// Add processing info\nformatted+=\"\\n\\n---\\n\\n*Processed by \".concat(data.processor_used,\" in \").concat(data.processing_time.toFixed(2),\"ms*\");return formatted;}// Handle UnifiedResponse format (legacy API)\nif('success'in response&&'data'in response&&response.data&&'ai_response'in response.data){var _unifiedResp$data$ai_;const unifiedResp=response;let formatted=\"# WiHy Health Assistant\\n\\n\";// Use the ai_response.response field which contains the actual response\nif(unifiedResp.data.ai_response&&unifiedResp.data.ai_response.response){formatted+=unifiedResp.data.ai_response.response;}else{// Fallback to showing raw data if ai_response is not available\nformatted+=\"**Data:**\\n```json\\n\".concat(JSON.stringify(unifiedResp.data,null,2),\"\\n```\");}// Add service information if available\nif((_unifiedResp$data$ai_=unifiedResp.data.ai_response)!==null&&_unifiedResp$data$ai_!==void 0&&_unifiedResp$data$ai_.service){formatted+=\"\\n\\n---\\n\\n*Response from \".concat(unifiedResp.data.ai_response.service,\" service*\");if(unifiedResp.data.ai_response.confidence){formatted+=\" (Confidence: \".concat(Math.round(unifiedResp.data.ai_response.confidence*100),\"%)\");}}return formatted;}// Handle legacy WihyResponse format\nconst legacyResp=response;const{wihy_response}=legacyResp;let formatted=\"# \".concat(wihy_response.core_principle,\"\\n\\n\");// Personalized Analysis\nif(wihy_response.personalized_analysis){var _wihy_response$person,_wihy_response$person2,_wihy_response$person3;formatted+=\"## \\uD83C\\uDFAF Personalized Health Analysis\\n\\n\";// Risk Factors\nif(((_wihy_response$person=wihy_response.personalized_analysis.identified_risk_factors)===null||_wihy_response$person===void 0?void 0:_wihy_response$person.length)>0){formatted+=\"### Identified Risk Factors:\\n\";wihy_response.personalized_analysis.identified_risk_factors.forEach(risk=>{formatted+=\"- **\".concat(risk.risk_factor.replace(/_/g,' ').toUpperCase(),\"**\\n\");formatted+=\"  - Associated with: \".concat(risk.associated_illnesses.replace(/_/g,' '),\"\\n\");formatted+=\"  - Prevalence: \".concat(risk.prevalence_rate,\"%\\n\");formatted+=\"  - Preventability: \".concat(risk.preventability_score,\"%\\n\\n\");});}// Priority Goals\nif(((_wihy_response$person2=wihy_response.personalized_analysis.priority_health_goals)===null||_wihy_response$person2===void 0?void 0:_wihy_response$person2.length)>0){formatted+=\"### \\uD83C\\uDFAF Priority Health Goals:\\n\";wihy_response.personalized_analysis.priority_health_goals.forEach(goal=>{formatted+=\"- \".concat(goal,\"\\n\");});formatted+='\\n';}// Action Items\nif(((_wihy_response$person3=wihy_response.personalized_analysis.action_items)===null||_wihy_response$person3===void 0?void 0:_wihy_response$person3.length)>0){formatted+=\"### \\uD83D\\uDCCB Action Items:\\n\";wihy_response.personalized_analysis.action_items.forEach((action,index)=>{formatted+=\"#### \".concat(index+1,\". \").concat(action.action,\"\\n\");formatted+=\"- **Priority:** \".concat(action.priority,\"\\n\");formatted+=\"- **Target:** \".concat(action.target_illness.replace(/_/g,' '),\"\\n\");formatted+=\"- **Evidence Level:** \".concat(action.evidence_level,\"\\n\");formatted+=\"- **How it works:** \".concat(action.mechanism,\"\\n\");formatted+=\"- **Timeline:** \".concat(action.timeline,\"\\n\\n\");});}// Timeline\nif(wihy_response.personalized_analysis.timeline){formatted+=\"**Implementation Timeline:** \".concat(wihy_response.personalized_analysis.timeline,\"\\n\\n\");}}// Research Foundation\nif(((_wihy_response$resear=wihy_response.research_foundation)===null||_wihy_response$resear===void 0?void 0:_wihy_response$resear.length)>0){formatted+=\"## \\uD83D\\uDCDA Research Foundation\\n\\n\";wihy_response.research_foundation.forEach(research=>{formatted+=\"- **\".concat(research.citation_text,\"** (\").concat(research.study_type,\")\\n\");formatted+=\"  \".concat(research.key_finding,\"\\n\\n\");});}// Progress Tracking\nif(wihy_response.progress_tracking){formatted+=\"## \\uD83D\\uDCCA Progress Tracking\\n\\n\";formatted+=\"**Key Metrics to Track:**\\n\";wihy_response.progress_tracking.key_metrics.forEach(metric=>{formatted+=\"- \".concat(metric,\"\\n\");});formatted+=\"\\n**Reassessment:** \".concat(wihy_response.progress_tracking.reassessment_period,\"\\n\\n\");}// Biblical Wisdom\nif(((_wihy_response$biblic=wihy_response.biblical_wisdom)===null||_wihy_response$biblic===void 0?void 0:_wihy_response$biblic.length)>0){formatted+=\"## \\u271D\\uFE0F Biblical Wisdom\\n\\n\";wihy_response.biblical_wisdom.forEach(wisdom=>{formatted+=\"> \".concat(wisdom,\"\\n\\n\");});}// Add timestamp if available (different field names in different response formats)\nconst timestamp=response.timestamp||response.created_at||new Date().toISOString();formatted+=\"---\\n\\n*WiHy health truth analysis generated at: \".concat(new Date(timestamp).toLocaleString(),\"*\\n\");return formatted;}/**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */extractRecommendations(response){const recommendations=[];// Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\nif('success'in response&&'data'in response&&response.data&&'health_insights'in response.data){const healthResp=response;if(healthResp.data.health_insights.recommendations){healthResp.data.health_insights.recommendations.forEach(r=>recommendations.push(r));}return recommendations;}if(isUnifiedResponse(response)){// Handle new structured recommendations\nif(response.data.recommendations){const recs=response.data.recommendations;if(recs.immediate_actions)recs.immediate_actions.forEach(r=>recommendations.push(r));if(recs.lifestyle_changes)recs.lifestyle_changes.forEach(r=>recommendations.push(r));if(recs.better_alternatives)recs.better_alternatives.forEach(r=>recommendations.push(r));if(recs.shopping_tips)recs.shopping_tips.forEach(r=>recommendations.push(r));if(recs.meal_planning)recs.meal_planning.forEach(r=>recommendations.push(r));}// Handle legacy recommendations\nif(response.data.legacy_recommendations&&response.data.legacy_recommendations.length>0){response.data.legacy_recommendations.forEach(r=>recommendations.push(r));}}else{var _legacyResp$wihy_resp;// Handle legacy WihyResponse format\nconst legacyResp=response;if((_legacyResp$wihy_resp=legacyResp.wihy_response.personalized_analysis)!==null&&_legacyResp$wihy_resp!==void 0&&_legacyResp$wihy_resp.action_items){legacyResp.wihy_response.personalized_analysis.action_items.forEach(action=>{recommendations.push(\"\".concat(action.action,\" (\").concat(action.priority,\" priority)\"));});}}return recommendations;}/**\r\n   * Extract citations from WiHy response for UI display\r\n   */extractCitations(response){const citations=[];// Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\nif('success'in response&&'data'in response&&response.data&&'processor_used'in response.data){// For now, the new API doesn't include specific citation fields in the schema\n// We could parse citations from the response text if needed\nreturn citations;}if(isUnifiedResponse(response)){// Unified API may include sources array\nif(response.data.sources&&response.data.sources.length>0){response.data.sources.forEach(s=>citations.push(s));}}else{// Handle legacy WihyResponse format\nconst legacyResp=response;if(legacyResp.wihy_response.research_foundation){legacyResp.wihy_response.research_foundation.forEach(research=>{citations.push(\"\".concat(research.citation_text,\": \").concat(research.key_finding));});}}return citations;}/**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */formatUnifiedResponseForChat(response){// Handle chat service responses\nif(response.service_used==='chat'&&response.data.response){// For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\n// We should provide more helpful information to the user\nconst briefResponse=response.data.response;if(briefResponse.includes('AI Chat response to:')){// The API gave us a placeholder response, provide something more useful\nconst query=response.data.query||'your question';return\"I received your question about \\\"\".concat(query,\"\\\" and I'm here to help! \\n\\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\\n\\n\\u2022 Understanding health and nutrition concepts\\n\\u2022 Providing general wellness guidance  \\n\\u2022 Explaining health data and metrics\\n\\u2022 Offering evidence-based health insights\\n\\nWhat specific aspect of health would you like to explore further?\");}return briefResponse;}// Handle other response types\nif(response.data.response){return response.data.response;}if(response.data.analysis){return response.data.analysis;}if(response.data.training_status){let message=\"\\uD83D\\uDD04 \".concat(response.data.training_status);if(response.data.available_models&&response.data.available_models.length>0){message+=\"\\n\\n\\uD83D\\uDCCA Available models: \".concat(response.data.available_models.join(', '));}return message;}// Fallback - show the raw data in a readable format\nreturn\"I received a response from the \".concat(response.service_used,\" service. Here's what I found:\\n\\n\").concat(JSON.stringify(response.data,null,2));}}// Export a singleton instance of the enhanced API service\nexport const wihyAPI=new WihyEnhancedAPIService();export default wihyAPI;","map":{"version":3,"names":["API_CONFIG","WIHY_HEALTH_CHECK_URL","WIHY_SCAN_IMAGE_URL","WIHY_SCAN_BARCODE_URL","logger","isUnifiedResponse","obj","WihyEnhancedAPIService","constructor","baseURL","backupURLs","isLocalDevelopment","WIHY_ENHANCED_API_URL","WIHY_ENHANCED_API_BACKUP","WIHY_ENHANCED_API_CONTAINER","includes","askEnhancedHealthQuestion","request","apiRequest","endpoint","concat","controller","AbortController","timeoutId","setTimeout","abort","response","fetchWithRetry","method","headers","body","JSON","stringify","signal","clearTimeout","ok","Error","status","data","json","apiResponse","error","handleEnhancedError","scanFoodImage","imageFile","context","arguments","length","undefined","formData","FormData","append","handleScannerError","scanBarcode","barcode","requestBody","query","scan_location","device_type","checkAPIHealth","fetch","url","options","retries","endpoints","attempt","fullUrl","replace","warn","name","message","scanType","toUpperCase","toLowerCase","askAnything","enhancedRequest","user_context","user_id","enhancedResponse","convertEnhancedToLegacy","enhancedError","askLegacyUnified","WIHY_UNIFIED_API_URL","include_nutrition","include_biblical_wisdom","include_charts","unifiedReq","originalQuery","success","timestamp","Date","toISOString","response_type","wihy_response","query_type","core_principle","answer","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","wihy_wisdom","map","wisdom","index","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","research_citations","citation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","convertToLegacyFormat","unifiedResponse","_unifiedResponse$data","_unifiedResponse$data2","_unifiedResponse$data3","_unifiedResponse$data4","service_used","request_type","analysis","recommendations","immediate_actions","rec","legacy_recommendations","sources","source","getHealthNews","categories","limit","join","searchNutrition","foodQuery","userContext","scanFood","file","scanOptions","convertImageScanToLegacy","convertBarcodeScanToLegacy","_response$overall_ass","_response$data_source","wihy_recommendations","warnings","carcinogen_warnings","overall_assessment","verdict","warning","risk_factor","associated_illnesses","prevalence_rate","preventability_score","data_sources","formatImageScanResponse","_response$health_anal","_response$health_anal2","_response$data_source2","health_analysis","carcinogen_alerts","toxic_additives","product_name","formatBarcodeScanResponse","fileToBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","base64","split","onerror","searchHealth","formatEnhancedResponse","formatted","forEach","training_examples_used","Math","round","confidence_score","model_version","_response$nova_chart_","health_score","nova_group","guidance","nova_chart_reference","client_guidance","getNovaLabel","detected_foods","food","confidence","family_safety","family_safe","family_verdict","nutritional_data","nutrition","calories_per_100g","protein_g","carbs_g","fat_g","fiber_g","sodium_mg","processing_level","alert","additive","ingredients","novaGroup","labels","getNovaGuidance","color","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","healthResp","health_insights","_data$health_insights","_data$health_insights2","_data$health_insights3","key_benefits","benefit","potential_risks","risk","processor_used","processing_time","toFixed","_unifiedResp$data$ai_","unifiedResp","ai_response","service","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","goal","research","metric","created_at","toLocaleString","extractRecommendations","r","push","recs","lifestyle_changes","better_alternatives","shopping_tips","meal_planning","_legacyResp$wihy_resp","extractCitations","citations","s","formatUnifiedResponseForChat","briefResponse","training_status","available_models","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, WIHY_API_ENDPOINT, getEnhancedWihyEndpoint, WIHY_HEALTH_CHECK_URL, WIHY_SCAN_IMAGE_URL, WIHY_SCAN_BARCODE_URL } from '../config/apiConfig';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Types for the WiHy Enhanced Model API (2,325 training examples)\r\nexport interface EnhancedHealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  context?: string;                       // OPTIONAL: Additional context for the question\r\n  user_id?: string;                       // OPTIONAL: User identifier for personalization\r\n}\r\n\r\n// Enhanced Model Response Structure\r\nexport interface EnhancedHealthResponse {\r\n  question: string;\r\n  answer: string;\r\n  research_citations: string[];\r\n  wihy_wisdom: string[];\r\n  confidence_score: number;\r\n  model_version: string;\r\n  training_examples_used: number;\r\n  timestamp: string;\r\n}\r\n\r\n// Image Scanner Response Structure\r\nexport interface ImageScanResponse {\r\n  success: boolean;\r\n  overall_assessment: {\r\n    health_score: number;\r\n    verdict: string;\r\n    nova_group: number;\r\n  };\r\n  google_vision_analysis: {\r\n    vision_api_success: boolean;\r\n    detected_text: string[];\r\n    labels: string[];\r\n  };\r\n  detected_foods: Array<{\r\n    name: string;\r\n    confidence: number;\r\n    nova_group: number;\r\n  }>;\r\n  nova_chart_reference: {\r\n    client_guidance: {\r\n      color_coding: 'green' | 'yellow' | 'orange' | 'red';\r\n      action: 'CHOOSE' | 'MODERATE' | 'LIMIT' | 'AVOID';\r\n      message: string;\r\n    };\r\n  };\r\n  wihy_recommendations: string[];\r\n  carcinogen_warnings: string[];\r\n  family_safety: {\r\n    family_safe: boolean;\r\n    family_verdict: string;\r\n  };\r\n  data_sources: string[];\r\n}\r\n\r\n// Barcode Scanner Response Structure  \r\nexport interface BarcodeScanResponse {\r\n  success: boolean;\r\n  nova_group: number;\r\n  health_score: number;\r\n  product_name: string;\r\n  ingredients: string[];\r\n  nutritional_data: {\r\n    calories_per_100g: number;\r\n    protein_g: number;\r\n    carbs_g: number;\r\n    fat_g: number;\r\n    fiber_g: number;\r\n    sodium_mg: number;\r\n  };\r\n  health_analysis: {\r\n    carcinogen_alerts: string[];\r\n    toxic_additives: string[];\r\n    processing_level: string;\r\n  };\r\n  wihy_recommendations: string[];\r\n  data_sources: string[];\r\n}\r\n\r\n// Legacy interfaces for backward compatibility\r\nexport interface HealthQuestion {\r\n  query: string;                          // REQUIRED: Your health/nutrition question\r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n  include_nutrition?: boolean;            // OPTIONAL: Include nutrition analysis (default: true)\r\n  include_biblical_wisdom?: boolean;      // OPTIONAL: Include biblical wisdom (default: true)\r\n  include_charts?: boolean;               // OPTIONAL: Include chart data (default: true)\r\n}\r\n\r\n// Chart data structure from OpenAPI spec\r\nexport interface ChartData {\r\n  chart_type: string;\r\n  labels: string[];\r\n  values: number[];\r\n  colors: string[];\r\n  verdict?: string;\r\n  reasons?: string[];\r\n}\r\n\r\nexport interface ChartsData {\r\n  nutrition_breakdown?: ChartData;\r\n  health_quality?: ChartData;\r\n}\r\n\r\nexport interface HealthInsights {\r\n  key_benefits?: string[];\r\n  potential_risks?: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\n// Core response data structure from OpenAPI spec\r\nexport interface ProcessedHealthData {\r\n  query: string;\r\n  timestamp: number;\r\n  processor_used: string;\r\n  processing_time: number;\r\n  response: string;\r\n  nutrition_data: Record<string, any>;\r\n  health_insights: HealthInsights;\r\n  biblical_wisdom: Record<string, any>;\r\n  charts_data: ChartsData;\r\n}\r\n\r\n// Main response structure from OpenAPI spec\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  endpoint: string;\r\n  data: ProcessedHealthData;\r\n}\r\n\r\n// Keep the old interface for backward compatibility\r\nexport interface UnifiedRequest extends HealthQuestion {\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train';\r\n  context?: Record<string, any>;\r\n  user_id?: string;\r\n  session_id?: string;\r\n}\r\n\r\n// Interface for the /scan endpoint\r\nexport interface ScanRequest {\r\n  image_url?: string;                     // OPTIONAL: URL to image\r\n  image_base64?: string;                  // OPTIONAL: Base64 encoded image\r\n  product_name?: string;                  // OPTIONAL: Product name to scan\r\n  barcode?: string;                       // OPTIONAL: Barcode/UPC to scan  \r\n  user_context?: Record<string, any>;     // OPTIONAL: User context object\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    ai_response: {\r\n      response: string;\r\n      enhanced: boolean;\r\n      service: string;\r\n      confidence: number;\r\n    };\r\n    nutrition?: {\r\n      facts: {\r\n        calories_per_serving: number;\r\n        protein_g: number;\r\n        carbs_g: number;\r\n        fiber_g: number;\r\n        fat_g: number;\r\n        sodium_mg: number;\r\n        sugar_g: number;\r\n      };\r\n      nourish_score: {\r\n        score: number;\r\n        category: string;\r\n        breakdown: {\r\n          nutrient_density: number;\r\n          processing_level: number;\r\n          ingredient_quality: number;\r\n        };\r\n      };\r\n      daily_value_percentages: Record<string, number>;\r\n      macronutrients: { protein: number; carbs: number; fat: number };\r\n      micronutrients: string[];\r\n    };\r\n    health_analysis?: {\r\n      safety_score: number;\r\n      carcinogen_alerts: string[];\r\n      toxic_additives: string[];\r\n      processing_level: string;\r\n      ingredient_analysis: Array<{\r\n        name: string;\r\n        safety_score: number;\r\n        category: string;\r\n        concerns: string[];\r\n        benefits: string[];\r\n      }>;\r\n    };\r\n    charts_data?: {\r\n      nutrition_breakdown: {\r\n        labels: string[];\r\n        values: number[];\r\n        colors: string[];\r\n        chart_type: string;\r\n      };\r\n      ingredient_safety_radar: {\r\n        labels: string[];\r\n        values: number[];\r\n        max_value: number;\r\n        chart_type: string;\r\n      };\r\n      daily_nutrition_progress: {\r\n        nutrients: Array<{\r\n          name: string;\r\n          current: number;\r\n          target: number;\r\n          color: string;\r\n        }>;\r\n        chart_type: string;\r\n      };\r\n    };\r\n    recommendations?: {\r\n      immediate_actions: string[];\r\n      lifestyle_changes: string[];\r\n      better_alternatives: string[];\r\n      shopping_tips: string[];\r\n      meal_planning: string[];\r\n    };\r\n    evidence?: {\r\n      research_studies: string[];\r\n      scientific_consensus: string;\r\n      regulatory_status: string[];\r\n      expert_opinions: string[];\r\n    };\r\n    personalization?: {\r\n      user_goals: string[];\r\n      dietary_restrictions: string[];\r\n      health_conditions: string[];\r\n      personalized_advice: string[];\r\n    };\r\n    metadata?: {\r\n      services_used: string[];\r\n      data_sources: string[];\r\n      confidence_scores: Record<string, number>;\r\n      processing_time: number;\r\n      enhanced_by_ai: boolean;\r\n      api_version: string;\r\n    };\r\n    // Legacy support fields\r\n    service?: string;\r\n    query?: string;\r\n    response?: string;\r\n    session_id?: string;\r\n    conversation_context?: string;\r\n    enhanced?: boolean;\r\n    legacy_recommendations?: string[];\r\n    analysis?: string;\r\n    training_status?: string;\r\n    available_models?: string[];\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  rendering_hints?: {\r\n    primary_display: string;\r\n    chart_components: string[];\r\n    key_metrics: string[];\r\n    action_items: string[];\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyEnhancedAPIService {\r\n  private baseURL: string;\r\n  private backupURLs: string[];\r\n  private isLocalDevelopment: boolean;\r\n\r\n  constructor() {\r\n    this.baseURL = API_CONFIG.WIHY_ENHANCED_API_URL;\r\n    this.backupURLs = [\r\n      API_CONFIG.WIHY_ENHANCED_API_BACKUP,\r\n      API_CONFIG.WIHY_ENHANCED_API_CONTAINER\r\n    ];\r\n    this.isLocalDevelopment = this.baseURL.includes('localhost');\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy Enhanced Model a health-related question (2,325 training examples)\r\n   */\r\n  async askEnhancedHealthQuestion(request: EnhancedHealthQuestion): Promise<EnhancedHealthResponse> {\r\n    try {\r\n      logger.apiRequest('Making WiHy Enhanced Model API request', request);\r\n      \r\n      const endpoint = `${this.baseURL}/ask`;\r\n      \r\n      // Use fetch API with timeout and retry logic\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(request),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Enhanced Model API response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Enhanced Model API error:', error);\r\n      throw this.handleEnhancedError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan food image using enhanced vision analysis\r\n   */\r\n  async scanFoodImage(imageFile: File, context: string = ''): Promise<ImageScanResponse> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', imageFile);\r\n      formData.append('context', context);\r\n      \r\n      const endpoint = WIHY_SCAN_IMAGE_URL;\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for images\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        body: formData,\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Image Scanner response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Image Scanner error:', error);\r\n      throw this.handleScannerError(error, 'image');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using enhanced nutrition database\r\n   */\r\n  async scanBarcode(barcode: string, context: any = {}): Promise<BarcodeScanResponse> {\r\n    try {\r\n      const requestBody = {\r\n        query: barcode,\r\n        scan_location: context.scan_location || 'web_app',\r\n        device_type: context.device_type || 'desktop'\r\n      };\r\n      \r\n      const endpoint = WIHY_SCAN_BARCODE_URL;\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\r\n      \r\n      const response = await this.fetchWithRetry(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      logger.apiResponse('WiHy Barcode Scanner response received', data);\r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy Barcode Scanner error:', error);\r\n      throw this.handleScannerError(error, 'barcode');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API health and get status\r\n   */\r\n  async checkAPIHealth(): Promise<{ status: string; model_version: string; training_examples: number }> {\r\n    try {\r\n      const response = await fetch(WIHY_HEALTH_CHECK_URL, {\r\n        method: 'GET',\r\n        headers: { 'Accept': 'application/json' }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WiHy API health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch with automatic retry logic and fallback endpoints\r\n   */\r\n  private async fetchWithRetry(url: string, options: RequestInit, retries: number = 2): Promise<Response> {\r\n    const endpoints = [this.baseURL, ...this.backupURLs];\r\n    \r\n    for (let attempt = 0; attempt <= retries; attempt++) {\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          const fullUrl = url.replace(this.baseURL, endpoint);\r\n          const response = await fetch(fullUrl, options);\r\n          \r\n          if (response.ok) {\r\n            return response;\r\n          }\r\n          \r\n          // If primary endpoint fails, try backup\r\n          if (endpoint === this.baseURL && response.status >= 500) {\r\n            continue;\r\n          }\r\n          \r\n          return response; // Return even if not ok for error handling\r\n          \r\n        } catch (error) {\r\n          logger.warn(`Attempt ${attempt + 1} failed for ${endpoint}:`, error);\r\n          \r\n          // If this is the last endpoint and last attempt, throw error\r\n          if (endpoint === endpoints[endpoints.length - 1] && attempt === retries) {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    throw new Error('All endpoints and retries failed');\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling for API responses\r\n   */\r\n  private handleEnhancedError(error: any): Error {\r\n    if (error instanceof Error) {\r\n      // Check for timeout/abort errors\r\n      if (error.name === 'AbortError') {\r\n        return new Error('TIMEOUT_ERROR: Enhanced model request timed out - services may be under heavy load');\r\n      }\r\n      \r\n      // Check for CORS errors\r\n      if (error.message.includes('CORS') || \r\n          error.message.includes('Access to fetch') ||\r\n          error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n        return new Error('CORS_ERROR: Unable to connect to WiHy Enhanced Model from this domain');\r\n      }\r\n      \r\n      // Check for network/connectivity issues\r\n      if (error.message.includes('fetch') || \r\n          error.message.includes('network') || \r\n          error.name === 'TypeError' ||\r\n          error.message.includes('Failed to fetch')) {\r\n        return new Error('NETWORK_ERROR: Unable to connect to WiHy Enhanced Model services');\r\n      }\r\n      \r\n      // Check for server errors\r\n      if (error.message.includes('HTTP error! status: 5')) {\r\n        return new Error('SERVER_ERROR: WiHy Enhanced Model temporarily unavailable');\r\n      }\r\n      \r\n      return new Error(error.message || 'WiHy Enhanced Model request failed');\r\n    }\r\n    \r\n    return new Error('Unknown error occurred while contacting WiHy Enhanced Model');\r\n  }\r\n\r\n  /**\r\n   * Scanner-specific error handling\r\n   */\r\n  private handleScannerError(error: any, scanType: 'image' | 'barcode'): Error {\r\n    const context = scanType === 'image' ? 'Image Scanner' : 'Barcode Scanner';\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.name === 'AbortError') {\r\n        return new Error(`TIMEOUT_ERROR: ${context} request timed out`);\r\n      }\r\n      \r\n      if (error.message.includes('HTTP error! status: 400')) {\r\n        return new Error(`VALIDATION_ERROR: Invalid ${scanType} format or data`);\r\n      }\r\n      \r\n      if (error.message.includes('HTTP error! status: 404')) {\r\n        return new Error(`NOT_FOUND: ${scanType === 'barcode' ? 'Product not found in nutrition databases' : 'Unable to analyze image'}`);\r\n      }\r\n      \r\n      return new Error(`${context.toUpperCase()}_ERROR: ${error.message}`);\r\n    }\r\n    \r\n    return new Error(`Unknown ${context.toLowerCase()} error occurred`);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - Ask WiHy a health-related question\r\n   * Now routes to Enhanced Model for better responses\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    try {\r\n      // Convert legacy request to enhanced format\r\n      const enhancedRequest: EnhancedHealthQuestion = {\r\n        query: request.query,\r\n        context: 'user_context' in request ? JSON.stringify(request.user_context) : '',\r\n        user_id: 'user_id' in request ? request.user_id : undefined\r\n      };\r\n      \r\n      // Try enhanced model first\r\n      try {\r\n        const enhancedResponse = await this.askEnhancedHealthQuestion(enhancedRequest);\r\n        \r\n        // Convert enhanced response to legacy format for backward compatibility\r\n        return this.convertEnhancedToLegacy(enhancedResponse, request.query);\r\n        \r\n      } catch (enhancedError) {\r\n        logger.warn('Enhanced model failed, falling back to legacy format:', enhancedError);\r\n        \r\n        // Fallback to legacy unified API if enhanced model fails\r\n        return this.askLegacyUnified(request);\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('All WiHy API methods failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fallback method for legacy unified API\r\n   */\r\n  private async askLegacyUnified(request: WihyRequest | UnifiedRequest): Promise<HealthQuestionResponse | WihyResponse | UnifiedResponse> {\r\n    logger.apiRequest('Making WiHy Legacy API request', request);\r\n    \r\n    let requestBody: any;\r\n    let endpoint: string;\r\n    \r\n    // Use legacy endpoints\r\n    endpoint = this.isLocalDevelopment ? \r\n      `${API_CONFIG.WIHY_UNIFIED_API_URL}/ask` : \r\n      `${API_CONFIG.WIHY_UNIFIED_API_URL}/ask`;\r\n    \r\n    // Build HealthQuestion object according to legacy spec\r\n    if ('user_context' in request) {\r\n      requestBody = {\r\n        query: request.query,\r\n        user_context: request.user_context || {},\r\n        include_nutrition: true,\r\n        include_biblical_wisdom: false,\r\n        include_charts: true\r\n      };\r\n    } else {\r\n      const unifiedReq = request as UnifiedRequest;\r\n      requestBody = {\r\n        query: unifiedReq.query,\r\n        user_context: unifiedReq.context || {},\r\n        include_nutrition: true,\r\n        include_biblical_wisdom: true,\r\n        include_charts: true\r\n      };\r\n    }\r\n    \r\n    // Use fetch API to match the working example exactly with timeout\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n    \r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(requestBody),\r\n      signal: controller.signal\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    logger.apiResponse('WiHy Legacy API response received', data);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Convert Enhanced Model response to legacy format for backward compatibility\r\n   */\r\n  private convertEnhancedToLegacy(enhancedResponse: EnhancedHealthResponse, originalQuery: string): WihyResponse {\r\n    return {\r\n      success: true,\r\n      timestamp: enhancedResponse.timestamp || new Date().toISOString(),\r\n      response_type: 'enhanced_model',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: 'enhanced_model',\r\n        query: originalQuery,\r\n        core_principle: enhancedResponse.answer,\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [enhancedResponse.answer],\r\n          action_items: enhancedResponse.wihy_wisdom.map((wisdom: string, index: number) => ({\r\n            action: wisdom,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'enhanced_model',\r\n            mechanism: 'biblical_wisdom',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: enhancedResponse.research_citations.map((citation: string) => ({\r\n          citation_text: citation,\r\n          study_type: 'enhanced_model_research',\r\n          key_finding: citation\r\n        })),\r\n        progress_tracking: {\r\n          key_metrics: ['enhanced_health_understanding'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: enhancedResponse.wihy_wisdom\r\n      },\r\n      message: enhancedResponse.answer\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    // Handle chat service response\r\n    if (unifiedResponse.service_used === 'chat' && unifiedResponse.data.response) {\r\n      return {\r\n        success: unifiedResponse.success,\r\n        timestamp: new Date().toISOString(),\r\n        response_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        wihy_response: {\r\n          query_type: unifiedResponse.request_type,\r\n          query: originalQuery,\r\n          core_principle: unifiedResponse.data.response,\r\n          personalized_analysis: {\r\n            identified_risk_factors: [],\r\n            priority_health_goals: [unifiedResponse.data.response],\r\n            action_items: [{\r\n              action: unifiedResponse.data.response,\r\n              priority: 'medium',\r\n              target_illness: 'general_health',\r\n              evidence_level: 'ai_generated',\r\n              mechanism: 'chat_response',\r\n              timeline: 'immediate'\r\n            }],\r\n            timeline: 'immediate'\r\n          },\r\n          research_foundation: [{\r\n            citation_text: 'WiHy AI Chat System',\r\n            study_type: 'ai_response',\r\n            key_finding: unifiedResponse.data.response\r\n          }],\r\n          progress_tracking: {\r\n            key_metrics: ['general_health'],\r\n            reassessment_period: '1 week'\r\n          },\r\n          biblical_wisdom: []\r\n        },\r\n        message: unifiedResponse.data.response\r\n      };\r\n    }\r\n\r\n    // Handle other service types (training, nutrition, etc.)\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type,\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.immediate_actions?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || unifiedResponse.data.legacy_recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Legacy scan food images method - now uses enhanced scanner\r\n   */\r\n  async scanFood(file?: File, scanOptions?: Partial<ScanRequest>): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      if (file) {\r\n        // Use enhanced image scanner\r\n        const enhancedResponse = await this.scanFoodImage(file, scanOptions?.user_context ? JSON.stringify(scanOptions.user_context) : '');\r\n        \r\n        // Convert to legacy format\r\n        return this.convertImageScanToLegacy(enhancedResponse, 'Image scan analysis');\r\n        \r\n      } else if (scanOptions?.barcode) {\r\n        // Use enhanced barcode scanner\r\n        const enhancedResponse = await this.scanBarcode(scanOptions.barcode, scanOptions.user_context);\r\n        \r\n        // Convert to legacy format\r\n        return this.convertBarcodeScanToLegacy(enhancedResponse, `Barcode scan: ${scanOptions.barcode}`);\r\n        \r\n      } else {\r\n        throw new Error('No file or barcode provided for scanning');\r\n      }\r\n      \r\n    } catch (error) {\r\n      logger.error('WiHy Scan error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Image Scanner response to legacy format\r\n   */\r\n  private convertImageScanToLegacy(response: ImageScanResponse, query: string): WihyResponse {\r\n    const recommendations = response.wihy_recommendations || [];\r\n    const warnings = response.carcinogen_warnings || [];\r\n    \r\n    return {\r\n      success: response.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: 'image_scan',\r\n      query: query,\r\n      wihy_response: {\r\n        query_type: 'image_scan',\r\n        query: query,\r\n        core_principle: response.overall_assessment?.verdict || 'Image analysis complete',\r\n        personalized_analysis: {\r\n          identified_risk_factors: warnings.map(warning => ({\r\n            risk_factor: warning,\r\n            associated_illnesses: 'various',\r\n            prevalence_rate: 0,\r\n            preventability_score: 100\r\n          })),\r\n          priority_health_goals: recommendations,\r\n          action_items: recommendations.map(rec => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'image_analysis',\r\n            mechanism: 'food_choice',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: response.data_sources?.map(source => ({\r\n          citation_text: source,\r\n          study_type: 'database',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['food_quality_awareness'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: ['Choose foods that nourish your temple - 1 Corinthians 6:19']\r\n      },\r\n      message: this.formatImageScanResponse(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert Barcode Scanner response to legacy format\r\n   */\r\n  private convertBarcodeScanToLegacy(response: BarcodeScanResponse, query: string): WihyResponse {\r\n    const recommendations = response.wihy_recommendations || [];\r\n    const warnings = [...(response.health_analysis?.carcinogen_alerts || []), ...(response.health_analysis?.toxic_additives || [])];\r\n    \r\n    return {\r\n      success: response.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: 'barcode_scan',\r\n      query: query,\r\n      wihy_response: {\r\n        query_type: 'barcode_scan',\r\n        query: query,\r\n        core_principle: `Product Analysis: ${response.product_name}`,\r\n        personalized_analysis: {\r\n          identified_risk_factors: warnings.map(warning => ({\r\n            risk_factor: warning,\r\n            associated_illnesses: 'various',\r\n            prevalence_rate: 0,\r\n            preventability_score: 100\r\n          })),\r\n          priority_health_goals: recommendations,\r\n          action_items: recommendations.map(rec => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'product_analysis',\r\n            mechanism: 'ingredient_awareness',\r\n            timeline: 'immediate'\r\n          })),\r\n          timeline: 'immediate'\r\n        },\r\n        research_foundation: response.data_sources?.map(source => ({\r\n          citation_text: source,\r\n          study_type: 'nutrition_database',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['product_awareness', 'nova_understanding'],\r\n          reassessment_period: '1 week'\r\n        },\r\n        biblical_wisdom: ['Real food doesn\\'t need complicated analysis - choose whole foods']\r\n      },\r\n      message: this.formatBarcodeScanResponse(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert File to base64 string\r\n   */\r\n  private fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        // Remove the data:image/jpeg;base64, prefix\r\n        const base64 = result.split(',')[1];\r\n        resolve(base64);\r\n      };\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse | UnifiedResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    // Return the raw response (could be legacy WihyResponse or UnifiedResponse)\r\n    return response as WihyResponse | UnifiedResponse;\r\n  }\r\n\r\n  /**\r\n   * Format Enhanced Model response for display in the UI\r\n   */\r\n  formatEnhancedResponse(response: EnhancedHealthResponse): string {\r\n    let formatted = `# WiHy Enhanced Health Intelligence\\n\\n`;\r\n    \r\n    // Main response content\r\n    formatted += response.answer;\r\n    \r\n    // Add research citations if available\r\n    if (response.research_citations && response.research_citations.length > 0) {\r\n      formatted += `\\n\\n## 📚 Research Citations\\n`;\r\n      response.research_citations.forEach((citation, index) => {\r\n        formatted += `${index + 1}. ${citation}\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add biblical wisdom if available\r\n    if (response.wihy_wisdom && response.wihy_wisdom.length > 0) {\r\n      formatted += `\\n\\n## ✝️ Biblical Wisdom\\n`;\r\n      response.wihy_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add enhanced model info\r\n    formatted += `\\n\\n---\\n\\n`;\r\n    formatted += `*Enhanced Model Response (${response.training_examples_used} training examples)*\\n`;\r\n    formatted += `*Confidence Score: ${Math.round(response.confidence_score * 100)}%*\\n`;\r\n    formatted += `*Model Version: ${response.model_version}*`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format Image Scanner response for display\r\n   */\r\n  formatImageScanResponse(response: ImageScanResponse): string {\r\n    let formatted = `# 📷 WiHy Image Analysis Results\\n\\n`;\r\n    \r\n    if (response.success && response.overall_assessment) {\r\n      const { health_score, verdict, nova_group } = response.overall_assessment;\r\n      const guidance = response.nova_chart_reference?.client_guidance;\r\n      \r\n      formatted += `## Health Assessment\\n`;\r\n      formatted += `**Health Score:** ${health_score}/100\\n`;\r\n      formatted += `**Verdict:** ${verdict}\\n`;\r\n      formatted += `**NOVA Group:** ${nova_group} (${this.getNovaLabel(nova_group)})\\n`;\r\n      \r\n      if (guidance) {\r\n        formatted += `**Recommendation:** ${guidance.action} - ${guidance.message}\\n\\n`;\r\n      }\r\n      \r\n      // Detected foods\r\n      if (response.detected_foods && response.detected_foods.length > 0) {\r\n        formatted += `## 🍽️ Detected Foods\\n`;\r\n        response.detected_foods.forEach(food => {\r\n          formatted += `- **${food.name}** (Confidence: ${Math.round(food.confidence * 100)}%, NOVA: ${food.nova_group})\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // WIHY recommendations\r\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\r\n        formatted += `## 💡 WIHY Recommendations\\n`;\r\n        response.wihy_recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Health warnings\r\n      if (response.carcinogen_warnings && response.carcinogen_warnings.length > 0) {\r\n        formatted += `## ⚠️ Health Warnings\\n`;\r\n        response.carcinogen_warnings.forEach(warning => {\r\n          formatted += `- ${warning}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Family safety\r\n      if (response.family_safety) {\r\n        formatted += `## 👨‍👩‍👧‍👦 Family Safety\\n`;\r\n        formatted += `**Status:** ${response.family_safety.family_safe ? '✅ Safe' : '❌ Not Recommended'}\\n`;\r\n        formatted += `**Verdict:** ${response.family_safety.family_verdict}\\n\\n`;\r\n      }\r\n      \r\n    } else {\r\n      formatted += `Analysis failed. Please try again or choose whole foods when in doubt.\\n\\n`;\r\n    }\r\n    \r\n    // Data sources\r\n    if (response.data_sources && response.data_sources.length > 0) {\r\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\r\n    }\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format Barcode Scanner response for display\r\n   */\r\n  formatBarcodeScanResponse(response: BarcodeScanResponse): string {\r\n    let formatted = `# 🔍 WiHy Barcode Analysis\\n\\n`;\r\n    \r\n    if (response.success) {\r\n      formatted += `## Product Information\\n`;\r\n      formatted += `**Product:** ${response.product_name}\\n`;\r\n      formatted += `**Health Score:** ${response.health_score}/100\\n`;\r\n      formatted += `**NOVA Group:** ${response.nova_group} (${this.getNovaLabel(response.nova_group)})\\n\\n`;\r\n      \r\n      // Nutritional data\r\n      if (response.nutritional_data) {\r\n        const nutrition = response.nutritional_data;\r\n        formatted += `## 📊 Nutrition Facts (per 100g)\\n`;\r\n        formatted += `- **Calories:** ${nutrition.calories_per_100g}\\n`;\r\n        formatted += `- **Protein:** ${nutrition.protein_g}g\\n`;\r\n        formatted += `- **Carbohydrates:** ${nutrition.carbs_g}g\\n`;\r\n        formatted += `- **Fat:** ${nutrition.fat_g}g\\n`;\r\n        formatted += `- **Fiber:** ${nutrition.fiber_g}g\\n`;\r\n        formatted += `- **Sodium:** ${nutrition.sodium_mg}mg\\n\\n`;\r\n      }\r\n      \r\n      // Health analysis\r\n      if (response.health_analysis) {\r\n        const analysis = response.health_analysis;\r\n        formatted += `## 🔬 Health Analysis\\n`;\r\n        formatted += `**Processing Level:** ${analysis.processing_level}\\n`;\r\n        \r\n        if (analysis.carcinogen_alerts && analysis.carcinogen_alerts.length > 0) {\r\n          formatted += `**⚠️ Carcinogen Alerts:**\\n`;\r\n          analysis.carcinogen_alerts.forEach(alert => {\r\n            formatted += `- ${alert}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (analysis.toxic_additives && analysis.toxic_additives.length > 0) {\r\n          formatted += `**🧪 Toxic Additives:**\\n`;\r\n          analysis.toxic_additives.forEach(additive => {\r\n            formatted += `- ${additive}\\n`;\r\n          });\r\n        }\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // WIHY recommendations\r\n      if (response.wihy_recommendations && response.wihy_recommendations.length > 0) {\r\n        formatted += `## 💡 WIHY Recommendations\\n`;\r\n        response.wihy_recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Ingredients\r\n      if (response.ingredients && response.ingredients.length > 0) {\r\n        formatted += `## 🧾 Ingredients\\n`;\r\n        formatted += response.ingredients.join(', ') + '\\n\\n';\r\n      }\r\n      \r\n    } else {\r\n      formatted += `Product not found or analysis failed. Choose foods with 5 or fewer ingredients when in doubt.\\n\\n`;\r\n    }\r\n    \r\n    // Data sources\r\n    if (response.data_sources && response.data_sources.length > 0) {\r\n      formatted += `---\\n\\n*Data sources: ${response.data_sources.join(', ')}*`;\r\n    }\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group label\r\n   */\r\n  private getNovaLabel(novaGroup: number): string {\r\n    const labels = {\r\n      1: 'Natural/Unprocessed',\r\n      2: 'Processed Culinary Ingredients', \r\n      3: 'Processed Foods',\r\n      4: 'Ultra-Processed Foods'\r\n    };\r\n    return labels[novaGroup as keyof typeof labels] || 'Unknown';\r\n  }\r\n\r\n  /**\r\n   * Get NOVA guidance for UI display\r\n   */\r\n  getNovaGuidance(novaGroup: number): { action: string; color: string; message: string } {\r\n    const guidance = {\r\n      1: { action: 'CHOOSE', color: 'green', message: 'Real food as God intended' },\r\n      2: { action: 'MODERATE', color: 'yellow', message: 'Use sparingly' },\r\n      3: { action: 'LIMIT', color: 'orange', message: 'Find alternatives' },\r\n      4: { action: 'AVOID', color: 'red', message: 'Your family deserves better' }\r\n    };\r\n    \r\n    return guidance[novaGroup as keyof typeof guidance] || guidance[4];\r\n  }\r\n  formatWihyResponse(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string {\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'response' in response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const data = healthResp.data;\r\n      \r\n      let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n      \r\n      // Main response content\r\n      formatted += data.response;\r\n      \r\n      // Add health insights if available\r\n      if (data.health_insights) {\r\n        if (data.health_insights.key_benefits?.length) {\r\n          formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n          data.health_insights.key_benefits.forEach(benefit => {\r\n            formatted += `- ${benefit}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.potential_risks?.length) {\r\n          formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n          data.health_insights.potential_risks.forEach(risk => {\r\n            formatted += `- ${risk}\\n`;\r\n          });\r\n        }\r\n        \r\n        if (data.health_insights.recommendations?.length) {\r\n          formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n          data.health_insights.recommendations.forEach(rec => {\r\n            formatted += `- ${rec}\\n`;\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Add processing info\r\n      formatted += `\\n\\n---\\n\\n*Processed by ${data.processor_used} in ${data.processing_time.toFixed(2)}ms*`;\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle UnifiedResponse format (legacy API)\r\n    if ('success' in response && 'data' in response && response.data && 'ai_response' in response.data) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      // Use the ai_response.response field which contains the actual response\r\n      if (unifiedResp.data.ai_response && unifiedResp.data.ai_response.response) {\r\n        formatted += unifiedResp.data.ai_response.response;\r\n      } else {\r\n        // Fallback to showing raw data if ai_response is not available\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      // Add service information if available\r\n      if (unifiedResp.data.ai_response?.service) {\r\n        formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.data.ai_response.service} service*`;\r\n        if (unifiedResp.data.ai_response.confidence) {\r\n          formatted += ` (Confidence: ${Math.round(unifiedResp.data.ai_response.confidence * 100)}%)`;\r\n        }\r\n      }\r\n      \r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Add timestamp if available (different field names in different response formats)\r\n    const timestamp = (response as any).timestamp || (response as any).created_at || new Date().toISOString();\r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'health_insights' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        healthResp.data.health_insights.recommendations.forEach(r => recommendations.push(r));\r\n      }\r\n      return recommendations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Handle new structured recommendations\r\n      if (response.data.recommendations) {\r\n        const recs = response.data.recommendations;\r\n        if (recs.immediate_actions) recs.immediate_actions.forEach(r => recommendations.push(r));\r\n        if (recs.lifestyle_changes) recs.lifestyle_changes.forEach(r => recommendations.push(r));\r\n        if (recs.better_alternatives) recs.better_alternatives.forEach(r => recommendations.push(r));\r\n        if (recs.shopping_tips) recs.shopping_tips.forEach(r => recommendations.push(r));\r\n        if (recs.meal_planning) recs.meal_planning.forEach(r => recommendations.push(r));\r\n      }\r\n      // Handle legacy recommendations\r\n      if (response.data.legacy_recommendations && response.data.legacy_recommendations.length > 0) {\r\n        response.data.legacy_recommendations.forEach((r: string) => recommendations.push(r));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.personalized_analysis?.action_items) {\r\n        legacyResp.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n          recommendations.push(`${action.action} (${action.priority} priority)`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    const citations: string[] = [];\r\n\r\n    // Handle new HealthQuestionResponse format (OpenAPI v4.0.0)\r\n    if ('success' in response && 'data' in response && response.data && 'processor_used' in response.data) {\r\n      // For now, the new API doesn't include specific citation fields in the schema\r\n      // We could parse citations from the response text if needed\r\n      return citations;\r\n    }\r\n\r\n    if (isUnifiedResponse(response)) {\r\n      // Unified API may include sources array\r\n      if (response.data.sources && response.data.sources.length > 0) {\r\n        response.data.sources.forEach((s: string) => citations.push(s));\r\n      }\r\n    } else {\r\n      // Handle legacy WihyResponse format\r\n      const legacyResp = response as WihyResponse;\r\n      if (legacyResp.wihy_response.research_foundation) {\r\n        legacyResp.wihy_response.research_foundation.forEach(research => {\r\n          citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n        });\r\n      }\r\n    }\r\n\r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    // Handle chat service responses\r\n    if (response.service_used === 'chat' && response.data.response) {\r\n      // For now, the API is returning very brief responses like \"AI Chat response to: what is healthy\"\r\n      // We should provide more helpful information to the user\r\n      const briefResponse = response.data.response;\r\n      \r\n      if (briefResponse.includes('AI Chat response to:')) {\r\n        // The API gave us a placeholder response, provide something more useful\r\n        const query = response.data.query || 'your question';\r\n        return `I received your question about \"${query}\" and I'm here to help! \r\n\r\nThe WiHy AI system is currently processing health-related queries. While the response system is being optimized, I can help you with:\r\n\r\n• Understanding health and nutrition concepts\r\n• Providing general wellness guidance  \r\n• Explaining health data and metrics\r\n• Offering evidence-based health insights\r\n\r\nWhat specific aspect of health would you like to explore further?`;\r\n      }\r\n      \r\n      return briefResponse;\r\n    }\r\n    \r\n    // Handle other response types\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance of the enhanced API service\r\nexport const wihyAPI = new WihyEnhancedAPIService();\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}