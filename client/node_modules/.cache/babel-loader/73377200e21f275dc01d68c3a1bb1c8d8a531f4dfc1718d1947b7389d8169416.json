{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport openaiAPI from './services/openaiAPI';\nimport './VHealthSearch.css';\n\n// Create or update this function in your existing API service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const searchFoodDatabase = async query => {\n  try {\n    console.log('üîç Calling food database API for:', query);\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('üìä Food API response:', data);\n    return data;\n  } catch (error) {\n    console.error('‚ùå Food database API error:', error);\n    throw error;\n  }\n};\n\n// Add to your existing openaiAPI object or create a new foodAPI object\nexport const foodAPI = {\n  searchFood: searchFoodDatabase\n};\n\n// Define a type for the allowed data sources that matches SearchResults requirements\n\n// Results page wrapper to handle URL parameters\nconst ResultsPage = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const query = searchParams.get('q') || '';\n  const [isLoading, setIsLoading] = useState(true);\n  const [results, setResults] = useState('');\n  const [dataSource, setDataSource] = useState(\"local\");\n  const [citations, setCitations] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [disclaimer, setDisclaimer] = useState('');\n\n  // Fetch results when query changes\n  useEffect(() => {\n    const fetchResults = async () => {\n      if (!query) {\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Fetching results for query:\", query);\n      setIsLoading(true);\n      try {\n        const result = await openaiAPI.searchHealthInfo(query);\n        console.log(\"Search result:\", result);\n\n        // Safely extract the text content\n        const resultText = result.details || result.response || JSON.stringify(result);\n        setResults(resultText);\n        setDataSource(\"openai\");\n        setCitations(result.sources || []);\n        setRecommendations(result.recommendations || []);\n        setDisclaimer(result.medicalDisclaimer || '');\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        setResults(\"Sorry, there was an error processing your request.\");\n        setDataSource(\"error\");\n        setCitations([]);\n        setRecommendations([]);\n        setDisclaimer('');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchResults();\n  }, [query]);\n  const handleBackToSearch = () => {\n    navigate('/');\n  };\n  const handleNewSearch = newQuery => {\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\n  };\n  const handleSearch = async query => {\n    setIsLoading(true);\n    // setQuery(query); // This line seems to be missing in your code, assuming it's needed\n\n    try {\n      console.log('üîç Starting search for:', query);\n\n      // Always try database first for food queries\n      const foodKeywords = ['quinoa', 'broccoli', 'apple', 'tomato', 'banana', 'food', 'nutrition'];\n      const isFoodQuery = foodKeywords.some(keyword => query.toLowerCase().includes(keyword.toLowerCase()));\n      console.log('Is food query?', isFoodQuery);\n      if (isFoodQuery) {\n        try {\n          console.log('üîç Searching database for:', query);\n          // Assuming searchFoodDatabase is imported or available in this scope\n          const foodResult = await searchFoodDatabase(query);\n          console.log('üìä Database result:', foodResult);\n          if (foodResult.found) {\n            console.log('‚úÖ Found in database - using database data');\n            setResults(JSON.stringify(foodResult, null, 2));\n            setDataSource('vnutrition'); // Important: Set correct source\n            setIsLoading(false);\n            return; // Exit early - don't fall back to OpenAI\n          }\n        } catch (error) {\n          console.error('Database search failed:', error);\n          // Continue to fallback\n        }\n      }\n\n      // Fallback to OpenAI\n      console.log('ü§ñ Using OpenAI fallback');\n      const generalResult = await openaiAPI.searchHealthInfo(query);\n      const resultText = typeof generalResult === 'string' ? generalResult : generalResult.details || generalResult.response || JSON.stringify(generalResult, null, 2);\n      setResults(resultText);\n      setDataSource('openai');\n    } catch (error) {\n      console.error('Search error:', error);\n      setResults('Error searching. Please try again.');\n      setDataSource('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SearchResults, {\n    query: query,\n    results: results,\n    onBackToSearch: handleBackToSearch,\n    onNewSearch: handleNewSearch,\n    isLoading: isLoading,\n    dataSource: dataSource,\n    citations: citations,\n    recommendations: recommendations,\n    disclaimer: disclaimer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App with routing\n_s(ResultsPage, \"X2PdXXkm0iSGXMCZYDLtT4OvLjk=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ResultsPage;\nconst App = () => {\n  console.log(\"App component rendered\");\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(VHealthSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/results\",\n        element: /*#__PURE__*/_jsxDEV(ResultsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nconst fetchSearchResults = async query => {\n  setIsLoading(true);\n  try {\n    console.log('Fetching results for query:', query);\n\n    // STEP 1: First try the nutrition database\n    try {\n      console.log('Trying nutrition database first...');\n      const nutritionResponse = await fetch(`/api/food?q=${encodeURIComponent(query)}`);\n      if (nutritionResponse.ok) {\n        const nutritionData = await nutritionResponse.json();\n        console.log('Nutrition API response:', nutritionData);\n        if (nutritionData && nutritionData.found === true) {\n          console.log('‚úÖ Found nutrition data - using vnutrition source');\n          setResults(JSON.stringify(nutritionData));\n          setDataSource('vnutrition');\n          setIsLoading(false);\n          return; // Exit early - we have nutrition data\n        } else {\n          console.log('‚ùå No nutrition data found, falling back to OpenAI');\n        }\n      } else {\n        console.log('‚ùå Nutrition API request failed, falling back to OpenAI');\n      }\n    } catch (nutritionError) {\n      console.log('‚ùå Nutrition API error:', nutritionError, '- falling back to OpenAI');\n    }\n\n    // STEP 2: Fall back to OpenAI if no nutrition data found\n    console.log('ü§ñ Using OpenAI as fallback...');\n    const openaiResult = await openaiAPI.searchHealthInfo(query);\n    if (openaiResult) {\n      console.log('‚úÖ OpenAI result:', openaiResult);\n      setResults(openaiResult.details || openaiResult.summary || 'No results found');\n      setDataSource('openai');\n    } else {\n      console.log('‚ùå No OpenAI results');\n      setResults('Sorry, no information found for your query.');\n      setDataSource('error');\n    }\n  } catch (error) {\n    console.error('‚ùå Search error:', error);\n    setResults('An error occurred while searching. Please try again.');\n    setDataSource('error');\n  } finally {\n    setIsLoading(false);\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"ResultsPage\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","searchFoodDatabase","query","console","log","response","fetch","encodeURIComponent","method","headers","ok","Error","status","data","json","error","foodAPI","searchFood","ResultsPage","_s","searchParams","navigate","get","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","fetchResults","result","searchHealthInfo","resultText","details","JSON","stringify","sources","medicalDisclaimer","handleBackToSearch","handleNewSearch","newQuery","handleSearch","foodKeywords","isFoodQuery","some","keyword","toLowerCase","includes","foodResult","found","generalResult","onBackToSearch","onNewSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","children","path","element","_c2","fetchSearchResults","nutritionResponse","nutritionData","nutritionError","openaiResult","summary","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport './VHealthSearch.css';\r\n\r\n// Create or update this function in your existing API service\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const searchFoodDatabase = async (query: string) => {\r\n  try {\r\n    console.log('üîç Calling food database API for:', query);\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('üìä Food API response:', data);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('‚ùå Food database API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add to your existing openaiAPI object or create a new foodAPI object\r\nexport const foodAPI = {\r\n  searchFood: searchFoodDatabase\r\n};\r\n\r\n// Define a type for the allowed data sources that matches SearchResults requirements\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\n// Results page wrapper to handle URL parameters\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Fetching results for query:\", query);\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"Search result:\", result);\r\n        \r\n        // Safely extract the text content\r\n        const resultText = result.details || result.response || JSON.stringify(result);\r\n        setResults(resultText);\r\n        setDataSource(\"openai\");\r\n        \r\n        setCitations(result.sources || []);\r\n        setRecommendations(result.recommendations || []);\r\n        setDisclaimer(result.medicalDisclaimer || '');\r\n        \r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        setResults(\"Sorry, there was an error processing your request.\");\r\n        setDataSource(\"error\");\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query]);\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  const handleSearch = async (query: string) => {\r\n    setIsLoading(true);\r\n    // setQuery(query); // This line seems to be missing in your code, assuming it's needed\r\n  \r\n    try {\r\n      console.log('üîç Starting search for:', query);\r\n      \r\n      // Always try database first for food queries\r\n      const foodKeywords = [\r\n        'quinoa', 'broccoli', 'apple', 'tomato', 'banana', 'food', 'nutrition'\r\n      ];\r\n      \r\n      const isFoodQuery = foodKeywords.some(keyword => \r\n        query.toLowerCase().includes(keyword.toLowerCase())\r\n      );\r\n      \r\n      console.log('Is food query?', isFoodQuery);\r\n      \r\n      if (isFoodQuery) {\r\n        try {\r\n          console.log('üîç Searching database for:', query);\r\n          // Assuming searchFoodDatabase is imported or available in this scope\r\n          const foodResult = await searchFoodDatabase(query);\r\n          \r\n          console.log('üìä Database result:', foodResult);\r\n          \r\n          if (foodResult.found) {\r\n            console.log('‚úÖ Found in database - using database data');\r\n            setResults(JSON.stringify(foodResult, null, 2));\r\n            setDataSource('vnutrition'); // Important: Set correct source\r\n            setIsLoading(false);\r\n            return; // Exit early - don't fall back to OpenAI\r\n          }\r\n        } catch (error) {\r\n          console.error('Database search failed:', error);\r\n          // Continue to fallback\r\n        }\r\n      }\r\n      \r\n      // Fallback to OpenAI\r\n      console.log('ü§ñ Using OpenAI fallback');\r\n      const generalResult: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n      const resultText = typeof generalResult === 'string' \r\n        ? generalResult \r\n        : generalResult.details || generalResult.response || JSON.stringify(generalResult, null, 2);\r\n\r\n      setResults(resultText);\r\n      setDataSource('openai');\r\n      \r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      setResults('Error searching. Please try again.');\r\n      setDataSource('error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\n// Main App with routing\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n  response?: string; // Alternative field name\r\n}\r\n\r\nconst fetchSearchResults = async (query: string) => {\r\n  setIsLoading(true);\r\n  \r\n  try {\r\n    console.log('Fetching results for query:', query);\r\n    \r\n    // STEP 1: First try the nutrition database\r\n    try {\r\n      console.log('Trying nutrition database first...');\r\n      const nutritionResponse = await fetch(`/api/food?q=${encodeURIComponent(query)}`);\r\n      \r\n      if (nutritionResponse.ok) {\r\n        const nutritionData = await nutritionResponse.json();\r\n        console.log('Nutrition API response:', nutritionData);\r\n        \r\n        if (nutritionData && nutritionData.found === true) {\r\n          console.log('‚úÖ Found nutrition data - using vnutrition source');\r\n          setResults(JSON.stringify(nutritionData));\r\n          setDataSource('vnutrition');\r\n          setIsLoading(false);\r\n          return; // Exit early - we have nutrition data\r\n        } else {\r\n          console.log('‚ùå No nutrition data found, falling back to OpenAI');\r\n        }\r\n      } else {\r\n        console.log('‚ùå Nutrition API request failed, falling back to OpenAI');\r\n      }\r\n    } catch (nutritionError) {\r\n      console.log('‚ùå Nutrition API error:', nutritionError, '- falling back to OpenAI');\r\n    }\r\n    \r\n    // STEP 2: Fall back to OpenAI if no nutrition data found\r\n    console.log('ü§ñ Using OpenAI as fallback...');\r\n    const openaiResult = await openaiAPI.searchHealthInfo(query);\r\n    \r\n    if (openaiResult) {\r\n      console.log('‚úÖ OpenAI result:', openaiResult);\r\n      setResults(openaiResult.details || openaiResult.summary || 'No results found');\r\n      setDataSource('openai');\r\n    } else {\r\n      console.log('‚ùå No OpenAI results');\r\n      setResults('Sorry, no information found for your query.');\r\n      setDataSource('error');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Search error:', error);\r\n    setResults('An error occurred while searching. Please try again.');\r\n    setDataSource('error');\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}