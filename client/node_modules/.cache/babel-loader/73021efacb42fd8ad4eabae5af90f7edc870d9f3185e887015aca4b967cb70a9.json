{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes) {\n  return {\n    create: function (nextPolicy, options) {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\nexport var defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport var defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nvar DeserializationPolicy = /** @class */function (_super) {\n  __extends(DeserializationPolicy, _super);\n  function DeserializationPolicy(nextPolicy, deserializationContentTypes, options) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    _this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n    return _this;\n  }\n  DeserializationPolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._nextPolicy.sendRequest(request).then(function (response) {\n          return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response);\n        })];\n      });\n    });\n  };\n  return DeserializationPolicy;\n}(BaseRequestPolicy);\nexport { DeserializationPolicy };\nfunction getOperationResponse(parsedResponse) {\n  var result;\n  var request = parsedResponse.request;\n  var operationSpec = request.operationSpec;\n  if (operationSpec) {\n    var operationResponseGetter = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n  var shouldDeserialize = parsedResponse.request.shouldDeserialize;\n  var result;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {\n  return parse(jsonContentTypes, xmlContentTypes, response).then(function (parsedResponse) {\n    var shouldDeserialize = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      var operationSpec = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        var statusCode = parsedResponse.status;\n        var expectedStatusCodes = Object.keys(operationSpec.responses);\n        var hasNoExpectedStatusCodes = expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n        var responseSpec = getOperationResponse(parsedResponse);\n        var isExpectedStatusCode = hasNoExpectedStatusCodes ? 200 <= statusCode && statusCode < 300 : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          var defaultResponseSpec = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            var initialErrorMessage = isStreamOperation(operationSpec) ? \"Unexpected status code: \" + statusCode : parsedResponse.bodyAsText;\n            var error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n            var parsedErrorResponse = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                var defaultResponseBodyMapper = defaultResponseSpec.bodyMapper;\n                if (defaultResponseBodyMapper && defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  var internalError = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n                if (defaultResponseBodyMapper) {\n                  var valueToDeserialize = parsedErrorResponse;\n                  if (operationSpec.isXML && defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                    valueToDeserialize = typeof parsedErrorResponse === \"object\" ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName] : [];\n                  }\n                  error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                }\n              }\n            } catch (defaultError) {\n              error.message = \"Error \\\"\" + defaultError.message + \"\\\" occurred in deserializing the responseBody - \\\"\" + parsedResponse.bodyAsText + \"\\\" for the default response.\";\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            var valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            } catch (error) {\n              var restError = new RestError(\"Error \" + error + \" occurred in deserializing the responseBody - \" + parsedResponse.bodyAsText);\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse) {\n  var errorHandler = function (err) {\n    var msg = \"Error \\\"\" + err + \"\\\" occurred while parsing the response body - \" + operationResponse.bodyAsText + \".\";\n    var errCode = err.code || RestError.PARSE_ERROR;\n    var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n    return Promise.reject(e);\n  };\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    var text_1 = operationResponse.bodyAsText;\n    var contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    var contentComponents = !contentType ? [] : contentType.split(\";\").map(function (component) {\n      return component.toLowerCase();\n    });\n    if (contentComponents.length === 0 || contentComponents.some(function (component) {\n      return jsonContentTypes.indexOf(component) !== -1;\n    })) {\n      return new Promise(function (resolve) {\n        operationResponse.parsedBody = JSON.parse(text_1);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(function (component) {\n      return xmlContentTypes.indexOf(component) !== -1;\n    })) {\n      return parseXML(text_1).then(function (body) {\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }).catch(errorHandler);\n    }\n  }\n  return Promise.resolve(operationResponse);\n}","map":{"version":3,"names":["isStreamOperation","RestError","MapperType","utils","parseXML","BaseRequestPolicy","deserializationPolicy","deserializationContentTypes","create","nextPolicy","options","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","_super","__extends","_this","call","jsonContentTypes","json","xmlContentTypes","xml","prototype","sendRequest","request","_nextPolicy","then","response","deserializeResponseBody","getOperationResponse","parsedResponse","result","operationSpec","operationResponseGetter","responses","status","shouldDeserializeResponse","shouldDeserialize","undefined","parse","statusCode","expectedStatusCodes","Object","keys","hasNoExpectedStatusCodes","length","responseSpec","isExpectedStatusCode","defaultResponseSpec","default","initialErrorMessage","bodyAsText","error","stripRequest","stripResponse","parsedErrorResponse","parsedBody","defaultResponseBodyMapper","bodyMapper","serializedName","code","message","internalError","valueToDeserialize","isXML","type","name","Sequence","xmlElementName","body","serializer","deserialize","defaultError","Promise","reject","restError","httpMethod","headersMapper","parsedHeaders","headers","rawHeaders","resolve","operationResponse","errorHandler","err","msg","errCode","PARSE_ERROR","e","streamResponseBody","text_1","contentType","get","contentComponents","split","map","component","toLowerCase","some","indexOf","JSON","catch"],"sources":["C:\\repo\\wihy_ui\\client\\node_modules\\@azure\\ms-rest-js\\lib\\policies\\deserializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { Mapper, MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptionsLike,\n} from \"./requestPolicy\";\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    },\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    deserializationContentTypes: DeserializationContentTypes | undefined,\n    options: RequestPolicyOptionsLike\n  ) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response: HttpOperationResponse) =>\n        deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response)\n      );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then((parsedResponse) => {\n    const shouldDeserialize: boolean = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      const operationSpec: OperationSpec | undefined = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        const statusCode: number = parsedResponse.status;\n\n        const expectedStatusCodes: string[] = Object.keys(operationSpec.responses);\n\n        const hasNoExpectedStatusCodes: boolean =\n          expectedStatusCodes.length === 0 ||\n          (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\");\n\n        const responseSpec: OperationResponse | undefined = getOperationResponse(parsedResponse);\n\n        const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes\n          ? 200 <= statusCode && statusCode < 300\n          : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          const defaultResponseSpec: OperationResponse = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            const initialErrorMessage: string = isStreamOperation(operationSpec)\n              ? `Unexpected status code: ${statusCode}`\n              : (parsedResponse.bodyAsText as string);\n\n            const error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n\n            let parsedErrorResponse: { [key: string]: any } = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                const defaultResponseBodyMapper: Mapper | undefined =\n                  defaultResponseSpec.bodyMapper;\n                if (\n                  defaultResponseBodyMapper &&\n                  defaultResponseBodyMapper.serializedName === \"CloudError\"\n                ) {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  let internalError: any = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  let valueToDeserialize: any = parsedErrorResponse;\n                  if (\n                    operationSpec.isXML &&\n                    defaultResponseBodyMapper.type.name === MapperType.Sequence\n                  ) {\n                    valueToDeserialize =\n                      typeof parsedErrorResponse === \"object\"\n                        ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName!]\n                        : [];\n                  }\n                  error.body = operationSpec.serializer.deserialize(\n                    defaultResponseBodyMapper,\n                    valueToDeserialize,\n                    \"error.body\"\n                  );\n                }\n              }\n            } catch (defaultError) {\n              error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            let valueToDeserialize: any = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize =\n                typeof valueToDeserialize === \"object\"\n                  ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                  : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n                responseSpec.bodyMapper,\n                valueToDeserialize,\n                \"operationRes.parsedBody\"\n              );\n            } catch (error) {\n              const restError = new RestError(\n                `Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`\n              );\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n              responseSpec.headersMapper,\n              parsedResponse.headers.rawHeaders(),\n              \"operationRes.parsedHeaders\"\n            );\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse,\n      operationResponse.bodyAsText\n    );\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}