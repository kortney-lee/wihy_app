{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS={'nih.gov':1,'ncbi.nlm.nih.gov':1,// PubMed\n'who.int':1,'cdc.gov':1,'fda.gov':1,'usda.gov':1,'jamanetwork.com':1,'nejm.org':1,'thelancet.com':1,'bmj.com':1,'nature.com':1,'mayoclinic.org':1,'health.harvard.edu':1};// Update API URL configuration\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000';class NewsService{constructor(){// Update the apiUrl to use the correct base URL\nthis.apiUrl=\"\".concat(API_BASE_URL,\"/api/news\");}/**\r\n   * Fetch news articles based on provided parameters\r\n   */async getArticles(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// Set defaults\nconst queryParams=_objectSpread({limit:500,country:'US',feed_priority:'1-5',// Changed from '1-10' to '1-5'\nflat:true,page:1,per_page:12},params);console.log('Fetching news with params:',queryParams);const response=await axios.get(\"\".concat(this.apiUrl,\"/articles\"),{params:queryParams});// Process the response to add compatibility fields\nconst apiResponse=response.data;// Map API articles to client format\nif(apiResponse.articles&&apiResponse.articles.length>0){apiResponse.articles=apiResponse.articles.map(article=>this.adaptArticleForClient(article));}return apiResponse;}catch(error){console.error('Error fetching news articles:',error);return{success:false,articles:[],count:0,pagination:{total_items:0,total_pages:0,current_page:1,per_page:12,has_next_page:false,has_prev_page:false},filters_applied:{category:null,country:null,feed_id:null,limit:0},error:error instanceof Error?error.message:'Unknown error',message:error instanceof Error?error.message:'Unknown error'// For backward compatibility\n};}}/**\r\n   * Helper method to adapt API response article format to client format\r\n   */adaptArticleForClient(article){return _objectSpread(_objectSpread({},article),{},{// Add compatibility fields\nurl:article.link||article.url,summary:article.description||article.summary,publishedDate:article.published_date||article.publishedDate,thumbnailUrl:article.thumbnail||article.thumbnailUrl,imageUrl:article.image_url||article.imageUrl,hasMedia:article.has_image||article.hasMedia,hasAuthor:article.has_author||article.hasAuthor,readingTime:article.reading_time||article.readingTime,wordCount:article.word_count||article.wordCount});}/**\r\n   * Get available news categories\r\n   */async getCategories(){try{const response=await axios.get(\"\".concat(this.apiUrl,\"/categories\"));// Type assertion for correct response type\nreturn response.data.categories||[];}catch(error){console.error('Error fetching news categories:',error);return[];}}/**\r\n   * Get available countries\r\n   */async getCountries(){try{const response=await axios.get(\"\".concat(this.apiUrl,\"/countries\"));// Type assertion for correct response type\nreturn response.data.countries||[];}catch(error){console.error('Error fetching countries:',error);return[];}}/**\r\n   * Calculate trust score based on domain\r\n   */calculateTrustScore(article){if(!article.domain)return 0.5;return TRUSTED_DOMAINS[article.domain]||TRUSTED_DOMAINS[\"www.\".concat(article.domain)]||0.5;}}export const newsService=new NewsService();// Update these functions to improve category filtering and sort by date\nexport const fetchNewsFeed=async(categories,limit)=>{// First, set up the API request parameters\nconst params={};// Only add category parameter if categories array is non-empty\nif(categories&&categories.length>0){params.category=categories.join(',');}// Request more articles than needed for better sorting/filtering\nparams.limit=limit?limit*2:50;// Always sort by published date to get newest content\nparams.sort_by='published_date';params.sort_order='desc';console.log('Fetching news with params:',params);// Fetch articles from API\nconst response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// Define priority categories in exact order\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];// Sort articles by our priority scheme\nconst sortedArticles=sortArticlesByPriority(response.articles,priorityCategories);// Limit to requested count after sorting\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Log first few articles to verify order\nconsole.log('Articles returned after prioritization:');limitedArticles.slice(0,5).forEach((article,i)=>{console.log(\"  \".concat(i+1,\". [\").concat(article.category||'uncategorized',\"]: \").concat(article.title));});// Return a modified response with our prioritized articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};// Add the prioritization function to the newsService file\nfunction sortArticlesByPriority(articles,priorityCategories){// Create a copy of the articles array\nconst sortedArticles=[...articles];// Define a function to get priority score (lower is higher priority)\nconst getPriorityScore=article=>{const category=article.category||'';const categoryLower=category.toLowerCase();// FIRST: Explicitly handle tech content - make sure it's always at the bottom\n// Check if it's explicitly categorized as tech\nif(categoryLower==='tech'||categoryLower.includes('technology')||categoryLower.includes('computing')||categoryLower.includes('it ')||categoryLower.includes('software')){console.log(\"\\uD83D\\uDC49 Found tech article, assigning lowest priority: \".concat(article.title));return 1000;// Tech should be shown last\n}// 1. Exact match with priority categories (in strict order)\nfor(let i=0;i<priorityCategories.length;i++){if(category===priorityCategories[i]){return i;// Return the exact index position (0, 1, 2, etc.)\n}}// 2. Partial match with priority categories\nfor(let i=0;i<priorityCategories.length;i++){if(category.includes(priorityCategories[i])){return i+20;// Still keep order but with lower priority than exact matches\n}}// 3. Check for health-related keywords in title/description\nconst title=article.title||'';const description=article.description||'';const content=title+' '+description;const contentLower=content.toLowerCase();const healthKeywords=['health','medical','medicine','doctor','patient','hospital','disease','treatment','cure','wellness','fitness','diet','nutrition','mental','therapy','clinical','drug','vaccine','symptom','diagnosis','cancer','heart','diabetes','covid'];if(healthKeywords.some(keyword=>contentLower.includes(keyword))){return 100;// All health-related content after categorized content\n}// 4. Check for tech keywords in title/description if not already caught above\nconst techKeywords=['tech','technology','computing','software','hardware','ai','artificial intelligence','computer','code','programming','developer','cybersecurity','digital','internet','smartphone','app ','apps ','device','gadget','google','apple','microsoft','facebook','twitter','social media','tesla','elon musk'];if(techKeywords.some(keyword=>contentLower.includes(keyword))){// Extra debug log for tech content detection\nconsole.log(\"\\uD83D\\uDC49 Found tech content by keyword, assigning lowest priority: \".concat(article.title));return 900;// Tech content at the bottom, but just above explicitly categorized tech\n}// 5. Everything else (general content)\nreturn 500;};// Sort articles by priority score\nsortedArticles.sort((a,b)=>{const priorityA=getPriorityScore(a);const priorityB=getPriorityScore(b);// First sort by priority category\nif(priorityA!==priorityB){return priorityA-priorityB;}// If same priority category, sort by date (newest first)\nconst dateA=a.publishedDate||a.published_date;const dateB=b.publishedDate||b.published_date;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Add debug information to see what categories are being returned\nconsole.log('Article order after prioritization:');sortedArticles.slice(0,8).forEach((article,idx)=>{// Show the priority score as part of the debugging\nconst score=getPriorityScore(article);const category=article.category||'uncategorized';console.log(\"  \".concat(idx+1,\". [\").concat(score,\"] [\").concat(category,\"]: \").concat(article.title));});return sortedArticles;}// Update getArticlesByCategory to use the same prioritization logic\nexport const getArticlesByCategory=async(category,limit)=>{if(category==='all'){return fetchNewsFeed([],limit);}const params={category,limit:limit?limit*1.5:20,// Fetch a few more than needed\nsort_by:'published_date',sort_order:'desc'};const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// For category views, we still want to sort by date but within the category\nconst sortedArticles=response.articles.sort((a,b)=>{const dateA=a.publishedDate||a.published_date;const dateB=b.publishedDate||b.published_date;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Limit to requested count\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Return a modified response with our sorted articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};// Add these functions at the end of the file\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */export const refreshNewsFeed=async(categories,limit)=>{const timestamp=new Date().getTime();const params={timestamp,// Add timestamp to bust cache\nlimit:limit||50};if(categories&&categories.length>0){params.category=categories.join(',');}// Add sort parameters\nparams.sort_by='published_date';params.sort_order='desc';console.log('Refreshing news feed with timestamp:',timestamp);const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// Use the same priority sorting as fetchNewsFeed\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];const sortedArticles=sortArticlesByPriority(response.articles,priorityCategories);// Limit to requested count after sorting\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Return a modified response with our prioritized articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};/**\r\n * Search for news articles based on query\r\n */export const searchNewsArticles=async(query,limit)=>{if(!query||query.trim()===''){// If no query, return empty results\nreturn{success:true,articles:[],count:0,pagination:{total_items:0,total_pages:0,current_page:1,per_page:12,has_next_page:false,has_prev_page:false},filters_applied:{category:null,country:null,feed_id:null,limit:0}};}const params={query:query.trim(),limit:limit||50,sort_by:'published_date',// Default to recent articles first\nsort_order:'desc'};console.log(\"Searching news articles with query: \\\"\".concat(query,\"\\\"\"));const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// For search results, we want to prioritize by relevance to search term\n// But still use our priority categories as a secondary sort\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];// Sort articles based on search relevance and category\nconst sortedArticles=response.articles.sort((a,b)=>{// First, prioritize by relevance score if available\nif(a.relevanceScore!==undefined&&b.relevanceScore!==undefined){if(a.relevanceScore!==b.relevanceScore){return b.relevanceScore-a.relevanceScore;}}// If relevance scores are the same, use our category priority\nconst categoryA=a.category||'';const categoryB=b.category||'';// Check if categories are in our priority list\nconst indexA=priorityCategories.findIndex(cat=>categoryA.includes(cat));const indexB=priorityCategories.findIndex(cat=>categoryB.includes(cat));// If both categories are in priority list\nif(indexA>=0&&indexB>=0){if(indexA!==indexB){return indexA-indexB;}}// If only one category is in priority list\nelse if(indexA>=0){return-1;}else if(indexB>=0){return 1;}// Finally, sort by date\nconst dateA=a.publishedDate||a.published_date;const dateB=b.publishedDate||b.published_date;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Limit to requested count\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);return _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","API_BASE_URL","process","env","REACT_APP_API_URL","NewsService","constructor","apiUrl","concat","getArticles","params","arguments","length","undefined","queryParams","_objectSpread","limit","country","feed_priority","flat","page","per_page","console","log","response","get","apiResponse","data","articles","map","article","adaptArticleForClient","error","success","count","pagination","total_items","total_pages","current_page","has_next_page","has_prev_page","filters_applied","category","feed_id","Error","message","url","link","summary","description","publishedDate","published_date","thumbnailUrl","thumbnail","imageUrl","image_url","hasMedia","has_image","hasAuthor","has_author","readingTime","reading_time","wordCount","word_count","getCategories","categories","getCountries","countries","calculateTrustScore","domain","newsService","fetchNewsFeed","join","sort_by","sort_order","priorityCategories","sortedArticles","sortArticlesByPriority","limitedArticles","slice","forEach","i","title","getPriorityScore","categoryLower","toLowerCase","includes","content","contentLower","healthKeywords","some","keyword","techKeywords","sort","a","b","priorityA","priorityB","dateA","dateB","Date","getTime","idx","score","getArticlesByCategory","refreshNewsFeed","timestamp","searchNewsArticles","query","trim","relevanceScore","categoryA","categoryB","indexA","findIndex","cat","indexB"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport interface NewsArticle {\r\n  // API response standard fields\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  author: string;\r\n  published_date: string;\r\n  thumbnail: string;\r\n  image_url: string;\r\n  has_image: boolean;\r\n  has_author: boolean;\r\n  category: string;\r\n  source: string;\r\n  feed_id: number;\r\n  feed_priority: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  content_quality: string;\r\n  completeness: string;\r\n  domain: string;\r\n  extracted_at: string;\r\n  \r\n  // Client-side compatibility fields\r\n  url?: string;\r\n  summary?: string;\r\n  publishedDate?: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;        // Added to match client usage\r\n  tags?: string[];\r\n  relevanceScore?: number;\r\n  hasMedia?: boolean;\r\n  hasAuthor?: boolean;\r\n  readingTime?: number;     // Added to match client usage\r\n  wordCount?: number;       // Added to match client usage\r\n  mediaType?: string;       // Added to match client usage\r\n  contentLength?: number;   // Added to match client usage\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  pagination: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: false;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n  };\r\n  error?: string; // Added to handle errors from the API\r\n  message?: string; // For backward compatibility\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;\r\n  country?: string;\r\n  category?: string;\r\n  exclude_category?: string; // Add this field to exclude certain categories\r\n  feed_id?: number;\r\n  feed_priority?: string;\r\n  flat?: boolean;\r\n  page?: number;\r\n  per_page?: number;\r\n  timestamp?: number; // Added to support refreshNewsFeed\r\n  query?: string;     // Added to support searchNewsArticles\r\n  sort_by?: string; // Add sorting parameter\r\n  sort_order?: 'asc' | 'desc'; // Add sort direction\r\n}\r\n\r\nclass NewsService {\r\n  // Update the apiUrl to use the correct base URL\r\n  private apiUrl = `${API_BASE_URL}/api/news`;\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Set defaults\r\n      const queryParams: NewsQueryParams = {\r\n        limit: 500,\r\n        country: 'US',\r\n        feed_priority: '1-5',  // Changed from '1-10' to '1-5'\r\n        flat: true,\r\n        page: 1,\r\n        per_page: 12,\r\n        ...params // Override with any provided params\r\n      };\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      const response = await axios.get(`${this.apiUrl}/articles`, { params: queryParams });\r\n      \r\n      // Process the response to add compatibility fields\r\n      const apiResponse = response.data as NewsFeedResponse;\r\n      \r\n      // Map API articles to client format\r\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n      }\r\n      \r\n      return apiResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 12,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Add compatibility fields\r\n      url: article.link || article.url,\r\n      summary: article.description || article.summary,\r\n      publishedDate: article.published_date || article.publishedDate,\r\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\r\n      imageUrl: article.image_url || article.imageUrl,\r\n      hasMedia: article.has_image || article.hasMedia,\r\n      hasAuthor: article.has_author || article.hasAuthor,\r\n      readingTime: article.reading_time || article.readingTime,\r\n      wordCount: article.word_count || article.wordCount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      const response = await axios.get(`${this.apiUrl}/categories`);\r\n      // Type assertion for correct response type\r\n      return (response.data as any).categories || [];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      const response = await axios.get(`${this.apiUrl}/countries`);\r\n      // Type assertion for correct response type\r\n      return (response.data as any).countries || [];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    if (!article.domain) return 0.5;\r\n    \r\n    return TRUSTED_DOMAINS[article.domain] || \r\n           TRUSTED_DOMAINS[`www.${article.domain}`] || \r\n           0.5;\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  // First, set up the API request parameters\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Request more articles than needed for better sorting/filtering\r\n  params.limit = limit ? limit * 2 : 50;\r\n  \r\n  // Always sort by published date to get newest content\r\n  params.sort_by = 'published_date';\r\n  params.sort_order = 'desc';\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  \r\n  // Fetch articles from API\r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Define priority categories in exact order\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles by our priority scheme\r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Log first few articles to verify order\r\n    console.log('Articles returned after prioritization:');\r\n    limitedArticles.slice(0, 5).forEach((article, i) => {\r\n      console.log(`  ${i+1}. [${article.category || 'uncategorized'}]: ${article.title}`);\r\n    });\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add the prioritization function to the newsService file\r\nfunction sortArticlesByPriority(articles: NewsArticle[], priorityCategories: string[]): NewsArticle[] {\r\n  // Create a copy of the articles array\r\n  const sortedArticles = [...articles];\r\n  \r\n  // Define a function to get priority score (lower is higher priority)\r\n  const getPriorityScore = (article: NewsArticle): number => {\r\n    const category = article.category || '';\r\n    const categoryLower = category.toLowerCase();\r\n    \r\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\r\n    // Check if it's explicitly categorized as tech\r\n    if (categoryLower === 'tech' || \r\n        categoryLower.includes('technology') || \r\n        categoryLower.includes('computing') || \r\n        categoryLower.includes('it ') || \r\n        categoryLower.includes('software')) {\r\n      console.log(`👉 Found tech article, assigning lowest priority: ${article.title}`);\r\n      return 1000; // Tech should be shown last\r\n    }\r\n    \r\n    // 1. Exact match with priority categories (in strict order)\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category === priorityCategories[i]) {\r\n        return i; // Return the exact index position (0, 1, 2, etc.)\r\n      }\r\n    }\r\n    \r\n    // 2. Partial match with priority categories\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category.includes(priorityCategories[i])) {\r\n        return i + 20; // Still keep order but with lower priority than exact matches\r\n      }\r\n    }\r\n    \r\n    // 3. Check for health-related keywords in title/description\r\n    const title = article.title || '';\r\n    const description = article.description || '';\r\n    const content = title + ' ' + description;\r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const healthKeywords = [\r\n      'health', 'medical', 'medicine', 'doctor', 'patient', 'hospital',\r\n      'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet',\r\n      'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine',\r\n      'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'\r\n    ];\r\n    \r\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\r\n      return 100; // All health-related content after categorized content\r\n    }\r\n    \r\n    // 4. Check for tech keywords in title/description if not already caught above\r\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', \r\n                        'ai', 'artificial intelligence', 'computer', 'code', 'programming',\r\n                        'developer', 'cybersecurity', 'digital', 'internet', 'smartphone',\r\n                        'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft',\r\n                        'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\r\n    \r\n    if (techKeywords.some(keyword => \r\n      contentLower.includes(keyword)\r\n    )) {\r\n      // Extra debug log for tech content detection\r\n      console.log(`👉 Found tech content by keyword, assigning lowest priority: ${article.title}`);\r\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\r\n    }\r\n    \r\n    // 5. Everything else (general content)\r\n    return 500; \r\n  };\r\n  \r\n  // Sort articles by priority score\r\n  sortedArticles.sort((a, b) => {\r\n    const priorityA = getPriorityScore(a);\r\n    const priorityB = getPriorityScore(b);\r\n    \r\n    // First sort by priority category\r\n    if (priorityA !== priorityB) {\r\n      return priorityA - priorityB;\r\n    }\r\n    \r\n    // If same priority category, sort by date (newest first)\r\n    const dateA = a.publishedDate || a.published_date;\r\n    const dateB = b.publishedDate || b.published_date;\r\n    \r\n    if (dateA && dateB) {\r\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n  \r\n  // Add debug information to see what categories are being returned\r\n  console.log('Article order after prioritization:');\r\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\r\n    // Show the priority score as part of the debugging\r\n    const score = getPriorityScore(article);\r\n    const category = article.category || 'uncategorized';\r\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\r\n  });\r\n  \r\n  return sortedArticles;\r\n}\r\n\r\n// Update getArticlesByCategory to use the same prioritization logic\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (category === 'all') {\r\n    return fetchNewsFeed([], limit);\r\n  }\r\n  \r\n  const params: NewsQueryParams = { \r\n    category, \r\n    limit: limit ? limit * 1.5 : 20, // Fetch a few more than needed\r\n    sort_by: 'published_date',\r\n    sort_order: 'desc'\r\n  };\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For category views, we still want to sort by date but within the category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our sorted articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add these functions at the end of the file\r\n\r\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\r\nexport const refreshNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  const timestamp = new Date().getTime();\r\n  const params: NewsQueryParams = {\r\n    timestamp, // Add timestamp to bust cache\r\n    limit: limit || 50\r\n  };\r\n  \r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Add sort parameters\r\n  params.sort_by = 'published_date';\r\n  params.sort_order = 'desc';\r\n  \r\n  console.log('Refreshing news feed with timestamp:', timestamp);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Use the same priority sorting as fetchNewsFeed\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * Search for news articles based on query\r\n */\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (!query || query.trim() === '') {\r\n    // If no query, return empty results\r\n    return {\r\n      success: true,\r\n      articles: [],\r\n      count: 0,\r\n      pagination: {\r\n        total_items: 0,\r\n        total_pages: 0,\r\n        current_page: 1,\r\n        per_page: 12,\r\n        has_next_page: false,\r\n        has_prev_page: false\r\n      },\r\n      filters_applied: {\r\n        category: null,\r\n        country: null,\r\n        feed_id: null,\r\n        limit: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  const params: NewsQueryParams = {\r\n    query: query.trim(),\r\n    limit: limit || 50,\r\n    sort_by: 'published_date', // Default to recent articles first\r\n    sort_order: 'desc'\r\n  };\r\n  \r\n  console.log(`Searching news articles with query: \"${query}\"`);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For search results, we want to prioritize by relevance to search term\r\n    // But still use our priority categories as a secondary sort\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles based on search relevance and category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      // First, prioritize by relevance score if available\r\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\r\n        if (a.relevanceScore !== b.relevanceScore) {\r\n          return b.relevanceScore - a.relevanceScore;\r\n        }\r\n      }\r\n      \r\n      // If relevance scores are the same, use our category priority\r\n      const categoryA = a.category || '';\r\n      const categoryB = b.category || '';\r\n      \r\n      // Check if categories are in our priority list\r\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\r\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\r\n      \r\n      // If both categories are in priority list\r\n      if (indexA >= 0 && indexB >= 0) {\r\n        if (indexA !== indexB) {\r\n          return indexA - indexB;\r\n        }\r\n      } \r\n      // If only one category is in priority list\r\n      else if (indexA >= 0) {\r\n        return -1;\r\n      } else if (indexB >= 0) {\r\n        return 1;\r\n      }\r\n      \r\n      // Finally, sort by date\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}