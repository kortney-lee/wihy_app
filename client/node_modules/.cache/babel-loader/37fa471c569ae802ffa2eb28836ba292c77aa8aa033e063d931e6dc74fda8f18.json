{"ast":null,"code":"var _jsxFileName = \"C:\\\\repo\\\\wihy_ui\\\\client\\\\src\\\\components\\\\NutritionChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n// Extract nutrition data from unified API response only\nconst extractNutritionData = apiResponse => {\n  console.log('=== EXTRACTING NUTRITION DATA FROM NEW API ===');\n  console.log('API Response:', apiResponse);\n\n  // Handle unified API response\n  if (apiResponse && apiResponse.success && apiResponse.data) {\n    var _apiResponse$data$cha;\n    console.log('Processing unified API nutrition data');\n\n    // Use charts_data if available for direct rendering\n    if ((_apiResponse$data$cha = apiResponse.data.charts_data) !== null && _apiResponse$data$cha !== void 0 && _apiResponse$data$cha.nutrition_breakdown) {\n      const chartData = apiResponse.data.charts_data.nutrition_breakdown;\n      console.log('Using charts_data for nutrition breakdown:', chartData);\n      return {\n        type: 'chart_data',\n        labels: chartData.labels,\n        values: chartData.values,\n        colors: chartData.colors,\n        chart_type: chartData.chart_type\n      };\n    }\n\n    // Use nutrition_data from the API response\n    if (apiResponse.data.nutrition_data) {\n      const nutrition = apiResponse.data.nutrition_data;\n      const extractedData = {\n        type: 'nutrition_facts',\n        calories: nutrition.estimated_calories || 0,\n        protein: nutrition.protein || 0,\n        carbs: nutrition.carbohydrates || 0,\n        fat: nutrition.fat || 0,\n        fiber: nutrition.fiber || 0,\n        sugar: nutrition.sugar || 0,\n        sodium: nutrition.sodium || 0,\n        nourish_score: nutrition.nourish_score || 0,\n        nourish_category: nutrition.nourish_category || 'Unknown',\n        macronutrients: nutrition.macronutrients || null\n      };\n      console.log('=== EXTRACTED NUTRITION DATA FROM NEW API ===');\n      console.log('Final extracted data:', extractedData);\n      return extractedData;\n    }\n  }\n  console.log('No nutrition data available in API response');\n  return null;\n};\nconst NutritionChart = ({\n  apiResponse,\n  query\n}) => {\n  // Extract nutrition data using new unified approach\n  const nutritionData = extractNutritionData(apiResponse);\n\n  // Only render if we have nutrition data\n  if (!nutritionData) {\n    return null;\n  }\n\n  // Handle chart_data type (direct from API charts_data)\n  if (nutritionData.type === 'chart_data') {\n    const chartData = nutritionData;\n    const data = {\n      datasets: [{\n        data: chartData.values,\n        backgroundColor: chartData.colors,\n        borderColor: chartData.colors.map(color => color),\n        borderWidth: 2\n      }],\n      labels: chartData.labels\n    };\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'bottom',\n          labels: {\n            padding: 20,\n            font: {\n              size: 14\n            }\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              const label = context.label || '';\n              const value = context.parsed;\n              return `${label}: ${value}%`;\n            }\n          }\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nutrition-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginBottom: '15px',\n          color: '#666'\n        },\n        children: \"Nutrition Breakdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          height: '300px',\n          margin: '0 auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: data,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Handle nutrition_facts type (calculated from nutrition.facts)\n  const nutritionFacts = nutritionData;\n  let protein, carbs, fat, total;\n  if (nutritionFacts.macronutrients) {\n    // Use pre-calculated macronutrients percentages\n    protein = nutritionFacts.macronutrients.protein;\n    carbs = nutritionFacts.macronutrients.carbs;\n    fat = nutritionFacts.macronutrients.fat;\n    total = protein + carbs + fat;\n  } else {\n    // Calculate percentages from gram values\n    total = nutritionFacts.protein + nutritionFacts.carbs + nutritionFacts.fat;\n    if (total > 0) {\n      protein = Math.round(nutritionFacts.protein / total * 100);\n      carbs = Math.round(nutritionFacts.carbs / total * 100);\n      fat = Math.round(nutritionFacts.fat / total * 100);\n    } else {\n      protein = carbs = fat = 0;\n    }\n  }\n  const {\n    calories\n  } = nutritionFacts;\n\n  // Prepare data for the pie chart\n  const data = {\n    datasets: [{\n      data: [protein, carbs, fat],\n      backgroundColor: ['#10B981',\n      // Green for protein\n      '#F59E0B',\n      // Yellow for carbs  \n      '#EF4444' // Red for fat\n      ],\n      borderWidth: 0,\n      cutout: '60%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const labels = ['Protein', 'Carbs', 'Fat'];\n            const label = labels[context.dataIndex];\n            const value = context.parsed;\n            const percentage = total > 0 ? Math.round(value / total * 100) : 0;\n            return `${label}: ${value}g (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: calories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.75rem',\n            color: '#6B7280'\n          },\n          children: \"Calories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '1.2rem',\n            marginRight: '0.5rem'\n          },\n          children: \"\\u26A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '500',\n            color: '#374151',\n            fontSize: '1rem'\n          },\n          children: \"Good\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '1rem',\n          fontSize: '0.875rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#10B981',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Protein: \", total > 0 ? Math.round(protein / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#F59E0B',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Carbs: \", total > 0 ? Math.round(carbs / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#EF4444',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Fat: \", total > 0 ? Math.round(fat / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_c = NutritionChart;\nexport default NutritionChart;\nvar _c;\n$RefreshReg$(_c, \"NutritionChart\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","extractNutritionData","apiResponse","console","log","success","data","_apiResponse$data$cha","charts_data","nutrition_breakdown","chartData","type","labels","values","colors","chart_type","nutrition_data","nutrition","extractedData","calories","estimated_calories","protein","carbs","carbohydrates","fat","fiber","sugar","sodium","nourish_score","nourish_category","macronutrients","NutritionChart","query","nutritionData","datasets","backgroundColor","borderColor","map","color","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","padding","font","size","tooltip","callbacks","label","context","value","parsed","className","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","nutritionFacts","total","Math","round","cutout","display","dataIndex","percentage","textAlign","top","left","transform","fontSize","fontWeight","marginTop","alignItems","justifyContent","marginRight","gap","borderRadius","_c","$RefreshReg$"],"sources":["C:/repo/wihy_ui/client/src/components/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  apiResponse?: UnifiedResponse | any;\r\n  query?: string;\r\n  results?: string;\r\n  dataSource?: \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n}\r\n\r\n// Extract nutrition data from unified API response only\r\nconst extractNutritionData = (apiResponse?: UnifiedResponse | any) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA FROM NEW API ===');\r\n  console.log('API Response:', apiResponse);\r\n  \r\n  // Handle unified API response\r\n  if (apiResponse && apiResponse.success && apiResponse.data) {\r\n    console.log('Processing unified API nutrition data');\r\n    \r\n    // Use charts_data if available for direct rendering\r\n    if (apiResponse.data.charts_data?.nutrition_breakdown) {\r\n      const chartData = apiResponse.data.charts_data.nutrition_breakdown;\r\n      console.log('Using charts_data for nutrition breakdown:', chartData);\r\n      return {\r\n        type: 'chart_data',\r\n        labels: chartData.labels,\r\n        values: chartData.values,\r\n        colors: chartData.colors,\r\n        chart_type: chartData.chart_type\r\n      };\r\n    }\r\n    \r\n    // Use nutrition_data from the API response\r\n    if (apiResponse.data.nutrition_data) {\r\n      const nutrition = apiResponse.data.nutrition_data;\r\n      const extractedData = {\r\n        type: 'nutrition_facts',\r\n        calories: nutrition.estimated_calories || 0,\r\n        protein: nutrition.protein || 0,\r\n        carbs: nutrition.carbohydrates || 0,\r\n        fat: nutrition.fat || 0,\r\n        fiber: nutrition.fiber || 0,\r\n        sugar: nutrition.sugar || 0,\r\n        sodium: nutrition.sodium || 0,\r\n        nourish_score: nutrition.nourish_score || 0,\r\n        nourish_category: nutrition.nourish_category || 'Unknown',\r\n        macronutrients: nutrition.macronutrients || null\r\n      };\r\n      \r\n      console.log('=== EXTRACTED NUTRITION DATA FROM NEW API ===');\r\n      console.log('Final extracted data:', extractedData);\r\n      return extractedData;\r\n    }\r\n  }\r\n  \r\n  console.log('No nutrition data available in API response');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ apiResponse, query }) => {\r\n  // Extract nutrition data using new unified approach\r\n  const nutritionData = extractNutritionData(apiResponse);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData) {\r\n    return null;\r\n  }\r\n\r\n  // Handle chart_data type (direct from API charts_data)\r\n  if ((nutritionData as any).type === 'chart_data') {\r\n    const chartData = nutritionData as any;\r\n    const data = {\r\n      datasets: [\r\n        {\r\n          data: chartData.values,\r\n          backgroundColor: chartData.colors,\r\n          borderColor: chartData.colors.map((color: string) => color),\r\n          borderWidth: 2,\r\n        },\r\n      ],\r\n      labels: chartData.labels,\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'bottom' as const,\r\n          labels: {\r\n            padding: 20,\r\n            font: {\r\n              size: 14,\r\n            },\r\n          },\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: function(context: any) {\r\n              const label = context.label || '';\r\n              const value = context.parsed;\r\n              return `${label}: ${value}%`;\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className=\"nutrition-chart-container\">\r\n        <h4 style={{ marginBottom: '15px', color: '#666' }}>Nutrition Breakdown</h4>\r\n        <div style={{ width: '300px', height: '300px', margin: '0 auto' }}>\r\n          <Doughnut data={data} options={options} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle nutrition_facts type (calculated from nutrition.facts)\r\n  const nutritionFacts = nutritionData as any;\r\n  let protein, carbs, fat, total;\r\n  \r\n  if (nutritionFacts.macronutrients) {\r\n    // Use pre-calculated macronutrients percentages\r\n    protein = nutritionFacts.macronutrients.protein;\r\n    carbs = nutritionFacts.macronutrients.carbs;\r\n    fat = nutritionFacts.macronutrients.fat;\r\n    total = protein + carbs + fat;\r\n  } else {\r\n    // Calculate percentages from gram values\r\n    total = nutritionFacts.protein + nutritionFacts.carbs + nutritionFacts.fat;\r\n    if (total > 0) {\r\n      protein = Math.round((nutritionFacts.protein / total) * 100);\r\n      carbs = Math.round((nutritionFacts.carbs / total) * 100);\r\n      fat = Math.round((nutritionFacts.fat / total) * 100);\r\n    } else {\r\n      protein = carbs = fat = 0;\r\n    }\r\n  }\r\n\r\n  const { calories } = nutritionFacts;\r\n  \r\n  // Prepare data for the pie chart\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [protein, carbs, fat],\r\n        backgroundColor: [\r\n          '#10B981', // Green for protein\r\n          '#F59E0B', // Yellow for carbs  \r\n          '#EF4444', // Red for fat\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '60%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const labels = ['Protein', 'Carbs', 'Fat'];\r\n            const label = labels[context.dataIndex];\r\n            const value = context.parsed;\r\n            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\r\n            return `${label}: ${value}g (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {calories}\r\n          </div>\r\n          <div style={{ fontSize: '0.75rem', color: '#6B7280' }}>\r\n            Calories\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            ⚡\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Good\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#10B981',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Protein: {total > 0 ? Math.round((protein / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#F59E0B',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Carbs: {total > 0 ? Math.round((carbs / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#EF4444',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Fat: {total > 0 ? Math.round((fat / total) * 100) : 0}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}