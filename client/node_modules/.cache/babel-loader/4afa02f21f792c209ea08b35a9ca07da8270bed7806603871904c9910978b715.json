{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport VHealthSearch from './VHealthSearch';\nimport SearchResults from './SearchResults';\nimport './VHealthSearch.css';\n\n// Main App with routing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentView, setCurrentView] = useState('search');\n  const [currentQuery, setCurrentQuery] = useState('');\n  const [searchResults, setSearchResults] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dataSource, setDataSource] = useState('openai');\n  console.log('App component rendered');\n\n  // Remove all the API call logic - just handle view state\n  const handleSearch = query => {\n    setCurrentQuery(query);\n    setCurrentView('results');\n    setIsLoading(true); // SearchResults will handle setting this to false\n  };\n  const handleBackToSearch = () => {\n    setCurrentView('search');\n    setCurrentQuery('');\n    setSearchResults('');\n    setIsLoading(false);\n    setDataSource('openai');\n  };\n  const handleNewSearch = query => {\n    setCurrentQuery(query);\n    setIsLoading(true); // SearchResults will handle the actual search\n  };\n\n  // Remove all useEffect hooks with API calls\n  // Remove fetchResults function\n  // Remove all OpenAI API logic\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-style-app\",\n    children: currentView === 'search' ? /*#__PURE__*/_jsxDEV(VHealthSearch, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SearchResults, {\n      query: currentQuery,\n      results: searchResults,\n      onBackToSearch: handleBackToSearch,\n      onNewSearch: handleNewSearch,\n      isLoading: isLoading,\n      dataSource: dataSource\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Ji2HGKl+l06k9/uzNB70c97poHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","VHealthSearch","SearchResults","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","currentQuery","setCurrentQuery","searchResults","setSearchResults","isLoading","setIsLoading","dataSource","setDataSource","console","log","handleSearch","query","handleBackToSearch","handleNewSearch","className","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","results","onBackToSearch","onNewSearch","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport './VHealthSearch.css';\r\n\r\n// Main App with routing\r\nconst App: React.FC = () => {\r\n  const [currentView, setCurrentView] = useState<'search' | 'results'>('search');\r\n  const [currentQuery, setCurrentQuery] = useState<string>('');\r\n  const [searchResults, setSearchResults] = useState<string>('');\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [dataSource, setDataSource] = useState<'error' | 'openai' | 'local' | 'vnutrition'>('openai');\r\n\r\n  console.log('App component rendered');\r\n\r\n  // Remove all the API call logic - just handle view state\r\n  const handleSearch = (query: string) => {\r\n    setCurrentQuery(query);\r\n    setCurrentView('results');\r\n    setIsLoading(true); // SearchResults will handle setting this to false\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    setCurrentView('search');\r\n    setCurrentQuery('');\r\n    setSearchResults('');\r\n    setIsLoading(false);\r\n    setDataSource('openai');\r\n  };\r\n\r\n  const handleNewSearch = (query: string) => {\r\n    setCurrentQuery(query);\r\n    setIsLoading(true); // SearchResults will handle the actual search\r\n  };\r\n\r\n  // Remove all useEffect hooks with API calls\r\n  // Remove fetchResults function\r\n  // Remove all OpenAI API logic\r\n\r\n  return (\r\n    <div className=\"google-style-app\">\r\n      {currentView === 'search' ? (\r\n        <VHealthSearch onSearch={handleSearch} />\r\n      ) : (\r\n        <SearchResults\r\n          query={currentQuery}\r\n          results={searchResults}\r\n          onBackToSearch={handleBackToSearch}\r\n          onNewSearch={handleNewSearch}\r\n          isLoading={isLoading}\r\n          dataSource={dataSource}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,qBAAqB;;AAE5B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAuB,QAAQ,CAAC;EAC9E,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAC5D,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAC9D,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAA8C,QAAQ,CAAC;EAEnGiB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;EAErC;EACA,MAAMC,YAAY,GAAIC,KAAa,IAAK;IACtCV,eAAe,CAACU,KAAK,CAAC;IACtBZ,cAAc,CAAC,SAAS,CAAC;IACzBM,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,MAAMO,kBAAkB,GAAGA,CAAA,KAAM;IAC/Bb,cAAc,CAAC,QAAQ,CAAC;IACxBE,eAAe,CAAC,EAAE,CAAC;IACnBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,YAAY,CAAC,KAAK,CAAC;IACnBE,aAAa,CAAC,QAAQ,CAAC;EACzB,CAAC;EAED,MAAMM,eAAe,GAAIF,KAAa,IAAK;IACzCV,eAAe,CAACU,KAAK,CAAC;IACtBN,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACA;EACA;;EAEA,oBACEV,OAAA;IAAKmB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,EAC9BjB,WAAW,KAAK,QAAQ,gBACvBH,OAAA,CAACH,aAAa;MAACwB,QAAQ,EAAEN;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEzCzB,OAAA,CAACF,aAAa;MACZkB,KAAK,EAAEX,YAAa;MACpBqB,OAAO,EAAEnB,aAAc;MACvBoB,cAAc,EAAEV,kBAAmB;MACnCW,WAAW,EAAEV,eAAgB;MAC7BT,SAAS,EAAEA,SAAU;MACrBE,UAAU,EAAEA;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjDID,GAAa;AAAA4B,EAAA,GAAb5B,GAAa;AAmDnB,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}