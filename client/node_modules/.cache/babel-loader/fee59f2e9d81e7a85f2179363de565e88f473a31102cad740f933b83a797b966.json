{"ast":null,"code":"import axios from 'axios';\n\n// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'mayoclinic.org': 1,\n  'health.harvard.edu': 1\n};\n\n// Update API URL configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass NewsService {\n  constructor() {\n    // Update the apiUrl to use the correct base URL\n    this.apiUrl = `${API_BASE_URL}/api/news`;\n  }\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\n  async getArticles(params = {}) {\n    try {\n      // Set defaults\n      const queryParams = {\n        limit: 500,\n        country: 'US',\n        feed_priority: '1-10',\n        flat: true,\n        page: 1,\n        per_page: 12,\n        ...params // Override with any provided params\n      };\n      console.log('Fetching news with params:', queryParams);\n      const response = await axios.get(`${this.apiUrl}/articles`, {\n        params: queryParams\n      });\n\n      // Process the response to add compatibility fields\n      const apiResponse = response.data;\n\n      // Map API articles to client format\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\n      }\n      return apiResponse;\n    } catch (error) {\n      console.error('Error fetching news articles:', error);\n      return {\n        success: false,\n        articles: [],\n        count: 0,\n        pagination: {\n          total_items: 0,\n          total_pages: 0,\n          current_page: 1,\n          per_page: 12,\n          has_next_page: false,\n          has_prev_page: false\n        },\n        filters_applied: {\n          category: null,\n          country: null,\n          feed_id: null,\n          limit: 0\n        },\n        error: error instanceof Error ? error.message : 'Unknown error',\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\n      };\n    }\n  }\n\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\n  adaptArticleForClient(article) {\n    return {\n      ...article,\n      // Add compatibility fields\n      url: article.link || article.url,\n      summary: article.description || article.summary,\n      publishedDate: article.published_date || article.publishedDate,\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\n      imageUrl: article.image_url || article.imageUrl,\n      hasMedia: article.has_image || article.hasMedia,\n      hasAuthor: article.has_author || article.hasAuthor,\n      readingTime: article.reading_time || article.readingTime,\n      wordCount: article.word_count || article.wordCount\n    };\n  }\n\n  /**\r\n   * Get available news categories\r\n   */\n  async getCategories() {\n    try {\n      const response = await axios.get(`${this.apiUrl}/categories`);\n      // Type assertion for correct response type\n      return response.data.categories || [];\n    } catch (error) {\n      console.error('Error fetching news categories:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Get available countries\r\n   */\n  async getCountries() {\n    try {\n      const response = await axios.get(`${this.apiUrl}/countries`);\n      // Type assertion for correct response type\n      return response.data.countries || [];\n    } catch (error) {\n      console.error('Error fetching countries:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Calculate trust score based on domain\r\n   */\n  calculateTrustScore(article) {\n    if (!article.domain) return 0.5;\n    return TRUSTED_DOMAINS[article.domain] || TRUSTED_DOMAINS[`www.${article.domain}`] || 0.5;\n  }\n}\nexport const newsService = new NewsService();\n\n// Update these functions to improve category filtering and sort by date\n\nexport const fetchNewsFeed = async (categories, limit) => {\n  // First, set up the API request parameters\n  const params = {};\n\n  // Only add category parameter if categories array is non-empty\n  if (categories && categories.length > 0) {\n    params.category = categories.join(',');\n  }\n\n  // Request more articles than needed for better sorting/filtering\n  params.limit = limit ? limit * 2 : 50;\n\n  // Always sort by published date to get newest content\n  params.sort_by = 'published_date';\n  params.sort_order = 'desc';\n  console.log('Fetching news with params:', params);\n\n  // Fetch articles from API\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // Define priority categories in exact order\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n\n    // Sort articles by our priority scheme\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\n\n    // Limit to requested count after sorting\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Log first few articles to verify order\n    console.log('Articles returned after prioritization:');\n    limitedArticles.slice(0, 5).forEach((article, i) => {\n      console.log(`  ${i + 1}. [${article.category || 'uncategorized'}]: ${article.title}`);\n    });\n\n    // Return a modified response with our prioritized articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n// Add the prioritization function to the newsService file\nfunction sortArticlesByPriority(articles, priorityCategories) {\n  // Create a copy of the articles array\n  const sortedArticles = [...articles];\n\n  // Define a function to get priority score (lower is higher priority)\n  const getPriorityScore = article => {\n    const category = article.category || '';\n\n    // 1. Exact match with priority categories (in strict order)\n    for (let i = 0; i < priorityCategories.length; i++) {\n      if (category === priorityCategories[i]) {\n        return i; // Return the exact index position (0, 1, 2, etc.)\n      }\n    }\n\n    // 2. Partial match with priority categories\n    for (let i = 0; i < priorityCategories.length; i++) {\n      if (category.includes(priorityCategories[i])) {\n        return i + 20; // Still keep order but with lower priority than exact matches\n      }\n    }\n\n    // 3. Check for health-related keywords in title/description\n    const title = article.title || '';\n    const description = article.description || '';\n    const content = title + ' ' + description;\n    const contentLower = content.toLowerCase();\n    const healthKeywords = ['health', 'medical', 'medicine', 'doctor', 'patient', 'hospital', 'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet', 'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine', 'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'];\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\n      return 100; // All health-related content after categorized content\n    }\n\n    // 4. Tech content goes last\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', 'ai', 'artificial intelligence', 'computer'];\n    if (techKeywords.some(keyword => category.toLowerCase().includes(keyword) || contentLower.includes(keyword))) {\n      return 1000; // Tech content at the bottom\n    }\n\n    // 5. Everything else\n    return 500; // Other content in the middle\n  };\n\n  // Sort articles by priority score\n  sortedArticles.sort((a, b) => {\n    const priorityA = getPriorityScore(a);\n    const priorityB = getPriorityScore(b);\n\n    // First sort by priority category\n    if (priorityA !== priorityB) {\n      return priorityA - priorityB;\n    }\n\n    // If same priority category, sort by date (newest first)\n    const dateA = a.publishedDate || a.published_date;\n    const dateB = b.publishedDate || b.published_date;\n    if (dateA && dateB) {\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\n    }\n    return 0;\n  });\n  return sortedArticles;\n}","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","API_BASE_URL","process","env","REACT_APP_API_URL","NewsService","constructor","apiUrl","getArticles","params","queryParams","limit","country","feed_priority","flat","page","per_page","console","log","response","get","apiResponse","data","articles","length","map","article","adaptArticleForClient","error","success","count","pagination","total_items","total_pages","current_page","has_next_page","has_prev_page","filters_applied","category","feed_id","Error","message","url","link","summary","description","publishedDate","published_date","thumbnailUrl","thumbnail","imageUrl","image_url","hasMedia","has_image","hasAuthor","has_author","readingTime","reading_time","wordCount","word_count","getCategories","categories","getCountries","countries","calculateTrustScore","domain","newsService","fetchNewsFeed","join","sort_by","sort_order","priorityCategories","sortedArticles","sortArticlesByPriority","limitedArticles","slice","forEach","i","title","getPriorityScore","includes","content","contentLower","toLowerCase","healthKeywords","some","keyword","techKeywords","sort","a","b","priorityA","priorityB","dateA","dateB","Date","getTime"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport interface NewsArticle {\r\n  // API response standard fields\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  author: string;\r\n  published_date: string;\r\n  thumbnail: string;\r\n  image_url: string;\r\n  has_image: boolean;\r\n  has_author: boolean;\r\n  category: string;\r\n  source: string;\r\n  feed_id: number;\r\n  feed_priority: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  content_quality: string;\r\n  completeness: string;\r\n  domain: string;\r\n  extracted_at: string;\r\n  \r\n  // Client-side compatibility fields\r\n  url?: string;\r\n  summary?: string;\r\n  publishedDate?: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;        // Added to match client usage\r\n  tags?: string[];\r\n  relevanceScore?: number;\r\n  hasMedia?: boolean;\r\n  hasAuthor?: boolean;\r\n  readingTime?: number;     // Added to match client usage\r\n  wordCount?: number;       // Added to match client usage\r\n  mediaType?: string;       // Added to match client usage\r\n  contentLength?: number;   // Added to match client usage\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  pagination: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: false;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n  };\r\n  error?: string; // Added to handle errors from the API\r\n  message?: string; // For backward compatibility\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;\r\n  country?: string;\r\n  category?: string;\r\n  exclude_category?: string; // Add this field to exclude certain categories\r\n  feed_id?: number;\r\n  feed_priority?: string;\r\n  flat?: boolean;\r\n  page?: number;\r\n  per_page?: number;\r\n  timestamp?: number; // Added to support refreshNewsFeed\r\n  query?: string;     // Added to support searchNewsArticles\r\n  sort_by?: string; // Add sorting parameter\r\n  sort_order?: 'asc' | 'desc'; // Add sort direction\r\n}\r\n\r\nclass NewsService {\r\n  // Update the apiUrl to use the correct base URL\r\n  private apiUrl = `${API_BASE_URL}/api/news`;\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Set defaults\r\n      const queryParams: NewsQueryParams = {\r\n        limit: 500,\r\n        country: 'US',\r\n        feed_priority: '1-10',\r\n        flat: true,\r\n        page: 1,\r\n        per_page: 12,\r\n        ...params // Override with any provided params\r\n      };\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      const response = await axios.get(`${this.apiUrl}/articles`, { params: queryParams });\r\n      \r\n      // Process the response to add compatibility fields\r\n      const apiResponse = response.data as NewsFeedResponse;\r\n      \r\n      // Map API articles to client format\r\n      if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n        apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n      }\r\n      \r\n      return apiResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 12,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Add compatibility fields\r\n      url: article.link || article.url,\r\n      summary: article.description || article.summary,\r\n      publishedDate: article.published_date || article.publishedDate,\r\n      thumbnailUrl: article.thumbnail || article.thumbnailUrl,\r\n      imageUrl: article.image_url || article.imageUrl,\r\n      hasMedia: article.has_image || article.hasMedia,\r\n      hasAuthor: article.has_author || article.hasAuthor,\r\n      readingTime: article.reading_time || article.readingTime,\r\n      wordCount: article.word_count || article.wordCount\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      const response = await axios.get(`${this.apiUrl}/categories`);\r\n      // Type assertion for correct response type\r\n      return (response.data as any).categories || [];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      const response = await axios.get(`${this.apiUrl}/countries`);\r\n      // Type assertion for correct response type\r\n      return (response.data as any).countries || [];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    if (!article.domain) return 0.5;\r\n    \r\n    return TRUSTED_DOMAINS[article.domain] || \r\n           TRUSTED_DOMAINS[`www.${article.domain}`] || \r\n           0.5;\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  // First, set up the API request parameters\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Request more articles than needed for better sorting/filtering\r\n  params.limit = limit ? limit * 2 : 50;\r\n  \r\n  // Always sort by published date to get newest content\r\n  params.sort_by = 'published_date';\r\n  params.sort_order = 'desc';\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  \r\n  // Fetch articles from API\r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Define priority categories in exact order\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles by our priority scheme\r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Log first few articles to verify order\r\n    console.log('Articles returned after prioritization:');\r\n    limitedArticles.slice(0, 5).forEach((article, i) => {\r\n      console.log(`  ${i+1}. [${article.category || 'uncategorized'}]: ${article.title}`);\r\n    });\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add the prioritization function to the newsService file\r\nfunction sortArticlesByPriority(articles: NewsArticle[], priorityCategories: string[]): NewsArticle[] {\r\n  // Create a copy of the articles array\r\n  const sortedArticles = [...articles];\r\n  \r\n  // Define a function to get priority score (lower is higher priority)\r\n  const getPriorityScore = (article: NewsArticle): number => {\r\n    const category = article.category || '';\r\n    \r\n    // 1. Exact match with priority categories (in strict order)\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category === priorityCategories[i]) {\r\n        return i; // Return the exact index position (0, 1, 2, etc.)\r\n      }\r\n    }\r\n    \r\n    // 2. Partial match with priority categories\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category.includes(priorityCategories[i])) {\r\n        return i + 20; // Still keep order but with lower priority than exact matches\r\n      }\r\n    }\r\n    \r\n    // 3. Check for health-related keywords in title/description\r\n    const title = article.title || '';\r\n    const description = article.description || '';\r\n    const content = title + ' ' + description;\r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const healthKeywords = [\r\n      'health', 'medical', 'medicine', 'doctor', 'patient', 'hospital',\r\n      'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet',\r\n      'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine',\r\n      'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'\r\n    ];\r\n    \r\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\r\n      return 100; // All health-related content after categorized content\r\n    }\r\n    \r\n    // 4. Tech content goes last\r\n    const techKeywords = ['tech', 'technology', 'computing', 'software', \r\n                         'hardware', 'ai', 'artificial intelligence', 'computer'];\r\n    if (techKeywords.some(keyword => \r\n      (category.toLowerCase().includes(keyword) || \r\n       contentLower.includes(keyword))\r\n    )) {\r\n      return 1000; // Tech content at the bottom\r\n    }\r\n    \r\n    // 5. Everything else\r\n    return 500; // Other content in the middle\r\n  };\r\n  \r\n  // Sort articles by priority score\r\n  sortedArticles.sort((a, b) => {\r\n    const priorityA = getPriorityScore(a);\r\n    const priorityB = getPriorityScore(b);\r\n    \r\n    // First sort by priority category\r\n    if (priorityA !== priorityB) {\r\n      return priorityA - priorityB;\r\n    }\r\n    \r\n    // If same priority category, sort by date (newest first)\r\n    const dateA = a.publishedDate || a.published_date;\r\n    const dateB = b.publishedDate || b.published_date;\r\n    \r\n    if (dateA && dateB) {\r\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n  \r\n  return sortedArticles;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}