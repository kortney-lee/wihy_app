{"ast":null,"code":"// src/services/visionAnalysisService.ts\n\n// WIHY Scanner API Configuration\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\nclass VisionAnalysisService {\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\n  async analyzeImage(imageFile) {\n    try {\n      console.log('🔍 Starting WIHY image analysis...');\n\n      // Get basic image information\n      const imageInfo = this.getImageInfo(imageFile);\n      console.log('Image info:', imageInfo);\n\n      // Use WIHY Scanner API for comprehensive food analysis\n      let wihyResult = null;\n      try {\n        console.log('Analyzing with WIHY Scanner API...');\n        wihyResult = await this.analyzeWithWihyAPI(imageFile);\n        console.log('WIHY Scanner analysis result:', wihyResult);\n      } catch (error) {\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n      if (wihyResult && wihyResult.success) {\n        return this.processWihyImageResponse(wihyResult, imageInfo);\n      } else {\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n    } catch (error) {\n      console.error('Vision analysis error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Analysis failed'\n      };\n    }\n  }\n\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\n  async analyzeWithWihyAPI(imageFile) {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('context', 'food_analysis');\n    const response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`WIHY API Error: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\n  processWihyImageResponse(wihyResult, imageInfo) {\n    var _nova_chart_reference, _wihy_analysis$family;\n    const {\n      success,\n      overall_assessment,\n      google_vision_analysis,\n      detected_foods,\n      nova_chart_reference,\n      wihy_recommendations,\n      wihy_analysis\n    } = wihyResult;\n    const healthScore = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.health_score) || 0;\n    const novaGroup = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.nova_group) || 4;\n    const verdict = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.verdict) || 'Analysis completed';\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference = nova_chart_reference.client_guidance) === null || _nova_chart_reference === void 0 ? void 0 : _nova_chart_reference.color_coding) || 'red';\n\n    // Extract detected foods\n    const foodItems = (detected_foods === null || detected_foods === void 0 ? void 0 : detected_foods.map(food => food.name || food)) || [];\n\n    // Extract recommendations and warnings\n    const recommendations = wihy_recommendations || [];\n    const warnings = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [];\n\n    // Determine if healthy based on NOVA group and health score\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family = wihy_analysis.family_safety) === null || _wihy_analysis$family === void 0 ? void 0 : _wihy_analysis$family.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: verdict,\n        foodItems: foodItems,\n        brands: [],\n        // Could extract from vision analysis\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\n        barcodes: [],\n        qrCodes: [],\n        text: (google_vision_analysis === null || google_vision_analysis === void 0 ? void 0 : google_vision_analysis.detected_text) || '',\n        imageInfo,\n        // WIHY Scanner specific data\n        healthScore,\n        novaGroup,\n        novaDescription: this.getNovaDescription(novaGroup),\n        isHealthy,\n        recommendations,\n        warnings,\n        familySafe,\n        colorCode,\n        verdict,\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\n      }\n    };\n  }\n\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\n  async fallbackAnalysis(imageFile, imageInfo) {\n    console.log('Using fallback analysis...');\n\n    // Try legacy WiHy API as fallback\n    let wihyAnalysis = '';\n    try {\n      var _wihyResult$data, _wihyResult$data$ai_r;\n      const {\n        wihyAPI\n      } = await import('./wihyAPI');\n      const wihyResult = await wihyAPI.scanFood(imageFile);\n      if (wihyResult.success && 'data' in wihyResult && (_wihyResult$data = wihyResult.data) !== null && _wihyResult$data !== void 0 && (_wihyResult$data$ai_r = _wihyResult$data.ai_response) !== null && _wihyResult$data$ai_r !== void 0 && _wihyResult$data$ai_r.response) {\n        wihyAnalysis = wihyResult.data.ai_response.response;\n      }\n    } catch (error) {\n      console.log('Legacy WiHy API also unavailable');\n    }\n\n    // Extract potential nutrition and food information\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\n    return {\n      success: true,\n      data: {\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\n        foodItems: foodAnalysis.foodItems,\n        brands: foodAnalysis.brands,\n        nutritionText: foodAnalysis.nutritionText,\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo,\n        // Default WIHY values for fallback\n        healthScore: 50,\n        novaGroup: 4,\n        novaDescription: 'Unknown processing level',\n        isHealthy: false,\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\n        warnings: ['Could not analyze product completely'],\n        familySafe: false,\n        colorCode: 'orange',\n        verdict: 'Analysis limited - choose natural foods',\n        dataSources: ['Local Analysis']\n      }\n    };\n  }\n\n  /**\r\n   * Get basic image file information\r\n   */\n  getImageInfo(file) {\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\n    return {\n      name: file.name,\n      size: `${sizeInMB} MB`,\n      type: file.type,\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\n    };\n  }\n\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\n  analyzeFoodContent(analysisText, imageInfo) {\n    const text = analysisText.toLowerCase();\n\n    // Common food keywords\n    const foodKeywords = ['apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef', 'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable', 'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'];\n\n    // Common brand keywords\n    const brandKeywords = ['coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills', 'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'];\n\n    // Nutrition-related keywords\n    const nutritionKeywords = ['calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber', 'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'];\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\n    return {\n      foodItems: detectedFood,\n      brands: detectedBrands,\n      nutritionText: nutritionMentions.length > 0 ? `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : ''\n    };\n  }\n\n  /**\r\n   * Format analysis results for display\r\n   */\n  formatForDisplay(result) {\n    if (!result.success || !result.data) {\n      return result.error || 'Image analysis failed';\n    }\n    const {\n      data\n    } = result;\n    const parts = [];\n\n    // Primary description from AI analysis\n    if (data.description) {\n      parts.push(data.description);\n    }\n\n    // Add detected food items\n    if (data.foodItems && data.foodItems.length > 0) {\n      parts.push(`Detected foods: ${data.foodItems.join(', ')}`);\n    }\n\n    // Add brands if detected\n    if (data.brands && data.brands.length > 0) {\n      parts.push(`Brands: ${data.brands.join(', ')}`);\n    }\n\n    // Add nutrition info\n    if (data.nutritionText) {\n      parts.push(data.nutritionText);\n    }\n\n    // Add basic image info\n    if (data.imageInfo) {\n      parts.push(`Image: ${data.imageInfo.name} (${data.imageInfo.size})`);\n    }\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - ready for health insights';\n  }\n}\nexport const visionAnalysisService = new VisionAnalysisService();","map":{"version":3,"names":["WIHY_API_BASE","VisionAnalysisService","analyzeImage","imageFile","console","log","imageInfo","getImageInfo","wihyResult","analyzeWithWihyAPI","error","fallbackAnalysis","success","processWihyImageResponse","Error","message","formData","FormData","append","response","fetch","method","body","ok","status","json","_nova_chart_reference","_wihy_analysis$family","overall_assessment","google_vision_analysis","detected_foods","nova_chart_reference","wihy_recommendations","wihy_analysis","healthScore","health_score","novaGroup","nova_group","verdict","colorCode","client_guidance","color_coding","foodItems","map","food","name","recommendations","warnings","carcinogen_warnings","isHealthy","familySafe","family_safety","safety_score","data","description","brands","nutritionText","barcodes","qrCodes","text","detected_text","novaDescription","getNovaDescription","dataSources","data_sources","wihyAnalysis","_wihyResult$data","_wihyResult$data$ai_r","wihyAPI","scanFood","ai_response","foodAnalysis","analyzeFoodContent","file","sizeInMB","size","toFixed","type","dimensions","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","length","join","formatForDisplay","result","parts","push","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n    // WIHY Scanner API fields\r\n    healthScore?: number;\r\n    novaGroup?: number;\r\n    novaDescription?: string;\r\n    isHealthy?: boolean;\r\n    recommendations?: string[];\r\n    warnings?: string[];\r\n    familySafe?: boolean;\r\n    colorCode?: string;\r\n    verdict?: string;\r\n    dataSources?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\n// WIHY Scanner API Configuration\r\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\r\n\r\nclass VisionAnalysisService {\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Starting WIHY image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // Use WIHY Scanner API for comprehensive food analysis\r\n      let wihyResult: any = null;\r\n      \r\n      try {\r\n        console.log('Analyzing with WIHY Scanner API...');\r\n        wihyResult = await this.analyzeWithWihyAPI(imageFile);\r\n        console.log('WIHY Scanner analysis result:', wihyResult);\r\n      } catch (error) {\r\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, imageInfo);\r\n      } else {\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  private async analyzeWithWihyAPI(imageFile: File): Promise<any> {\r\n    const formData = new FormData();\r\n    formData.append('image', imageFile);\r\n    formData.append('context', 'food_analysis');\r\n    \r\n    const response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n      method: 'POST',\r\n      body: formData\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`WIHY API Error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\r\n  private processWihyImageResponse(wihyResult: any, imageInfo: any): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      overall_assessment,\r\n      google_vision_analysis,\r\n      detected_foods,\r\n      nova_chart_reference,\r\n      wihy_recommendations,\r\n      wihy_analysis\r\n    } = wihyResult;\r\n\r\n    const healthScore = overall_assessment?.health_score || 0;\r\n    const novaGroup = overall_assessment?.nova_group || 4;\r\n    const verdict = overall_assessment?.verdict || 'Analysis completed';\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    \r\n    // Extract detected foods\r\n    const foodItems = detected_foods?.map((food: any) => food.name || food) || [];\r\n    \r\n    // Extract recommendations and warnings\r\n    const recommendations = wihy_recommendations || [];\r\n    const warnings = wihy_analysis?.carcinogen_warnings || [];\r\n    \r\n    // Determine if healthy based on NOVA group and health score\r\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: verdict,\r\n        foodItems: foodItems,\r\n        brands: [], // Could extract from vision analysis\r\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: google_vision_analysis?.detected_text || '',\r\n        imageInfo,\r\n        // WIHY Scanner specific data\r\n        healthScore,\r\n        novaGroup,\r\n        novaDescription: this.getNovaDescription(novaGroup),\r\n        isHealthy,\r\n        recommendations,\r\n        warnings,\r\n        familySafe,\r\n        colorCode,\r\n        verdict,\r\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\r\n  private async fallbackAnalysis(imageFile: File, imageInfo: any): Promise<VisionAnalysisResult> {\r\n    console.log('Using fallback analysis...');\r\n    \r\n    // Try legacy WiHy API as fallback\r\n    let wihyAnalysis = '';\r\n    \r\n    try {\r\n      const { wihyAPI } = await import('./wihyAPI');\r\n      const wihyResult = await wihyAPI.scanFood(imageFile);\r\n      \r\n      if (wihyResult.success && 'data' in wihyResult && wihyResult.data?.ai_response?.response) {\r\n        wihyAnalysis = wihyResult.data.ai_response.response;\r\n      }\r\n    } catch (error) {\r\n      console.log('Legacy WiHy API also unavailable');\r\n    }\r\n\r\n    // Extract potential nutrition and food information\r\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\r\n        foodItems: foodAnalysis.foodItems,\r\n        brands: foodAnalysis.brands,\r\n        nutritionText: foodAnalysis.nutritionText,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo,\r\n        // Default WIHY values for fallback\r\n        healthScore: 50,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown processing level',\r\n        isHealthy: false,\r\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\r\n        warnings: ['Could not analyze product completely'],\r\n        familySafe: false,\r\n        colorCode: 'orange',\r\n        verdict: 'Analysis limited - choose natural foods',\r\n        dataSources: ['Local Analysis']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Image analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // Primary description from AI analysis\r\n    if (data.description) {\r\n      parts.push(data.description);\r\n    }\r\n\r\n    // Add detected food items\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`Detected foods: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Add brands if detected\r\n    if (data.brands && data.brands.length > 0) {\r\n      parts.push(`Brands: ${data.brands.join(', ')}`);\r\n    }\r\n\r\n    // Add nutrition info\r\n    if (data.nutritionText) {\r\n      parts.push(data.nutritionText);\r\n    }\r\n\r\n    // Add basic image info\r\n    if (data.imageInfo) {\r\n      parts.push(`Image: ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - ready for health insights';\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}