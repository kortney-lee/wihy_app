{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  // Added Cochrane Library\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  // Alternative PubMed URL\n  'medlineplus.gov': 1 // MedlinePlus\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'Nutrition & Diet',\n  MEDICAL: 'Medical Research',\n  PUBLIC_HEALTH: 'Public Health',\n  CLINICAL: 'Clinical Studies',\n  PREVENTION: 'Disease Prevention',\n  MENTAL_HEALTH: 'Mental Health',\n  GENERAL: 'General Health'\n};\n\n// Helper function to validate if a domain is trusted\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\n\n// Fetch categorized news feed\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    console.log('🔍 Fetching news feed...', {\n      categories,\n      limit\n    });\n    const params = new URLSearchParams();\n    if (categories && categories.length > 0) {\n      params.append('categories', categories.join(','));\n    }\n    if (limit) {\n      params.append('limit', limit.toString());\n    }\n    const response = await axios.get(`${API_URL}/news/feed?${params.toString()}`);\n    console.log('✅ News feed response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error fetching news feed:', error);\n\n    // Check if it's a network error or server error\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response2$data;\n      const status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message;\n      return {\n        success: false,\n        message: `Network error (${status}): ${message}`\n      };\n    }\n    return {\n      success: false,\n      message: 'Error fetching news feed'\n    };\n  }\n};\n\n// Refresh news feed (triggers backend to fetch latest articles)\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing news feed...');\n    const response = await axios.post(`${API_URL}/news/refresh`);\n    console.log('✅ News feed refreshed:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error refreshing news feed:', error);\n    if (axios.isAxiosError(error)) {\n      var _error$response3, _error$response4, _error$response4$data;\n      const status = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message;\n      return {\n        success: false,\n        message: `Refresh failed (${status}): ${message}`\n      };\n    }\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\n\n// Get articles by specific category\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching articles for category:', category);\n    const params = new URLSearchParams();\n    if (limit) {\n      params.append('limit', limit.toString());\n    }\n    const url = `${API_URL}/news/category/${encodeURIComponent(category)}${params.toString() ? '?' + params.toString() : ''}`;\n    const response = await axios.get(url);\n    console.log('✅ Category articles response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    if (axios.isAxiosError(error)) {\n      var _error$response5, _error$response6, _error$response6$data;\n      const status = (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message;\n      return {\n        success: false,\n        message: `Category fetch failed (${status}): ${message}`\n      };\n    }\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\n\n// Search articles\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n    const params = new URLSearchParams({\n      q: query.trim()\n    });\n    if (category && category !== 'all') {\n      params.append('category', category);\n    }\n    if (limit) {\n      params.append('limit', limit.toString());\n    }\n    const response = await axios.get(`${API_URL}/news/search?${params.toString()}`);\n    console.log('✅ Search results:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error searching news articles:', error);\n    if (axios.isAxiosError(error)) {\n      var _error$response7, _error$response8, _error$response8$data;\n      const status = (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status;\n      const message = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message;\n      return {\n        success: false,\n        message: `Search failed (${status}): ${message}`\n      };\n    }\n    return {\n      success: false,\n      message: 'Error searching news articles'\n    };\n  }\n};\n\n// Get news feed stats\nexport const getNewsFeedStats = async () => {\n  try {\n    console.log('📊 Fetching news feed stats...');\n    const response = await axios.get(`${API_URL}/news/stats`);\n    console.log('✅ Stats response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error fetching stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility function to format articles for display\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary\n  };\n};\n\n// Helper function to format time ago\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\n\n// Get available categories\nexport const getAvailableCategories = () => {\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: NEWS_CATEGORIES.NUTRITION,\n    label: 'Nutrition & Diet'\n  }, {\n    id: NEWS_CATEGORIES.MEDICAL,\n    label: 'Medical Research'\n  }, {\n    id: NEWS_CATEGORIES.PUBLIC_HEALTH,\n    label: 'Public Health'\n  }, {\n    id: NEWS_CATEGORIES.CLINICAL,\n    label: 'Clinical Studies'\n  }, {\n    id: NEWS_CATEGORIES.PREVENTION,\n    label: 'Disease Prevention'\n  }, {\n    id: NEWS_CATEGORIES.MENTAL_HEALTH,\n    label: 'Mental Health'\n  }, {\n    id: NEWS_CATEGORIES.GENERAL,\n    label: 'General Health'\n  }];\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","isTrustedDomain","url","domain","URL","hostname","toLowerCase","Object","keys","some","trustedDomain","includes","fetchNewsFeed","categories","limit","console","log","params","URLSearchParams","length","append","join","toString","response","get","data","error","isAxiosError","_error$response","_error$response2","_error$response2$data","status","message","success","refreshNewsFeed","post","_error$response3","_error$response4","_error$response4$data","getArticlesByCategory","category","encodeURIComponent","_error$response5","_error$response6","_error$response6$data","searchNewsArticles","query","trim","q","_error$response7","_error$response8","_error$response8$data","getNewsFeedStats","formatArticleForDisplay","article","formattedDate","formatTimeAgo","publishedDate","isTrusted","relevancePercentage","Math","round","relevanceScore","shortSummary","summary","substring","dateString","now","Date","diffInHours","floor","getTime","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","id","label"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number; // Total number of articles\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1, // Added Cochrane Library\r\n  'pubmed.ncbi.nlm.nih.gov': 1, // Alternative PubMed URL\r\n  'medlineplus.gov': 1, // MedlinePlus\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'Nutrition & Diet',\r\n  MEDICAL: 'Medical Research',\r\n  PUBLIC_HEALTH: 'Public Health',\r\n  CLINICAL: 'Clinical Studies',\r\n  PREVENTION: 'Disease Prevention',\r\n  MENTAL_HEALTH: 'Mental Health',\r\n  GENERAL: 'General Health'\r\n};\r\n\r\n// Helper function to validate if a domain is trusted\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Fetch categorized news feed\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching news feed...', { categories, limit });\r\n    \r\n    const params = new URLSearchParams();\r\n    if (categories && categories.length > 0) {\r\n      params.append('categories', categories.join(','));\r\n    }\r\n    if (limit) {\r\n      params.append('limit', limit.toString());\r\n    }\r\n    \r\n    const response = await axios.get(`${API_URL}/news/feed?${params.toString()}`);\r\n    console.log('✅ News feed response:', response.data);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Error fetching news feed:', error);\r\n    \r\n    // Check if it's a network error or server error\r\n    if (axios.isAxiosError(error)) {\r\n      const status = error.response?.status;\r\n      const message = error.response?.data?.message || error.message;\r\n      \r\n      return {\r\n        success: false,\r\n        message: `Network error (${status}): ${message}`\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Refresh news feed (triggers backend to fetch latest articles)\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing news feed...');\r\n    \r\n    const response = await axios.post(`${API_URL}/news/refresh`);\r\n    console.log('✅ News feed refreshed:', response.data);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Error refreshing news feed:', error);\r\n    \r\n    if (axios.isAxiosError(error)) {\r\n      const status = error.response?.status;\r\n      const message = error.response?.data?.message || error.message;\r\n      \r\n      return {\r\n        success: false,\r\n        message: `Refresh failed (${status}): ${message}`\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\n// Get articles by specific category\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching articles for category:', category);\r\n    \r\n    const params = new URLSearchParams();\r\n    if (limit) {\r\n      params.append('limit', limit.toString());\r\n    }\r\n    \r\n    const url = `${API_URL}/news/category/${encodeURIComponent(category)}${params.toString() ? '?' + params.toString() : ''}`;\r\n    const response = await axios.get(url);\r\n    \r\n    console.log('✅ Category articles response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    \r\n    if (axios.isAxiosError(error)) {\r\n      const status = error.response?.status;\r\n      const message = error.response?.data?.message || error.message;\r\n      \r\n      return {\r\n        success: false,\r\n        message: `Category fetch failed (${status}): ${message}`\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\n// Search articles\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    const params = new URLSearchParams({ q: query.trim() });\r\n    if (category && category !== 'all') {\r\n      params.append('category', category);\r\n    }\r\n    if (limit) {\r\n      params.append('limit', limit.toString());\r\n    }\r\n    \r\n    const response = await axios.get(`${API_URL}/news/search?${params.toString()}`);\r\n    console.log('✅ Search results:', response.data);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Error searching news articles:', error);\r\n    \r\n    if (axios.isAxiosError(error)) {\r\n      const status = error.response?.status;\r\n      const message = error.response?.data?.message || error.message;\r\n      \r\n      return {\r\n        success: false,\r\n        message: `Search failed (${status}): ${message}`\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Error searching news articles'\r\n    };\r\n  }\r\n};\r\n\r\n// Get news feed stats\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n  };\r\n}> => {\r\n  try {\r\n    console.log('📊 Fetching news feed stats...');\r\n    \r\n    const response = await axios.get(`${API_URL}/news/stats`);\r\n    console.log('✅ Stats response:', response.data);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Error fetching stats:', error);\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility function to format articles for display\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary\r\n  };\r\n};\r\n\r\n// Helper function to format time ago\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\n// Get available categories\r\nexport const getAvailableCategories = (): Array<{id: string, label: string}> => {\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: NEWS_CATEGORIES.NUTRITION, label: 'Nutrition & Diet' },\r\n    { id: NEWS_CATEGORIES.MEDICAL, label: 'Medical Research' },\r\n    { id: NEWS_CATEGORIES.PUBLIC_HEALTH, label: 'Public Health' },\r\n    { id: NEWS_CATEGORIES.CLINICAL, label: 'Clinical Studies' },\r\n    { id: NEWS_CATEGORIES.PREVENTION, label: 'Disease Prevention' },\r\n    { id: NEWS_CATEGORIES.MENTAL_HEALTH, label: 'Mental Health' },\r\n    { id: NEWS_CATEGORIES.GENERAL, label: 'General Health' }\r\n  ];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}