{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/services/visionAnalysisService.ts\n// WIHY Scanner API Configuration\nconst WIHY_API_BASE='https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';class VisionAnalysisService{/**\r\n   * Analyze image using WIHY Scanner API\r\n   */async analyzeImage(imageFile){try{console.log('üîç Starting WIHY image analysis...');// Get basic image information\nconst imageInfo=this.getImageInfo(imageFile);console.log('Image info:',imageInfo);// Use WIHY Scanner API for comprehensive food analysis\nlet wihyResult=null;try{console.log('Analyzing with WIHY Scanner API...');wihyResult=await this.analyzeWithWihyAPI(imageFile,{user_context:'web_upload',image_name:imageFile.name});console.log('WIHY Scanner analysis result:',wihyResult);}catch(error){console.log('WIHY Scanner API not available, falling back to legacy analysis');return this.fallbackAnalysis(imageFile,imageInfo);}if(wihyResult&&wihyResult.success){return this.processWihyImageResponse(wihyResult,imageInfo);}else{return this.fallbackAnalysis(imageFile,imageInfo);}}catch(error){console.error('Vision analysis error:',error);return{success:false,error:error instanceof Error?error.message:'Analysis failed'};}}/**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */async analyzeWithWihyAPI(input){let userContext=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let response;if(typeof input==='string'){// URL analysis\nconsole.log('üåê Analyzing image from URL:',input);response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-image\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({image_url:input,context:JSON.stringify(_objectSpread({analysis_type:'food_health',user_location:'web_app',input_type:'url'},userContext))})});}else{// File upload analysis\nconsole.log('üìÅ Analyzing uploaded file:',input.name);const formData=new FormData();formData.append('image',input);formData.append('context',JSON.stringify(_objectSpread({analysis_type:'food_health',user_location:'web_app',input_type:'file_upload',file_name:input.name,file_size:input.size},userContext)));response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-image\"),{method:'POST',body:formData});}if(!response.ok){throw new Error(\"WIHY API Error: \".concat(response.status));}return await response.json();}/**\r\n   * Analyze image from URL\r\n   */async analyzeImageUrl(imageUrl){let userContext=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{console.log('üîç Analyzing image from URL with WIHY Scanner API');const wihyResult=await this.analyzeWithWihyAPI(imageUrl,_objectSpread(_objectSpread({},userContext),{},{source:'url_input'}));if(wihyResult&&wihyResult.success){return this.processWihyImageResponse(wihyResult,{name:'Image from URL',size:'Unknown',type:'url',dimensions:'Unknown'});}else{return this.handleUrlAnalysisError(imageUrl);}}catch(error){console.error('URL image analysis failed:',error);return this.handleUrlAnalysisError(imageUrl,error);}}/**\r\n   * Handle URL analysis errors\r\n   */handleUrlAnalysisError(imageUrl,error){return{success:false,error:(error===null||error===void 0?void 0:error.message)||'URL analysis failed',data:{description:'Could not analyze image from URL',foodItems:[],brands:[],nutritionText:'Analysis failed',barcodes:[],qrCodes:[],text:'',imageInfo:{name:'Image from URL',size:'Unknown',type:'url',dimensions:'Unknown'},healthScore:0,novaGroup:4,novaDescription:'Unknown - Analysis failed',isHealthy:false,recommendations:['URL Error - When in doubt, choose whole foods','Real food doesn\\'t need complex analysis'],warnings:['Could not analyze image from URL'],familySafe:false,colorCode:'red',verdict:'Choose whole foods when uncertain',dataSources:['Error - No data available']}};}/**\r\n   * Process WIHY Scanner API response\r\n   */processWihyImageResponse(wihyResult,imageInfo){var _nova_chart_reference,_wihy_analysis$family;const{success,overall_assessment,google_vision_analysis,detected_foods,nova_chart_reference,wihy_recommendations,wihy_analysis}=wihyResult;const healthScore=(overall_assessment===null||overall_assessment===void 0?void 0:overall_assessment.health_score)||0;const novaGroup=(overall_assessment===null||overall_assessment===void 0?void 0:overall_assessment.nova_group)||4;const verdict=(overall_assessment===null||overall_assessment===void 0?void 0:overall_assessment.verdict)||'Analysis completed';const colorCode=(nova_chart_reference===null||nova_chart_reference===void 0?void 0:(_nova_chart_reference=nova_chart_reference.client_guidance)===null||_nova_chart_reference===void 0?void 0:_nova_chart_reference.color_coding)||'red';// Extract detected foods\nconst foodItems=(detected_foods===null||detected_foods===void 0?void 0:detected_foods.map(food=>food.name||food))||[];// Extract recommendations and warnings\nconst recommendations=wihy_recommendations||[];const warnings=(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.carcinogen_warnings)||[];// Determine if healthy based on NOVA group and health score\nconst isHealthy=novaGroup<=2&&healthScore>=60;const familySafe=(wihy_analysis===null||wihy_analysis===void 0?void 0:(_wihy_analysis$family=wihy_analysis.family_safety)===null||_wihy_analysis$family===void 0?void 0:_wihy_analysis$family.safety_score)>=60;return{success:true,data:{description:verdict,foodItems:foodItems,brands:[],// Could extract from vision analysis\nnutritionText:\"Health Score: \".concat(healthScore,\"/100 | NOVA Group: \").concat(novaGroup),barcodes:[],qrCodes:[],text:(google_vision_analysis===null||google_vision_analysis===void 0?void 0:google_vision_analysis.detected_text)||'',imageInfo,// WIHY Scanner specific data\nhealthScore,novaGroup,novaDescription:this.getNovaDescription(novaGroup),isHealthy,recommendations,warnings,familySafe,colorCode,verdict,dataSources:wihyResult.data_sources||['WIHY Scanner','Google Vision']}};}/**\r\n   * Fallback analysis when WIHY API is not available\r\n   */async fallbackAnalysis(imageFile,imageInfo){console.log('Using fallback analysis...');// Try legacy WiHy API as fallback\nlet wihyAnalysis='';try{const{wihyAPI}=await import('./wihyAPI');const wihyResult=await wihyAPI.scanFood(imageFile);if(wihyResult.success&&wihyResult.message){wihyAnalysis=wihyResult.message;}}catch(error){console.log('Legacy WiHy API also unavailable');}// Extract potential nutrition and food information\nconst foodAnalysis=this.analyzeFoodContent(wihyAnalysis,imageInfo);return{success:true,data:{description:wihyAnalysis||'Image analyzed - choose whole foods when in doubt',foodItems:foodAnalysis.foodItems,brands:foodAnalysis.brands,nutritionText:foodAnalysis.nutritionText,barcodes:[],qrCodes:[],text:'',imageInfo,// Default WIHY values for fallback\nhealthScore:50,novaGroup:4,novaDescription:'Unknown processing level',isHealthy:false,recommendations:['Choose whole foods when uncertain','Real food doesn\\'t need complicated analysis'],warnings:['Could not analyze product completely'],familySafe:false,colorCode:'orange',verdict:'Analysis limited - choose natural foods',dataSources:['Local Analysis']}};}/**\r\n   * Get NOVA group description\r\n   */getNovaDescription(novaGroup){const descriptions={1:'Natural - Real food as God intended',2:'Processed - Use sparingly',3:'Highly Processed - Find alternatives',4:'Ultra-Processed - Your family deserves better'};return descriptions[novaGroup]||descriptions[4];}/**\r\n   * Get basic image file information\r\n   */getImageInfo(file){const sizeInMB=(file.size/(1024*1024)).toFixed(2);return{name:file.name,size:\"\".concat(sizeInMB,\" MB\"),type:file.type,dimensions:'Analyzing...'// Could load image to get actual dimensions\n};}/**\r\n   * Analyze food-related content from text and AI response\r\n   */analyzeFoodContent(analysisText,imageInfo){const text=analysisText.toLowerCase();// Common food keywords\nconst foodKeywords=['apple','banana','orange','bread','milk','cheese','chicken','beef','rice','pasta','salad','sandwich','pizza','burger','fruit','vegetable','cereal','yogurt','soup','snack','cookie','chocolate','candy'];// Common brand keywords\nconst brandKeywords=['coca cola','pepsi','nestl√©','kraft','kellogs','general mills','unilever','procter','johnson','mars','ferrero','danone'];// Nutrition-related keywords\nconst nutritionKeywords=['calories','protein','carbs','fat','sugar','sodium','fiber','vitamin','mineral','organic','natural','healthy','nutrition'];const detectedFood=foodKeywords.filter(keyword=>text.includes(keyword));const detectedBrands=brandKeywords.filter(keyword=>text.includes(keyword));const nutritionMentions=nutritionKeywords.filter(keyword=>text.includes(keyword));return{foodItems:detectedFood,brands:detectedBrands,nutritionText:nutritionMentions.length>0?\"Nutrition-related content detected: \".concat(nutritionMentions.join(', ')):''};}/**\r\n   * Scan barcode using WIHY Scanner API\r\n   */async scanBarcode(barcode){let userContext=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{console.log('üîç Scanning barcode with WIHY Scanner API:',barcode);const response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-barcode\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:barcode,user_context:_objectSpread({scan_location:'web_app',device_type:'browser'},userContext)})});if(!response.ok){throw new Error(\"WIHY Barcode API Error: \".concat(response.status));}const result=await response.json();return this.processWihyBarcodeResponse(result,barcode);}catch(error){console.error('Barcode scan failed:',error);return this.handleBarcodeError(error,barcode);}}/**\r\n   * Process WIHY barcode scan response\r\n   */processWihyBarcodeResponse(result,barcode){var _nova_chart_reference2,_wihy_analysis$family2;const{success,nova_group,nova_description,nova_chart_reference,health_score,wihy_analysis,data_sources,product_name}=result;const isHealthy=nova_group<=2&&health_score>=60;const colorCode=(nova_chart_reference===null||nova_chart_reference===void 0?void 0:(_nova_chart_reference2=nova_chart_reference.client_guidance)===null||_nova_chart_reference2===void 0?void 0:_nova_chart_reference2.color_coding)||'red';const familySafe=(wihy_analysis===null||wihy_analysis===void 0?void 0:(_wihy_analysis$family2=wihy_analysis.family_safety)===null||_wihy_analysis$family2===void 0?void 0:_wihy_analysis$family2.safety_score)>=60;return{success:true,data:{description:product_name||\"Product \".concat(barcode),foodItems:product_name?[product_name]:[],brands:[],nutritionText:\"Health Score: \".concat(health_score,\"/100 | NOVA Group: \").concat(nova_group),barcodes:[barcode],qrCodes:[],text:'',imageInfo:{name:\"Barcode-\".concat(barcode),size:'N/A',type:'barcode',dimensions:'N/A'},// WIHY Scanner specific data\nhealthScore:health_score,novaGroup:nova_group,novaDescription:nova_description||this.getNovaDescription(nova_group),isHealthy,recommendations:(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.wihy_recommendations)||[],warnings:(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.carcinogen_warnings)||[],familySafe,colorCode,verdict:(wihy_analysis===null||wihy_analysis===void 0?void 0:wihy_analysis.verdict)||this.getHealthVerdict(health_score,nova_group),dataSources:data_sources||['WIHY Enhanced DB']}};}/**\r\n   * Handle barcode scan errors\r\n   */handleBarcodeError(error,barcode){return{success:false,error:error.message||'Barcode scan failed',data:{description:'Could not analyze product',foodItems:[],brands:[],nutritionText:'Analysis failed',barcodes:[barcode],qrCodes:[],text:'',imageInfo:{name:\"Barcode-\".concat(barcode),size:'N/A',type:'barcode',dimensions:'N/A'},healthScore:0,novaGroup:4,novaDescription:'Unknown - Analysis failed',isHealthy:false,recommendations:['API Error - When in doubt, choose whole foods','Real food doesn\\'t need barcodes'],warnings:['Could not analyze product'],familySafe:false,colorCode:'red',verdict:'Choose whole foods when uncertain',dataSources:['Error - No data available']}};}/**\r\n   * Get health verdict based on scores\r\n   */getHealthVerdict(healthScore,novaGroup){if(novaGroup===1&&healthScore>=80)return'Excellent choice - natural and healthy!';if(novaGroup<=2&&healthScore>=60)return'Good choice - moderately processed';if(novaGroup===3)return'Caution - highly processed food';if(novaGroup===4)return'Avoid - ultra-processed food';return'Choose whole foods for better health';}/**\r\n   * Format analysis results for display\r\n   */formatForDisplay(result){if(!result.success||!result.data){return result.error||'Analysis failed';}const{data}=result;const parts=[];// WIHY Scanner results\nif(data.verdict){parts.push(\"\\uD83C\\uDFAF \".concat(data.verdict));}// Health information\nif(data.healthScore!==undefined&&data.novaGroup!==undefined){parts.push(\"\\uD83D\\uDCCA Health Score: \".concat(data.healthScore,\"/100\"));parts.push(\"\\uD83C\\uDFF7\\uFE0F \".concat(data.novaDescription));}// Detected foods\nif(data.foodItems&&data.foodItems.length>0){parts.push(\"\\uD83C\\uDF4E Detected: \".concat(data.foodItems.join(', ')));}// Recommendations\nif(data.recommendations&&data.recommendations.length>0){parts.push(\"\\uD83D\\uDCA1 Recommendations:\");data.recommendations.forEach(rec=>parts.push(\"  \\u2022 \".concat(rec)));}// Warnings\nif(data.warnings&&data.warnings.length>0){parts.push(\"\\u26A0\\uFE0F Warnings:\");data.warnings.forEach(warning=>parts.push(\"  \\u2022 \".concat(warning)));}// Data sources\nif(data.dataSources&&data.dataSources.length>0){parts.push(\"\\uD83D\\uDCCB Data from: \".concat(data.dataSources.join(' ‚Ä¢ ')));}// Fallback to basic info\nif(parts.length===0){if(data.description){parts.push(data.description);}if(data.imageInfo){parts.push(\"\\uD83D\\uDCC1 \".concat(data.imageInfo.name,\" (\").concat(data.imageInfo.size,\")\"));}}return parts.length>0?parts.join('\\n\\n'):'Image analyzed - choose whole foods for better health';}/**\r\n   * Get color coding for UI display\r\n   */getColorCoding(result){var _result$data;if(!result.success||!((_result$data=result.data)!==null&&_result$data!==void 0&&_result$data.colorCode)){return{color:'red',label:'ERROR',action:'TRY AGAIN'};}const colorMap={'green':{color:'#4CAF50',label:'CHOOSE',action:'Great choice!'},'yellow':{color:'#FFEB3B',label:'MODERATE',action:'Use sparingly'},'orange':{color:'#FF9800',label:'LIMIT',action:'Find alternatives'},'red':{color:'#F44336',label:'AVOID',action:'Choose whole foods instead'}};return colorMap[result.data.colorCode]||colorMap.red;}/**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */async analyzeAnyImage(input){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Handle different input types\nif(input instanceof Blob&&!(input instanceof File)){// Convert Blob to File for camera captures\nconst file=new File([input],'camera-capture.jpg',{type:'image/jpeg'});return this.analyzeImage(file);}else if(typeof input==='string'){// Handle URLs\nreturn this.analyzeImageUrl(input,context);}else{// Handle File objects\nreturn this.analyzeImage(input);}}catch(error){console.error('Image analysis failed:',error);return this.handleGenericError(error);}}/**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */handleGenericError(error){return{success:false,error:(error===null||error===void 0?void 0:error.message)||'Analysis failed',data:{description:'Image analysis failed',foodItems:[],brands:[],nutritionText:'Choose whole foods when technology fails',barcodes:[],qrCodes:[],text:'',imageInfo:{name:'Analysis Failed',size:'N/A',type:'error',dimensions:'N/A'},healthScore:0,novaGroup:4,novaDescription:'Unknown - Technical error',isHealthy:false,recommendations:['Technical error - When in doubt, choose whole foods','Real food doesn\\'t need complex analysis','Shop the perimeter of the grocery store','If it has more than 5 ingredients, consider alternatives'],warnings:['Analysis system temporarily unavailable'],familySafe:false,colorCode:'red',verdict:'Choose whole foods - they\\'re always the safest bet',dataSources:['WIHY Health Guidance']}};}/**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */async testApiHealth(){try{const startTime=Date.now();// Test with a simple barcode scan\nconst response=await fetch(\"\".concat(WIHY_API_BASE,\"/wihy/scan-barcode\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:'3017620422003',// Nutella test barcode\nuser_context:{test:true}})});const latency=Date.now()-startTime;if(response.ok){const result=await response.json();const hasRequired=result.nova_group&&result.health_score!==undefined;return{healthy:hasRequired,message:hasRequired?'‚úÖ WIHY Scanner API is healthy':'‚ö†Ô∏è API missing required fields',latency};}else{return{healthy:false,message:\"\\u274C API Error: \".concat(response.status),latency};}}catch(error){return{healthy:false,message:\"\\u274C Connection failed: \".concat(error instanceof Error?error.message:'Unknown error')};}}}export const visionAnalysisService=new VisionAnalysisService();","map":{"version":3,"names":["WIHY_API_BASE","VisionAnalysisService","analyzeImage","imageFile","console","log","imageInfo","getImageInfo","wihyResult","analyzeWithWihyAPI","user_context","image_name","name","error","fallbackAnalysis","success","processWihyImageResponse","Error","message","input","userContext","arguments","length","undefined","response","fetch","concat","method","headers","body","JSON","stringify","image_url","context","_objectSpread","analysis_type","user_location","input_type","formData","FormData","append","file_name","file_size","size","ok","status","json","analyzeImageUrl","imageUrl","source","type","dimensions","handleUrlAnalysisError","data","description","foodItems","brands","nutritionText","barcodes","qrCodes","text","healthScore","novaGroup","novaDescription","isHealthy","recommendations","warnings","familySafe","colorCode","verdict","dataSources","_nova_chart_reference","_wihy_analysis$family","overall_assessment","google_vision_analysis","detected_foods","nova_chart_reference","wihy_recommendations","wihy_analysis","health_score","nova_group","client_guidance","color_coding","map","food","carcinogen_warnings","family_safety","safety_score","detected_text","getNovaDescription","data_sources","wihyAnalysis","wihyAPI","scanFood","foodAnalysis","analyzeFoodContent","descriptions","file","sizeInMB","toFixed","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","join","scanBarcode","barcode","query","scan_location","device_type","result","processWihyBarcodeResponse","handleBarcodeError","_nova_chart_reference2","_wihy_analysis$family2","nova_description","product_name","getHealthVerdict","formatForDisplay","parts","push","forEach","rec","warning","getColorCoding","_result$data","color","label","action","colorMap","red","analyzeAnyImage","Blob","File","handleGenericError","testApiHealth","startTime","Date","now","test","latency","hasRequired","healthy","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n    // WIHY Scanner API fields\r\n    healthScore?: number;\r\n    novaGroup?: number;\r\n    novaDescription?: string;\r\n    isHealthy?: boolean;\r\n    recommendations?: string[];\r\n    warnings?: string[];\r\n    familySafe?: boolean;\r\n    colorCode?: string;\r\n    verdict?: string;\r\n    dataSources?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\n// WIHY Scanner API Configuration\r\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\r\n\r\nclass VisionAnalysisService {\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('üîç Starting WIHY image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // Use WIHY Scanner API for comprehensive food analysis\r\n      let wihyResult: any = null;\r\n      \r\n      try {\r\n        console.log('Analyzing with WIHY Scanner API...');\r\n        wihyResult = await this.analyzeWithWihyAPI(imageFile, {\r\n          user_context: 'web_upload',\r\n          image_name: imageFile.name\r\n        });\r\n        console.log('WIHY Scanner analysis result:', wihyResult);\r\n      } catch (error) {\r\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, imageInfo);\r\n      } else {\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */\r\n  private async analyzeWithWihyAPI(input: File | string, userContext = {}): Promise<any> {\r\n    let response: Response;\r\n    \r\n    if (typeof input === 'string') {\r\n      // URL analysis\r\n      console.log('üåê Analyzing image from URL:', input);\r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          image_url: input,\r\n          context: JSON.stringify({\r\n            analysis_type: 'food_health',\r\n            user_location: 'web_app',\r\n            input_type: 'url',\r\n            ...userContext\r\n          })\r\n        })\r\n      });\r\n    } else {\r\n      // File upload analysis\r\n      console.log('üìÅ Analyzing uploaded file:', input.name);\r\n      const formData = new FormData();\r\n      formData.append('image', input);\r\n      formData.append('context', JSON.stringify({\r\n        analysis_type: 'food_health',\r\n        user_location: 'web_app',\r\n        input_type: 'file_upload',\r\n        file_name: input.name,\r\n        file_size: input.size,\r\n        ...userContext\r\n      }));\r\n      \r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`WIHY API Error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Analyze image from URL\r\n   */\r\n  async analyzeImageUrl(imageUrl: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('üîç Analyzing image from URL with WIHY Scanner API');\r\n      \r\n      const wihyResult = await this.analyzeWithWihyAPI(imageUrl, {\r\n        ...userContext,\r\n        source: 'url_input'\r\n      });\r\n      \r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        });\r\n      } else {\r\n        return this.handleUrlAnalysisError(imageUrl);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('URL image analysis failed:', error);\r\n      return this.handleUrlAnalysisError(imageUrl, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle URL analysis errors\r\n   */\r\n  private handleUrlAnalysisError(imageUrl: string, error?: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'URL analysis failed',\r\n      data: {\r\n        description: 'Could not analyze image from URL',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'URL Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis'\r\n        ],\r\n        warnings: ['Could not analyze image from URL'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\r\n  private processWihyImageResponse(wihyResult: any, imageInfo: any): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      overall_assessment,\r\n      google_vision_analysis,\r\n      detected_foods,\r\n      nova_chart_reference,\r\n      wihy_recommendations,\r\n      wihy_analysis\r\n    } = wihyResult;\r\n\r\n    const healthScore = overall_assessment?.health_score || 0;\r\n    const novaGroup = overall_assessment?.nova_group || 4;\r\n    const verdict = overall_assessment?.verdict || 'Analysis completed';\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    \r\n    // Extract detected foods\r\n    const foodItems = detected_foods?.map((food: any) => food.name || food) || [];\r\n    \r\n    // Extract recommendations and warnings\r\n    const recommendations = wihy_recommendations || [];\r\n    const warnings = wihy_analysis?.carcinogen_warnings || [];\r\n    \r\n    // Determine if healthy based on NOVA group and health score\r\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: verdict,\r\n        foodItems: foodItems,\r\n        brands: [], // Could extract from vision analysis\r\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: google_vision_analysis?.detected_text || '',\r\n        imageInfo,\r\n        // WIHY Scanner specific data\r\n        healthScore,\r\n        novaGroup,\r\n        novaDescription: this.getNovaDescription(novaGroup),\r\n        isHealthy,\r\n        recommendations,\r\n        warnings,\r\n        familySafe,\r\n        colorCode,\r\n        verdict,\r\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\r\n  private async fallbackAnalysis(imageFile: File, imageInfo: any): Promise<VisionAnalysisResult> {\r\n    console.log('Using fallback analysis...');\r\n    \r\n    // Try legacy WiHy API as fallback\r\n    let wihyAnalysis = '';\r\n    \r\n    try {\r\n      const { wihyAPI } = await import('./wihyAPI');\r\n      const wihyResult = await wihyAPI.scanFood(imageFile);\r\n      \r\n      if (wihyResult.success && wihyResult.message) {\r\n        wihyAnalysis = wihyResult.message;\r\n      }\r\n    } catch (error) {\r\n      console.log('Legacy WiHy API also unavailable');\r\n    }\r\n\r\n    // Extract potential nutrition and food information\r\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\r\n        foodItems: foodAnalysis.foodItems,\r\n        brands: foodAnalysis.brands,\r\n        nutritionText: foodAnalysis.nutritionText,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo,\r\n        // Default WIHY values for fallback\r\n        healthScore: 50,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown processing level',\r\n        isHealthy: false,\r\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\r\n        warnings: ['Could not analyze product completely'],\r\n        familySafe: false,\r\n        colorCode: 'orange',\r\n        verdict: 'Analysis limited - choose natural foods',\r\n        dataSources: ['Local Analysis']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group description\r\n   */\r\n  private getNovaDescription(novaGroup: number): string {\r\n    const descriptions = {\r\n      1: 'Natural - Real food as God intended',\r\n      2: 'Processed - Use sparingly',\r\n      3: 'Highly Processed - Find alternatives',\r\n      4: 'Ultra-Processed - Your family deserves better'\r\n    };\r\n    \r\n    return descriptions[novaGroup as keyof typeof descriptions] || descriptions[4];\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestl√©', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\r\n  async scanBarcode(barcode: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('üîç Scanning barcode with WIHY Scanner API:', barcode);\r\n      \r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: barcode,\r\n          user_context: {\r\n            scan_location: 'web_app',\r\n            device_type: 'browser',\r\n            ...userContext\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      return this.processWihyBarcodeResponse(result, barcode);\r\n      \r\n    } catch (error) {\r\n      console.error('Barcode scan failed:', error);\r\n      return this.handleBarcodeError(error, barcode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\r\n  private processWihyBarcodeResponse(result: any, barcode: string): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      nova_group,\r\n      nova_description,\r\n      nova_chart_reference,\r\n      health_score,\r\n      wihy_analysis,\r\n      data_sources,\r\n      product_name\r\n    } = result;\r\n    \r\n    const isHealthy = nova_group <= 2 && health_score >= 60;\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: product_name || `Product ${barcode}`,\r\n        foodItems: product_name ? [product_name] : [],\r\n        brands: [],\r\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        // WIHY Scanner specific data\r\n        healthScore: health_score,\r\n        novaGroup: nova_group,\r\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\r\n        isHealthy,\r\n        recommendations: wihy_analysis?.wihy_recommendations || [],\r\n        warnings: wihy_analysis?.carcinogen_warnings || [],\r\n        familySafe,\r\n        colorCode,\r\n        verdict: wihy_analysis?.verdict || this.getHealthVerdict(health_score, nova_group),\r\n        dataSources: data_sources || ['WIHY Enhanced DB']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle barcode scan errors\r\n   */\r\n  private handleBarcodeError(error: any, barcode: string): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Barcode scan failed',\r\n      data: {\r\n        description: 'Could not analyze product',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'API Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need barcodes'\r\n        ],\r\n        warnings: ['Could not analyze product'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health verdict based on scores\r\n   */\r\n  private getHealthVerdict(healthScore: number, novaGroup: number): string {\r\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\r\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\r\n    if (novaGroup === 3) return 'Caution - highly processed food';\r\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\r\n    return 'Choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // WIHY Scanner results\r\n    if (data.verdict) {\r\n      parts.push(`üéØ ${data.verdict}`);\r\n    }\r\n\r\n    // Health information\r\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\r\n      parts.push(`üìä Health Score: ${data.healthScore}/100`);\r\n      parts.push(`üè∑Ô∏è ${data.novaDescription}`);\r\n    }\r\n\r\n    // Detected foods\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`üçé Detected: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Recommendations\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      parts.push(`üí° Recommendations:`);\r\n      data.recommendations.forEach(rec => parts.push(`  ‚Ä¢ ${rec}`));\r\n    }\r\n\r\n    // Warnings\r\n    if (data.warnings && data.warnings.length > 0) {\r\n      parts.push(`‚ö†Ô∏è Warnings:`);\r\n      data.warnings.forEach(warning => parts.push(`  ‚Ä¢ ${warning}`));\r\n    }\r\n\r\n    // Data sources\r\n    if (data.dataSources && data.dataSources.length > 0) {\r\n      parts.push(`üìã Data from: ${data.dataSources.join(' ‚Ä¢ ')}`);\r\n    }\r\n\r\n    // Fallback to basic info\r\n    if (parts.length === 0) {\r\n      if (data.description) {\r\n        parts.push(data.description);\r\n      }\r\n      if (data.imageInfo) {\r\n        parts.push(`üìÅ ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n      }\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Get color coding for UI display\r\n   */\r\n  getColorCoding(result: VisionAnalysisResult): { color: string; label: string; action: string } {\r\n    if (!result.success || !result.data?.colorCode) {\r\n      return { color: 'red', label: 'ERROR', action: 'TRY AGAIN' };\r\n    }\r\n\r\n    const colorMap = {\r\n      'green': { color: '#4CAF50', label: 'CHOOSE', action: 'Great choice!' },\r\n      'yellow': { color: '#FFEB3B', label: 'MODERATE', action: 'Use sparingly' },\r\n      'orange': { color: '#FF9800', label: 'LIMIT', action: 'Find alternatives' },\r\n      'red': { color: '#F44336', label: 'AVOID', action: 'Choose whole foods instead' }\r\n    };\r\n\r\n    return colorMap[result.data.colorCode as keyof typeof colorMap] || colorMap.red;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */\r\n  async analyzeAnyImage(input: File | string | Blob, context = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      // Handle different input types\r\n      if (input instanceof Blob && !(input instanceof File)) {\r\n        // Convert Blob to File for camera captures\r\n        const file = new File([input], 'camera-capture.jpg', { type: 'image/jpeg' });\r\n        return this.analyzeImage(file);\r\n      } else if (typeof input === 'string') {\r\n        // Handle URLs\r\n        return this.analyzeImageUrl(input, context);\r\n      } else {\r\n        // Handle File objects\r\n        return this.analyzeImage(input);\r\n      }\r\n    } catch (error) {\r\n      console.error('Image analysis failed:', error);\r\n      return this.handleGenericError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */\r\n  private handleGenericError(error: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'Analysis failed',\r\n      data: {\r\n        description: 'Image analysis failed',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Choose whole foods when technology fails',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Analysis Failed',\r\n          size: 'N/A',\r\n          type: 'error',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Technical error',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'Technical error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis',\r\n          'Shop the perimeter of the grocery store',\r\n          'If it has more than 5 ingredients, consider alternatives'\r\n        ],\r\n        warnings: ['Analysis system temporarily unavailable'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods - they\\'re always the safest bet',\r\n        dataSources: ['WIHY Health Guidance']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */\r\n  async testApiHealth(): Promise<{ healthy: boolean; message: string; latency?: number }> {\r\n    try {\r\n      const startTime = Date.now();\r\n      \r\n      // Test with a simple barcode scan\r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: '3017620422003', // Nutella test barcode\r\n          user_context: { test: true }\r\n        })\r\n      });\r\n      \r\n      const latency = Date.now() - startTime;\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const hasRequired = result.nova_group && result.health_score !== undefined;\r\n        \r\n        return {\r\n          healthy: hasRequired,\r\n          message: hasRequired ? '‚úÖ WIHY Scanner API is healthy' : '‚ö†Ô∏è API missing required fields',\r\n          latency\r\n        };\r\n      } else {\r\n        return {\r\n          healthy: false,\r\n          message: `‚ùå API Error: ${response.status}`,\r\n          latency\r\n        };\r\n      }\r\n      \r\n    } catch (error) {\r\n      return {\r\n        healthy: false,\r\n        message: `‚ùå Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}