{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// UPDATED: Backend API response types based on your actual API\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'npr.org': 0.9,\n  'reuters.com': 0.9,\n  'cnn.com': 0.8,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'nutrition',\n  MEDICAL: 'medical',\n  PUBLIC_HEALTH: 'health',\n  CLINICAL: 'clinical',\n  PREVENTION: 'prevention',\n  MENTAL_HEALTH: 'mental',\n  GENERAL: 'general',\n  SCIENCE: 'science',\n  TECH: 'tech',\n  POLITICAL: 'political',\n  SPORTS: 'sports',\n  ENTERTAINMENT: 'entertainment',\n  BUSINESS: 'business',\n  NATURE: 'nature'\n};\n\n// UPDATED: Use correct backend API endpoint and handle the actual response structure\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    var _data$articles;\n    console.log('🔍 Fetching health news from backend API...', {\n      categories,\n      limit\n    });\n\n    // First try to get articles using the flat articles endpoint (which should have data)\n    const params = {\n      limit: limit || 50,\n      flat: 'true' // Use flat articles endpoint\n    };\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\n      params.category = categories[0];\n    }\n    console.log('📡 Making request to:', `${API_URL}/news/articles`, 'with params:', params);\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params,\n      timeout: 10000 // 10 second timeout\n    });\n    const data = response.data;\n    console.log('✅ Backend API response:', {\n      success: data.success,\n      articleCount: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n      count: data.count,\n      message: data.message,\n      debug: data.debug\n    });\n    if (!data.success) {\n      console.warn('⚠️ Backend returned success=false:', data.message);\n      // Don't throw error, try to use the data anyway or fallback\n    }\n\n    // Convert backend article format to frontend format\n    const articles = (data.articles || []).filter(article => article.title && article.title.trim() !== '') // Filter out empty titles\n    .map((article, index) => {\n      var _article$feed_id;\n      return {\n        id: article.guid || ((_article$feed_id = article.feed_id) === null || _article$feed_id === void 0 ? void 0 : _article$feed_id.toString()) + '_' + index || `article_${Date.now()}_${index}`,\n        title: article.title || 'No title',\n        summary: article.description || article.summary || 'No summary available',\n        url: article.link || '#',\n        source: article.feed_title || article.source || article.author || 'Unknown Source',\n        domain: extractDomain(article.link || ''),\n        category: article.category || article.article_category || 'general',\n        publishedDate: article.pubDate || article.extracted_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description || article.summary),\n        tags: extractTags(article.title, article.description || article.summary, article.tags)\n      };\n    });\n    console.log('📰 Processed articles:', articles.length);\n\n    // If no articles from flat endpoint, try the regular endpoint\n    if (articles.length === 0) {\n      var _regularData$articles;\n      console.log('🔄 No articles from flat endpoint, trying regular endpoint...');\n      const regularResponse = await axios.get(`${API_URL}/news/articles`, {\n        params: {\n          limit: limit || 50,\n          category: (categories === null || categories === void 0 ? void 0 : categories[0]) !== 'all' ? categories === null || categories === void 0 ? void 0 : categories[0] : undefined\n        },\n        timeout: 10000\n      });\n      const regularData = regularResponse.data;\n      console.log('📰 Regular endpoint response:', {\n        success: regularData.success,\n        articleCount: ((_regularData$articles = regularData.articles) === null || _regularData$articles === void 0 ? void 0 : _regularData$articles.length) || 0,\n        count: regularData.count\n      });\n\n      // Process regular endpoint articles (they might have different structure)\n      const regularArticles = (regularData.articles || []).filter(article => article.title && article.title.trim() !== '').map((article, index) => {\n        var _article$id, _article$feed, _article$feed2;\n        return {\n          id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || article.guid || `article_${Date.now()}_${index}`,\n          title: article.title || 'No title',\n          summary: article.description || article.summary || 'No summary available',\n          url: article.link || article.url || '#',\n          source: ((_article$feed = article.feed) === null || _article$feed === void 0 ? void 0 : _article$feed.title) || article.source || article.author || 'Unknown Source',\n          domain: extractDomain(article.link || article.url || ''),\n          category: ((_article$feed2 = article.feed) === null || _article$feed2 === void 0 ? void 0 : _article$feed2.category) || article.category || 'general',\n          publishedDate: article.pub_date || article.pubDate || article.created_at || new Date().toISOString(),\n          relevanceScore: calculateRelevanceScore(article.title, article.description || article.summary),\n          tags: extractTags(article.title, article.description || article.summary)\n        };\n      });\n      articles.push(...regularArticles);\n    }\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      const category = mapBackendCategory(article.category);\n      if (!categorizedArticles[category]) {\n        categorizedArticles[category] = [];\n      }\n      categorizedArticles[category].push(article);\n    });\n    console.log('✅ News feed processed successfully:', {\n      totalArticles: articles.length,\n      categories: Object.keys(categorizedArticles),\n      categoryCount: Object.entries(categorizedArticles).map(([cat, arts]) => `${cat}: ${arts.length}`).join(', ')\n    });\n\n    // If still no articles, use fallback\n    if (articles.length === 0) {\n      console.log('📱 No articles found, using fallback...');\n      return await getFallbackNews();\n    }\n    return {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      message: data.message || 'Health news fetched successfully from database'\n    };\n  } catch (error) {\n    var _error$response;\n    console.error('❌ Error fetching news feed from backend:', error);\n\n    // Check specific error types\n    if (error.code === 'ECONNREFUSED') {\n      console.log('📱 Backend connection refused, using fallback news...');\n    } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 500) {\n      console.log('📱 Backend server error, using fallback news...');\n    } else if (error.code === 'ENOTFOUND') {\n      console.log('📱 Backend not found, using fallback news...');\n    } else {\n      console.log('📱 Unknown error, using fallback news...', error.message);\n    }\n    const fallback = await getFallbackNews();\n    return {\n      ...fallback,\n      message: `Backend error (${error.message}). Showing sample news.`\n    };\n  }\n};\n\n// Helper function to map backend categories to frontend categories\nconst mapBackendCategory = backendCategory => {\n  if (!backendCategory) return 'General Health';\n  const categoryMap = {\n    'nutrition': 'Nutrition & Diet',\n    'diet': 'Nutrition & Diet',\n    'medical': 'Medical Research',\n    'health': 'Public Health',\n    'mental': 'Mental Health',\n    'prevention': 'Disease Prevention',\n    'clinical': 'Clinical Studies',\n    'science': 'Medical Research',\n    'tech': 'Medical Technology',\n    'political': 'Health Policy',\n    'sports': 'Fitness & Sports',\n    'entertainment': 'Wellness',\n    'business': 'Health Business',\n    'nature': 'Environmental Health'\n  };\n  const lowerCategory = backendCategory.toLowerCase();\n  for (const [key, value] of Object.entries(categoryMap)) {\n    if (lowerCategory.includes(key)) {\n      return value;\n    }\n  }\n  return 'General Health';\n};\n\n// Enhanced fallback news data\nconst getFallbackNews = async () => {\n  const fallbackArticles = [{\n    id: 'fallback_1',\n    title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\n    summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\n    url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\n    source: \"NIH Health News\",\n    domain: \"nih.gov\",\n    category: \"Nutrition & Diet\",\n    publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular']\n  }, {\n    id: 'fallback_2',\n    title: \"Exercise and Mental Health: The Connection You Need to Know\",\n    summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\n    url: \"https://www.cdc.gov/mental-health/exercise-connection\",\n    source: \"CDC Health Updates\",\n    domain: \"cdc.gov\",\n    category: \"Mental Health\",\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.90,\n    tags: ['mental-health', 'exercise', 'wellness', 'depression']\n  }, {\n    id: 'fallback_3',\n    title: \"The Importance of Sleep for Immune System Function\",\n    summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\n    url: \"https://www.nih.gov/news-events/sleep-immune-system\",\n    source: \"Sleep Health Research\",\n    domain: \"nih.gov\",\n    category: \"General Health\",\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.85,\n    tags: ['sleep', 'immune-system', 'health', 'wellness']\n  }, {\n    id: 'fallback_4',\n    title: \"Breakthrough in Cancer Research: New Treatment Shows Promise\",\n    summary: \"Scientists have developed a new immunotherapy approach that shows remarkable results in clinical trials, offering hope for difficult-to-treat cancers.\",\n    url: \"https://www.nih.gov/news-events/cancer-breakthrough-2024\",\n    source: \"Medical Research Today\",\n    domain: \"nih.gov\",\n    category: \"Medical Research\",\n    publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.98,\n    tags: ['cancer', 'research', 'immunotherapy', 'clinical-trials']\n  }, {\n    id: 'fallback_5',\n    title: \"Preventive Care: Early Detection Saves Lives\",\n    summary: \"Regular health screenings can detect potential health issues before they become serious problems. Learn what screenings you need by age.\",\n    url: \"https://www.cdc.gov/prevention/early-detection\",\n    source: \"CDC Prevention Guidelines\",\n    domain: \"cdc.gov\",\n    category: \"Disease Prevention\",\n    publishedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.80,\n    tags: ['prevention', 'screening', 'early-detection', 'health-checkup']\n  }];\n\n  // Categorize fallback articles\n  const categorizedArticles = {};\n  fallbackArticles.forEach(article => {\n    if (!categorizedArticles[article.category]) {\n      categorizedArticles[article.category] = [];\n    }\n    categorizedArticles[article.category].push(article);\n  });\n  return {\n    success: true,\n    articles: fallbackArticles,\n    categories: categorizedArticles,\n    lastUpdated: new Date().toISOString(),\n    count: fallbackArticles.length,\n    message: 'Using sample health news (backend unavailable)'\n  };\n};\n\n// Helper function to extract domain from URL\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname.toLowerCase();\n  } catch {\n    return 'unknown';\n  }\n};\n\n// Helper function to calculate relevance score based on health content\nconst calculateRelevanceScore = (title = '', description = '') => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n\n  // Base score + bonus for health relevance\n  let score = 0.5;\n  score += matchingKeywords.length * 0.08;\n  return Math.min(score, 1.0);\n};\n\n// Enhanced helper function to extract tags from content\nconst extractTags = (title = '', description = '', existingTags) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const tags = [];\n\n  // If backend provided tags, parse them\n  if (existingTags) {\n    try {\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n      tags.push(...parsedTags);\n    } catch (e) {\n      // If parsing fails, continue with keyword extraction\n    }\n  }\n  const tagKeywords = ['health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise', 'mental-health', 'wellness', 'prevention', 'treatment', 'research', 'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor', 'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'];\n  tagKeywords.forEach(keyword => {\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\n      tags.push(keyword);\n    }\n  });\n  return tags.slice(0, 5); // Limit to 5 tags\n};\n\n// Rest of the functions remain the same...\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available to search'\n      };\n    }\n    const searchTerm = query.toLowerCase();\n    const matchingArticles = feedResponse.articles.filter(article => article.title.toLowerCase().includes(searchTerm) || article.summary.toLowerCase().includes(searchTerm) || article.tags.some(tag => tag.includes(searchTerm))).slice(0, limit || 10);\n    return {\n      success: true,\n      articles: matchingArticles,\n      lastUpdated: new Date().toISOString(),\n      count: matchingArticles.length,\n      message: `Search results for \"${query}\"`\n    };\n  } catch (error) {\n    console.error('❌ Error searching articles:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing news feed...');\n    // First trigger a fetch on the backend to get fresh data\n    try {\n      await axios.post(`${API_URL}/news/fetch`, {}, {\n        timeout: 5000\n      });\n      console.log('✅ Triggered backend refresh');\n    } catch (fetchError) {\n      console.log('⚠️ Could not trigger backend refresh, getting current data');\n    }\n\n    // Then get the updated data\n    return await fetchNewsFeed();\n  } catch (error) {\n    console.error('❌ Error refreshing news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed();\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility functions\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary\n  };\n};\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\nexport const getAvailableCategories = () => {\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: 'nutrition',\n    label: 'Nutrition & Diet'\n  }, {\n    id: 'medical',\n    label: 'Medical Research'\n  }, {\n    id: 'health',\n    label: 'Public Health'\n  }, {\n    id: 'clinical',\n    label: 'Clinical Studies'\n  }, {\n    id: 'prevention',\n    label: 'Disease Prevention'\n  }, {\n    id: 'mental',\n    label: 'Mental Health'\n  }, {\n    id: 'science',\n    label: 'Science Research'\n  }, {\n    id: 'general',\n    label: 'General Health'\n  }];\n};\n\n// Legacy compatibility\n\nexport class NewsService {\n  async fetchNews() {\n    var _response$articles;\n    const response = await fetchNewsFeed();\n    return ((_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.map(article => ({\n      title: article.title,\n      link: article.url,\n      description: article.summary,\n      pubDate: article.publishedDate,\n      source: article.source,\n      category: article.category\n    }))) || [];\n  }\n}\nexport const newsService = new NewsService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","SCIENCE","TECH","POLITICAL","SPORTS","ENTERTAINMENT","BUSINESS","NATURE","fetchNewsFeed","categories","limit","_data$articles","console","log","params","flat","length","category","response","get","timeout","data","success","articleCount","articles","count","message","debug","warn","filter","article","title","trim","map","index","_article$feed_id","id","guid","feed_id","toString","Date","now","summary","description","url","link","source","feed_title","author","domain","extractDomain","article_category","publishedDate","pubDate","extracted_at","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","_regularData$articles","regularResponse","undefined","regularData","regularArticles","_article$id","_article$feed","_article$feed2","feed","pub_date","created_at","push","categorizedArticles","forEach","mapBackendCategory","totalArticles","Object","keys","categoryCount","entries","cat","arts","join","getFallbackNews","lastUpdated","error","_error$response","code","status","fallback","backendCategory","categoryMap","lowerCategory","toLowerCase","key","value","includes","fallbackArticles","URL","hostname","content","healthKeywords","matchingKeywords","keyword","score","Math","min","existingTags","parsedTags","split","tag","e","tagKeywords","replace","slice","getArticlesByCategory","searchNewsArticles","query","feedResponse","searchTerm","matchingArticles","some","refreshNewsFeed","post","fetchError","getNewsFeedStats","categoryCounts","sourcesCounts","stats","isTrustedDomain","trustedDomain","formatArticleForDisplay","formattedDate","formatTimeAgo","isTrusted","relevancePercentage","round","shortSummary","substring","dateString","diffInHours","floor","getTime","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","label","NewsService","fetchNews","_response$articles","newsService"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n}\r\n\r\n// UPDATED: Backend API response types based on your actual API\r\ninterface BackendArticle {\r\n  // Flat articles from sp_GetFlatArticles\r\n  feed_id?: number;\r\n  feed_title?: string;\r\n  feed_url?: string;\r\n  category?: string;\r\n  country_code?: string;\r\n  feed_image_url?: string;\r\n  feed_thumbnail_url?: string;\r\n  title?: string;\r\n  description?: string;\r\n  summary?: string;\r\n  link?: string;\r\n  author?: string;\r\n  pubDate?: string;\r\n  guid?: string;\r\n  article_category?: string;\r\n  tags?: string;\r\n  source?: string;\r\n  source_url?: string;\r\n  media_thumb_url?: string;\r\n  media_url?: string;\r\n  content_encoded?: string;\r\n  extracted_at?: string;\r\n  word_count?: string;\r\n  reading_time?: string;\r\n  has_media?: string;\r\n  has_author?: string;\r\n  content_length?: string;\r\n  last_checked?: string;\r\n  updated_at?: string;\r\n}\r\n\r\ninterface BackendArticlesResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles: BackendArticle[];\r\n  count: number;\r\n  debug?: any;\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'npr.org': 0.9,\r\n  'reuters.com': 0.9,\r\n  'cnn.com': 0.8,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'nutrition',\r\n  MEDICAL: 'medical',\r\n  PUBLIC_HEALTH: 'health',\r\n  CLINICAL: 'clinical',\r\n  PREVENTION: 'prevention',\r\n  MENTAL_HEALTH: 'mental',\r\n  GENERAL: 'general',\r\n  SCIENCE: 'science',\r\n  TECH: 'tech',\r\n  POLITICAL: 'political',\r\n  SPORTS: 'sports',\r\n  ENTERTAINMENT: 'entertainment',\r\n  BUSINESS: 'business',\r\n  NATURE: 'nature'\r\n};\r\n\r\n// UPDATED: Use correct backend API endpoint and handle the actual response structure\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching health news from backend API...', { categories, limit });\r\n    \r\n    // First try to get articles using the flat articles endpoint (which should have data)\r\n    const params: any = {\r\n      limit: limit || 50,\r\n      flat: 'true' // Use flat articles endpoint\r\n    };\r\n    \r\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\r\n      params.category = categories[0];\r\n    }\r\n    \r\n    console.log('📡 Making request to:', `${API_URL}/news/articles`, 'with params:', params);\r\n    \r\n    const response = await axios.get<BackendArticlesResponse>(`${API_URL}/news/articles`, {\r\n      params,\r\n      timeout: 10000 // 10 second timeout\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    console.log('✅ Backend API response:', {\r\n      success: data.success,\r\n      articleCount: data.articles?.length || 0,\r\n      count: data.count,\r\n      message: data.message,\r\n      debug: data.debug\r\n    });\r\n    \r\n    if (!data.success) {\r\n      console.warn('⚠️ Backend returned success=false:', data.message);\r\n      // Don't throw error, try to use the data anyway or fallback\r\n    }\r\n    \r\n    // Convert backend article format to frontend format\r\n    const articles: NewsArticle[] = (data.articles || [])\r\n      .filter(article => article.title && article.title.trim() !== '') // Filter out empty titles\r\n      .map((article: BackendArticle, index: number) => ({\r\n        id: article.guid || article.feed_id?.toString() + '_' + index || `article_${Date.now()}_${index}`,\r\n        title: article.title || 'No title',\r\n        summary: article.description || article.summary || 'No summary available',\r\n        url: article.link || '#',\r\n        source: article.feed_title || article.source || article.author || 'Unknown Source',\r\n        domain: extractDomain(article.link || ''),\r\n        category: article.category || article.article_category || 'general',\r\n        publishedDate: article.pubDate || article.extracted_at || new Date().toISOString(),\r\n        relevanceScore: calculateRelevanceScore(article.title, article.description || article.summary),\r\n        tags: extractTags(article.title, article.description || article.summary, article.tags)\r\n      }));\r\n    \r\n    console.log('📰 Processed articles:', articles.length);\r\n    \r\n    // If no articles from flat endpoint, try the regular endpoint\r\n    if (articles.length === 0) {\r\n      console.log('🔄 No articles from flat endpoint, trying regular endpoint...');\r\n      \r\n      const regularResponse = await axios.get<BackendArticlesResponse>(`${API_URL}/news/articles`, {\r\n        params: {\r\n          limit: limit || 50,\r\n          category: categories?.[0] !== 'all' ? categories?.[0] : undefined\r\n        },\r\n        timeout: 10000\r\n      });\r\n      \r\n      const regularData = regularResponse.data;\r\n      console.log('📰 Regular endpoint response:', {\r\n        success: regularData.success,\r\n        articleCount: regularData.articles?.length || 0,\r\n        count: regularData.count\r\n      });\r\n      \r\n      // Process regular endpoint articles (they might have different structure)\r\n      const regularArticles: NewsArticle[] = (regularData.articles || [])\r\n        .filter(article => article.title && article.title.trim() !== '')\r\n        .map((article: any, index: number) => ({\r\n          id: article.id?.toString() || article.guid || `article_${Date.now()}_${index}`,\r\n          title: article.title || 'No title',\r\n          summary: article.description || article.summary || 'No summary available',\r\n          url: article.link || article.url || '#',\r\n          source: article.feed?.title || article.source || article.author || 'Unknown Source',\r\n          domain: extractDomain(article.link || article.url || ''),\r\n          category: article.feed?.category || article.category || 'general',\r\n          publishedDate: article.pub_date || article.pubDate || article.created_at || new Date().toISOString(),\r\n          relevanceScore: calculateRelevanceScore(article.title, article.description || article.summary),\r\n          tags: extractTags(article.title, article.description || article.summary)\r\n        }));\r\n      \r\n      articles.push(...regularArticles);\r\n    }\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      const category = mapBackendCategory(article.category);\r\n      if (!categorizedArticles[category]) {\r\n        categorizedArticles[category] = [];\r\n      }\r\n      categorizedArticles[category].push(article);\r\n    });\r\n    \r\n    console.log('✅ News feed processed successfully:', {\r\n      totalArticles: articles.length,\r\n      categories: Object.keys(categorizedArticles),\r\n      categoryCount: Object.entries(categorizedArticles).map(([cat, arts]) => `${cat}: ${arts.length}`).join(', ')\r\n    });\r\n    \r\n    // If still no articles, use fallback\r\n    if (articles.length === 0) {\r\n      console.log('📱 No articles found, using fallback...');\r\n      return await getFallbackNews();\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      message: data.message || 'Health news fetched successfully from database'\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching news feed from backend:', error);\r\n    \r\n    // Check specific error types\r\n    if (error.code === 'ECONNREFUSED') {\r\n      console.log('📱 Backend connection refused, using fallback news...');\r\n    } else if (error.response?.status === 500) {\r\n      console.log('📱 Backend server error, using fallback news...');\r\n    } else if (error.code === 'ENOTFOUND') {\r\n      console.log('📱 Backend not found, using fallback news...');\r\n    } else {\r\n      console.log('📱 Unknown error, using fallback news...', error.message);\r\n    }\r\n    \r\n    const fallback = await getFallbackNews();\r\n    return {\r\n      ...fallback,\r\n      message: `Backend error (${error.message}). Showing sample news.`\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to map backend categories to frontend categories\r\nconst mapBackendCategory = (backendCategory: string | undefined): string => {\r\n  if (!backendCategory) return 'General Health';\r\n  \r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'Nutrition & Diet',\r\n    'diet': 'Nutrition & Diet',\r\n    'medical': 'Medical Research',\r\n    'health': 'Public Health',\r\n    'mental': 'Mental Health',\r\n    'prevention': 'Disease Prevention',\r\n    'clinical': 'Clinical Studies',\r\n    'science': 'Medical Research',\r\n    'tech': 'Medical Technology',\r\n    'political': 'Health Policy',\r\n    'sports': 'Fitness & Sports',\r\n    'entertainment': 'Wellness',\r\n    'business': 'Health Business',\r\n    'nature': 'Environmental Health'\r\n  };\r\n  \r\n  const lowerCategory = backendCategory.toLowerCase();\r\n  for (const [key, value] of Object.entries(categoryMap)) {\r\n    if (lowerCategory.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return 'General Health';\r\n};\r\n\r\n// Enhanced fallback news data\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  const fallbackArticles: NewsArticle[] = [\r\n    {\r\n      id: 'fallback_1',\r\n      title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\r\n      summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\r\n      url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\r\n      source: \"NIH Health News\",\r\n      domain: \"nih.gov\",\r\n      category: \"Nutrition & Diet\",\r\n      publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular']\r\n    },\r\n    {\r\n      id: 'fallback_2',\r\n      title: \"Exercise and Mental Health: The Connection You Need to Know\",\r\n      summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\r\n      url: \"https://www.cdc.gov/mental-health/exercise-connection\",\r\n      source: \"CDC Health Updates\",\r\n      domain: \"cdc.gov\",\r\n      category: \"Mental Health\",\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.90,\r\n      tags: ['mental-health', 'exercise', 'wellness', 'depression']\r\n    },\r\n    {\r\n      id: 'fallback_3',\r\n      title: \"The Importance of Sleep for Immune System Function\",\r\n      summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\r\n      url: \"https://www.nih.gov/news-events/sleep-immune-system\",\r\n      source: \"Sleep Health Research\",\r\n      domain: \"nih.gov\",\r\n      category: \"General Health\",\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.85,\r\n      tags: ['sleep', 'immune-system', 'health', 'wellness']\r\n    },\r\n    {\r\n      id: 'fallback_4',\r\n      title: \"Breakthrough in Cancer Research: New Treatment Shows Promise\",\r\n      summary: \"Scientists have developed a new immunotherapy approach that shows remarkable results in clinical trials, offering hope for difficult-to-treat cancers.\",\r\n      url: \"https://www.nih.gov/news-events/cancer-breakthrough-2024\",\r\n      source: \"Medical Research Today\",\r\n      domain: \"nih.gov\",\r\n      category: \"Medical Research\",\r\n      publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.98,\r\n      tags: ['cancer', 'research', 'immunotherapy', 'clinical-trials']\r\n    },\r\n    {\r\n      id: 'fallback_5',\r\n      title: \"Preventive Care: Early Detection Saves Lives\",\r\n      summary: \"Regular health screenings can detect potential health issues before they become serious problems. Learn what screenings you need by age.\",\r\n      url: \"https://www.cdc.gov/prevention/early-detection\",\r\n      source: \"CDC Prevention Guidelines\",\r\n      domain: \"cdc.gov\",\r\n      category: \"Disease Prevention\",\r\n      publishedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.80,\r\n      tags: ['prevention', 'screening', 'early-detection', 'health-checkup']\r\n    }\r\n  ];\r\n\r\n  // Categorize fallback articles\r\n  const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n  fallbackArticles.forEach(article => {\r\n    if (!categorizedArticles[article.category]) {\r\n      categorizedArticles[article.category] = [];\r\n    }\r\n    categorizedArticles[article.category].push(article);\r\n  });\r\n\r\n  return {\r\n    success: true,\r\n    articles: fallbackArticles,\r\n    categories: categorizedArticles,\r\n    lastUpdated: new Date().toISOString(),\r\n    count: fallbackArticles.length,\r\n    message: 'Using sample health news (backend unavailable)'\r\n  };\r\n};\r\n\r\n// Helper function to extract domain from URL\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname.toLowerCase();\r\n  } catch {\r\n    return 'unknown';\r\n  }\r\n};\r\n\r\n// Helper function to calculate relevance score based on health content\r\nconst calculateRelevanceScore = (title: string = '', description: string = ''): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  // Base score + bonus for health relevance\r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.08);\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\n// Enhanced helper function to extract tags from content\r\nconst extractTags = (title: string = '', description: string = '', existingTags?: string): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const tags: string[] = [];\r\n  \r\n  // If backend provided tags, parse them\r\n  if (existingTags) {\r\n    try {\r\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\r\n      tags.push(...parsedTags);\r\n    } catch (e) {\r\n      // If parsing fails, continue with keyword extraction\r\n    }\r\n  }\r\n  \r\n  const tagKeywords = [\r\n    'health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise',\r\n    'mental-health', 'wellness', 'prevention', 'treatment', 'research',\r\n    'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor',\r\n    'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'\r\n  ];\r\n  \r\n  tagKeywords.forEach(keyword => {\r\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\r\n      tags.push(keyword);\r\n    }\r\n  });\r\n  \r\n  return tags.slice(0, 5); // Limit to 5 tags\r\n};\r\n\r\n// Rest of the functions remain the same...\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available to search'\r\n      };\r\n    }\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    \r\n    const matchingArticles = feedResponse.articles\r\n      .filter(article => \r\n        article.title.toLowerCase().includes(searchTerm) ||\r\n        article.summary.toLowerCase().includes(searchTerm) ||\r\n        article.tags.some(tag => tag.includes(searchTerm))\r\n      )\r\n      .slice(0, limit || 10);\r\n    \r\n    return {\r\n      success: true,\r\n      articles: matchingArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: matchingArticles.length,\r\n      message: `Search results for \"${query}\"`\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error searching articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing news feed...');\r\n    // First trigger a fetch on the backend to get fresh data\r\n    try {\r\n      await axios.post(`${API_URL}/news/fetch`, {}, { timeout: 5000 });\r\n      console.log('✅ Triggered backend refresh');\r\n    } catch (fetchError) {\r\n      console.log('⚠️ Could not trigger backend refresh, getting current data');\r\n    }\r\n    \r\n    // Then get the updated data\r\n    return await fetchNewsFeed();\r\n  } catch (error: any) {\r\n    console.error('❌ Error refreshing news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed();\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility functions\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary\r\n  };\r\n};\r\n\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\nexport const getAvailableCategories = (): Array<{id: string, label: string}> => {\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: 'nutrition', label: 'Nutrition & Diet' },\r\n    { id: 'medical', label: 'Medical Research' },\r\n    { id: 'health', label: 'Public Health' },\r\n    { id: 'clinical', label: 'Clinical Studies' },\r\n    { id: 'prevention', label: 'Disease Prevention' },\r\n    { id: 'mental', label: 'Mental Health' },\r\n    { id: 'science', label: 'Science Research' },\r\n    { id: 'general', label: 'General Health' }\r\n  ];\r\n};\r\n\r\n// Legacy compatibility\r\nexport interface NewsItem {\r\n  title: string;\r\n  link: string;\r\n  description: string;\r\n  pubDate: string;\r\n  source: string;\r\n  category: string;\r\n}\r\n\r\nexport class NewsService {\r\n  async fetchNews(): Promise<NewsItem[]> {\r\n    const response = await fetchNewsFeed();\r\n    \r\n    return response.articles?.map(article => ({\r\n      title: article.title,\r\n      link: article.url,\r\n      description: article.summary,\r\n      pubDate: article.publishedDate,\r\n      source: article.source,\r\n      category: article.category\r\n    })) || [];\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}