{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{BrowserRouter as Router,Routes,Route,useSearchParams,useNavigate}from'react-router-dom';import VHealthSearch from'./VHealthSearch';import SearchResults from'./SearchResults';import{wihyAPI}from'./services/wihyAPI';import{searchCache}from'./services/searchCache';import{fetchNewsFeed,refreshNewsFeed,searchNewsArticles}from'./services/newsService';import'./styles/VHealthSearch.css';import'./index.css';import{API_CONFIG}from'./config/apiConfig';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL=API_CONFIG.BASE_URL.replace(/\\/api$/,'');// Remove /api suffix\nexport const searchFoodDatabase=async query=>{try{console.log('Calling food database API for:',query);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/food/search?q=\").concat(encodeURIComponent(query)),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log('Food API response:',data);return data;}catch(error){console.error('Food database API error:',error);throw error;}};export const foodAPI={searchFood:searchFoodDatabase};// Export news API for use in other components\nexport const newsAPI={fetchNewsFeed,refreshNewsFeed,searchNewsArticles};const ResultsPage=()=>{const[searchParams]=useSearchParams();const navigate=useNavigate();const query=searchParams.get('q')||'';const isHealthNews=searchParams.get('type')==='health_news';const category=searchParams.get('category')||'all';const[isLoading,setIsLoading]=useState(false);const[results,setResults]=useState('');const[dataSource,setDataSource]=useState(\"local\");const[citations,setCitations]=useState([]);const[recommendations,setRecommendations]=useState([]);const[disclaimer,setDisclaimer]=useState('');// Track if this is initial load to prevent loading spinner on browser navigation\nconst[isInitialLoad,setIsInitialLoad]=useState(true);// Add ref to prevent duplicate API calls\nconst lastProcessedQuery=useRef('');const isProcessing=useRef(false);// Detect browser navigation type\nconst isBrowserNavigation=()=>{var _performance,_performance$getEntri,_performance$getEntri2;const navigation=(_performance=window.performance)===null||_performance===void 0?void 0:(_performance$getEntri=_performance.getEntriesByType)===null||_performance$getEntri===void 0?void 0:(_performance$getEntri2=_performance$getEntri.call(_performance,'navigation'))===null||_performance$getEntri2===void 0?void 0:_performance$getEntri2[0];return(navigation===null||navigation===void 0?void 0:navigation.type)==='back_forward';};// Fetch results when query changes\nuseEffect(()=>{const fetchResults=async()=>{if(!query&&!isHealthNews){setIsLoading(false);return;}// Create cache key based on type\nconst cacheKey=isHealthNews?\"health_news_\".concat(category):query;// Prevent duplicate processing\nif(isProcessing.current||lastProcessedQuery.current===cacheKey){console.log('Skipping duplicate query:',cacheKey);return;}console.log(\"Processing new query:\",cacheKey);lastProcessedQuery.current=cacheKey;isProcessing.current=true;console.log(\"Is health news:\",isHealthNews);console.log(\"Is browser navigation:\",isBrowserNavigation());// Always check cache first - especially for browser navigation\nconst cachedResult=searchCache.getCachedResult(cacheKey);if(cachedResult){console.log('Using cached results for:',cacheKey);setResults(cachedResult);setDataSource('local');setIsLoading(false);setCitations([]);setRecommendations([]);setDisclaimer('');setIsInitialLoad(false);isProcessing.current=false;// Reset processing flag\nreturn;// Exit early - no API calls needed\n}// If this is browser navigation and no cache, redirect to search page\nif(isBrowserNavigation()||!isInitialLoad){console.log('Browser navigation detected with no cache - redirecting to search');isProcessing.current=false;// Reset processing flag\nnavigate('/');return;}// Only show loading for genuine new searches (not browser navigation)\nsetIsLoading(true);try{// Use WiHy Unified API for all types of searches\nconsole.log('Using WiHy Unified API for query:',query||\"health news - \".concat(category));let wihyResult;if(isHealthNews){// Handle health news requests\nconsole.log('Fetching health news via WiHy API...');const categories=category==='all'?[]:[category];wihyResult=await wihyAPI.getHealthNews(categories,6);}else{// Handle regular search queries (health, nutrition, etc.)\nconsole.log('Making WiHy API call for query:',query);wihyResult=await wihyAPI.searchHealth(query);}console.log(\"WiHy API result received:\",wihyResult);if(wihyResult.success){const formattedResult=wihyAPI.formatWihyResponse(wihyResult);setResults(formattedResult);setDataSource(\"wihy\");// Cache the WiHy results\nsearchCache.setCachedResult(cacheKey,formattedResult,window.location.href);setCitations(wihyAPI.extractCitations(wihyResult));setRecommendations(wihyAPI.extractRecommendations(wihyResult));if(isHealthNews){setDisclaimer('Health news provided by WiHy AI. Always consult healthcare professionals for medical advice.');}else{setDisclaimer('This guidance is based on evidence-based health principles. Always consult healthcare professionals for personalized medical advice.');}}else{// Fallback: If WiHy fails, try legacy APIs\nconsole.log('WiHy API failed, trying fallback methods...');await handleFallbackAPIs();}}catch(error){console.error(\"WiHy API error:\",error);// Try fallback APIs if WiHy fails\ntry{await handleFallbackAPIs();}catch(fallbackError){console.error(\"All APIs failed:\",fallbackError);const errorMessage=\"Sorry, there was an error processing your request.\";setResults(errorMessage);setDataSource(\"error\");setCitations([]);setRecommendations([]);setDisclaimer('');}}finally{setIsLoading(false);setIsInitialLoad(false);isProcessing.current=false;// Always reset processing flag\n}};// Fallback function for legacy APIs\nconst handleFallbackAPIs=async()=>{if(isHealthNews){console.log('Fallback: Fetching health news via newsService...');const healthNewsResult=await fetchNewsFeed([category],6);if(healthNewsResult.success&&healthNewsResult.articles){console.log('Health news fetched successfully');// Format the news articles for display\nconst formattedNews=formatNewsArticles(healthNewsResult.articles);setResults(formattedNews);setDataSource('openai');// Use openai as the display source\n// Cache the health news results\nconst newsKey=\"health_news_\".concat(category);searchCache.setCachedResult(newsKey,formattedNews,window.location.href);setDisclaimer('Health news provided by AI. Always consult healthcare professionals for medical advice.');}else{throw new Error(healthNewsResult.message||'Failed to fetch health news');}}else{// Try nutrition database for food-related queries\ntry{console.log('Fallback: Trying nutrition database...');console.log('API URL:',\"\".concat(API_BASE_URL,\"/api/search/food?q=\").concat(encodeURIComponent(query)));const nutritionResponse=await fetch(\"\".concat(API_BASE_URL,\"/api/search/food?q=\").concat(encodeURIComponent(query)));if(nutritionResponse.ok){const nutritionData=await nutritionResponse.json();console.log('Nutrition API response:',nutritionData);if(nutritionData&&nutritionData.found===true){console.log('Found nutrition data - using vnutrition source');const resultString=JSON.stringify(nutritionData);setResults(resultString);setDataSource('vnutrition');// Cache the nutrition results\nsearchCache.setCachedResult(query,resultString,window.location.href);return;}}}catch(nutritionError){console.log('Nutrition API also failed:',nutritionError);}throw new Error('All fallback APIs failed');}};fetchResults();},[query,isHealthNews,category]);// Removed 'navigate' from dependencies\n// Function to format news articles for display\nconst formatNewsArticles=articles=>{let formatted='# Latest Health News\\n\\n';articles.forEach((article,index)=>{formatted+=\"## \".concat(article.title,\"\\n\\n\");formatted+=\"**Source:** \".concat(article.source,\" (\").concat(article.domain,\")\\n\");formatted+=\"**Category:** \".concat(article.category,\"\\n\");formatted+=\"**Published:** \".concat(new Date(article.publishedDate).toLocaleDateString(),\"\\n\");formatted+=\"**Relevance:** \".concat(Math.round(article.relevanceScore*100),\"%\\n\\n\");formatted+=\"\".concat(article.summary,\"\\n\\n\");if(article.tags&&article.tags.length>0){formatted+=\"**Tags:** \".concat(article.tags.join(', '),\"\\n\\n\");}formatted+=\"[Read Full Article](\".concat(article.url,\")\\n\\n\");formatted+='---\\n\\n';});return formatted;};const handleBackToSearch=()=>{navigate('/');};const handleNewSearch=newQuery=>{if(newQuery!==query){// Reset the initial load flag for new searches\nsetIsInitialLoad(true);navigate(\"/results?q=\".concat(encodeURIComponent(newQuery)));}};return/*#__PURE__*/_jsx(SearchResults,{query:isHealthNews?'Latest Health News':query,results:results,onBackToSearch:handleBackToSearch,onNewSearch:handleNewSearch,isLoading:isLoading,dataSource:dataSource,citations:citations,recommendations:recommendations,disclaimer:disclaimer});};const App=()=>{console.log(\"App component rendered\");return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(VHealthSearch,{})}),/*#__PURE__*/_jsx(Route,{path:\"/results\",element:/*#__PURE__*/_jsx(ResultsPage,{})})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","wihyAPI","searchCache","fetchNewsFeed","refreshNewsFeed","searchNewsArticles","API_CONFIG","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","BASE_URL","replace","searchFoodDatabase","query","console","log","response","fetch","concat","encodeURIComponent","method","headers","ok","Error","status","data","json","error","foodAPI","searchFood","newsAPI","ResultsPage","searchParams","navigate","get","isHealthNews","category","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","isInitialLoad","setIsInitialLoad","lastProcessedQuery","isProcessing","isBrowserNavigation","_performance","_performance$getEntri","_performance$getEntri2","navigation","window","performance","getEntriesByType","call","type","fetchResults","cacheKey","current","cachedResult","getCachedResult","wihyResult","categories","getHealthNews","searchHealth","success","formattedResult","formatWihyResponse","setCachedResult","location","href","extractCitations","extractRecommendations","handleFallbackAPIs","fallbackError","errorMessage","healthNewsResult","articles","formattedNews","formatNewsArticles","newsKey","message","nutritionResponse","nutritionData","found","resultString","JSON","stringify","nutritionError","formatted","forEach","article","index","title","source","domain","Date","publishedDate","toLocaleDateString","Math","round","relevanceScore","summary","tags","length","join","url","handleBackToSearch","handleNewSearch","newQuery","onBackToSearch","onNewSearch","App","children","path","element"],"sources":["C:/repo/wihy_ui/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport HealthNewsFeed from './components/HealthNewsFeed';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport { wihyAPI } from './services/wihyAPI';\r\nimport { searchCache } from './services/searchCache';\r\nimport { fetchNewsFeed, refreshNewsFeed, searchNewsArticles } from './services/newsService';\r\nimport { logger } from './utils/logger';\r\nimport './styles/VHealthSearch.css';\r\nimport './index.css';\r\nimport VHealthApp from './vHealthApp';\r\nimport { API_CONFIG, getApiEndpoint } from './config/apiConfig';\r\n\r\nconst API_BASE_URL = API_CONFIG.BASE_URL.replace(/\\/api$/, ''); // Remove /api suffix\r\n\r\nexport const searchFoodDatabase = async (query: string) => {\r\n  try {\r\n    console.log('Calling food database API for:', query);\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Food API response:', data);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Food database API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const foodAPI = {\r\n  searchFood: searchFoodDatabase\r\n};\r\n\r\n// Export news API for use in other components\r\nexport const newsAPI = {\r\n  fetchNewsFeed,\r\n  refreshNewsFeed,\r\n  searchNewsArticles\r\n};\r\n\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const isHealthNews = searchParams.get('type') === 'health_news';\r\n  const category = searchParams.get('category') || 'all';\r\n  \r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Track if this is initial load to prevent loading spinner on browser navigation\r\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\r\n  \r\n  // Add ref to prevent duplicate API calls\r\n  const lastProcessedQuery = useRef<string>('');\r\n  const isProcessing = useRef<boolean>(false);\r\n  \r\n  // Detect browser navigation type\r\n  const isBrowserNavigation = () => {\r\n    const navigation = (window as any).performance?.getEntriesByType?.('navigation')?.[0];\r\n    return navigation?.type === 'back_forward';\r\n  };\r\n\r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query && !isHealthNews) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Create cache key based on type\r\n      const cacheKey = isHealthNews ? `health_news_${category}` : query;\r\n      \r\n      // Prevent duplicate processing\r\n      if (isProcessing.current || lastProcessedQuery.current === cacheKey) {\r\n        console.log('Skipping duplicate query:', cacheKey);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Processing new query:\", cacheKey);\r\n      lastProcessedQuery.current = cacheKey;\r\n      isProcessing.current = true;\r\n      \r\n      console.log(\"Is health news:\", isHealthNews);\r\n      console.log(\"Is browser navigation:\", isBrowserNavigation());\r\n      \r\n      // Always check cache first - especially for browser navigation\r\n      const cachedResult = searchCache.getCachedResult(cacheKey);\r\n      if (cachedResult) {\r\n        console.log('Using cached results for:', cacheKey);\r\n        setResults(cachedResult);\r\n        setDataSource('local');\r\n        setIsLoading(false);\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n        setIsInitialLoad(false);\r\n        isProcessing.current = false; // Reset processing flag\r\n        return; // Exit early - no API calls needed\r\n      }\r\n      \r\n      // If this is browser navigation and no cache, redirect to search page\r\n      if (isBrowserNavigation() || !isInitialLoad) {\r\n        console.log('Browser navigation detected with no cache - redirecting to search');\r\n        isProcessing.current = false; // Reset processing flag\r\n        navigate('/');\r\n        return;\r\n      }\r\n      \r\n      // Only show loading for genuine new searches (not browser navigation)\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        // Use WiHy Unified API for all types of searches\r\n        console.log('Using WiHy Unified API for query:', query || `health news - ${category}`);\r\n        \r\n        let wihyResult: any;\r\n        \r\n        if (isHealthNews) {\r\n          // Handle health news requests\r\n          console.log('Fetching health news via WiHy API...');\r\n          const categories = category === 'all' ? [] : [category];\r\n          wihyResult = await wihyAPI.getHealthNews(categories, 6);\r\n        } else {\r\n          // Handle regular search queries (health, nutrition, etc.)\r\n          console.log('Making WiHy API call for query:', query);\r\n          wihyResult = await wihyAPI.searchHealth(query);\r\n        }\r\n        \r\n        console.log(\"WiHy API result received:\", wihyResult);\r\n        \r\n        if (wihyResult.success) {\r\n          const formattedResult = wihyAPI.formatWihyResponse(wihyResult);\r\n          setResults(formattedResult);\r\n          setDataSource(\"wihy\");\r\n          \r\n          // Cache the WiHy results\r\n          searchCache.setCachedResult(cacheKey, formattedResult, window.location.href);\r\n          \r\n          setCitations(wihyAPI.extractCitations(wihyResult));\r\n          setRecommendations(wihyAPI.extractRecommendations(wihyResult));\r\n          \r\n          if (isHealthNews) {\r\n            setDisclaimer('Health news provided by WiHy AI. Always consult healthcare professionals for medical advice.');\r\n          } else {\r\n            setDisclaimer('This guidance is based on evidence-based health principles. Always consult healthcare professionals for personalized medical advice.');\r\n          }\r\n        } else {\r\n          // Fallback: If WiHy fails, try legacy APIs\r\n          console.log('WiHy API failed, trying fallback methods...');\r\n          await handleFallbackAPIs();\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error(\"WiHy API error:\", error);\r\n        // Try fallback APIs if WiHy fails\r\n        try {\r\n          await handleFallbackAPIs();\r\n        } catch (fallbackError) {\r\n          console.error(\"All APIs failed:\", fallbackError);\r\n          const errorMessage = \"Sorry, there was an error processing your request.\";\r\n          setResults(errorMessage);\r\n          setDataSource(\"error\");\r\n          \r\n          setCitations([]);\r\n          setRecommendations([]);\r\n          setDisclaimer('');\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n        setIsInitialLoad(false);\r\n        isProcessing.current = false; // Always reset processing flag\r\n      }\r\n    };\r\n\r\n    // Fallback function for legacy APIs\r\n    const handleFallbackAPIs = async () => {\r\n      if (isHealthNews) {\r\n        console.log('Fallback: Fetching health news via newsService...');\r\n        const healthNewsResult = await fetchNewsFeed([category], 6);\r\n        \r\n        if (healthNewsResult.success && healthNewsResult.articles) {\r\n          console.log('Health news fetched successfully');\r\n          \r\n          // Format the news articles for display\r\n          const formattedNews = formatNewsArticles(healthNewsResult.articles);\r\n          \r\n          setResults(formattedNews);\r\n          setDataSource('openai'); // Use openai as the display source\r\n          \r\n          // Cache the health news results\r\n          const newsKey = `health_news_${category}`;\r\n          searchCache.setCachedResult(newsKey, formattedNews, window.location.href);\r\n          \r\n          setDisclaimer('Health news provided by AI. Always consult healthcare professionals for medical advice.');\r\n        } else {\r\n          throw new Error(healthNewsResult.message || 'Failed to fetch health news');\r\n        }\r\n      } else {\r\n        // Try nutrition database for food-related queries\r\n        try {\r\n          console.log('Fallback: Trying nutrition database...');\r\n          console.log('API URL:', `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          if (nutritionResponse.ok) {\r\n            const nutritionData = await nutritionResponse.json();\r\n            console.log('Nutrition API response:', nutritionData);\r\n            \r\n            if (nutritionData && nutritionData.found === true) {\r\n              console.log('Found nutrition data - using vnutrition source');\r\n              const resultString = JSON.stringify(nutritionData);\r\n              setResults(resultString);\r\n              setDataSource('vnutrition');\r\n              \r\n              // Cache the nutrition results\r\n              searchCache.setCachedResult(query, resultString, window.location.href);\r\n              return;\r\n            }\r\n          }\r\n        } catch (nutritionError) {\r\n          console.log('Nutrition API also failed:', nutritionError);\r\n        }\r\n        \r\n        throw new Error('All fallback APIs failed');\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query, isHealthNews, category]); // Removed 'navigate' from dependencies\r\n\r\n  // Function to format news articles for display\r\n  const formatNewsArticles = (articles: any[]): string => {\r\n    let formatted = '# Latest Health News\\n\\n';\r\n    \r\n    articles.forEach((article, index) => {\r\n      formatted += `## ${article.title}\\n\\n`;\r\n      formatted += `**Source:** ${article.source} (${article.domain})\\n`;\r\n      formatted += `**Category:** ${article.category}\\n`;\r\n      formatted += `**Published:** ${new Date(article.publishedDate).toLocaleDateString()}\\n`;\r\n      formatted += `**Relevance:** ${Math.round(article.relevanceScore * 100)}%\\n\\n`;\r\n      formatted += `${article.summary}\\n\\n`;\r\n      \r\n      if (article.tags && article.tags.length > 0) {\r\n        formatted += `**Tags:** ${article.tags.join(', ')}\\n\\n`;\r\n      }\r\n      \r\n      formatted += `[Read Full Article](${article.url})\\n\\n`;\r\n      formatted += '---\\n\\n';\r\n    });\r\n    \r\n    return formatted;\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    if (newQuery !== query) {\r\n      // Reset the initial load flag for new searches\r\n      setIsInitialLoad(true);\r\n      navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={isHealthNews ? 'Latest Health News' : query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details?: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}