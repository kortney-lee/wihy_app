{"ast":null,"code":"/**\r\n * Chat Service - Dedicated service for ChatWidget functionality\r\n * Connects to http://localhost:8000 chat endpoints\r\n */\n\nconst CHAT_API_BASE = 'http://localhost:8000/api/chat';\nclass ChatService {\n  constructor() {\n    this.currentSessionId = null;\n    this.userId = 'chat-widget-user';\n  }\n  // Default user ID for widget\n\n  /**\r\n   * Initialize or get current chat session\r\n   */\n  async initializeSession(sessionName, context) {\n    try {\n      console.log('üîç CHAT SERVICE: Initializing session:', {\n        sessionName,\n        context,\n        currentSessionId: this.currentSessionId\n      });\n\n      // If we already have a session, return it\n      if (this.currentSessionId) {\n        return this.currentSessionId;\n      }\n      const request = {\n        user_id: this.userId,\n        session_name: sessionName || `Chat Session ${new Date().toLocaleDateString()}`,\n        context: {\n          widget_type: 'health_chat',\n          created_from: 'ChatWidget',\n          ...context\n        }\n      };\n      const response = await fetch(`${CHAT_API_BASE}/start-session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to start session: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('üîç CHAT SERVICE: Session response:', data);\n      if (data.success && data.session_id) {\n        this.currentSessionId = data.session_id;\n        return data.session_id;\n      } else {\n        console.error('Failed to create chat session:', data.error || data.message);\n        return null;\n      }\n    } catch (error) {\n      console.error('Chat service session initialization error:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Send a message in the current chat session\r\n   */\n  async sendMessage(message, messageType = 'health_chat', useCustomModel = false) {\n    try {\n      var _data$response;\n      // Ensure we have a session\n      if (!this.currentSessionId) {\n        const sessionId = await this.initializeSession();\n        if (!sessionId) {\n          throw new Error('Failed to initialize chat session');\n        }\n      }\n      console.log('üîç CHAT SERVICE: Sending message:', {\n        sessionId: this.currentSessionId,\n        message: message.substring(0, 100) + '...',\n        messageType,\n        useCustomModel\n      });\n      const request = {\n        session_id: this.currentSessionId,\n        message: message,\n        message_type: messageType,\n        use_custom_model: useCustomModel\n      };\n      const response = await fetch(`${CHAT_API_BASE}/send-message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to send message: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('üîç CHAT SERVICE: Message response:', {\n        success: data.success,\n        messageId: data.message_id,\n        modelUsed: data.model_used,\n        confidenceScore: data.confidence_score,\n        responseTime: data.response_time_ms,\n        responsePreview: ((_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.substring(0, 100)) + '...'\n      });\n      return data;\n    } catch (error) {\n      console.error('Chat service send message error:', error);\n      return {\n        success: false,\n        message: 'Failed to send message',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\r\n   * Get chat history for current session\r\n   */\n  async getChatHistory(limit = 50) {\n    try {\n      if (!this.currentSessionId) {\n        console.warn('No active chat session for history retrieval');\n        return null;\n      }\n      const response = await fetch(`${CHAT_API_BASE}/session/${this.currentSessionId}/history?limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to get chat history: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('üîç CHAT SERVICE: Chat history retrieved:', {\n        sessionId: data.session_id,\n        totalMessages: data.total_messages,\n        messagesCount: data.messages.length\n      });\n      return data;\n    } catch (error) {\n      console.error('Chat service get history error:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Start a new session (clear current session)\r\n   */\n  async startNewSession(sessionName, context) {\n    this.currentSessionId = null;\n    return await this.initializeSession(sessionName, context);\n  }\n\n  /**\r\n   * Get current session ID\r\n   */\n  getCurrentSessionId() {\n    return this.currentSessionId;\n  }\n\n  /**\r\n   * Check if chat service is available\r\n   */\n  async healthCheck() {\n    try {\n      const response = await fetch(`${CHAT_API_BASE}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Chat service health check failed:', error);\n      return false;\n    }\n  }\n\n  /**\r\n   * Set custom user ID for the chat session\r\n   */\n  setUserId(userId) {\n    this.userId = userId;\n    // Clear current session when user changes\n    this.currentSessionId = null;\n  }\n}\n\n// Create and export singleton instance\nexport const chatService = new ChatService();\n\n// Export for type usage\nexport default chatService;","map":{"version":3,"names":["CHAT_API_BASE","ChatService","constructor","currentSessionId","userId","initializeSession","sessionName","context","console","log","request","user_id","session_name","Date","toLocaleDateString","widget_type","created_from","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","data","json","success","session_id","error","message","sendMessage","messageType","useCustomModel","_data$response","sessionId","substring","message_type","use_custom_model","messageId","message_id","modelUsed","model_used","confidenceScore","confidence_score","responseTime","response_time_ms","responsePreview","getChatHistory","limit","warn","totalMessages","total_messages","messagesCount","messages","length","startNewSession","getCurrentSessionId","healthCheck","setUserId","chatService"],"sources":["C:/repo/wihy_ui/client/src/services/chatService.ts"],"sourcesContent":["/**\r\n * Chat Service - Dedicated service for ChatWidget functionality\r\n * Connects to http://localhost:8000 chat endpoints\r\n */\r\n\r\nconst CHAT_API_BASE = 'http://localhost:8000/api/chat';\r\n\r\nexport interface ChatSession {\r\n  session_id: string;\r\n  session_name?: string;\r\n  created_at: string;\r\n  user_id: string;\r\n}\r\n\r\nexport interface ChatMessage {\r\n  message_id: string;\r\n  session_id: string;\r\n  message: string;\r\n  response: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  timestamp: string;\r\n  message_type?: string;\r\n}\r\n\r\nexport interface ChatSessionRequest {\r\n  user_id: string;\r\n  session_name?: string;\r\n  context?: Record<string, any>;\r\n}\r\n\r\nexport interface ChatMessageRequest {\r\n  session_id: string;\r\n  message: string;\r\n  message_type?: string;\r\n  use_custom_model?: boolean;\r\n}\r\n\r\nexport interface ChatSessionResponse {\r\n  success: boolean;\r\n  session_id?: string;\r\n  session_name?: string;\r\n  created_at?: string;\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ChatMessageResponse {\r\n  success: boolean;\r\n  message_id?: string;\r\n  response?: string;\r\n  model_used?: string;\r\n  confidence_score?: number;\r\n  response_time_ms?: number;\r\n  citations?: string[];\r\n  message: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ChatHistoryResponse {\r\n  success: boolean;\r\n  session_id: string;\r\n  messages: Array<Record<string, any>>;\r\n  total_messages: number;\r\n  error?: string;\r\n}\r\n\r\nclass ChatService {\r\n  private currentSessionId: string | null = null;\r\n  private userId: string = 'chat-widget-user'; // Default user ID for widget\r\n\r\n  /**\r\n   * Initialize or get current chat session\r\n   */\r\n  async initializeSession(sessionName?: string, context?: Record<string, any>): Promise<string | null> {\r\n    try {\r\n      console.log('üîç CHAT SERVICE: Initializing session:', {\r\n        sessionName,\r\n        context,\r\n        currentSessionId: this.currentSessionId\r\n      });\r\n\r\n      // If we already have a session, return it\r\n      if (this.currentSessionId) {\r\n        return this.currentSessionId;\r\n      }\r\n\r\n      const request: ChatSessionRequest = {\r\n        user_id: this.userId,\r\n        session_name: sessionName || `Chat Session ${new Date().toLocaleDateString()}`,\r\n        context: {\r\n          widget_type: 'health_chat',\r\n          created_from: 'ChatWidget',\r\n          ...context\r\n        }\r\n      };\r\n\r\n      const response = await fetch(`${CHAT_API_BASE}/start-session`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to start session: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatSessionResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Session response:', data);\r\n\r\n      if (data.success && data.session_id) {\r\n        this.currentSessionId = data.session_id;\r\n        return data.session_id;\r\n      } else {\r\n        console.error('Failed to create chat session:', data.error || data.message);\r\n        return null;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Chat service session initialization error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message in the current chat session\r\n   */\r\n  async sendMessage(\r\n    message: string, \r\n    messageType: string = 'health_chat',\r\n    useCustomModel: boolean = false\r\n  ): Promise<ChatMessageResponse | null> {\r\n    try {\r\n      // Ensure we have a session\r\n      if (!this.currentSessionId) {\r\n        const sessionId = await this.initializeSession();\r\n        if (!sessionId) {\r\n          throw new Error('Failed to initialize chat session');\r\n        }\r\n      }\r\n\r\n      console.log('üîç CHAT SERVICE: Sending message:', {\r\n        sessionId: this.currentSessionId,\r\n        message: message.substring(0, 100) + '...',\r\n        messageType,\r\n        useCustomModel\r\n      });\r\n\r\n      const request: ChatMessageRequest = {\r\n        session_id: this.currentSessionId!,\r\n        message: message,\r\n        message_type: messageType,\r\n        use_custom_model: useCustomModel\r\n      };\r\n\r\n      const response = await fetch(`${CHAT_API_BASE}/send-message`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to send message: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatMessageResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Message response:', {\r\n        success: data.success,\r\n        messageId: data.message_id,\r\n        modelUsed: data.model_used,\r\n        confidenceScore: data.confidence_score,\r\n        responseTime: data.response_time_ms,\r\n        responsePreview: data.response?.substring(0, 100) + '...'\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Chat service send message error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to send message',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get chat history for current session\r\n   */\r\n  async getChatHistory(limit: number = 50): Promise<ChatHistoryResponse | null> {\r\n    try {\r\n      if (!this.currentSessionId) {\r\n        console.warn('No active chat session for history retrieval');\r\n        return null;\r\n      }\r\n\r\n      const response = await fetch(\r\n        `${CHAT_API_BASE}/session/${this.currentSessionId}/history?limit=${limit}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to get chat history: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data: ChatHistoryResponse = await response.json();\r\n\r\n      console.log('üîç CHAT SERVICE: Chat history retrieved:', {\r\n        sessionId: data.session_id,\r\n        totalMessages: data.total_messages,\r\n        messagesCount: data.messages.length\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Chat service get history error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a new session (clear current session)\r\n   */\r\n  async startNewSession(sessionName?: string, context?: Record<string, any>): Promise<string | null> {\r\n    this.currentSessionId = null;\r\n    return await this.initializeSession(sessionName, context);\r\n  }\r\n\r\n  /**\r\n   * Get current session ID\r\n   */\r\n  getCurrentSessionId(): string | null {\r\n    return this.currentSessionId;\r\n  }\r\n\r\n  /**\r\n   * Check if chat service is available\r\n   */\r\n  async healthCheck(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${CHAT_API_BASE}/health`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Chat service health check failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set custom user ID for the chat session\r\n   */\r\n  setUserId(userId: string): void {\r\n    this.userId = userId;\r\n    // Clear current session when user changes\r\n    this.currentSessionId = null;\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const chatService = new ChatService();\r\n\r\n// Export for type usage\r\nexport default chatService;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,aAAa,GAAG,gCAAgC;AA+DtD,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KACRC,gBAAgB,GAAkB,IAAI;IAAA,KACtCC,MAAM,GAAW,kBAAkB;EAAA;EAAE;;EAE7C;AACF;AACA;EACE,MAAMC,iBAAiBA,CAACC,WAAoB,EAAEC,OAA6B,EAA0B;IACnG,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE;QACpDH,WAAW;QACXC,OAAO;QACPJ,gBAAgB,EAAE,IAAI,CAACA;MACzB,CAAC,CAAC;;MAEF;MACA,IAAI,IAAI,CAACA,gBAAgB,EAAE;QACzB,OAAO,IAAI,CAACA,gBAAgB;MAC9B;MAEA,MAAMO,OAA2B,GAAG;QAClCC,OAAO,EAAE,IAAI,CAACP,MAAM;QACpBQ,YAAY,EAAEN,WAAW,IAAI,gBAAgB,IAAIO,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAE;QAC9EP,OAAO,EAAE;UACPQ,WAAW,EAAE,aAAa;UAC1BC,YAAY,EAAE,YAAY;UAC1B,GAAGT;QACL;MACF,CAAC;MAED,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,aAAa,gBAAgB,EAAE;QAC7DmB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,OAAO;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4BR,QAAQ,CAACS,MAAM,IAAIT,QAAQ,CAACU,UAAU,EAAE,CAAC;MACvF;MAEA,MAAMC,IAAyB,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAEvDrB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEmB,IAAI,CAAC;MAEvD,IAAIA,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACG,UAAU,EAAE;QACnC,IAAI,CAAC5B,gBAAgB,GAAGyB,IAAI,CAACG,UAAU;QACvC,OAAOH,IAAI,CAACG,UAAU;MACxB,CAAC,MAAM;QACLvB,OAAO,CAACwB,KAAK,CAAC,gCAAgC,EAAEJ,IAAI,CAACI,KAAK,IAAIJ,IAAI,CAACK,OAAO,CAAC;QAC3E,OAAO,IAAI;MACb;IAEF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;EACE,MAAME,WAAWA,CACfD,OAAe,EACfE,WAAmB,GAAG,aAAa,EACnCC,cAAuB,GAAG,KAAK,EACM;IACrC,IAAI;MAAA,IAAAC,cAAA;MACF;MACA,IAAI,CAAC,IAAI,CAAClC,gBAAgB,EAAE;QAC1B,MAAMmC,SAAS,GAAG,MAAM,IAAI,CAACjC,iBAAiB,CAAC,CAAC;QAChD,IAAI,CAACiC,SAAS,EAAE;UACd,MAAM,IAAIb,KAAK,CAAC,mCAAmC,CAAC;QACtD;MACF;MAEAjB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE;QAC/C6B,SAAS,EAAE,IAAI,CAACnC,gBAAgB;QAChC8B,OAAO,EAAEA,OAAO,CAACM,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;QAC1CJ,WAAW;QACXC;MACF,CAAC,CAAC;MAEF,MAAM1B,OAA2B,GAAG;QAClCqB,UAAU,EAAE,IAAI,CAAC5B,gBAAiB;QAClC8B,OAAO,EAAEA,OAAO;QAChBO,YAAY,EAAEL,WAAW;QACzBM,gBAAgB,EAAEL;MACpB,CAAC;MAED,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,aAAa,eAAe,EAAE;QAC5DmB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,OAAO;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BR,QAAQ,CAACS,MAAM,IAAIT,QAAQ,CAACU,UAAU,EAAE,CAAC;MACtF;MAEA,MAAMC,IAAyB,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAEvDrB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE;QAChDqB,OAAO,EAAEF,IAAI,CAACE,OAAO;QACrBY,SAAS,EAAEd,IAAI,CAACe,UAAU;QAC1BC,SAAS,EAAEhB,IAAI,CAACiB,UAAU;QAC1BC,eAAe,EAAElB,IAAI,CAACmB,gBAAgB;QACtCC,YAAY,EAAEpB,IAAI,CAACqB,gBAAgB;QACnCC,eAAe,EAAE,EAAAb,cAAA,GAAAT,IAAI,CAACX,QAAQ,cAAAoB,cAAA,uBAAbA,cAAA,CAAeE,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,IAAG;MACtD,CAAC,CAAC;MAEF,OAAOX,IAAI;IAEb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO;QACLF,OAAO,EAAE,KAAK;QACdG,OAAO,EAAE,wBAAwB;QACjCD,KAAK,EAAEA,KAAK,YAAYP,KAAK,GAAGO,KAAK,CAACC,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,MAAMkB,cAAcA,CAACC,KAAa,GAAG,EAAE,EAAuC;IAC5E,IAAI;MACF,IAAI,CAAC,IAAI,CAACjD,gBAAgB,EAAE;QAC1BK,OAAO,CAAC6C,IAAI,CAAC,8CAA8C,CAAC;QAC5D,OAAO,IAAI;MACb;MAEA,MAAMpC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGlB,aAAa,YAAY,IAAI,CAACG,gBAAgB,kBAAkBiD,KAAK,EAAE,EAC1E;QACEjC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,IAAI,CAACH,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+BR,QAAQ,CAACS,MAAM,IAAIT,QAAQ,CAACU,UAAU,EAAE,CAAC;MAC1F;MAEA,MAAMC,IAAyB,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAEvDrB,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE;QACtD6B,SAAS,EAAEV,IAAI,CAACG,UAAU;QAC1BuB,aAAa,EAAE1B,IAAI,CAAC2B,cAAc;QAClCC,aAAa,EAAE5B,IAAI,CAAC6B,QAAQ,CAACC;MAC/B,CAAC,CAAC;MAEF,OAAO9B,IAAI;IAEb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;EACE,MAAM2B,eAAeA,CAACrD,WAAoB,EAAEC,OAA6B,EAA0B;IACjG,IAAI,CAACJ,gBAAgB,GAAG,IAAI;IAC5B,OAAO,MAAM,IAAI,CAACE,iBAAiB,CAACC,WAAW,EAAEC,OAAO,CAAC;EAC3D;;EAEA;AACF;AACA;EACEqD,mBAAmBA,CAAA,EAAkB;IACnC,OAAO,IAAI,CAACzD,gBAAgB;EAC9B;;EAEA;AACF;AACA;EACE,MAAM0D,WAAWA,CAAA,EAAqB;IACpC,IAAI;MACF,MAAM5C,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,aAAa,SAAS,EAAE;QACtDmB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,OAAOH,QAAQ,CAACO,EAAE;IACpB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;EACE8B,SAASA,CAAC1D,MAAc,EAAQ;IAC9B,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB;IACA,IAAI,CAACD,gBAAgB,GAAG,IAAI;EAC9B;AACF;;AAEA;AACA,OAAO,MAAM4D,WAAW,GAAG,IAAI9D,WAAW,CAAC,CAAC;;AAE5C;AACA,eAAe8D,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}