{"ast":null,"code":"// vHealth News API v2.0 Client Integration\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\n\n// API Configuration\nconst API_BASE_URL = {\n  production: 'https://services.wihy.ai',\n  development: 'http://localhost:5001'\n};\nclass VHealthNewsClient {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    // Use production by default\n    this.baseUrl = baseUrl || API_BASE_URL.production;\n  }\n  async getArticles(params = {}) {\n    const queryParams = new URLSearchParams();\n    if (params.limit) queryParams.append('limit', params.limit.toString());\n    if (params.category) queryParams.append('category', params.category);\n    if (params.source) queryParams.append('source', params.source);\n    if (params.useAI !== undefined) queryParams.append('useAI', params.useAI.toString());\n    const response = await fetch(`${this.baseUrl}/api/news/articles?${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Ensure we have the correct structure and add legacy compatibility fields to articles\n    const articles = data.articles || [];\n    data.articles = articles.map(article => ({\n      ...article,\n      // Legacy compatibility fields\n      publishedDate: article.published_at,\n      pubDate: article.published_at,\n      category: article.ai_category,\n      summary: article.description,\n      tags: [article.ai_category, article.source],\n      media_url: article.image_url,\n      media_thumb_url: article.image_url,\n      relevanceScore: article.quality_score / 10,\n      // Convert 1-10 scale to 0-1 scale\n      link: article.url\n    }));\n\n    // Ensure we always return a valid response structure\n    return {\n      success: data.success !== false,\n      articles: data.articles,\n      count: data.count || data.articles.length,\n      sources_used: data.sources_used || [],\n      pagination: data.pagination || {\n        total_items: data.articles.length,\n        current_page: 1,\n        per_page: data.articles.length,\n        has_next_page: false\n      },\n      filters_applied: data.filters_applied || {\n        category: params.category || null,\n        source: params.source || 'all',\n        limit: params.limit || 20,\n        ai_categorization: params.useAI !== false\n      },\n      timestamp: data.timestamp || new Date().toISOString()\n    };\n  }\n  async getCategories() {\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async getStats() {\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async healthCheck() {\n    const response = await fetch(`${this.baseUrl}/api/health`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n  async testSource(source, limit = 5) {\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`vHealth News API error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n}\n\n// Initialize the client\nconst newsClient = new VHealthNewsClient();\n\n// Main functions for legacy compatibility\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    const category = categories && categories.length > 0 ? categories[0] : undefined;\n    const response = await newsClient.getArticles({\n      category,\n      limit: limit || 20,\n      source: 'all',\n      useAI: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error:', error);\n\n    // Fallback to sample data if API fails\n    return {\n      success: false,\n      articles: [{\n        id: 'error-1',\n        title: 'vHealth News Service Temporarily Unavailable',\n        description: 'We are currently experiencing technical difficulties with our news service. Please try again later.',\n        content: 'Technical difficulties encountered',\n        url: '#',\n        image_url: null,\n        source: 'vHealth System',\n        author: null,\n        published_at: new Date().toISOString(),\n        publishedDate: new Date().toISOString(),\n        api_source: 'NewsAPI',\n        ai_category: 'System Notice',\n        category: 'system',\n        time_ago: 'Just now',\n        is_recent: true,\n        has_image: false,\n        has_author: false,\n        reading_time: 1,\n        quality_score: 0,\n        tags: ['system', 'notice']\n      }]\n    };\n  }\n};\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    var _response$articles, _response$articles2, _response$articles2$, _response$articles3, _response$articles3$;\n    console.log('getArticlesByCategory called with:', {\n      category,\n      limit\n    });\n    const response = await newsClient.getArticles({\n      category,\n      limit: limit || 20,\n      source: 'all',\n      useAI: true\n    });\n    console.log('getArticlesByCategory API response:', response);\n    console.log('Articles received:', (_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.length, 'articles');\n    console.log('First article category:', ((_response$articles2 = response.articles) === null || _response$articles2 === void 0 ? void 0 : (_response$articles2$ = _response$articles2[0]) === null || _response$articles2$ === void 0 ? void 0 : _response$articles2$.ai_category) || ((_response$articles3 = response.articles) === null || _response$articles3 === void 0 ? void 0 : (_response$articles3$ = _response$articles3[0]) === null || _response$articles3$ === void 0 ? void 0 : _response$articles3$.category));\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (category):', error);\n    return await fetchNewsFeed([category], limit);\n  }\n};\nexport const refreshNewsFeed = async () => {\n  // Refresh news feed with latest articles\n  return await fetchNewsFeed(undefined, 50);\n};\nexport const searchNewsArticles = async (query, limit) => {\n  try {\n    // Search by using the query as a category filter for now\n    // In future versions, the API might support full-text search\n    const response = await newsClient.getArticles({\n      category: query,\n      limit: limit || 20,\n      source: 'all',\n      useAI: true\n    });\n    return {\n      success: response.success,\n      articles: response.articles\n    };\n  } catch (error) {\n    console.error('vHealth News API error (search):', error);\n    return await fetchNewsFeed(undefined, limit);\n  }\n};\n\n// Additional utility functions for enhanced functionality\nexport const getNewsCategories = async () => {\n  try {\n    const response = await newsClient.getCategories();\n    return response.success ? response.categories : [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    // Return default categories matching HealthNewsFeed component\n    return [{\n      category: 'Nutrition',\n      description: 'Diet, supplements, and nutritional research'\n    }, {\n      category: 'Medical Research',\n      description: 'Latest medical studies and breakthroughs'\n    }, {\n      category: 'Public Health',\n      description: 'Community health and disease prevention'\n    }, {\n      category: 'Clinical Studies',\n      description: 'Clinical trials and medical research'\n    }, {\n      category: 'Prevention',\n      description: 'Preventive medicine and wellness'\n    }, {\n      category: 'Mental Health',\n      description: 'Mental wellness and psychological health'\n    }, {\n      category: 'General Health',\n      description: 'General health news and information'\n    }, {\n      category: 'Environment',\n      description: 'Environmental health and safety'\n    }];\n  }\n};\nexport const getNewsStats = async () => {\n  try {\n    return await newsClient.getStats();\n  } catch (error) {\n    console.error('Error fetching news stats:', error);\n    return {\n      error: 'Stats unavailable'\n    };\n  }\n};\nexport const checkNewsServiceHealth = async () => {\n  try {\n    const health = await newsClient.healthCheck();\n    return health.status === 'healthy';\n  } catch (error) {\n    console.error('News service health check failed:', error);\n    return false;\n  }\n};\n\n// Export the client for advanced usage\nexport { VHealthNewsClient, newsClient };","map":{"version":3,"names":["API_BASE_URL","production","development","VHealthNewsClient","constructor","baseUrl","getArticles","params","queryParams","URLSearchParams","limit","append","toString","category","source","useAI","undefined","response","fetch","method","headers","ok","Error","status","data","json","articles","map","article","publishedDate","published_at","pubDate","ai_category","summary","description","tags","media_url","image_url","media_thumb_url","relevanceScore","quality_score","link","url","success","count","length","sources_used","pagination","total_items","current_page","per_page","has_next_page","filters_applied","ai_categorization","timestamp","Date","toISOString","getCategories","getStats","healthCheck","testSource","newsClient","fetchNewsFeed","categories","error","console","id","title","content","author","api_source","time_ago","is_recent","has_image","has_author","reading_time","getArticlesByCategory","_response$articles","_response$articles2","_response$articles2$","_response$articles3","_response$articles3$","log","refreshNewsFeed","searchNewsArticles","query","getNewsCategories","getNewsStats","checkNewsServiceHealth","health"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// vHealth News API v2.0 Client Integration\r\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content: string;\r\n  url: string;\r\n  link?: string; // Alternative URL field for legacy compatibility\r\n  image_url: string | null;\r\n  source: string;\r\n  author: string | null;\r\n  published_at: string;\r\n  publishedDate?: string; // Alternative date field for legacy compatibility\r\n  pubDate?: string; // Alternative date field for legacy compatibility\r\n  api_source: 'NewsAPI' | 'GNews' | 'NewsData' | 'MediaStack';\r\n  ai_category: string;\r\n  category?: string; // Legacy compatibility\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  has_image: boolean;\r\n  has_author: boolean;\r\n  reading_time: number;\r\n  quality_score: number;\r\n  tags: string[]; // Legacy compatibility\r\n  summary?: string; // Legacy compatibility\r\n  media_url?: string; // Legacy compatibility\r\n  media_thumb_url?: string; // Legacy compatibility\r\n  relevanceScore?: number; // Legacy compatibility\r\n}\r\n\r\nexport interface ArticlesResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  sources_used: string[];\r\n  pagination: {\r\n    total_items: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    source: string;\r\n    limit: number;\r\n    ai_categorization: boolean;\r\n  };\r\n  timestamp: string;\r\n}\r\n\r\nexport interface Category {\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n// API Configuration\r\nconst API_BASE_URL = {\r\n  production: 'https://services.wihy.ai',\r\n  development: 'http://localhost:5001'\r\n};\r\n\r\nclass VHealthNewsClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl?: string) {\r\n    // Use production by default\r\n    this.baseUrl = baseUrl || API_BASE_URL.production;\r\n  }\r\n\r\n  async getArticles(params: {\r\n    limit?: number;\r\n    category?: string;\r\n    source?: 'all' | 'newsapi' | 'gnews' | 'newsdata' | 'mediastack';\r\n    useAI?: boolean;\r\n  } = {}): Promise<ArticlesResponse> {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params.category) queryParams.append('category', params.category);\r\n    if (params.source) queryParams.append('source', params.source);\r\n    if (params.useAI !== undefined) queryParams.append('useAI', params.useAI.toString());\r\n\r\n    const response = await fetch(`${this.baseUrl}/api/news/articles?${queryParams}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data: ArticlesResponse = await response.json();\r\n    \r\n    // Ensure we have the correct structure and add legacy compatibility fields to articles\r\n    const articles = data.articles || [];\r\n    data.articles = articles.map(article => ({\r\n      ...article,\r\n      // Legacy compatibility fields\r\n      publishedDate: article.published_at,\r\n      pubDate: article.published_at,\r\n      category: article.ai_category,\r\n      summary: article.description,\r\n      tags: [article.ai_category, article.source],\r\n      media_url: article.image_url,\r\n      media_thumb_url: article.image_url,\r\n      relevanceScore: article.quality_score / 10, // Convert 1-10 scale to 0-1 scale\r\n      link: article.url\r\n    }));\r\n    \r\n    // Ensure we always return a valid response structure\r\n    return {\r\n      success: data.success !== false,\r\n      articles: data.articles,\r\n      count: data.count || data.articles.length,\r\n      sources_used: data.sources_used || [],\r\n      pagination: data.pagination || {\r\n        total_items: data.articles.length,\r\n        current_page: 1,\r\n        per_page: data.articles.length,\r\n        has_next_page: false\r\n      },\r\n      filters_applied: data.filters_applied || {\r\n        category: params.category || null,\r\n        source: params.source || 'all',\r\n        limit: params.limit || 20,\r\n        ai_categorization: params.useAI !== false\r\n      },\r\n      timestamp: data.timestamp || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  async getCategories(): Promise<{ success: boolean; categories: Category[] }> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getStats(): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    const response = await fetch(`${this.baseUrl}/api/health`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async testSource(source: 'newsapi' | 'gnews' | 'newsdata' | 'mediastack', limit: number = 5): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Initialize the client\r\nconst newsClient = new VHealthNewsClient();\r\n\r\n// Main functions for legacy compatibility\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    const category = categories && categories.length > 0 ? categories[0] : undefined;\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 20,\r\n      source: 'all',\r\n      useAI: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error:', error);\r\n    \r\n    // Fallback to sample data if API fails\r\n    return {\r\n      success: false,\r\n      articles: [{\r\n        id: 'error-1',\r\n        title: 'vHealth News Service Temporarily Unavailable',\r\n        description: 'We are currently experiencing technical difficulties with our news service. Please try again later.',\r\n        content: 'Technical difficulties encountered',\r\n        url: '#',\r\n        image_url: null,\r\n        source: 'vHealth System',\r\n        author: null,\r\n        published_at: new Date().toISOString(),\r\n        publishedDate: new Date().toISOString(),\r\n        api_source: 'NewsAPI',\r\n        ai_category: 'System Notice',\r\n        category: 'system',\r\n        time_ago: 'Just now',\r\n        is_recent: true,\r\n        has_image: false,\r\n        has_author: false,\r\n        reading_time: 1,\r\n        quality_score: 0,\r\n        tags: ['system', 'notice']\r\n      }]\r\n    };\r\n  }\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    console.log('getArticlesByCategory called with:', { category, limit });\r\n    \r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 20,\r\n      source: 'all',\r\n      useAI: true\r\n    });\r\n    \r\n    console.log('getArticlesByCategory API response:', response);\r\n    console.log('Articles received:', response.articles?.length, 'articles');\r\n    console.log('First article category:', response.articles?.[0]?.ai_category || response.articles?.[0]?.category);\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (category):', error);\r\n    return await fetchNewsFeed([category], limit);\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Refresh news feed with latest articles\r\n  return await fetchNewsFeed(undefined, 50);\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Search by using the query as a category filter for now\r\n    // In future versions, the API might support full-text search\r\n    const response = await newsClient.getArticles({\r\n      category: query,\r\n      limit: limit || 20,\r\n      source: 'all',\r\n      useAI: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (search):', error);\r\n    return await fetchNewsFeed(undefined, limit);\r\n  }\r\n};\r\n\r\n// Additional utility functions for enhanced functionality\r\nexport const getNewsCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    const response = await newsClient.getCategories();\r\n    return response.success ? response.categories : [];\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return default categories matching HealthNewsFeed component\r\n    return [\r\n      { category: 'Nutrition', description: 'Diet, supplements, and nutritional research' },\r\n      { category: 'Medical Research', description: 'Latest medical studies and breakthroughs' },\r\n      { category: 'Public Health', description: 'Community health and disease prevention' },\r\n      { category: 'Clinical Studies', description: 'Clinical trials and medical research' },\r\n      { category: 'Prevention', description: 'Preventive medicine and wellness' },\r\n      { category: 'Mental Health', description: 'Mental wellness and psychological health' },\r\n      { category: 'General Health', description: 'General health news and information' },\r\n      { category: 'Environment', description: 'Environmental health and safety' }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getNewsStats = async (): Promise<any> => {\r\n  try {\r\n    return await newsClient.getStats();\r\n  } catch (error) {\r\n    console.error('Error fetching news stats:', error);\r\n    return { error: 'Stats unavailable' };\r\n  }\r\n};\r\n\r\nexport const checkNewsServiceHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const health = await newsClient.healthCheck();\r\n    return health.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('News service health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export the client for advanced usage\r\nexport { VHealthNewsClient, newsClient };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}