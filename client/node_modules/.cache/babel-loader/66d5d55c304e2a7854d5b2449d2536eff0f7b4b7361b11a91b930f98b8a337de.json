{"ast":null,"code":"import React from'react';import{Chart as ChartJS,ArcElement,Tooltip,Legend}from'chart.js';import{Doughnut}from'react-chartjs-2';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(ArcElement,Tooltip,Legend);// Extract nova/processing data from unified API response\nconst extractNovaData=apiResponse=>{console.log('=== EXTRACTING NOVA DATA FROM NEW API ===');console.log('API Response:',apiResponse);// Handle unified API response\nif(apiResponse&&apiResponse.success&&apiResponse.data){var _apiResponse$data$cha;console.log('Processing unified API nova data');// Use charts_data if available for direct rendering\nif((_apiResponse$data$cha=apiResponse.data.charts_data)!==null&&_apiResponse$data$cha!==void 0&&_apiResponse$data$cha.nova_chart){const chartData=apiResponse.data.charts_data.nova_chart;console.log('Using charts_data for nova chart:',chartData);return{type:'chart_data',novaScore:chartData.nova_score,processedLevel:chartData.description,chart_type:chartData.chart_type};}// Use nutrition_data from the API response\nif(apiResponse.data.nutrition_data){const nutrition=apiResponse.data.nutrition_data;const extractedData={type:'nutrition_facts',novaScore:nutrition.nova_score||1,processedLevel:nutrition.processing_level||'Unknown'};console.log('=== EXTRACTED NOVA DATA FROM NEW API ===');console.log('Final extracted data:',extractedData);return extractedData;}}console.log('No nova data available in API response');return null;};const NovaChart=_ref=>{let{apiResponse,query}=_ref;// Extract nova data using new unified approach\nconst novaData=extractNovaData(apiResponse);// Only render if we have nova data\nif(!novaData){return null;}const{novaScore,processedLevel}=novaData;// NOVA classification colors\nconst novaColors={1:'#10B981',// Green - Good\n2:'#F59E0B',// Yellow - Okay\n3:'#F97316',// Orange - Caution\n4:'#EF4444'// Red - Avoid\n};// Create data for the current NOVA score (100% fill)\nconst data={datasets:[{data:[100,0],// 100% for the current score, 0% for remaining\nbackgroundColor:[novaColors[novaScore],'#E5E7EB'// Light gray for empty portion\n],borderWidth:0,cutout:'70%'}]};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{enabled:false}}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',height:'200px',width:'200px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(Doughnut,{data:data,options:options}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'2rem',fontWeight:'bold',color:'#374151'},children:novaScore}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.875rem',color:'#6B7280'},children:\"NOVA\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',marginBottom:'0.5rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'16px',height:'16px',backgroundColor:novaColors[novaScore],borderRadius:'3px',marginRight:'0.5rem'}}),/*#__PURE__*/_jsxs(\"span\",{style:{fontWeight:'600',color:'#374151',fontSize:'1rem'},children:[\"Group \",novaScore]})]}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.875rem',color:'#374151',fontStyle:'italic'},children:processedLevel})]})]});};export default NovaChart;","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsx","_jsx","jsxs","_jsxs","register","extractNovaData","apiResponse","console","log","success","data","_apiResponse$data$cha","charts_data","nova_chart","chartData","type","novaScore","nova_score","processedLevel","description","chart_type","nutrition_data","nutrition","extractedData","processing_level","NovaChart","_ref","query","novaData","novaColors","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","style","textAlign","children","position","height","width","margin","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","borderRadius","marginRight","fontStyle"],"sources":["C:/repo/wihy_ui/client/src/components/charts/NovaChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NovaChartProps {\r\n  apiResponse?: UnifiedResponse | any;\r\n  query?: string;\r\n}\r\n\r\n// Extract nova/processing data from unified API response\r\nconst extractNovaData = (apiResponse?: UnifiedResponse | any) => {\r\n  console.log('=== EXTRACTING NOVA DATA FROM NEW API ===');\r\n  console.log('API Response:', apiResponse);\r\n  \r\n  // Handle unified API response\r\n  if (apiResponse && apiResponse.success && apiResponse.data) {\r\n    console.log('Processing unified API nova data');\r\n    \r\n    // Use charts_data if available for direct rendering\r\n    if (apiResponse.data.charts_data?.nova_chart) {\r\n      const chartData = apiResponse.data.charts_data.nova_chart;\r\n      console.log('Using charts_data for nova chart:', chartData);\r\n      return {\r\n        type: 'chart_data',\r\n        novaScore: chartData.nova_score,\r\n        processedLevel: chartData.description,\r\n        chart_type: chartData.chart_type\r\n      };\r\n    }\r\n    \r\n    // Use nutrition_data from the API response\r\n    if (apiResponse.data.nutrition_data) {\r\n      const nutrition = apiResponse.data.nutrition_data;\r\n      const extractedData = {\r\n        type: 'nutrition_facts',\r\n        novaScore: nutrition.nova_score || 1,\r\n        processedLevel: nutrition.processing_level || 'Unknown'\r\n      };\r\n      \r\n      console.log('=== EXTRACTED NOVA DATA FROM NEW API ===');\r\n      console.log('Final extracted data:', extractedData);\r\n      return extractedData;\r\n    }\r\n  }\r\n  \r\n  console.log('No nova data available in API response');\r\n  return null;\r\n};\r\n\r\nconst NovaChart: React.FC<NovaChartProps> = ({ apiResponse, query }) => {\r\n  // Extract nova data using new unified approach\r\n  const novaData = extractNovaData(apiResponse);\r\n\r\n  // Only render if we have nova data\r\n  if (!novaData) {\r\n    return null;\r\n  }\r\n\r\n  const { novaScore, processedLevel } = novaData;\r\n\r\n  // NOVA classification colors\r\n  const novaColors = {\r\n    1: '#10B981', // Green - Good\r\n    2: '#F59E0B', // Yellow - Okay\r\n    3: '#F97316', // Orange - Caution\r\n    4: '#EF4444'  // Red - Avoid\r\n  };\r\n\r\n  // Create data for the current NOVA score (100% fill)\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [100, 0], // 100% for the current score, 0% for remaining\r\n        backgroundColor: [\r\n          novaColors[novaScore as keyof typeof novaColors],\r\n          '#E5E7EB' // Light gray for empty portion\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '70%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        enabled: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {novaScore}\r\n          </div>\r\n          <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\r\n            NOVA\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <div\r\n            style={{\r\n              width: '16px',\r\n              height: '16px',\r\n              backgroundColor: novaColors[novaScore as keyof typeof novaColors],\r\n              borderRadius: '3px',\r\n              marginRight: '0.5rem',\r\n            }}\r\n          />\r\n          <span style={{ \r\n            fontWeight: '600', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Group {novaScore}\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          fontSize: '0.875rem',\r\n          color: '#374151',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          {processedLevel}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovaChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}