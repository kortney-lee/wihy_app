{"ast":null,"code":"import { WIHY_API_ENDPOINT } from '../config/apiConfig';\n\n// Types for the WiHy Unified API (updated to match documentation)\n\n// Legacy types for backward compatibility\n\nclass WihyAPIService {\n  constructor() {\n    this.baseURL = void 0;\n    this.baseURL = WIHY_API_ENDPOINT;\n  }\n\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\n  async askAnything(request) {\n    try {\n      console.log('Making WiHy Unified API request:', request);\n\n      // Convert legacy WihyRequest to UnifiedRequest format if needed\n      let unifiedRequest;\n      if ('user_context' in request) {\n        // Legacy format - convert to unified format\n        unifiedRequest = {\n          query: request.query,\n          request_type: 'auto',\n          context: request.user_context || {}\n        };\n      } else {\n        // Already in unified format\n        unifiedRequest = request;\n      }\n\n      // Use fetch API to match the working example exactly\n      const response = await fetch(this.baseURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(unifiedRequest)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('WiHy Unified API response:', data);\n      return data;\n    } catch (error) {\n      console.error('WiHy API error:', error);\n      if (error instanceof Error) {\n        throw new Error(error.message || 'WiHy API request failed');\n      }\n      throw new Error('Unknown error occurred while contacting WiHy API');\n    }\n  }\n\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\n  convertToLegacyFormat(unifiedResponse, originalQuery) {\n    var _unifiedResponse$data, _unifiedResponse$data2;\n    return {\n      success: unifiedResponse.success,\n      timestamp: new Date().toISOString(),\n      response_type: unifiedResponse.request_type,\n      query: originalQuery,\n      wihy_response: {\n        query_type: unifiedResponse.request_type,\n        query: originalQuery,\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: [],\n          action_items: ((_unifiedResponse$data = unifiedResponse.data.recommendations) === null || _unifiedResponse$data === void 0 ? void 0 : _unifiedResponse$data.map((rec, index) => ({\n            action: rec,\n            priority: 'medium',\n            target_illness: 'general_health',\n            evidence_level: 'moderate',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          }))) || [],\n          timeline: 'ongoing'\n        },\n        research_foundation: ((_unifiedResponse$data2 = unifiedResponse.data.sources) === null || _unifiedResponse$data2 === void 0 ? void 0 : _unifiedResponse$data2.map(source => ({\n          citation_text: source,\n          study_type: 'research',\n          key_finding: source\n        }))) || [],\n        progress_tracking: {\n          key_metrics: ['general_health'],\n          reassessment_period: '1 month'\n        },\n        biblical_wisdom: []\n      },\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\n    };\n  }\n\n  /**\r\n   * Get health news articles using the unified API\r\n   */\n  async getHealthNews(categories, limit) {\n    const query = categories && categories.length > 0 ? `Latest health news about ${categories.join(', ')}` : 'Latest health news';\n    const request = {\n      query: query,\n      request_type: 'health',\n      context: {\n        categories: categories,\n        limit: limit\n      }\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\n  async searchNutrition(foodQuery, userContext) {\n    const request = {\n      query: `Nutrition information for ${foodQuery}`,\n      request_type: 'nutrition',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, request.query);\n    }\n    return response;\n  }\n\n  /**\r\n   * General health search using the unified API\r\n   */\n  async searchHealth(query, userContext) {\n    const request = {\n      query: query,\n      request_type: 'auto',\n      context: userContext || {}\n    };\n    const response = await this.askAnything(request);\n    if ('data' in response) {\n      // It's a UnifiedResponse, convert to legacy format\n      return this.convertToLegacyFormat(response, query);\n    }\n    return response;\n  }\n\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\n  formatWihyResponse(response) {\n    var _wihy_response$resear, _wihy_response$biblic;\n    // Handle UnifiedResponse format (new API)\n    if ('data' in response && 'service_used' in response) {\n      const unifiedResp = response;\n      let formatted = `# WiHy Health Assistant\\n\\n`;\n      if (unifiedResp.data.response) {\n        formatted += unifiedResp.data.response;\n      } else if (unifiedResp.data.analysis) {\n        formatted += unifiedResp.data.analysis;\n      } else if (unifiedResp.data.training_status) {\n        formatted += `## Training Service\\n\\n`;\n        formatted += `${unifiedResp.data.training_status}\\n\\n`;\n        if (unifiedResp.data.available_models && unifiedResp.data.available_models.length > 0) {\n          formatted += `**Available Models:**\\n`;\n          unifiedResp.data.available_models.forEach(model => {\n            formatted += `- ${model}\\n`;\n          });\n        }\n      } else {\n        formatted += `**Service:** ${unifiedResp.service_used}\\n\\n`;\n        formatted += `**Processing Time:** ${unifiedResp.processing_time} seconds\\n\\n`;\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\n      }\n      formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.service_used} service (${unifiedResp.processing_time}s)*`;\n      return formatted;\n    }\n\n    // Handle legacy WihyResponse format\n    const legacyResp = response;\n    const {\n      wihy_response\n    } = legacyResp;\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\n\n    // Personalized Analysis\n    if (wihy_response.personalized_analysis) {\n      var _wihy_response$person, _wihy_response$person2, _wihy_response$person3;\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\n\n      // Risk Factors\n      if (((_wihy_response$person = wihy_response.personalized_analysis.identified_risk_factors) === null || _wihy_response$person === void 0 ? void 0 : _wihy_response$person.length) > 0) {\n        formatted += `### Identified Risk Factors:\\n`;\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\n        });\n      }\n\n      // Priority Goals\n      if (((_wihy_response$person2 = wihy_response.personalized_analysis.priority_health_goals) === null || _wihy_response$person2 === void 0 ? void 0 : _wihy_response$person2.length) > 0) {\n        formatted += `### 🎯 Priority Health Goals:\\n`;\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\n          formatted += `- ${goal}\\n`;\n        });\n        formatted += '\\n';\n      }\n\n      // Action Items\n      if (((_wihy_response$person3 = wihy_response.personalized_analysis.action_items) === null || _wihy_response$person3 === void 0 ? void 0 : _wihy_response$person3.length) > 0) {\n        formatted += `### 📋 Action Items:\\n`;\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\n          formatted += `- **Priority:** ${action.priority}\\n`;\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\n        });\n      }\n\n      // Timeline\n      if (wihy_response.personalized_analysis.timeline) {\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\n      }\n    }\n\n    // Research Foundation\n    if (((_wihy_response$resear = wihy_response.research_foundation) === null || _wihy_response$resear === void 0 ? void 0 : _wihy_response$resear.length) > 0) {\n      formatted += `## 📚 Research Foundation\\n\\n`;\n      wihy_response.research_foundation.forEach(research => {\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\n        formatted += `  ${research.key_finding}\\n\\n`;\n      });\n    }\n\n    // Progress Tracking\n    if (wihy_response.progress_tracking) {\n      formatted += `## 📊 Progress Tracking\\n\\n`;\n      formatted += `**Key Metrics to Track:**\\n`;\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\n        formatted += `- ${metric}\\n`;\n      });\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\n    }\n\n    // Biblical Wisdom\n    if (((_wihy_response$biblic = wihy_response.biblical_wisdom) === null || _wihy_response$biblic === void 0 ? void 0 : _wihy_response$biblic.length) > 0) {\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\n      wihy_response.biblical_wisdom.forEach(wisdom => {\n        formatted += `> ${wisdom}\\n\\n`;\n      });\n    }\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\n    return formatted;\n  }\n\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\n  extractRecommendations(response) {\n    var _response$wihy_respon;\n    const recommendations = [];\n    if ((_response$wihy_respon = response.wihy_response.personalized_analysis) !== null && _response$wihy_respon !== void 0 && _response$wihy_respon.action_items) {\n      response.wihy_response.personalized_analysis.action_items.forEach(action => {\n        recommendations.push(`${action.action} (${action.priority} priority)`);\n      });\n    }\n    return recommendations;\n  }\n\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\n  extractCitations(response) {\n    const citations = [];\n    if (response.wihy_response.research_foundation) {\n      response.wihy_response.research_foundation.forEach(research => {\n        citations.push(`${research.citation_text}: ${research.key_finding}`);\n      });\n    }\n    return citations;\n  }\n\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\n  formatUnifiedResponseForChat(response) {\n    if (response.data.response) {\n      return response.data.response;\n    }\n    if (response.data.analysis) {\n      return response.data.analysis;\n    }\n    if (response.data.training_status) {\n      let message = `🔄 ${response.data.training_status}`;\n      if (response.data.available_models && response.data.available_models.length > 0) {\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\n      }\n      return message;\n    }\n\n    // Fallback - show the raw data in a readable format\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\n  }\n}\n\n// Export a singleton instance\nexport const wihyAPI = new WihyAPIService();\nexport default wihyAPI;","map":{"version":3,"names":["WIHY_API_ENDPOINT","WihyAPIService","constructor","baseURL","askAnything","request","console","log","unifiedRequest","query","request_type","context","user_context","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","message","convertToLegacyFormat","unifiedResponse","originalQuery","_unifiedResponse$data","_unifiedResponse$data2","success","timestamp","Date","toISOString","response_type","wihy_response","query_type","core_principle","analysis","personalized_analysis","identified_risk_factors","priority_health_goals","action_items","recommendations","map","rec","index","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","sources","source","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","getHealthNews","categories","limit","length","join","searchNutrition","foodQuery","userContext","searchHealth","formatWihyResponse","_wihy_response$resear","_wihy_response$biblic","unifiedResp","formatted","training_status","available_models","forEach","model","service_used","processing_time","legacyResp","_wihy_response$person","_wihy_response$person2","_wihy_response$person3","risk","risk_factor","replace","toUpperCase","associated_illnesses","prevalence_rate","preventability_score","goal","research","metric","wisdom","toLocaleString","extractRecommendations","_response$wihy_respon","push","extractCitations","citations","formatUnifiedResponseForChat","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["import { API_CONFIG, WIHY_API_ENDPOINT } from '../config/apiConfig';\r\n\r\n// Types for the WiHy Unified API (updated to match documentation)\r\nexport interface UnifiedRequest {\r\n  query: string;                    // REQUIRED: Your health/nutrition question or request\r\n  request_type?: 'auto' | 'nutrition' | 'health' | 'chat' | 'auth' | 'predict' | 'train'; // OPTIONAL: defaults to \"auto\"\r\n  context?: Record<string, any>;    // OPTIONAL: Additional context object\r\n  user_id?: string;                 // OPTIONAL: User identifier for personalization\r\n  session_id?: string;              // OPTIONAL: Session identifier for conversation tracking\r\n}\r\n\r\nexport interface UnifiedResponse {\r\n  success: boolean;                 // Request processing success status\r\n  data: any;                        // Service-specific response data\r\n  service_used: string;             // Which service processed the request\r\n  request_type: string;             // The request type that was processed\r\n  processing_time: number;          // Processing time in seconds\r\n  suggestions: string[];            // Optional suggestions for improvement\r\n}\r\n\r\n// Legacy types for backward compatibility\r\nexport interface UserContext {\r\n  age?: number;\r\n  family_size?: number;\r\n  family_history?: string[];\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  current_health_concerns?: string[];\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\nexport interface RiskFactor {\r\n  risk_factor: string;\r\n  associated_illnesses: string;\r\n  prevalence_rate: number;\r\n  preventability_score: number;\r\n}\r\n\r\nexport interface ActionItem {\r\n  action: string;\r\n  priority: string;\r\n  target_illness: string;\r\n  evidence_level: string;\r\n  mechanism: string;\r\n  timeline: string;\r\n}\r\n\r\nexport interface PersonalizedAnalysis {\r\n  identified_risk_factors: RiskFactor[];\r\n  priority_health_goals: string[];\r\n  action_items: ActionItem[];\r\n  timeline: string;\r\n}\r\n\r\nexport interface ResearchFoundation {\r\n  citation_text: string;\r\n  study_type: string;\r\n  key_finding: string;\r\n}\r\n\r\nexport interface ProgressTracking {\r\n  key_metrics: string[];\r\n  reassessment_period: string;\r\n}\r\n\r\nexport interface WihyResponseData {\r\n  query_type: string;\r\n  query: string;\r\n  core_principle: string;\r\n  personalized_analysis: PersonalizedAnalysis;\r\n  research_foundation: ResearchFoundation[];\r\n  progress_tracking: ProgressTracking;\r\n  biblical_wisdom: string[];\r\n}\r\n\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: WihyResponseData;\r\n  message: string;\r\n}\r\n\r\nexport interface WihyError {\r\n  detail: string;\r\n}\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n\r\n  constructor() {\r\n    this.baseURL = WIHY_API_ENDPOINT;\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy a health-related question using the unified API\r\n   */\r\n  async askAnything(request: WihyRequest | UnifiedRequest): Promise<WihyResponse | UnifiedResponse> {\r\n    try {\r\n      console.log('Making WiHy Unified API request:', request);\r\n      \r\n      // Convert legacy WihyRequest to UnifiedRequest format if needed\r\n      let unifiedRequest: UnifiedRequest;\r\n      if ('user_context' in request) {\r\n        // Legacy format - convert to unified format\r\n        unifiedRequest = {\r\n          query: request.query,\r\n          request_type: 'auto',\r\n          context: request.user_context || {},\r\n        };\r\n      } else {\r\n        // Already in unified format\r\n        unifiedRequest = request as UnifiedRequest;\r\n      }\r\n      \r\n      // Use fetch API to match the working example exactly\r\n      const response = await fetch(this.baseURL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(unifiedRequest)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('WiHy Unified API response:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('WiHy API error:', error);\r\n      \r\n      if (error instanceof Error) {\r\n        throw new Error(error.message || 'WiHy API request failed');\r\n      }\r\n      \r\n      throw new Error('Unknown error occurred while contacting WiHy API');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert UnifiedResponse to legacy WihyResponse format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(unifiedResponse: UnifiedResponse, originalQuery: string): WihyResponse {\r\n    return {\r\n      success: unifiedResponse.success,\r\n      timestamp: new Date().toISOString(),\r\n      response_type: unifiedResponse.request_type,\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: unifiedResponse.request_type,\r\n        query: originalQuery,\r\n        core_principle: unifiedResponse.data.analysis || unifiedResponse.data.response || 'Health Information',\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: [],\r\n          action_items: unifiedResponse.data.recommendations?.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'medium',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'moderate',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })) || [],\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: unifiedResponse.data.sources?.map((source: string) => ({\r\n          citation_text: source,\r\n          study_type: 'research',\r\n          key_finding: source\r\n        })) || [],\r\n        progress_tracking: {\r\n          key_metrics: ['general_health'],\r\n          reassessment_period: '1 month'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: unifiedResponse.data.response || unifiedResponse.data.analysis || 'Health information provided'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health news articles using the unified API\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news';\r\n    \r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'health',\r\n      context: {\r\n        categories: categories,\r\n        limit: limit\r\n      }\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Search for nutrition information using the unified API\r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: `Nutrition information for ${foodQuery}`,\r\n      request_type: 'nutrition',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, request.query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * General health search using the unified API\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: UnifiedRequest = {\r\n      query: query,\r\n      request_type: 'auto',\r\n      context: userContext || {}\r\n    };\r\n\r\n    const response = await this.askAnything(request);\r\n    if ('data' in response) {\r\n      // It's a UnifiedResponse, convert to legacy format\r\n      return this.convertToLegacyFormat(response as UnifiedResponse, query);\r\n    }\r\n    return response as WihyResponse;\r\n  }\r\n\r\n  /**\r\n   * Format the WiHy response for display in the existing UI\r\n   * This formats it to be compatible with the existing search results format\r\n   */\r\n  formatWihyResponse(response: WihyResponse | UnifiedResponse): string {\r\n    // Handle UnifiedResponse format (new API)\r\n    if ('data' in response && 'service_used' in response) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      \r\n      let formatted = `# WiHy Health Assistant\\n\\n`;\r\n      \r\n      if (unifiedResp.data.response) {\r\n        formatted += unifiedResp.data.response;\r\n      } else if (unifiedResp.data.analysis) {\r\n        formatted += unifiedResp.data.analysis;\r\n      } else if (unifiedResp.data.training_status) {\r\n        formatted += `## Training Service\\n\\n`;\r\n        formatted += `${unifiedResp.data.training_status}\\n\\n`;\r\n        if (unifiedResp.data.available_models && unifiedResp.data.available_models.length > 0) {\r\n          formatted += `**Available Models:**\\n`;\r\n          unifiedResp.data.available_models.forEach((model: string) => {\r\n            formatted += `- ${model}\\n`;\r\n          });\r\n        }\r\n      } else {\r\n        formatted += `**Service:** ${unifiedResp.service_used}\\n\\n`;\r\n        formatted += `**Processing Time:** ${unifiedResp.processing_time} seconds\\n\\n`;\r\n        formatted += `**Data:**\\n\\`\\`\\`json\\n${JSON.stringify(unifiedResp.data, null, 2)}\\n\\`\\`\\``;\r\n      }\r\n      \r\n      formatted += `\\n\\n---\\n\\n*Response from ${unifiedResp.service_used} service (${unifiedResp.processing_time}s)*`;\r\n      return formatted;\r\n    }\r\n    \r\n    // Handle legacy WihyResponse format\r\n    const legacyResp = response as WihyResponse;\r\n    const { wihy_response } = legacyResp;\r\n    \r\n    let formatted = `# ${wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Personalized Analysis\r\n    if (wihy_response.personalized_analysis) {\r\n      formatted += `## 🎯 Personalized Health Analysis\\n\\n`;\r\n      \r\n      // Risk Factors\r\n      if (wihy_response.personalized_analysis.identified_risk_factors?.length > 0) {\r\n        formatted += `### Identified Risk Factors:\\n`;\r\n        wihy_response.personalized_analysis.identified_risk_factors.forEach(risk => {\r\n          formatted += `- **${risk.risk_factor.replace(/_/g, ' ').toUpperCase()}**\\n`;\r\n          formatted += `  - Associated with: ${risk.associated_illnesses.replace(/_/g, ' ')}\\n`;\r\n          formatted += `  - Prevalence: ${risk.prevalence_rate}%\\n`;\r\n          formatted += `  - Preventability: ${risk.preventability_score}%\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Priority Goals\r\n      if (wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n        formatted += `### 🎯 Priority Health Goals:\\n`;\r\n        wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n          formatted += `- ${goal}\\n`;\r\n        });\r\n        formatted += '\\n';\r\n      }\r\n      \r\n      // Action Items\r\n      if (wihy_response.personalized_analysis.action_items?.length > 0) {\r\n        formatted += `### 📋 Action Items:\\n`;\r\n        wihy_response.personalized_analysis.action_items.forEach((action, index) => {\r\n          formatted += `#### ${index + 1}. ${action.action}\\n`;\r\n          formatted += `- **Priority:** ${action.priority}\\n`;\r\n          formatted += `- **Target:** ${action.target_illness.replace(/_/g, ' ')}\\n`;\r\n          formatted += `- **Evidence Level:** ${action.evidence_level}\\n`;\r\n          formatted += `- **How it works:** ${action.mechanism}\\n`;\r\n          formatted += `- **Timeline:** ${action.timeline}\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      // Timeline\r\n      if (wihy_response.personalized_analysis.timeline) {\r\n        formatted += `**Implementation Timeline:** ${wihy_response.personalized_analysis.timeline}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    // Research Foundation\r\n    if (wihy_response.research_foundation?.length > 0) {\r\n      formatted += `## 📚 Research Foundation\\n\\n`;\r\n      wihy_response.research_foundation.forEach(research => {\r\n        formatted += `- **${research.citation_text}** (${research.study_type})\\n`;\r\n        formatted += `  ${research.key_finding}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    // Progress Tracking\r\n    if (wihy_response.progress_tracking) {\r\n      formatted += `## 📊 Progress Tracking\\n\\n`;\r\n      formatted += `**Key Metrics to Track:**\\n`;\r\n      wihy_response.progress_tracking.key_metrics.forEach(metric => {\r\n        formatted += `- ${metric}\\n`;\r\n      });\r\n      formatted += `\\n**Reassessment:** ${wihy_response.progress_tracking.reassessment_period}\\n\\n`;\r\n    }\r\n    \r\n    // Biblical Wisdom\r\n    if (wihy_response.biblical_wisdom?.length > 0) {\r\n      formatted += `## ✝️ Biblical Wisdom\\n\\n`;\r\n      wihy_response.biblical_wisdom.forEach(wisdom => {\r\n        formatted += `> ${wisdom}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    formatted += `---\\n\\n*WiHy health truth analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from WiHy response for UI display\r\n   */\r\n  extractRecommendations(response: WihyResponse): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    if (response.wihy_response.personalized_analysis?.action_items) {\r\n      response.wihy_response.personalized_analysis.action_items.forEach(action => {\r\n        recommendations.push(`${action.action} (${action.priority} priority)`);\r\n      });\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Extract citations from WiHy response for UI display\r\n   */\r\n  extractCitations(response: WihyResponse): string[] {\r\n    const citations: string[] = [];\r\n    \r\n    if (response.wihy_response.research_foundation) {\r\n      response.wihy_response.research_foundation.forEach(research => {\r\n        citations.push(`${research.citation_text}: ${research.key_finding}`);\r\n      });\r\n    }\r\n    \r\n    return citations;\r\n  }\r\n\r\n  /**\r\n   * Format UnifiedResponse for chat display (simple format)\r\n   */\r\n  formatUnifiedResponseForChat(response: UnifiedResponse): string {\r\n    if (response.data.response) {\r\n      return response.data.response;\r\n    }\r\n    \r\n    if (response.data.analysis) {\r\n      return response.data.analysis;\r\n    }\r\n    \r\n    if (response.data.training_status) {\r\n      let message = `🔄 ${response.data.training_status}`;\r\n      if (response.data.available_models && response.data.available_models.length > 0) {\r\n        message += `\\n\\n📊 Available models: ${response.data.available_models.join(', ')}`;\r\n      }\r\n      return message;\r\n    }\r\n    \r\n    // Fallback - show the raw data in a readable format\r\n    return `I received a response from the ${response.service_used} service. Here's what I found:\\n\\n${JSON.stringify(response.data, null, 2)}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\nexport default wihyAPI;"],"mappings":"AAAA,SAAqBA,iBAAiB,QAAQ,qBAAqB;;AAEnE;;AAkBA;;AA0EA,MAAMC,cAAc,CAAC;EAGnBC,WAAWA,CAAA,EAAG;IAAA,KAFNC,OAAO;IAGb,IAAI,CAACA,OAAO,GAAGH,iBAAiB;EAClC;;EAEA;AACF;AACA;EACE,MAAMI,WAAWA,CAACC,OAAqC,EAA2C;IAChG,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,OAAO,CAAC;;MAExD;MACA,IAAIG,cAA8B;MAClC,IAAI,cAAc,IAAIH,OAAO,EAAE;QAC7B;QACAG,cAAc,GAAG;UACfC,KAAK,EAAEJ,OAAO,CAACI,KAAK;UACpBC,YAAY,EAAE,MAAM;UACpBC,OAAO,EAAEN,OAAO,CAACO,YAAY,IAAI,CAAC;QACpC,CAAC;MACH,CAAC,MAAM;QACL;QACAJ,cAAc,GAAGH,OAAyB;MAC5C;;MAEA;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAI,CAACX,OAAO,EAAE;QACzCY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,cAAc;MACrC,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClClB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEgB,IAAI,CAAC;MAC/C,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MAEvC,IAAIA,KAAK,YAAYJ,KAAK,EAAE;QAC1B,MAAM,IAAIA,KAAK,CAACI,KAAK,CAACC,OAAO,IAAI,yBAAyB,CAAC;MAC7D;MAEA,MAAM,IAAIL,KAAK,CAAC,kDAAkD,CAAC;IACrE;EACF;;EAEA;AACF;AACA;EACUM,qBAAqBA,CAACC,eAAgC,EAAEC,aAAqB,EAAgB;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACnG,OAAO;MACLC,OAAO,EAAEJ,eAAe,CAACI,OAAO;MAChCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,aAAa,EAAER,eAAe,CAAClB,YAAY;MAC3CD,KAAK,EAAEoB,aAAa;MACpBQ,aAAa,EAAE;QACbC,UAAU,EAAEV,eAAe,CAAClB,YAAY;QACxCD,KAAK,EAAEoB,aAAa;QACpBU,cAAc,EAAEX,eAAe,CAACL,IAAI,CAACiB,QAAQ,IAAIZ,eAAe,CAACL,IAAI,CAACV,QAAQ,IAAI,oBAAoB;QACtG4B,qBAAqB,EAAE;UACrBC,uBAAuB,EAAE,EAAE;UAC3BC,qBAAqB,EAAE,EAAE;UACzBC,YAAY,EAAE,EAAAd,qBAAA,GAAAF,eAAe,CAACL,IAAI,CAACsB,eAAe,cAAAf,qBAAA,uBAApCA,qBAAA,CAAsCgB,GAAG,CAAC,CAACC,GAAW,EAAEC,KAAa,MAAM;YACvFC,MAAM,EAAEF,GAAG;YACXG,QAAQ,EAAE,QAAQ;YAClBC,cAAc,EAAE,gBAAgB;YAChCC,cAAc,EAAE,UAAU;YAC1BC,SAAS,EAAE,wBAAwB;YACnCC,QAAQ,EAAE;UACZ,CAAC,CAAC,CAAC,KAAI,EAAE;UACTA,QAAQ,EAAE;QACZ,CAAC;QACDC,mBAAmB,EAAE,EAAAxB,sBAAA,GAAAH,eAAe,CAACL,IAAI,CAACiC,OAAO,cAAAzB,sBAAA,uBAA5BA,sBAAA,CAA8Be,GAAG,CAAEW,MAAc,KAAM;UAC1EC,aAAa,EAAED,MAAM;UACrBE,UAAU,EAAE,UAAU;UACtBC,WAAW,EAAEH;QACf,CAAC,CAAC,CAAC,KAAI,EAAE;QACTI,iBAAiB,EAAE;UACjBC,WAAW,EAAE,CAAC,gBAAgB,CAAC;UAC/BC,mBAAmB,EAAE;QACvB,CAAC;QACDC,eAAe,EAAE;MACnB,CAAC;MACDtC,OAAO,EAAEE,eAAe,CAACL,IAAI,CAACV,QAAQ,IAAIe,eAAe,CAACL,IAAI,CAACiB,QAAQ,IAAI;IAC7E,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMyB,aAAaA,CAACC,UAAqB,EAAEC,KAAc,EAAyB;IAChF,MAAM1D,KAAK,GAAGyD,UAAU,IAAIA,UAAU,CAACE,MAAM,GAAG,CAAC,GAC7C,4BAA4BF,UAAU,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE,GACnD,oBAAoB;IAExB,MAAMhE,OAAuB,GAAG;MAC9BI,KAAK,EAAEA,KAAK;MACZC,YAAY,EAAE,QAAQ;MACtBC,OAAO,EAAE;QACPuD,UAAU,EAAEA,UAAU;QACtBC,KAAK,EAAEA;MACT;IACF,CAAC;IAED,MAAMtD,QAAQ,GAAG,MAAM,IAAI,CAACT,WAAW,CAACC,OAAO,CAAC;IAChD,IAAI,MAAM,IAAIQ,QAAQ,EAAE;MACtB;MACA,OAAO,IAAI,CAACc,qBAAqB,CAACd,QAAQ,EAAqBJ,KAAK,CAAC;IACvE;IACA,OAAOI,QAAQ;EACjB;;EAEA;AACF;AACA;EACE,MAAMyD,eAAeA,CAACC,SAAiB,EAAEC,WAAyB,EAAyB;IACzF,MAAMnE,OAAuB,GAAG;MAC9BI,KAAK,EAAE,6BAA6B8D,SAAS,EAAE;MAC/C7D,YAAY,EAAE,WAAW;MACzBC,OAAO,EAAE6D,WAAW,IAAI,CAAC;IAC3B,CAAC;IAED,MAAM3D,QAAQ,GAAG,MAAM,IAAI,CAACT,WAAW,CAACC,OAAO,CAAC;IAChD,IAAI,MAAM,IAAIQ,QAAQ,EAAE;MACtB;MACA,OAAO,IAAI,CAACc,qBAAqB,CAACd,QAAQ,EAAqBR,OAAO,CAACI,KAAK,CAAC;IAC/E;IACA,OAAOI,QAAQ;EACjB;;EAEA;AACF;AACA;EACE,MAAM4D,YAAYA,CAAChE,KAAa,EAAE+D,WAAyB,EAAyB;IAClF,MAAMnE,OAAuB,GAAG;MAC9BI,KAAK,EAAEA,KAAK;MACZC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE6D,WAAW,IAAI,CAAC;IAC3B,CAAC;IAED,MAAM3D,QAAQ,GAAG,MAAM,IAAI,CAACT,WAAW,CAACC,OAAO,CAAC;IAChD,IAAI,MAAM,IAAIQ,QAAQ,EAAE;MACtB;MACA,OAAO,IAAI,CAACc,qBAAqB,CAACd,QAAQ,EAAqBJ,KAAK,CAAC;IACvE;IACA,OAAOI,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;EACE6D,kBAAkBA,CAAC7D,QAAwC,EAAU;IAAA,IAAA8D,qBAAA,EAAAC,qBAAA;IACnE;IACA,IAAI,MAAM,IAAI/D,QAAQ,IAAI,cAAc,IAAIA,QAAQ,EAAE;MACpD,MAAMgE,WAAW,GAAGhE,QAA2B;MAE/C,IAAIiE,SAAS,GAAG,6BAA6B;MAE7C,IAAID,WAAW,CAACtD,IAAI,CAACV,QAAQ,EAAE;QAC7BiE,SAAS,IAAID,WAAW,CAACtD,IAAI,CAACV,QAAQ;MACxC,CAAC,MAAM,IAAIgE,WAAW,CAACtD,IAAI,CAACiB,QAAQ,EAAE;QACpCsC,SAAS,IAAID,WAAW,CAACtD,IAAI,CAACiB,QAAQ;MACxC,CAAC,MAAM,IAAIqC,WAAW,CAACtD,IAAI,CAACwD,eAAe,EAAE;QAC3CD,SAAS,IAAI,yBAAyB;QACtCA,SAAS,IAAI,GAAGD,WAAW,CAACtD,IAAI,CAACwD,eAAe,MAAM;QACtD,IAAIF,WAAW,CAACtD,IAAI,CAACyD,gBAAgB,IAAIH,WAAW,CAACtD,IAAI,CAACyD,gBAAgB,CAACZ,MAAM,GAAG,CAAC,EAAE;UACrFU,SAAS,IAAI,yBAAyB;UACtCD,WAAW,CAACtD,IAAI,CAACyD,gBAAgB,CAACC,OAAO,CAAEC,KAAa,IAAK;YAC3DJ,SAAS,IAAI,KAAKI,KAAK,IAAI;UAC7B,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLJ,SAAS,IAAI,gBAAgBD,WAAW,CAACM,YAAY,MAAM;QAC3DL,SAAS,IAAI,wBAAwBD,WAAW,CAACO,eAAe,cAAc;QAC9EN,SAAS,IAAI,0BAA0B5D,IAAI,CAACC,SAAS,CAAC0D,WAAW,CAACtD,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,UAAU;MAC5F;MAEAuD,SAAS,IAAI,6BAA6BD,WAAW,CAACM,YAAY,aAAaN,WAAW,CAACO,eAAe,KAAK;MAC/G,OAAON,SAAS;IAClB;;IAEA;IACA,MAAMO,UAAU,GAAGxE,QAAwB;IAC3C,MAAM;MAAEwB;IAAc,CAAC,GAAGgD,UAAU;IAEpC,IAAIP,SAAS,GAAG,KAAKzC,aAAa,CAACE,cAAc,MAAM;;IAEvD;IACA,IAAIF,aAAa,CAACI,qBAAqB,EAAE;MAAA,IAAA6C,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACvCV,SAAS,IAAI,wCAAwC;;MAErD;MACA,IAAI,EAAAQ,qBAAA,GAAAjD,aAAa,CAACI,qBAAqB,CAACC,uBAAuB,cAAA4C,qBAAA,uBAA3DA,qBAAA,CAA6DlB,MAAM,IAAG,CAAC,EAAE;QAC3EU,SAAS,IAAI,gCAAgC;QAC7CzC,aAAa,CAACI,qBAAqB,CAACC,uBAAuB,CAACuC,OAAO,CAACQ,IAAI,IAAI;UAC1EX,SAAS,IAAI,OAAOW,IAAI,CAACC,WAAW,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC,MAAM;UAC3Ed,SAAS,IAAI,wBAAwBW,IAAI,CAACI,oBAAoB,CAACF,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI;UACrFb,SAAS,IAAI,mBAAmBW,IAAI,CAACK,eAAe,KAAK;UACzDhB,SAAS,IAAI,uBAAuBW,IAAI,CAACM,oBAAoB,OAAO;QACtE,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,EAAAR,sBAAA,GAAAlD,aAAa,CAACI,qBAAqB,CAACE,qBAAqB,cAAA4C,sBAAA,uBAAzDA,sBAAA,CAA2DnB,MAAM,IAAG,CAAC,EAAE;QACzEU,SAAS,IAAI,iCAAiC;QAC9CzC,aAAa,CAACI,qBAAqB,CAACE,qBAAqB,CAACsC,OAAO,CAACe,IAAI,IAAI;UACxElB,SAAS,IAAI,KAAKkB,IAAI,IAAI;QAC5B,CAAC,CAAC;QACFlB,SAAS,IAAI,IAAI;MACnB;;MAEA;MACA,IAAI,EAAAU,sBAAA,GAAAnD,aAAa,CAACI,qBAAqB,CAACG,YAAY,cAAA4C,sBAAA,uBAAhDA,sBAAA,CAAkDpB,MAAM,IAAG,CAAC,EAAE;QAChEU,SAAS,IAAI,wBAAwB;QACrCzC,aAAa,CAACI,qBAAqB,CAACG,YAAY,CAACqC,OAAO,CAAC,CAAChC,MAAM,EAAED,KAAK,KAAK;UAC1E8B,SAAS,IAAI,QAAQ9B,KAAK,GAAG,CAAC,KAAKC,MAAM,CAACA,MAAM,IAAI;UACpD6B,SAAS,IAAI,mBAAmB7B,MAAM,CAACC,QAAQ,IAAI;UACnD4B,SAAS,IAAI,iBAAiB7B,MAAM,CAACE,cAAc,CAACwC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI;UAC1Eb,SAAS,IAAI,yBAAyB7B,MAAM,CAACG,cAAc,IAAI;UAC/D0B,SAAS,IAAI,uBAAuB7B,MAAM,CAACI,SAAS,IAAI;UACxDyB,SAAS,IAAI,mBAAmB7B,MAAM,CAACK,QAAQ,MAAM;QACvD,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIjB,aAAa,CAACI,qBAAqB,CAACa,QAAQ,EAAE;QAChDwB,SAAS,IAAI,gCAAgCzC,aAAa,CAACI,qBAAqB,CAACa,QAAQ,MAAM;MACjG;IACF;;IAEA;IACA,IAAI,EAAAqB,qBAAA,GAAAtC,aAAa,CAACkB,mBAAmB,cAAAoB,qBAAA,uBAAjCA,qBAAA,CAAmCP,MAAM,IAAG,CAAC,EAAE;MACjDU,SAAS,IAAI,+BAA+B;MAC5CzC,aAAa,CAACkB,mBAAmB,CAAC0B,OAAO,CAACgB,QAAQ,IAAI;QACpDnB,SAAS,IAAI,OAAOmB,QAAQ,CAACvC,aAAa,OAAOuC,QAAQ,CAACtC,UAAU,KAAK;QACzEmB,SAAS,IAAI,KAAKmB,QAAQ,CAACrC,WAAW,MAAM;MAC9C,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIvB,aAAa,CAACwB,iBAAiB,EAAE;MACnCiB,SAAS,IAAI,6BAA6B;MAC1CA,SAAS,IAAI,6BAA6B;MAC1CzC,aAAa,CAACwB,iBAAiB,CAACC,WAAW,CAACmB,OAAO,CAACiB,MAAM,IAAI;QAC5DpB,SAAS,IAAI,KAAKoB,MAAM,IAAI;MAC9B,CAAC,CAAC;MACFpB,SAAS,IAAI,uBAAuBzC,aAAa,CAACwB,iBAAiB,CAACE,mBAAmB,MAAM;IAC/F;;IAEA;IACA,IAAI,EAAAa,qBAAA,GAAAvC,aAAa,CAAC2B,eAAe,cAAAY,qBAAA,uBAA7BA,qBAAA,CAA+BR,MAAM,IAAG,CAAC,EAAE;MAC7CU,SAAS,IAAI,2BAA2B;MACxCzC,aAAa,CAAC2B,eAAe,CAACiB,OAAO,CAACkB,MAAM,IAAI;QAC9CrB,SAAS,IAAI,KAAKqB,MAAM,MAAM;MAChC,CAAC,CAAC;IACJ;IAEArB,SAAS,IAAI,oDAAoD,IAAI5C,IAAI,CAACrB,QAAQ,CAACoB,SAAS,CAAC,CAACmE,cAAc,CAAC,CAAC,KAAK;IAEnH,OAAOtB,SAAS;EAClB;;EAEA;AACF;AACA;EACEuB,sBAAsBA,CAACxF,QAAsB,EAAY;IAAA,IAAAyF,qBAAA;IACvD,MAAMzD,eAAyB,GAAG,EAAE;IAEpC,KAAAyD,qBAAA,GAAIzF,QAAQ,CAACwB,aAAa,CAACI,qBAAqB,cAAA6D,qBAAA,eAA5CA,qBAAA,CAA8C1D,YAAY,EAAE;MAC9D/B,QAAQ,CAACwB,aAAa,CAACI,qBAAqB,CAACG,YAAY,CAACqC,OAAO,CAAChC,MAAM,IAAI;QAC1EJ,eAAe,CAAC0D,IAAI,CAAC,GAAGtD,MAAM,CAACA,MAAM,KAAKA,MAAM,CAACC,QAAQ,YAAY,CAAC;MACxE,CAAC,CAAC;IACJ;IAEA,OAAOL,eAAe;EACxB;;EAEA;AACF;AACA;EACE2D,gBAAgBA,CAAC3F,QAAsB,EAAY;IACjD,MAAM4F,SAAmB,GAAG,EAAE;IAE9B,IAAI5F,QAAQ,CAACwB,aAAa,CAACkB,mBAAmB,EAAE;MAC9C1C,QAAQ,CAACwB,aAAa,CAACkB,mBAAmB,CAAC0B,OAAO,CAACgB,QAAQ,IAAI;QAC7DQ,SAAS,CAACF,IAAI,CAAC,GAAGN,QAAQ,CAACvC,aAAa,KAAKuC,QAAQ,CAACrC,WAAW,EAAE,CAAC;MACtE,CAAC,CAAC;IACJ;IAEA,OAAO6C,SAAS;EAClB;;EAEA;AACF;AACA;EACEC,4BAA4BA,CAAC7F,QAAyB,EAAU;IAC9D,IAAIA,QAAQ,CAACU,IAAI,CAACV,QAAQ,EAAE;MAC1B,OAAOA,QAAQ,CAACU,IAAI,CAACV,QAAQ;IAC/B;IAEA,IAAIA,QAAQ,CAACU,IAAI,CAACiB,QAAQ,EAAE;MAC1B,OAAO3B,QAAQ,CAACU,IAAI,CAACiB,QAAQ;IAC/B;IAEA,IAAI3B,QAAQ,CAACU,IAAI,CAACwD,eAAe,EAAE;MACjC,IAAIrD,OAAO,GAAG,MAAMb,QAAQ,CAACU,IAAI,CAACwD,eAAe,EAAE;MACnD,IAAIlE,QAAQ,CAACU,IAAI,CAACyD,gBAAgB,IAAInE,QAAQ,CAACU,IAAI,CAACyD,gBAAgB,CAACZ,MAAM,GAAG,CAAC,EAAE;QAC/E1C,OAAO,IAAI,4BAA4Bb,QAAQ,CAACU,IAAI,CAACyD,gBAAgB,CAACX,IAAI,CAAC,IAAI,CAAC,EAAE;MACpF;MACA,OAAO3C,OAAO;IAChB;;IAEA;IACA,OAAO,kCAAkCb,QAAQ,CAACsE,YAAY,qCAAqCjE,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACU,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;EAC7I;AACF;;AAEA;AACA,OAAO,MAAMoF,OAAO,GAAG,IAAI1G,cAAc,CAAC,CAAC;AAC3C,eAAe0G,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}