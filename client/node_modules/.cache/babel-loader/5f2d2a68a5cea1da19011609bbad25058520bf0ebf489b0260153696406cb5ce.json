{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\components\\\\NutritionChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n// Extract nutrition data function moved from SearchResults\nconst extractNutritionData = (results, dataSource) => {\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\n  console.log('DataSource:', dataSource);\n  console.log('Results type:', typeof results);\n  if (dataSource === 'vnutrition') {\n    try {\n      var _nutrition, _nutrition2, _nutrition3, _nutrition4, _nutrition5;\n      console.log('Processing vnutrition data source');\n      let nutrition;\n      if (typeof results === 'string') {\n        console.log('Parsing string results');\n        nutrition = JSON.parse(results);\n      } else {\n        console.log('Using object results directly');\n        nutrition = results;\n      }\n      console.log('=== RAW NUTRITION OBJECT ===');\n      console.log('Full object:', nutrition);\n      console.log('Object keys:', Object.keys(nutrition || {}));\n\n      // Log each field we're looking for\n      console.log('=== FIELD ANALYSIS ===');\n      console.log('nova_classification:', (_nutrition = nutrition) === null || _nutrition === void 0 ? void 0 : _nutrition.nova_classification);\n      console.log('nova_description:', (_nutrition2 = nutrition) === null || _nutrition2 === void 0 ? void 0 : _nutrition2.nova_description);\n      console.log('calories_per_serving:', (_nutrition3 = nutrition) === null || _nutrition3 === void 0 ? void 0 : _nutrition3.calories_per_serving);\n      console.log('protein_g:', (_nutrition4 = nutrition) === null || _nutrition4 === void 0 ? void 0 : _nutrition4.protein_g);\n      console.log('found status:', (_nutrition5 = nutrition) === null || _nutrition5 === void 0 ? void 0 : _nutrition5.found);\n      if (nutrition && nutrition.found !== false) {\n        const extractedData = {\n          calories: nutrition.calories_per_serving || 0,\n          protein: nutrition.protein_g || 0,\n          carbs: nutrition.carbs_g || 0,\n          fat: nutrition.fat_g || 0,\n          fiber: nutrition.fiber_g || 0,\n          sugar: nutrition.sugar_g || 0,\n          sodium: nutrition.sodium_mg || 0,\n          novaScore: nutrition.nova_classification || 1,\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\n        };\n        console.log('=== EXTRACTED DATA ===');\n        console.log('Final extracted data:', extractedData);\n        console.log('NOVA Score:', extractedData.novaScore);\n        return extractedData;\n      } else {\n        var _nutrition6;\n        console.log('No valid nutrition data - found:', (_nutrition6 = nutrition) === null || _nutrition6 === void 0 ? void 0 : _nutrition6.found);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error parsing nutrition data:', error);\n      return null;\n    }\n  }\n  console.log('Not vnutrition source');\n  return null;\n};\nconst NutritionChart = ({\n  query,\n  results,\n  dataSource\n}) => {\n  // Extract nutrition data using internal function\n  const nutritionData = extractNutritionData(results, dataSource);\n\n  // Only render if we have nutrition data\n  if (!nutritionData || dataSource !== 'vnutrition') {\n    return null;\n  }\n  const {\n    calories,\n    protein,\n    carbs,\n    fat,\n    fiber,\n    sugar,\n    sodium\n  } = nutritionData;\n\n  // Prepare data for the chart\n  const data = {\n    labels: ['Calories', 'Protein (g)', 'Carbs (g)', 'Fat (g)', 'Fiber (g)', 'Sugar (g)', 'Sodium (mg)'],\n    datasets: [{\n      label: 'Nutrition Values',\n      data: [calories, protein, carbs, fat, fiber, sugar, sodium / 10],\n      // Scale sodium down for better visualization\n      backgroundColor: ['#FF6384',\n      // Calories - Red\n      '#36A2EB',\n      // Protein - Blue\n      '#FFCE56',\n      // Carbs - Yellow\n      '#4BC0C0',\n      // Fat - Teal\n      '#9966FF',\n      // Fiber - Purple\n      '#FF9F40',\n      // Sugar - Orange\n      '#FF6384' // Sodium - Red (scaled)\n      ],\n      borderColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#FF6384'],\n      borderWidth: 1\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const label = context.label;\n            let value = context.parsed.y;\n\n            // Scale sodium back up for tooltip\n            if (label === 'Sodium (mg)') {\n              value = value * 10;\n            }\n            return `${label}: ${value}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        grid: {\n          display: true\n        },\n        ticks: {\n          font: {\n            size: 12\n          }\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          font: {\n            size: 10\n          },\n          maxRotation: 45\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '250px',\n        marginBottom: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(2, 1fr)',\n        gap: '0.5rem',\n        fontSize: '0.875rem',\n        color: '#374151'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Calories:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 14\n        }, this), \" \", calories]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Protein:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 14\n        }, this), \" \", protein, \"g\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Carbs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 14\n        }, this), \" \", carbs, \"g\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Fat:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 14\n        }, this), \" \", fat, \"g\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Fiber:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 14\n        }, this), \" \", fiber, \"g\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Sugar:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 14\n        }, this), \" \", sugar, \"g\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          gridColumn: 'span 2'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Sodium:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), \" \", sodium, \"mg\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_c = NutritionChart;\nexport default NutritionChart;\nvar _c;\n$RefreshReg$(_c, \"NutritionChart\");","map":{"version":3,"names":["React","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","jsxDEV","_jsxDEV","register","extractNutritionData","results","dataSource","console","log","_nutrition","_nutrition2","_nutrition3","_nutrition4","_nutrition5","nutrition","JSON","parse","Object","keys","nova_classification","nova_description","calories_per_serving","protein_g","found","extractedData","calories","protein","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","novaScore","processedLevel","processed_level","_nutrition6","error","NutritionChart","query","nutritionData","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","value","parsed","y","scales","beginAtZero","grid","ticks","font","size","x","maxRotation","style","textAlign","children","height","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","gridTemplateColumns","gap","fontSize","color","gridColumn","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/components/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  query: string;\r\n  results: string;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n}\r\n\r\n// Extract nutrition data function moved from SearchResults\r\nconst extractNutritionData = (results: string, dataSource: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\r\n  console.log('DataSource:', dataSource);\r\n  console.log('Results type:', typeof results);\r\n  \r\n  if (dataSource === 'vnutrition') {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      // Log each field we're looking for\r\n      console.log('=== FIELD ANALYSIS ===');\r\n      console.log('nova_classification:', nutrition?.nova_classification);\r\n      console.log('nova_description:', nutrition?.nova_description);\r\n      console.log('calories_per_serving:', nutrition?.calories_per_serving);\r\n      console.log('protein_g:', nutrition?.protein_g);\r\n      console.log('found status:', nutrition?.found);\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        console.log('NOVA Score:', extractedData.novaScore);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { calories, protein, carbs, fat, fiber, sugar, sodium } = nutritionData;\r\n\r\n  // Prepare data for the chart\r\n  const data = {\r\n    labels: ['Calories', 'Protein (g)', 'Carbs (g)', 'Fat (g)', 'Fiber (g)', 'Sugar (g)', 'Sodium (mg)'],\r\n    datasets: [\r\n      {\r\n        label: 'Nutrition Values',\r\n        data: [calories, protein, carbs, fat, fiber, sugar, sodium / 10], // Scale sodium down for better visualization\r\n        backgroundColor: [\r\n          '#FF6384', // Calories - Red\r\n          '#36A2EB', // Protein - Blue\r\n          '#FFCE56', // Carbs - Yellow\r\n          '#4BC0C0', // Fat - Teal\r\n          '#9966FF', // Fiber - Purple\r\n          '#FF9F40', // Sugar - Orange\r\n          '#FF6384', // Sodium - Red (scaled)\r\n        ],\r\n        borderColor: [\r\n          '#FF6384',\r\n          '#36A2EB',\r\n          '#FFCE56',\r\n          '#4BC0C0',\r\n          '#9966FF',\r\n          '#FF9F40',\r\n          '#FF6384',\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.label;\r\n            let value = context.parsed.y;\r\n            \r\n            // Scale sodium back up for tooltip\r\n            if (label === 'Sodium (mg)') {\r\n              value = value * 10;\r\n            }\r\n            \r\n            return `${label}: ${value}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          display: true,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 12,\r\n          },\r\n        },\r\n      },\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 10,\r\n          },\r\n          maxRotation: 45,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ height: '250px', marginBottom: '1rem' }}>\r\n        <Bar data={data} options={options} />\r\n      </div>\r\n      \r\n      <div style={{ \r\n        display: 'grid', \r\n        gridTemplateColumns: 'repeat(2, 1fr)', \r\n        gap: '0.5rem',\r\n        fontSize: '0.875rem',\r\n        color: '#374151'\r\n      }}>\r\n        <div><strong>Calories:</strong> {calories}</div>\r\n        <div><strong>Protein:</strong> {protein}g</div>\r\n        <div><strong>Carbs:</strong> {carbs}g</div>\r\n        <div><strong>Fat:</strong> {fat}g</div>\r\n        <div><strong>Fiber:</strong> {fiber}g</div>\r\n        <div><strong>Sugar:</strong> {sugar}g</div>\r\n        <div style={{ gridColumn: 'span 2' }}>\r\n          <strong>Sodium:</strong> {sodium}mg\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}