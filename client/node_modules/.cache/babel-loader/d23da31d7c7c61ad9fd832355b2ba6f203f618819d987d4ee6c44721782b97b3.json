{"ast":null,"code":"import axios from 'axios';\n\n// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  // PubMed\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'mayoclinic.org': 1,\n  'health.harvard.edu': 1\n};\n\n// Update API URL configuration\n\nclass NewsService {\n  // Get the correct endpoint based on environment\n  getNewsEndpoint() {\n    const isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    if (isDevelopment) {\n      // Based on working endpoint: /api/news/articles\n      const localEndpoint = 'http://localhost:5001/api/news/articles';\n      console.log('üîß Development mode: Using local endpoint:', localEndpoint);\n      return localEndpoint;\n    } else {\n      // In production: use production endpoint\n      const prodEndpoint = 'https://services.wihy.ai/api/news';\n      console.log('üöÄ Production mode: Using production endpoint:', prodEndpoint);\n      return prodEndpoint;\n    }\n  }\n\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\n  async getArticles(params = {}) {\n    try {\n      // Get the endpoint\n      const endpoint = this.getNewsEndpoint();\n\n      // Set defaults based on OpenAPI specification\n      const queryParams = {\n        limit: 50,\n        // Default from OpenAPI spec (1-500)\n        quality: '1',\n        // Use quality=1 to get quality articles with good images and mapped categories\n        flat: 'true',\n        // Return flat structure\n        page: 1,\n        // Default page\n        per_page: 50,\n        // Default per_page to match limit\n        ...params // Override with any provided params\n      };\n\n      // Convert boolean flat to string for API\n      if (typeof queryParams.flat === 'boolean') {\n        queryParams.flat = queryParams.flat ? 'true' : 'false';\n      }\n      console.log('Fetching news with params:', queryParams);\n      const isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost';\n      console.log(`üåç Environment: ${isDevelopment ? 'Development' : 'Production'}`);\n      console.log(`üì° Using endpoint: ${endpoint}`);\n      try {\n        var _response$data, _response$data$articl, _response$data2, _response$data3, _response$data4, _response$data5, _response$data5$artic, _response$data6, _response$data6$artic, _response$data6$artic2, _response$data7, _response$data7$artic, _response$data7$artic2, _response$data7$artic3, _response$data8, _response$data8$artic, _response$data8$artic2;\n        // Set timeout based on endpoint type (local vs remote)\n        const isLocal = endpoint.includes('localhost');\n        const timeout = isLocal ? 30000 : 15000; // Much longer timeout for local development\n\n        console.log(`üöÄ Making request to: ${endpoint}`);\n        console.log(`üìã Request params:`, queryParams);\n        console.log(`üîç Current window location:`, window.location.href);\n        console.log(`üîç Process NODE_ENV:`, process.env.NODE_ENV);\n        console.log(`üîç Final axios URL will be:`, endpoint);\n\n        // For local development, try a simple connectivity test first\n        if (isLocal) {\n          try {\n            console.log('üîç Testing basic connectivity to service...');\n            const healthCheck = await axios.get('http://localhost:5001/', {\n              timeout: 5000\n            });\n            console.log('‚úÖ Service is reachable');\n          } catch (connectError) {\n            console.log('‚ö†Ô∏è Service connectivity check failed:', connectError.message);\n            if (connectError.code === 'ECONNREFUSED') {\n              throw new Error('Local news service is not running on port 5001. Please start the service first.');\n            }\n          }\n        }\n        const response = await axios.get(endpoint, {\n          params: queryParams,\n          timeout: timeout,\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(`‚úÖ Response status: ${response.status}`);\n        console.log(`üì¶ Response data type:`, typeof response.data);\n        console.log(`üîç Response structure:`, {\n          keys: Object.keys(response.data || {}),\n          isArray: Array.isArray(response.data),\n          articlesCount: ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$articl = _response$data.articles) === null || _response$data$articl === void 0 ? void 0 : _response$data$articl.length) || 0,\n          totalCount: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.count) || 0,\n          totalAvailable: ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.total) || 0,\n          success: (_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.success,\n          sampleArticle: (_response$data5 = response.data) !== null && _response$data5 !== void 0 && (_response$data5$artic = _response$data5.articles) !== null && _response$data5$artic !== void 0 && _response$data5$artic[0] ? {\n            id: (_response$data6 = response.data) === null || _response$data6 === void 0 ? void 0 : (_response$data6$artic = _response$data6.articles) === null || _response$data6$artic === void 0 ? void 0 : (_response$data6$artic2 = _response$data6$artic[0]) === null || _response$data6$artic2 === void 0 ? void 0 : _response$data6$artic2.id,\n            title: ((_response$data7 = response.data) === null || _response$data7 === void 0 ? void 0 : (_response$data7$artic = _response$data7.articles) === null || _response$data7$artic === void 0 ? void 0 : (_response$data7$artic2 = _response$data7$artic[0]) === null || _response$data7$artic2 === void 0 ? void 0 : (_response$data7$artic3 = _response$data7$artic2.title) === null || _response$data7$artic3 === void 0 ? void 0 : _response$data7$artic3.substring(0, 50)) + '...',\n            hasImages: (_response$data8 = response.data) === null || _response$data8 === void 0 ? void 0 : (_response$data8$artic = _response$data8.articles) === null || _response$data8$artic === void 0 ? void 0 : (_response$data8$artic2 = _response$data8$artic[0]) === null || _response$data8$artic2 === void 0 ? void 0 : _response$data8$artic2.has_media\n          } : 'no articles'\n        });\n        if (isLocal) {\n          var _response$data9;\n          console.log('‚úÖ Local endpoint successful:', endpoint);\n\n          // Check if database is empty\n          const articleCount = ((_response$data9 = response.data) === null || _response$data9 === void 0 ? void 0 : _response$data9.count) || 0;\n          if (articleCount === 0) {\n            console.log('üì≠ No articles found in local database');\n            console.log('üí° The database appears to be empty');\n          }\n        } else {\n          console.log('‚úÖ Production endpoint successful:', endpoint);\n        }\n\n        // Process the response to add compatibility fields\n        const apiResponse = response.data;\n\n        // Map API articles to client format\n        if (apiResponse.articles && apiResponse.articles.length > 0) {\n          apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\n        }\n        return apiResponse;\n      } catch (error) {\n        var _error$response, _error$response2, _error$config, _error$config2;\n        console.error(`‚ùå Failed to fetch from ${endpoint}:`, error.name);\n        console.log(`üîç Error details:`, {\n          message: error.message,\n          code: error.code,\n          status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n          statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n          url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n          method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method\n        });\n        const isLocal = endpoint.includes('localhost');\n        if (isLocal && isDevelopment) {\n          var _error$response3;\n          if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error')) {\n            console.error('üí° Local service not available. Make sure the RSS news service is running on port 5001');\n            console.error('üí° You can start it with the appropriate command for your local setup');\n          } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n            console.error('üí° Request timed out. The service might be running but responding slowly');\n            console.error('üí° Try testing the endpoint manually: http://localhost:5001/api/news/articles');\n            console.error('üí° Check if the service is processing data or needs time to start up');\n          } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 404) {\n            console.error('üí° 404 Error: The /api/news/articles endpoint may not exist');\n            console.error('üí° Check the API documentation at http://localhost:5001/api/service/docs/');\n            console.error('üí° Verify the correct endpoint path with the service documentation');\n          }\n        }\n        throw error; // Re-throw the error instead of trying fallbacks\n      }\n    } catch (error) {\n      console.error('Error fetching news articles:', error);\n      return {\n        success: false,\n        articles: [],\n        count: 0,\n        pagination: {\n          total_items: 0,\n          total_pages: 0,\n          current_page: 1,\n          per_page: 50,\n          has_next_page: false,\n          has_prev_page: false\n        },\n        filters_applied: {\n          category: null,\n          country: null,\n          feed_id: null,\n          limit: 0\n        },\n        error: error instanceof Error ? error.message : 'Unknown error',\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\n      };\n    }\n  }\n\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\n  adaptArticleForClient(article) {\n    return {\n      ...article,\n      // Map API fields to legacy compatibility fields\n      url: article.link,\n      summary: article.description,\n      publishedDate: article.pubDate,\n      published_date: article.pubDate,\n      // Legacy field\n      thumbnailUrl: article.media_thumb_url || '',\n      thumbnail: article.media_thumb_url || '',\n      // Legacy field\n      imageUrl: article.media_url || '',\n      image_url: article.media_url || '',\n      // Legacy field\n      hasMedia: article.has_media,\n      source: article.feed_title,\n      tags: article.keywords || [],\n      readingTime: Math.ceil((article.word_count || 0) / 200),\n      // Estimate 200 words per minute\n      wordCount: article.word_count\n    };\n  }\n\n  /**\r\n   * Get available news categories from articles endpoint\r\n   */\n  async getCategories() {\n    try {\n      // Based on the OpenAPI spec, health categories are:\n      return ['All Health News', 'Nutrition', 'Medical Research', 'Public Health', 'Clinical Studies', 'Prevention', 'Mental Health', 'General Health', 'Environment'];\n    } catch (error) {\n      console.error('Error fetching news categories:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Get available countries from articles endpoint\r\n   */\n  async getCountries() {\n    try {\n      // Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\n      return [{\n        code: 'US',\n        name: 'United States'\n      }, {\n        code: 'IN',\n        name: 'India'\n      }, {\n        code: 'UK',\n        name: 'United Kingdom'\n      }, {\n        code: 'CA',\n        name: 'Canada'\n      }, {\n        code: 'AU',\n        name: 'Australia'\n      }, {\n        code: 'DE',\n        name: 'Germany'\n      }, {\n        code: 'FR',\n        name: 'France'\n      }, {\n        code: 'JP',\n        name: 'Japan'\n      }];\n    } catch (error) {\n      console.error('Error fetching countries:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Calculate trust score based on domain\r\n   */\n  calculateTrustScore(article) {\n    try {\n      // Extract domain from article link\n      const url = new URL(article.link);\n      const domain = url.hostname.replace('www.', '');\n      return TRUSTED_DOMAINS[domain] || TRUSTED_DOMAINS[`www.${domain}`] || 0.5;\n    } catch {\n      return 0.5; // Default score if URL parsing fails\n    }\n  }\n}\nexport const newsService = new NewsService();\n\n// Update these functions to improve category filtering and sort by date\n\nexport const fetchNewsFeed = async (categories, limit) => {\n  // First, set up the API request parameters\n  const params = {};\n\n  // Only add category parameter if categories array is non-empty\n  if (categories && categories.length > 0) {\n    params.category = categories.join(',');\n  }\n\n  // Request more articles than needed for better sorting/filtering\n  params.limit = limit ? limit * 2 : 50;\n\n  // Note: Sorting is handled by the API internally, no sort parameters needed\n\n  console.log('Fetching news with params:', params);\n\n  // Fetch articles from API\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // Define priority categories in exact order\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n\n    // Sort articles by our priority scheme\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\n\n    // Limit to requested count after sorting\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Log first few articles to verify order\n    console.log('Articles returned after prioritization:');\n    limitedArticles.slice(0, 5).forEach((article, i) => {\n      console.log(`  ${i + 1}. [${article.category || 'uncategorized'}]: ${article.title}`);\n    });\n\n    // Return a modified response with our prioritized articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n// Add the prioritization function to the newsService file\nfunction sortArticlesByPriority(articles, priorityCategories) {\n  // Create a copy of the articles array\n  const sortedArticles = [...articles];\n\n  // Define a function to get priority score (lower is higher priority)\n  const getPriorityScore = article => {\n    const category = article.category || '';\n    const categoryLower = category.toLowerCase();\n\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\n    // Check if it's explicitly categorized as tech\n    if (categoryLower === 'tech' || categoryLower.includes('technology') || categoryLower.includes('computing') || categoryLower.includes('it ') || categoryLower.includes('software')) {\n      console.log(`üëâ Found tech article, assigning lowest priority: ${article.title}`);\n      return 1000; // Tech should be shown last\n    }\n\n    // 1. Exact match with priority categories (in strict order)\n    for (let i = 0; i < priorityCategories.length; i++) {\n      if (category === priorityCategories[i]) {\n        return i; // Return the exact index position (0, 1, 2, etc.)\n      }\n    }\n\n    // 2. Partial match with priority categories\n    for (let i = 0; i < priorityCategories.length; i++) {\n      if (category.includes(priorityCategories[i])) {\n        return i + 20; // Still keep order but with lower priority than exact matches\n      }\n    }\n\n    // 3. Check for health-related keywords in title/description\n    const title = article.title || '';\n    const description = article.description || '';\n    const content = title + ' ' + description;\n    const contentLower = content.toLowerCase();\n    const healthKeywords = ['health', 'medical', 'medicine', 'doctor', 'patient', 'hospital', 'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet', 'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine', 'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'];\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\n      return 100; // All health-related content after categorized content\n    }\n\n    // 4. Check for tech keywords in title/description if not already caught above\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', 'ai', 'artificial intelligence', 'computer', 'code', 'programming', 'developer', 'cybersecurity', 'digital', 'internet', 'smartphone', 'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft', 'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\n    if (techKeywords.some(keyword => contentLower.includes(keyword))) {\n      // Extra debug log for tech content detection\n      console.log(`üëâ Found tech content by keyword, assigning lowest priority: ${article.title}`);\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\n    }\n\n    // 5. Everything else (general content)\n    return 500;\n  };\n\n  // Sort articles by priority score\n  sortedArticles.sort((a, b) => {\n    const priorityA = getPriorityScore(a);\n    const priorityB = getPriorityScore(b);\n\n    // First sort by priority category\n    if (priorityA !== priorityB) {\n      return priorityA - priorityB;\n    }\n\n    // If same priority category, sort by date (newest first)\n    const dateA = a.publishedDate || a.published_date;\n    const dateB = b.publishedDate || b.published_date;\n    if (dateA && dateB) {\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\n    }\n    return 0;\n  });\n\n  // Add debug information to see what categories are being returned\n  console.log('Article order after prioritization:');\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\n    // Show the priority score as part of the debugging\n    const score = getPriorityScore(article);\n    const category = article.category || 'uncategorized';\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\n  });\n  return sortedArticles;\n}\n\n// Update getArticlesByCategory to use the same prioritization logic\n\nexport const getArticlesByCategory = async (category, limit) => {\n  if (category === 'all') {\n    return fetchNewsFeed([], limit);\n  }\n  const params = {\n    category,\n    limit: limit ? Math.round(limit * 1.5) : 20,\n    // Fetch a few more than needed\n    quality: '1' // Get quality articles with good images\n  };\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // For category views, we still want to sort by date but within the category\n    const sortedArticles = response.articles.sort((a, b) => {\n      const dateA = a.publishedDate || a.published_date;\n      const dateB = b.publishedDate || b.published_date;\n      if (dateA && dateB) {\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\n      }\n      return 0;\n    });\n\n    // Limit to requested count\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Return a modified response with our sorted articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n// Add these functions at the end of the file\n\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\nexport const refreshNewsFeed = async (categories, limit) => {\n  const timestamp = new Date().getTime();\n  const params = {\n    timestamp,\n    // Add timestamp to bust cache\n    limit: limit || 50\n  };\n  if (categories && categories.length > 0) {\n    params.category = categories.join(',');\n  }\n\n  // Use quality parameter for better articles\n  params.quality = '1';\n  console.log('Refreshing news feed with timestamp:', timestamp);\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // Use the same priority sorting as fetchNewsFeed\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\n\n    // Limit to requested count after sorting\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n\n    // Return a modified response with our prioritized articles\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};\n\n/**\r\n * Search for news articles based on query\r\n */\nexport const searchNewsArticles = async (query, limit) => {\n  if (!query || query.trim() === '') {\n    // If no query, return empty results\n    return {\n      success: true,\n      articles: [],\n      count: 0,\n      pagination: {\n        total_items: 0,\n        total_pages: 0,\n        current_page: 1,\n        per_page: 12,\n        has_next_page: false,\n        has_prev_page: false\n      },\n      filters_applied: {\n        category: null,\n        country: null,\n        feed_id: null,\n        limit: 0\n      }\n    };\n  }\n  const params = {\n    query: query.trim(),\n    limit: limit || 50,\n    quality: '1' // Get quality articles with good images for search\n  };\n  console.log(`Searching news articles with query: \"${query}\"`);\n  const response = await newsService.getArticles(params);\n  if (response.success && response.articles && response.articles.length > 0) {\n    // For search results, we want to prioritize by relevance to search term\n    // But still use our priority categories as a secondary sort\n    const priorityCategories = ['Nutrition & Diet', 'Medical Research', 'Public Health', 'Clinical Studies', 'Disease Prevention', 'Mental Health', 'General Health'];\n\n    // Sort articles based on search relevance and category\n    const sortedArticles = response.articles.sort((a, b) => {\n      // First, prioritize by relevance score if available\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\n        if (a.relevanceScore !== b.relevanceScore) {\n          return b.relevanceScore - a.relevanceScore;\n        }\n      }\n\n      // If relevance scores are the same, use our category priority\n      const categoryA = a.category || '';\n      const categoryB = b.category || '';\n\n      // Check if categories are in our priority list\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\n\n      // If both categories are in priority list\n      if (indexA >= 0 && indexB >= 0) {\n        if (indexA !== indexB) {\n          return indexA - indexB;\n        }\n      }\n      // If only one category is in priority list\n      else if (indexA >= 0) {\n        return -1;\n      } else if (indexB >= 0) {\n        return 1;\n      }\n\n      // Finally, sort by date\n      const dateA = a.publishedDate || a.published_date;\n      const dateB = b.publishedDate || b.published_date;\n      if (dateA && dateB) {\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\n      }\n      return 0;\n    });\n\n    // Limit to requested count\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\n    return {\n      ...response,\n      articles: limitedArticles,\n      count: limitedArticles.length\n    };\n  }\n  return response;\n};","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","NewsService","getNewsEndpoint","isDevelopment","process","env","NODE_ENV","window","location","hostname","localEndpoint","console","log","prodEndpoint","getArticles","params","endpoint","queryParams","limit","quality","flat","page","per_page","_response$data","_response$data$articl","_response$data2","_response$data3","_response$data4","_response$data5","_response$data5$artic","_response$data6","_response$data6$artic","_response$data6$artic2","_response$data7","_response$data7$artic","_response$data7$artic2","_response$data7$artic3","_response$data8","_response$data8$artic","_response$data8$artic2","isLocal","includes","timeout","href","healthCheck","get","connectError","message","code","Error","response","headers","status","data","keys","Object","isArray","Array","articlesCount","articles","length","totalCount","count","totalAvailable","total","success","sampleArticle","id","title","substring","hasImages","has_media","_response$data9","articleCount","apiResponse","map","article","adaptArticleForClient","error","_error$response","_error$response2","_error$config","_error$config2","name","statusText","url","config","method","_error$response3","pagination","total_items","total_pages","current_page","has_next_page","has_prev_page","filters_applied","category","country","feed_id","link","summary","description","publishedDate","pubDate","published_date","thumbnailUrl","media_thumb_url","thumbnail","imageUrl","media_url","image_url","hasMedia","source","feed_title","tags","keywords","readingTime","Math","ceil","word_count","wordCount","getCategories","getCountries","calculateTrustScore","URL","domain","replace","newsService","fetchNewsFeed","categories","join","priorityCategories","sortedArticles","sortArticlesByPriority","limitedArticles","slice","forEach","i","getPriorityScore","categoryLower","toLowerCase","content","contentLower","healthKeywords","some","keyword","techKeywords","sort","a","b","priorityA","priorityB","dateA","dateB","Date","getTime","idx","score","getArticlesByCategory","round","refreshNewsFeed","timestamp","searchNewsArticles","query","trim","relevanceScore","undefined","categoryA","categoryB","indexA","findIndex","cat","indexB"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nimport { getApiEndpoint } from '../config/apiConfig';\r\n\r\nexport interface NewsArticle {\r\n  // Core API response fields (actual structure from real API)\r\n  id: string;                        // Unique article identifier (string format like \"1917-72447\")\r\n  title: string;                     // Article title\r\n  description: string;               // Article description/summary\r\n  link: string;                      // Article URL\r\n  author: string;                    // Article author (can be empty)\r\n  published_date: string;            // Publication date (ISO format)\r\n  thumbnail: string;                 // Thumbnail image URL (can be empty)\r\n  image_url: string;                 // Main image URL (can be empty)\r\n  has_image: boolean;                // Whether article has images\r\n  has_author: boolean;               // Whether article has author info\r\n  category: string;                  // Original category from feed\r\n  source: string;                    // Source publication name\r\n  feed_id: number;                   // RSS feed ID\r\n  feed_priority: string;             // Feed priority level\r\n  reading_time: number;              // Estimated reading time in minutes\r\n  word_count: number;                // Article word count\r\n  time_ago: string;                  // Human-readable time since publication\r\n  is_recent: boolean;                // Published within last 24 hours\r\n  content_quality: 'high' | 'medium' | 'low';  // Content quality assessment\r\n  completeness: 'complete' | 'partial' | 'minimal';  // Data completeness\r\n  domain: string;                    // Source domain\r\n  extracted_at: string;              // When article was extracted\r\n  \r\n  // Legacy/compatibility fields for existing client code\r\n  author?: string;                   // Article author (optional)\r\n  published_date?: string;           // Alias for pubDate\r\n  thumbnail?: string;                // Alias for media_thumb_url\r\n  image_url?: string;                // Alias for media_url\r\n  source?: string;                   // Alias for feed_title\r\n  url?: string;                      // Alias for link\r\n  summary?: string;                  // Alias for description\r\n  publishedDate?: string;            // Alias for pubDate\r\n  thumbnailUrl?: string;             // Alias for media_thumb_url\r\n  imageUrl?: string;                 // Alias for media_url\r\n  tags?: string[];                   // Alias for keywords\r\n  relevanceScore?: number;           // Client-side scoring\r\n  hasMedia?: boolean;                // Alias for has_media\r\n  readingTime?: number;              // Alias for word_count based calculation\r\n  wordCount?: number;                // Alias for word_count\r\n  mediaType?: string;                // Media type classification\r\n  contentLength?: number;            // Content length\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  total?: number;                    // Total available articles\r\n  message?: string;                  // API message\r\n  pagination?: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: boolean;\r\n  };\r\n  filters_applied?: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n    quality?: string;                // Added from OpenAPI spec\r\n  };\r\n  // Quality mode field (when quality=1)\r\n  flagged_for_review?: Array<{\r\n    id: number;\r\n    title: string;\r\n    reason: string;\r\n    category: string;\r\n  }>;\r\n  error?: string; // Added to handle errors from the API\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;                    // Number of articles to return (1-500)\r\n  quality?: string;                  // '1'/'true' for quality articles, '0'/'false' for all\r\n  category?: string;                 // Health categories: 'All Health News', 'Nutrition', etc.\r\n  country?: string;                  // Country code: US, IN, UK, CA, AU, DE, FR, JP\r\n  feed_id?: number;                  // Filter by specific feed ID\r\n  feed_priority?: string;            // Feed priority: single, range, or comma-separated\r\n  flat?: string | boolean;           // Return flat structure ('true'/'false')\r\n  page?: number;                     // Page number (starts at 1)\r\n  per_page?: number;                 // Number of articles per page (1-100)\r\n  your_new_param?: string;           // Additional parameter from API spec\r\n  timestamp?: number;                // Added to support refreshNewsFeed\r\n  query?: string;                    // Added to support searchNewsArticles\r\n}\r\n\r\nclass NewsService {\r\n  // Get the correct endpoint based on environment\r\n  private getNewsEndpoint(): string {\r\n    const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                         window.location.hostname === 'localhost' ||\r\n                         window.location.hostname === '127.0.0.1';\r\n    \r\n    if (isDevelopment) {\r\n      // Based on working endpoint: /api/news/articles\r\n      const localEndpoint = 'http://localhost:5001/api/news/articles';\r\n      console.log('üîß Development mode: Using local endpoint:', localEndpoint);\r\n      return localEndpoint;\r\n    } else {\r\n      // In production: use production endpoint\r\n      const prodEndpoint = 'https://services.wihy.ai/api/news';\r\n      console.log('üöÄ Production mode: Using production endpoint:', prodEndpoint);\r\n      return prodEndpoint;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Get the endpoint\r\n      const endpoint = this.getNewsEndpoint();\r\n      \r\n      // Set defaults based on OpenAPI specification\r\n      const queryParams: any = {\r\n        limit: 50,                    // Default from OpenAPI spec (1-500)\r\n        quality: '1',                 // Use quality=1 to get quality articles with good images and mapped categories\r\n        flat: 'true',                 // Return flat structure\r\n        page: 1,                      // Default page\r\n        per_page: 50,                 // Default per_page to match limit\r\n        ...params // Override with any provided params\r\n      };\r\n\r\n      // Convert boolean flat to string for API\r\n      if (typeof queryParams.flat === 'boolean') {\r\n        queryParams.flat = queryParams.flat ? 'true' : 'false';\r\n      }\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                           window.location.hostname === 'localhost';\r\n      \r\n      console.log(`üåç Environment: ${isDevelopment ? 'Development' : 'Production'}`);\r\n      console.log(`üì° Using endpoint: ${endpoint}`);\r\n      \r\n      try {\r\n        // Set timeout based on endpoint type (local vs remote)\r\n        const isLocal = endpoint.includes('localhost');\r\n        const timeout = isLocal ? 30000 : 15000; // Much longer timeout for local development\r\n        \r\n        console.log(`üöÄ Making request to: ${endpoint}`);\r\n        console.log(`üìã Request params:`, queryParams);\r\n        console.log(`üîç Current window location:`, window.location.href);\r\n        console.log(`üîç Process NODE_ENV:`, process.env.NODE_ENV);\r\n        console.log(`üîç Final axios URL will be:`, endpoint);\r\n        \r\n        // For local development, try a simple connectivity test first\r\n        if (isLocal) {\r\n          try {\r\n            console.log('üîç Testing basic connectivity to service...');\r\n            const healthCheck = await axios.get('http://localhost:5001/', { timeout: 5000 });\r\n            console.log('‚úÖ Service is reachable');\r\n          } catch (connectError: any) {\r\n            console.log('‚ö†Ô∏è Service connectivity check failed:', connectError.message);\r\n            if (connectError.code === 'ECONNREFUSED') {\r\n              throw new Error('Local news service is not running on port 5001. Please start the service first.');\r\n            }\r\n          }\r\n        }\r\n        \r\n        const response = await axios.get(endpoint, { \r\n          params: queryParams,\r\n          timeout: timeout,\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        console.log(`‚úÖ Response status: ${response.status}`);\r\n        console.log(`üì¶ Response data type:`, typeof response.data);\r\n        console.log(`üîç Response structure:`, {\r\n          keys: Object.keys(response.data || {}),\r\n          isArray: Array.isArray(response.data),\r\n          articlesCount: (response.data as any)?.articles?.length || 0,\r\n          totalCount: (response.data as any)?.count || 0,\r\n          totalAvailable: (response.data as any)?.total || 0,\r\n          success: (response.data as any)?.success,\r\n          sampleArticle: (response.data as any)?.articles?.[0] ? {\r\n            id: (response.data as any)?.articles?.[0]?.id,\r\n            title: (response.data as any)?.articles?.[0]?.title?.substring(0, 50) + '...',\r\n            hasImages: (response.data as any)?.articles?.[0]?.has_media\r\n          } : 'no articles'\r\n        });\r\n        \r\n        if (isLocal) {\r\n          console.log('‚úÖ Local endpoint successful:', endpoint);\r\n          \r\n          // Check if database is empty\r\n          const articleCount = (response.data as any)?.count || 0;\r\n          if (articleCount === 0) {\r\n            console.log('üì≠ No articles found in local database');\r\n            console.log('üí° The database appears to be empty');\r\n          }\r\n        } else {\r\n          console.log('‚úÖ Production endpoint successful:', endpoint);\r\n        }\r\n        \r\n        // Process the response to add compatibility fields\r\n        const apiResponse = response.data as NewsFeedResponse;\r\n        \r\n        // Map API articles to client format\r\n        if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n          apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n        }\r\n        \r\n        return apiResponse;\r\n        \r\n      } catch (error: any) {\r\n        console.error(`‚ùå Failed to fetch from ${endpoint}:`, error.name);\r\n        console.log(`üîç Error details:`, {\r\n          message: error.message,\r\n          code: error.code,\r\n          status: error.response?.status,\r\n          statusText: error.response?.statusText,\r\n          url: error.config?.url,\r\n          method: error.config?.method\r\n        });\r\n        \r\n        const isLocal = endpoint.includes('localhost');\r\n        \r\n        if (isLocal && isDevelopment) {\r\n          if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error')) {\r\n            console.error('üí° Local service not available. Make sure the RSS news service is running on port 5001');\r\n            console.error('üí° You can start it with the appropriate command for your local setup');\r\n          } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n            console.error('üí° Request timed out. The service might be running but responding slowly');\r\n            console.error('üí° Try testing the endpoint manually: http://localhost:5001/api/news/articles');\r\n            console.error('üí° Check if the service is processing data or needs time to start up');\r\n          } else if (error.response?.status === 404) {\r\n            console.error('üí° 404 Error: The /api/news/articles endpoint may not exist');\r\n            console.error('üí° Check the API documentation at http://localhost:5001/api/service/docs/');\r\n            console.error('üí° Verify the correct endpoint path with the service documentation');\r\n          }\r\n        }\r\n        \r\n        throw error; // Re-throw the error instead of trying fallbacks\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 50,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Map API fields to legacy compatibility fields\r\n      url: article.link,\r\n      summary: article.description,\r\n      publishedDate: article.pubDate,\r\n      published_date: article.pubDate, // Legacy field\r\n      thumbnailUrl: article.media_thumb_url || '',\r\n      thumbnail: article.media_thumb_url || '', // Legacy field\r\n      imageUrl: article.media_url || '',\r\n      image_url: article.media_url || '', // Legacy field\r\n      hasMedia: article.has_media,\r\n      source: article.feed_title,\r\n      tags: article.keywords || [],\r\n      readingTime: Math.ceil((article.word_count || 0) / 200), // Estimate 200 words per minute\r\n      wordCount: article.word_count\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories from articles endpoint\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, health categories are:\r\n      return [\r\n        'All Health News', \r\n        'Nutrition', \r\n        'Medical Research', \r\n        'Public Health', \r\n        'Clinical Studies', \r\n        'Prevention', \r\n        'Mental Health', \r\n        'General Health', \r\n        'Environment'\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries from articles endpoint\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\r\n      return [\r\n        { code: 'US', name: 'United States' },\r\n        { code: 'IN', name: 'India' },\r\n        { code: 'UK', name: 'United Kingdom' },\r\n        { code: 'CA', name: 'Canada' },\r\n        { code: 'AU', name: 'Australia' },\r\n        { code: 'DE', name: 'Germany' },\r\n        { code: 'FR', name: 'France' },\r\n        { code: 'JP', name: 'Japan' }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    try {\r\n      // Extract domain from article link\r\n      const url = new URL(article.link);\r\n      const domain = url.hostname.replace('www.', '');\r\n      \r\n      return TRUSTED_DOMAINS[domain] || \r\n             TRUSTED_DOMAINS[`www.${domain}`] || \r\n             0.5;\r\n    } catch {\r\n      return 0.5; // Default score if URL parsing fails\r\n    }\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  // First, set up the API request parameters\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Request more articles than needed for better sorting/filtering\r\n  params.limit = limit ? limit * 2 : 50;\r\n  \r\n  // Note: Sorting is handled by the API internally, no sort parameters needed\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  \r\n  // Fetch articles from API\r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Define priority categories in exact order\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles by our priority scheme\r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Log first few articles to verify order\r\n    console.log('Articles returned after prioritization:');\r\n    limitedArticles.slice(0, 5).forEach((article, i) => {\r\n      console.log(`  ${i+1}. [${article.category || 'uncategorized'}]: ${article.title}`);\r\n    });\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add the prioritization function to the newsService file\r\nfunction sortArticlesByPriority(articles: NewsArticle[], priorityCategories: string[]): NewsArticle[] {\r\n  // Create a copy of the articles array\r\n  const sortedArticles = [...articles];\r\n  \r\n  // Define a function to get priority score (lower is higher priority)\r\n  const getPriorityScore = (article: NewsArticle): number => {\r\n    const category = article.category || '';\r\n    const categoryLower = category.toLowerCase();\r\n    \r\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\r\n    // Check if it's explicitly categorized as tech\r\n    if (categoryLower === 'tech' || \r\n        categoryLower.includes('technology') || \r\n        categoryLower.includes('computing') || \r\n        categoryLower.includes('it ') || \r\n        categoryLower.includes('software')) {\r\n      console.log(`üëâ Found tech article, assigning lowest priority: ${article.title}`);\r\n      return 1000; // Tech should be shown last\r\n    }\r\n    \r\n    // 1. Exact match with priority categories (in strict order)\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category === priorityCategories[i]) {\r\n        return i; // Return the exact index position (0, 1, 2, etc.)\r\n      }\r\n    }\r\n    \r\n    // 2. Partial match with priority categories\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category.includes(priorityCategories[i])) {\r\n        return i + 20; // Still keep order but with lower priority than exact matches\r\n      }\r\n    }\r\n    \r\n    // 3. Check for health-related keywords in title/description\r\n    const title = article.title || '';\r\n    const description = article.description || '';\r\n    const content = title + ' ' + description;\r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const healthKeywords = [\r\n      'health', 'medical', 'medicine', 'doctor', 'patient', 'hospital',\r\n      'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet',\r\n      'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine',\r\n      'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'\r\n    ];\r\n    \r\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\r\n      return 100; // All health-related content after categorized content\r\n    }\r\n    \r\n    // 4. Check for tech keywords in title/description if not already caught above\r\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', \r\n                        'ai', 'artificial intelligence', 'computer', 'code', 'programming',\r\n                        'developer', 'cybersecurity', 'digital', 'internet', 'smartphone',\r\n                        'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft',\r\n                        'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\r\n    \r\n    if (techKeywords.some(keyword => \r\n      contentLower.includes(keyword)\r\n    )) {\r\n      // Extra debug log for tech content detection\r\n      console.log(`üëâ Found tech content by keyword, assigning lowest priority: ${article.title}`);\r\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\r\n    }\r\n    \r\n    // 5. Everything else (general content)\r\n    return 500; \r\n  };\r\n  \r\n  // Sort articles by priority score\r\n  sortedArticles.sort((a, b) => {\r\n    const priorityA = getPriorityScore(a);\r\n    const priorityB = getPriorityScore(b);\r\n    \r\n    // First sort by priority category\r\n    if (priorityA !== priorityB) {\r\n      return priorityA - priorityB;\r\n    }\r\n    \r\n    // If same priority category, sort by date (newest first)\r\n    const dateA = a.publishedDate || a.published_date;\r\n    const dateB = b.publishedDate || b.published_date;\r\n    \r\n    if (dateA && dateB) {\r\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n  \r\n  // Add debug information to see what categories are being returned\r\n  console.log('Article order after prioritization:');\r\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\r\n    // Show the priority score as part of the debugging\r\n    const score = getPriorityScore(article);\r\n    const category = article.category || 'uncategorized';\r\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\r\n  });\r\n  \r\n  return sortedArticles;\r\n}\r\n\r\n// Update getArticlesByCategory to use the same prioritization logic\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (category === 'all') {\r\n    return fetchNewsFeed([], limit);\r\n  }\r\n  \r\n  const params: NewsQueryParams = { \r\n    category, \r\n    limit: limit ? Math.round(limit * 1.5) : 20, // Fetch a few more than needed\r\n    quality: '1' // Get quality articles with good images\r\n  };\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For category views, we still want to sort by date but within the category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our sorted articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add these functions at the end of the file\r\n\r\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\r\nexport const refreshNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  const timestamp = new Date().getTime();\r\n  const params: NewsQueryParams = {\r\n    timestamp, // Add timestamp to bust cache\r\n    limit: limit || 50\r\n  };\r\n  \r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Use quality parameter for better articles\r\n  params.quality = '1';\r\n  \r\n  console.log('Refreshing news feed with timestamp:', timestamp);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Use the same priority sorting as fetchNewsFeed\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * Search for news articles based on query\r\n */\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (!query || query.trim() === '') {\r\n    // If no query, return empty results\r\n    return {\r\n      success: true,\r\n      articles: [],\r\n      count: 0,\r\n      pagination: {\r\n        total_items: 0,\r\n        total_pages: 0,\r\n        current_page: 1,\r\n        per_page: 12,\r\n        has_next_page: false,\r\n        has_prev_page: false\r\n      },\r\n      filters_applied: {\r\n        category: null,\r\n        country: null,\r\n        feed_id: null,\r\n        limit: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  const params: NewsQueryParams = {\r\n    query: query.trim(),\r\n    limit: limit || 50,\r\n    quality: '1' // Get quality articles with good images for search\r\n  };\r\n  \r\n  console.log(`Searching news articles with query: \"${query}\"`);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For search results, we want to prioritize by relevance to search term\r\n    // But still use our priority categories as a secondary sort\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles based on search relevance and category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      // First, prioritize by relevance score if available\r\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\r\n        if (a.relevanceScore !== b.relevanceScore) {\r\n          return b.relevanceScore - a.relevanceScore;\r\n        }\r\n      }\r\n      \r\n      // If relevance scores are the same, use our category priority\r\n      const categoryA = a.category || '';\r\n      const categoryB = b.category || '';\r\n      \r\n      // Check if categories are in our priority list\r\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\r\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\r\n      \r\n      // If both categories are in priority list\r\n      if (indexA >= 0 && indexB >= 0) {\r\n        if (indexA !== indexB) {\r\n          return indexA - indexB;\r\n        }\r\n      } \r\n      // If only one category is in priority list\r\n      else if (indexA >= 0) {\r\n        return -1;\r\n      } else if (indexB >= 0) {\r\n        return 1;\r\n      }\r\n      \r\n      // Finally, sort by date\r\n      const dateA = a.publishedDate || a.published_date;\r\n      const dateB = b.publishedDate || b.published_date;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}