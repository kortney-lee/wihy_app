{"ast":null,"code":"class OpenAIHealthService {\n  constructor() {\n    this.apiKey = void 0;\n    this.baseURL = 'https://api.openai.com/v1/chat/completions';\n    this.searchHealthInfo = async query => {\n      try {\n        var _data$choices, _data$choices$, _data$choices$$messag;\n        // Check if API key is configured\n        if (!this.isConfigured()) {\n          return this.mockResponse(query);\n        }\n        console.log('🔍 Starting OpenAI search for:', query);\n\n        // Check if query is safe\n        const isSafe = await this.moderateQuery(query);\n        if (!isSafe) {\n          throw new Error('This query cannot be processed due to content policy restrictions. Please rephrase your health question.');\n        }\n\n        // Enhanced prompt for research-backed responses with citation requests\n        const prompt = `You are a research-backed health assistant. Answer the following query using only scientifically verified data from reputable medical institutions and peer-reviewed journals.\n\nQuery: \"${query}\"\n\nProvide:\n1. A short summary\n2. Detailed insights (causes, symptoms, treatment, prevention)\n3. Medical recommendations (if applicable)\n4. When to seek a doctor\n5. Include specific citations when possible (PMIDs, DOIs, or URLs from trusted sources)\n6. End with a medical disclaimer\n\nLimit to 800 words. Do not fabricate facts. When citing studies, include PubMed IDs (PMID) or DOIs when available.`;\n        const requestBody = {\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: 'You are a research-backed health assistant. Only provide evidence-based answers from reputable medical institutions and peer-reviewed journals. This includes sources like NIH, CDC, WHO, PubMed, JAMA, NEJM, JMIR, The American Journal of Medicine, and other academic medical publications. Do not speculate. Always include a medical disclaimer.'\n          }, {\n            role: 'user',\n            content: prompt\n          }],\n          max_tokens: 1000,\n          temperature: 0.2\n        };\n        const response = await fetch(this.baseURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.apiKey}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          const errorData = await response.text();\n          console.error('OpenAI API Error:', response.status, errorData);\n          throw new Error(`OpenAI API Error: ${response.status}`);\n        }\n        const data = await response.json();\n        const content = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n        if (!content) {\n          throw new Error('No response from OpenAI');\n        }\n        return this.formatResponse(content, query);\n      } catch (error) {\n        console.error('OpenAI request failed:', error);\n        throw error;\n      }\n    };\n    this.isConfigured = () => {\n      // Check if API key exists (you might want to implement this differently)\n      return Boolean(process.env.REACT_APP_OPENAI_API_KEY);\n    };\n    this.mockResponse = query => {\n      return {\n        summary: `Information about ${query}`,\n        details: `# ${query}\\n\\nThis is mock information about ${query}. In a production environment, this would be generated by the OpenAI API.\\n\\n## Key Points\\n- ${query} is important for health\\n- Consider consulting a healthcare professional for personalized advice\\n- More research is being conducted on ${query}`,\n        sources: [\"PubMed\", \"NIH\", \"Harvard Health\"],\n        relatedTopics: [\"Nutrition\", \"Healthy Diet\", \"Wellness\"],\n        recommendations: [\"Consult your doctor\", \"Read more about nutrition\", \"Keep a balanced diet\"],\n        medicalDisclaimer: \"This information is for educational purposes only and not a substitute for professional medical advice.\"\n      };\n    };\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\n  }\n  async moderateQuery(query) {\n    try {\n      var _data$results, _data$results$;\n      const response = await fetch('https://api.openai.com/v1/moderations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          input: query\n        })\n      });\n      const data = await response.json();\n      const flagged = ((_data$results = data.results) === null || _data$results === void 0 ? void 0 : (_data$results$ = _data$results[0]) === null || _data$results$ === void 0 ? void 0 : _data$results$.flagged) || false;\n      if (flagged) {\n        console.warn('🚨 Query flagged by moderation:', query);\n      }\n      return !flagged;\n    } catch (error) {\n      console.error('Moderation check failed:', error);\n      return true;\n    }\n  }\n  logQuery(query, rawResponse, citations) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      query: query,\n      rawResponse: rawResponse,\n      citationsExtracted: citations\n    };\n    try {\n      const existingLogs = JSON.parse(localStorage.getItem('healthQueryLogs') || '[]');\n      existingLogs.push(logEntry);\n      if (existingLogs.length > 100) {\n        existingLogs.splice(0, existingLogs.length - 100);\n      }\n      localStorage.setItem('healthQueryLogs', JSON.stringify(existingLogs));\n      console.log('📝 Query logged for audit trail');\n    } catch (error) {\n      console.warn('Failed to log query:', error);\n    }\n  }\n  extractRealCitations(text) {\n    const matches = [];\n    const pubmedMatches = text.match(/PMID\\s?:?\\s?\\d{6,10}/gi);\n    if (pubmedMatches) matches.push(...pubmedMatches);\n    const doiMatches = text.match(/10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+/gi);\n    if (doiMatches) matches.push(...doiMatches);\n    const urlMatches = text.match(/https?:\\/\\/[^\\s]+\\.(gov|org|edu|com|net)(\\/[^\\s)]*)?/gi);\n    if (urlMatches) {\n      const allowedDomains = ['cdc.gov', 'nih.gov', 'who.int', 'jamanetwork.com', 'nejm.org', 'amjmed.com', 'jmir.org', 'thelancet.com', 'bmj.com', 'nature.com', 'sciencedirect.com', 'ncbi.nlm.nih.gov', 'pubmed.ncbi.nlm.nih.gov'];\n      const filtered = urlMatches.filter(url => allowedDomains.some(domain => url.includes(domain)));\n      matches.push(...filtered);\n    }\n    return Array.from(new Set(matches));\n  }\n  formatResponse(content, query) {\n    const citations = this.extractRealCitations(content);\n\n    // Format citations into clickable links\n    const formattedCitations = citations.map(cite => {\n      if (/PMID\\s?:?\\s?\\d{6,10}/i.test(cite)) {\n        var _cite$match;\n        const pmid = (_cite$match = cite.match(/\\d{6,10}/)) === null || _cite$match === void 0 ? void 0 : _cite$match[0];\n        return `https://pubmed.ncbi.nlm.nih.gov/${pmid}`;\n      } else if (/^10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+$/i.test(cite)) {\n        return `https://doi.org/${cite}`;\n      } else {\n        return cite;\n      }\n    });\n\n    // Log the query for traceability\n    this.logQuery(query, content, citations);\n    return {\n      summary: `Research-backed health information about: ${query}`,\n      details: content,\n      sources: formattedCitations.length > 0 ? formattedCitations : ['NIH Guidelines', 'CDC & WHO Publications', 'PubMed and peer-reviewed studies', 'Academic Medical Journals', 'Evidence-Based Clinical Reviews'],\n      relatedTopics: ['Evidence-Based Medicine', 'Clinical Guidelines', 'Medical Research', 'Health Screening', 'Preventive Care'],\n      recommendations: ['Consult healthcare professionals for personalized medical advice', 'Verify information with your doctor or medical provider', 'Follow evidence-based medical guidelines', 'Seek regular medical check-ups and screenings'],\n      medicalDisclaimer: 'This information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.'\n    };\n  }\n  validateApiKey() {\n    if (!this.apiKey) {\n      return {\n        valid: false,\n        message: 'No API key found'\n      };\n    }\n    if (!this.apiKey.startsWith('sk-')) {\n      return {\n        valid: false,\n        message: 'API key should start with \"sk-\"'\n      };\n    }\n    if (this.apiKey.length < 48) {\n      return {\n        valid: false,\n        message: 'API key seems too short'\n      };\n    }\n    const maskedKey = `${this.apiKey.substring(0, 7)}...${this.apiKey.slice(-4)}`;\n    return {\n      valid: true,\n      message: `API key format looks correct: ${maskedKey}`\n    };\n  }\n}\nexport const openaiAPI = new OpenAIHealthService();","map":{"version":3,"names":["OpenAIHealthService","constructor","apiKey","baseURL","searchHealthInfo","query","_data$choices","_data$choices$","_data$choices$$messag","isConfigured","mockResponse","console","log","isSafe","moderateQuery","Error","prompt","requestBody","model","messages","role","content","max_tokens","temperature","response","fetch","method","headers","body","JSON","stringify","ok","errorData","text","error","status","data","json","choices","message","formatResponse","Boolean","process","env","REACT_APP_OPENAI_API_KEY","summary","details","sources","relatedTopics","recommendations","medicalDisclaimer","_data$results","_data$results$","input","flagged","results","warn","logQuery","rawResponse","citations","logEntry","timestamp","Date","toISOString","citationsExtracted","existingLogs","parse","localStorage","getItem","push","length","splice","setItem","extractRealCitations","matches","pubmedMatches","match","doiMatches","urlMatches","allowedDomains","filtered","filter","url","some","domain","includes","Array","from","Set","formattedCitations","map","cite","test","_cite$match","pmid","validateApiKey","valid","startsWith","maskedKey","substring","slice","openaiAPI"],"sources":["C:/vHealth/vhealth/client/src/services/openaiAPI.ts"],"sourcesContent":["interface ChatGPTResponse {\r\n  summary: string;\r\n  details: string;\r\n  sources: string[];\r\n  relatedTopics: string[];\r\n  recommendations: string[];\r\n  medicalDisclaimer: string;\r\n}\r\n\r\ninterface QueryLog {\r\n  timestamp: string;\r\n  query: string;\r\n  rawResponse: string;\r\n  citationsExtracted: string[];\r\n  userId?: string;\r\n}\r\n\r\nclass OpenAIHealthService {\r\n  private apiKey: string;\r\n  private baseURL = 'https://api.openai.com/v1/chat/completions';\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\r\n  }\r\n\r\n  private async moderateQuery(query: string): Promise<boolean> {\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/moderations', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          input: query\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      const flagged = data.results?.[0]?.flagged || false;\r\n      \r\n      if (flagged) {\r\n        console.warn('🚨 Query flagged by moderation:', query);\r\n      }\r\n      \r\n      return !flagged;\r\n    } catch (error) {\r\n      console.error('Moderation check failed:', error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private logQuery(query: string, rawResponse: string, citations: string[]): void {\r\n    const logEntry: QueryLog = {\r\n      timestamp: new Date().toISOString(),\r\n      query: query,\r\n      rawResponse: rawResponse,\r\n      citationsExtracted: citations\r\n    };\r\n    \r\n    try {\r\n      const existingLogs = JSON.parse(localStorage.getItem('healthQueryLogs') || '[]');\r\n      existingLogs.push(logEntry);\r\n      \r\n      if (existingLogs.length > 100) {\r\n        existingLogs.splice(0, existingLogs.length - 100);\r\n      }\r\n      \r\n      localStorage.setItem('healthQueryLogs', JSON.stringify(existingLogs));\r\n      console.log('📝 Query logged for audit trail');\r\n    } catch (error) {\r\n      console.warn('Failed to log query:', error);\r\n    }\r\n  }\r\n\r\n  searchHealthInfo = async (query: string): Promise<ChatGPTResponse> => {\r\n    try {\r\n      // Check if API key is configured\r\n      if (!this.isConfigured()) {\r\n        return this.mockResponse(query);\r\n      }\r\n      \r\n      console.log('🔍 Starting OpenAI search for:', query);\r\n      \r\n      // Check if query is safe\r\n      const isSafe = await this.moderateQuery(query);\r\n      if (!isSafe) {\r\n        throw new Error('This query cannot be processed due to content policy restrictions. Please rephrase your health question.');\r\n      }\r\n\r\n      // Enhanced prompt for research-backed responses with citation requests\r\n      const prompt = `You are a research-backed health assistant. Answer the following query using only scientifically verified data from reputable medical institutions and peer-reviewed journals.\r\n\r\nQuery: \"${query}\"\r\n\r\nProvide:\r\n1. A short summary\r\n2. Detailed insights (causes, symptoms, treatment, prevention)\r\n3. Medical recommendations (if applicable)\r\n4. When to seek a doctor\r\n5. Include specific citations when possible (PMIDs, DOIs, or URLs from trusted sources)\r\n6. End with a medical disclaimer\r\n\r\nLimit to 800 words. Do not fabricate facts. When citing studies, include PubMed IDs (PMID) or DOIs when available.`;\r\n\r\n      const requestBody = {\r\n        model: 'gpt-4',\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: 'You are a research-backed health assistant. Only provide evidence-based answers from reputable medical institutions and peer-reviewed journals. This includes sources like NIH, CDC, WHO, PubMed, JAMA, NEJM, JMIR, The American Journal of Medicine, and other academic medical publications. Do not speculate. Always include a medical disclaimer.'\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: prompt\r\n          }\r\n        ],\r\n        max_tokens: 1000,\r\n        temperature: 0.2\r\n      };\r\n\r\n      const response = await fetch(this.baseURL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.text();\r\n        console.error('OpenAI API Error:', response.status, errorData);\r\n        throw new Error(`OpenAI API Error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const content = data.choices?.[0]?.message?.content;\r\n\r\n      if (!content) {\r\n        throw new Error('No response from OpenAI');\r\n      }\r\n\r\n      return this.formatResponse(content, query);\r\n    } catch (error) {\r\n      console.error('OpenAI request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private extractRealCitations(text: string): string[] {\r\n    const matches: string[] = [];\r\n\r\n    const pubmedMatches = text.match(/PMID\\s?:?\\s?\\d{6,10}/gi);\r\n    if (pubmedMatches) matches.push(...pubmedMatches);\r\n\r\n    const doiMatches = text.match(/10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+/gi);\r\n    if (doiMatches) matches.push(...doiMatches);\r\n\r\n    const urlMatches = text.match(\r\n      /https?:\\/\\/[^\\s]+\\.(gov|org|edu|com|net)(\\/[^\\s)]*)?/gi\r\n    );\r\n    if (urlMatches) {\r\n      const allowedDomains = [\r\n        'cdc.gov', 'nih.gov', 'who.int', 'jamanetwork.com', 'nejm.org',\r\n        'amjmed.com', 'jmir.org', 'thelancet.com', 'bmj.com',\r\n        'nature.com', 'sciencedirect.com', 'ncbi.nlm.nih.gov', 'pubmed.ncbi.nlm.nih.gov'\r\n      ];\r\n\r\n      const filtered = urlMatches.filter(url =>\r\n        allowedDomains.some(domain => url.includes(domain))\r\n      );\r\n\r\n      matches.push(...filtered);\r\n    }\r\n\r\n    return Array.from(new Set(matches));\r\n  }\r\n\r\n  private formatResponse(content: string, query: string): ChatGPTResponse {\r\n    const citations = this.extractRealCitations(content);\r\n    \r\n    // Format citations into clickable links\r\n    const formattedCitations = citations.map(cite => {\r\n      if (/PMID\\s?:?\\s?\\d{6,10}/i.test(cite)) {\r\n        const pmid = cite.match(/\\d{6,10}/)?.[0];\r\n        return `https://pubmed.ncbi.nlm.nih.gov/${pmid}`;\r\n      } else if (/^10\\.\\d{4,9}\\/[-._;()/:A-Z0-9]+$/i.test(cite)) {\r\n        return `https://doi.org/${cite}`;\r\n      } else {\r\n        return cite;\r\n      }\r\n    });\r\n    \r\n    // Log the query for traceability\r\n    this.logQuery(query, content, citations);\r\n    \r\n    return {\r\n      summary: `Research-backed health information about: ${query}`,\r\n      details: content,\r\n      sources: formattedCitations.length > 0 ? formattedCitations : [\r\n        'NIH Guidelines',\r\n        'CDC & WHO Publications', \r\n        'PubMed and peer-reviewed studies',\r\n        'Academic Medical Journals',\r\n        'Evidence-Based Clinical Reviews'\r\n      ],\r\n      relatedTopics: [\r\n        'Evidence-Based Medicine',\r\n        'Clinical Guidelines',\r\n        'Medical Research',\r\n        'Health Screening',\r\n        'Preventive Care'\r\n      ],\r\n      recommendations: [\r\n        'Consult healthcare professionals for personalized medical advice',\r\n        'Verify information with your doctor or medical provider',\r\n        'Follow evidence-based medical guidelines',\r\n        'Seek regular medical check-ups and screenings'\r\n      ],\r\n      medicalDisclaimer: 'This information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.'\r\n    };\r\n  }\r\n\r\n  validateApiKey(): { valid: boolean; message: string } {\r\n    if (!this.apiKey) {\r\n      return { valid: false, message: 'No API key found' };\r\n    }\r\n    \r\n    if (!this.apiKey.startsWith('sk-')) {\r\n      return { valid: false, message: 'API key should start with \"sk-\"' };\r\n    }\r\n    \r\n    if (this.apiKey.length < 48) {\r\n      return { valid: false, message: 'API key seems too short' };\r\n    }\r\n    \r\n    const maskedKey = `${this.apiKey.substring(0, 7)}...${this.apiKey.slice(-4)}`;\r\n    \r\n    return { \r\n      valid: true, \r\n      message: `API key format looks correct: ${maskedKey}` \r\n    };\r\n  }\r\n\r\n  isConfigured = (): boolean => {\r\n    // Check if API key exists (you might want to implement this differently)\r\n    return Boolean(process.env.REACT_APP_OPENAI_API_KEY);\r\n  }\r\n\r\n  mockResponse = (query: string): ChatGPTResponse => {\r\n    return {\r\n      summary: `Information about ${query}`,\r\n      details: `# ${query}\\n\\nThis is mock information about ${query}. In a production environment, this would be generated by the OpenAI API.\\n\\n## Key Points\\n- ${query} is important for health\\n- Consider consulting a healthcare professional for personalized advice\\n- More research is being conducted on ${query}`,\r\n      sources: [\"PubMed\", \"NIH\", \"Harvard Health\"],\r\n      relatedTopics: [\"Nutrition\", \"Healthy Diet\", \"Wellness\"],\r\n      recommendations: [\"Consult your doctor\", \"Read more about nutrition\", \"Keep a balanced diet\"],\r\n      medicalDisclaimer: \"This information is for educational purposes only and not a substitute for professional medical advice.\"\r\n    };\r\n  }\r\n}\r\n\r\nexport const openaiAPI = new OpenAIHealthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}