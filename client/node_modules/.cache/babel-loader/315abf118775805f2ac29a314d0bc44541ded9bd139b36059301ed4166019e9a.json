{"ast":null,"code":"// ==================== WIHY HEALTH INTELLIGENCE API v4.0.0 ====================\n// Simplified implementation using ONLY the ASK endpoint\n// All legacy functionality removed per user request\n// Documentation: WIHY Health Intelligence API v4.0.0\n\nimport logger from '../utils/logger';\nimport { API_CONFIG } from '../config/apiConfig';\n\n// ==================== API v4.0.0 INTERFACES ====================\n\n// ASK endpoint request interface (OpenAPI v4.0.0)\n\n// ASK endpoint response interface (OpenAPI v4.0.0)\n\n// Legacy compatibility types (minimal set for existing components)\n\n// Legacy response interface for backward compatibility\n\n// Legacy UnifiedResponse interface for chart components compatibility\n\n// Type guard for detecting unified responses at runtime (for chart compatibility)\nexport function isUnifiedResponse(obj) {\n  return obj && typeof obj === 'object' && 'data' in obj && 'service_used' in obj;\n}\n\n// ==================== WIHY API SERVICE CLASS ====================\n\nclass WihyAPIService {\n  constructor() {\n    this.baseURL = void 0;\n    this.baseURL = API_CONFIG.WIHY_API_URL;\n  }\n\n  /**\r\n   * Ask WiHy Health Intelligence a question using the v4.0.0 ASK endpoint\r\n   */\n  async askHealthQuestion(request) {\n    try {\n      var _data$data, _data$data2;\n      logger.info('Making WiHy API v4.0.0 ASK request', {\n        query: request.query\n      });\n      const endpoint = `${this.baseURL}/ask`;\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(request),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorText = await response.text();\n        logger.error(`WiHy API error: ${response.status} ${response.statusText}`, {\n          error: errorText\n        });\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n      const data = await response.json();\n      logger.info('WiHy API response received', {\n        success: data.success,\n        processor: ((_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.processor_used) || 'unknown',\n        processingTime: ((_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.processing_time) || 'unknown'\n      });\n      return data;\n    } catch (error) {\n      logger.error('WiHy API request failed:', error);\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * Check API health status\r\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/health`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      logger.error('WiHy API health check failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Legacy compatibility method - converts old request format to new format\r\n   */\n  async askAnything(request) {\n    try {\n      // Convert legacy request to v4.0.0 format\n      const healthRequest = {\n        query: request.query,\n        user_context: request.user_context ? {\n          age: request.user_context.age,\n          health_concerns: request.user_context.health_concerns,\n          dietary_restrictions: request.user_context.dietary_restrictions,\n          activity_level: request.user_context.activity_level\n        } : undefined\n      };\n\n      // Call the new API\n      const response = await this.askHealthQuestion(healthRequest);\n\n      // Convert response to legacy format for backward compatibility\n      return this.convertToLegacyFormat(response, request.query);\n    } catch (error) {\n      logger.error('Legacy askAnything failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Legacy compatibility method - general health search\r\n   */\n  async searchHealth(query, userContext) {\n    const request = {\n      query: query,\n      user_context: userContext\n    };\n\n    // If conversation_mode is enabled, use new API and convert to legacy format\n    if (userContext !== null && userContext !== void 0 && userContext.conversation_mode) {\n      const healthRequest = {\n        query: query,\n        user_context: userContext ? {\n          age: userContext.age,\n          health_concerns: userContext.health_concerns,\n          dietary_restrictions: userContext.dietary_restrictions,\n          activity_level: userContext.activity_level\n        } : undefined\n      };\n      const newResponse = await this.askHealthQuestion(healthRequest);\n      return this.convertToLegacyFormat(newResponse, query);\n    }\n    return this.askAnything(request);\n  }\n\n  /**\r\n   * Legacy compatibility method - nutrition search  \r\n   */\n  async searchNutrition(foodQuery, userContext) {\n    const query = `Nutrition information for ${foodQuery}`;\n    return this.searchHealth(query, userContext);\n  }\n\n  /**\r\n   * Legacy compatibility method - health news (now uses general health search)\r\n   */\n  async getHealthNews(categories, limit) {\n    const query = categories && categories.length > 0 ? `Latest health news about ${categories.join(', ')}` : 'Latest health news and wellness updates';\n    return this.searchHealth(query);\n  }\n\n  /**\r\n   * Convert new API response to legacy format for backward compatibility\r\n   */\n  convertToLegacyFormat(response, originalQuery) {\n    return {\n      success: response.success,\n      timestamp: response.timestamp,\n      response_type: 'health_intelligence_v4',\n      query: originalQuery,\n      wihy_response: {\n        query_type: 'health_intelligence',\n        query: originalQuery,\n        core_principle: response.data.response,\n        personalized_analysis: {\n          identified_risk_factors: [],\n          priority_health_goals: response.data.health_insights.key_benefits,\n          action_items: response.data.health_insights.recommendations.map((rec, index) => ({\n            action: rec,\n            priority: 'high',\n            target_illness: 'general_health',\n            evidence_level: 'high',\n            mechanism: 'lifestyle_modification',\n            timeline: 'ongoing'\n          })),\n          timeline: 'ongoing'\n        },\n        research_foundation: [{\n          citation_text: `WiHy Health Intelligence v4.0.0 (${response.data.processor_used})`,\n          study_type: 'ai_analysis',\n          key_finding: response.data.response\n        }],\n        progress_tracking: {\n          key_metrics: ['health_understanding', 'wellness_improvement'],\n          reassessment_period: '2 weeks'\n        },\n        biblical_wisdom: []\n      },\n      message: response.data.response\n    };\n  }\n\n  /**\r\n   * Enhanced error handling\r\n   */\n  handleError(error) {\n    if (error instanceof Error) {\n      // Check for timeout/abort errors\n      if (error.name === 'AbortError') {\n        return new Error('Request timed out - WiHy Health Intelligence services may be under heavy load');\n      }\n\n      // Check for CORS errors\n      if (error.message.includes('CORS') || error.message.includes('Access to fetch') || error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\n        return new Error('Unable to connect to WiHy Health Intelligence from this domain');\n      }\n\n      // Check for network/connectivity issues\n      if (error.message.includes('fetch') || error.message.includes('network') || error.name === 'TypeError' || error.message.includes('Failed to fetch')) {\n        return new Error('Network error - Unable to connect to WiHy Health Intelligence services');\n      }\n\n      // Check for server errors\n      if (error.message.includes('HTTP error! status: 5')) {\n        return new Error('WiHy Health Intelligence services temporarily unavailable');\n      }\n      return error;\n    }\n    return new Error('Unknown error occurred while contacting WiHy Health Intelligence');\n  }\n\n  /**\r\n   * Format response for display in the UI\r\n   */\n  formatResponse(response) {\n    var _response$analysis, _response$analysis2, _response$analysis3;\n    let formatted = `# WiHy Health Intelligence\\n\\n`;\n\n    // Main response content (prioritize analysis summary if available)\n    if ((_response$analysis = response.analysis) !== null && _response$analysis !== void 0 && _response$analysis.summary) {\n      formatted += response.analysis.summary;\n    } else {\n      formatted += response.data.response;\n    }\n\n    // Add health insights if available\n    if (response.data.health_insights) {\n      var _response$data$health, _response$data$health2, _response$data$health3;\n      if ((_response$data$health = response.data.health_insights.key_benefits) !== null && _response$data$health !== void 0 && _response$data$health.length) {\n        formatted += `\\n\\n## 🌟 Key Benefits\\n`;\n        response.data.health_insights.key_benefits.forEach(benefit => {\n          formatted += `- ${benefit}\\n`;\n        });\n      }\n      if ((_response$data$health2 = response.data.health_insights.potential_risks) !== null && _response$data$health2 !== void 0 && _response$data$health2.length) {\n        formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\n        response.data.health_insights.potential_risks.forEach(risk => {\n          formatted += `- ${risk}\\n`;\n        });\n      }\n      if ((_response$data$health3 = response.data.health_insights.recommendations) !== null && _response$data$health3 !== void 0 && _response$data$health3.length) {\n        formatted += `\\n\\n## 📋 Recommendations\\n`;\n        response.data.health_insights.recommendations.forEach(rec => {\n          formatted += `- ${rec}\\n`;\n        });\n      }\n    }\n\n    // Add enhanced OpenAI analysis if available\n    if ((_response$analysis2 = response.analysis) !== null && _response$analysis2 !== void 0 && _response$analysis2.openai_analysis) {\n      var _openai$sources, _openai$related_topic, _openai$recommendatio;\n      const openai = response.analysis.openai_analysis;\n      formatted += `\\n\\n## 🧠 Enhanced Scientific Analysis\\n\\n`;\n      formatted += openai.details;\n      if ((_openai$sources = openai.sources) !== null && _openai$sources !== void 0 && _openai$sources.length) {\n        formatted += `\\n\\n### 📚 Research Sources\\n`;\n        openai.sources.forEach((source, index) => {\n          formatted += `${index + 1}. ${source}\\n`;\n        });\n      }\n      if ((_openai$related_topic = openai.related_topics) !== null && _openai$related_topic !== void 0 && _openai$related_topic.length) {\n        formatted += `\\n\\n### 🔗 Related Topics\\n`;\n        openai.related_topics.forEach(topic => {\n          formatted += `- ${topic}\\n`;\n        });\n      }\n      if ((_openai$recommendatio = openai.recommendations) !== null && _openai$recommendatio !== void 0 && _openai$recommendatio.length) {\n        formatted += `\\n\\n### 💡 Evidence-Based Recommendations\\n`;\n        openai.recommendations.forEach(rec => {\n          formatted += `- ${rec}\\n`;\n        });\n      }\n      if (openai.medical_disclaimer) {\n        formatted += `\\n\\n### ⚕️ Medical Disclaimer\\n`;\n        formatted += `*${openai.medical_disclaimer}*`;\n      }\n    }\n\n    // Add confidence score if available\n    if (((_response$analysis3 = response.analysis) === null || _response$analysis3 === void 0 ? void 0 : _response$analysis3.confidence_score) !== undefined) {\n      formatted += `\\n\\n**Confidence Score**: ${Math.round(response.analysis.confidence_score * 100)}%`;\n    }\n\n    // Add processing info\n    const processingTime = response.processing_time || response.data.processing_time;\n    formatted += `\\n\\n---\\n\\n*Processed by ${response.data.processor_used} in ${processingTime.toFixed(2)}ms*`;\n    return formatted;\n  }\n\n  /**\r\n   * Format legacy response for display\r\n   */\n  formatWihyResponse(response) {\n    var _response$wihy_respon, _response$wihy_respon2;\n    let formatted = `# ${response.wihy_response.core_principle}\\n\\n`;\n\n    // Add recommendations\n    if (((_response$wihy_respon = response.wihy_response.personalized_analysis.action_items) === null || _response$wihy_respon === void 0 ? void 0 : _response$wihy_respon.length) > 0) {\n      formatted += `## 📋 Recommendations\\n`;\n      response.wihy_response.personalized_analysis.action_items.forEach(item => {\n        formatted += `- ${item.action}\\n`;\n      });\n      formatted += '\\n';\n    }\n\n    // Add health goals\n    if (((_response$wihy_respon2 = response.wihy_response.personalized_analysis.priority_health_goals) === null || _response$wihy_respon2 === void 0 ? void 0 : _response$wihy_respon2.length) > 0) {\n      formatted += `## 🎯 Health Benefits\\n`;\n      response.wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\n        formatted += `- ${goal}\\n`;\n      });\n      formatted += '\\n';\n    }\n\n    // Add timestamp\n    formatted += `---\\n\\n*WiHy Health Intelligence analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\n    return formatted;\n  }\n\n  /**\r\n   * Extract recommendations from response for UI display\r\n   */\n  extractRecommendations(response) {\n    if ('data' in response && response.data) {\n      var _healthResp$analysis, _healthResp$analysis$, _healthResp$analysis2;\n      // New format - check both standard and enhanced recommendations\n      const healthResp = response;\n      const recommendations = [];\n\n      // Add standard recommendations\n      if (healthResp.data.health_insights.recommendations) {\n        recommendations.push(...healthResp.data.health_insights.recommendations);\n      }\n\n      // Add enhanced OpenAI recommendations if available\n      if ((_healthResp$analysis = healthResp.analysis) !== null && _healthResp$analysis !== void 0 && (_healthResp$analysis$ = _healthResp$analysis.openai_analysis) !== null && _healthResp$analysis$ !== void 0 && _healthResp$analysis$.recommendations) {\n        recommendations.push(...healthResp.analysis.openai_analysis.recommendations);\n      }\n\n      // Add analysis-level recommendations if available\n      if ((_healthResp$analysis2 = healthResp.analysis) !== null && _healthResp$analysis2 !== void 0 && _healthResp$analysis2.recommendations) {\n        recommendations.push(...healthResp.analysis.recommendations);\n      }\n      return recommendations;\n    } else {\n      var _legacyResp$wihy_resp;\n      // Legacy format\n      const legacyResp = response;\n      return ((_legacyResp$wihy_resp = legacyResp.wihy_response.personalized_analysis.action_items) === null || _legacyResp$wihy_resp === void 0 ? void 0 : _legacyResp$wihy_resp.map(item => item.action)) || [];\n    }\n  }\n\n  /**\r\n   * Extract key benefits from response for UI display\r\n   */\n  extractBenefits(response) {\n    if ('data' in response && response.data) {\n      // New format\n      return response.data.health_insights.key_benefits || [];\n    } else {\n      // Legacy format  \n      const legacyResp = response;\n      return legacyResp.wihy_response.personalized_analysis.priority_health_goals || [];\n    }\n  }\n\n  /**\r\n   * Extract citations from response for UI display (legacy compatibility)\r\n   */\n  extractCitations(response) {\n    // Handle new HealthQuestionResponse format\n    if ('data' in response && response.data && 'processor_used' in response.data) {\n      var _healthResp$analysis3, _healthResp$analysis4;\n      const healthResp = response;\n      const citations = [];\n\n      // Add standard processor citation\n      citations.push(`WiHy Health Intelligence v4.0.0 (${healthResp.data.processor_used})`);\n\n      // Add OpenAI sources if available\n      if ((_healthResp$analysis3 = healthResp.analysis) !== null && _healthResp$analysis3 !== void 0 && (_healthResp$analysis4 = _healthResp$analysis3.openai_analysis) !== null && _healthResp$analysis4 !== void 0 && _healthResp$analysis4.sources) {\n        citations.push(...healthResp.analysis.openai_analysis.sources);\n      }\n      return citations;\n    }\n\n    // Handle legacy WihyResponse format\n    if ('wihy_response' in response) {\n      var _legacyResp$wihy_resp2;\n      const legacyResp = response;\n      return ((_legacyResp$wihy_resp2 = legacyResp.wihy_response.research_foundation) === null || _legacyResp$wihy_resp2 === void 0 ? void 0 : _legacyResp$wihy_resp2.map(research => `${research.citation_text}: ${research.key_finding}`)) || [];\n    }\n\n    // Handle UnifiedResponse format\n    if ('service_used' in response) {\n      const unifiedResp = response;\n      return unifiedResp.data.sources || [`${unifiedResp.service_used} service`];\n    }\n    return [];\n  }\n\n  /**\r\n   * Legacy compatibility - Enhanced health question (renamed method)\r\n   * NOTE: This method now defaults to analyse: false unless explicitly specified\r\n   */\n  async askEnhancedHealthQuestion(request) {\n    var _request$analyse;\n    const healthRequest = {\n      query: request.query,\n      analyse: (_request$analyse = request.analyse) !== null && _request$analyse !== void 0 ? _request$analyse : false,\n      // Default to basic analysis unless explicitly requested\n      user_context: request.context ? JSON.parse(request.context) : undefined\n    };\n    return this.askHealthQuestion(healthRequest);\n  }\n\n  /**\r\n   * Legacy compatibility - Scan food (removed functionality, returns helpful message)\r\n   */\n  async scanFood(file, options) {\n    logger.warn('scanFood method called but scanning functionality has been removed per API v4.0.0 update');\n    const query = `Analyze the food in this image: general food analysis`;\n    const response = await this.searchHealth(query);\n\n    // Add a note about the removed functionality  \n    response.message = \"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\";\n    return response;\n  }\n\n  /**\r\n   * Legacy compatibility - Scan food image (removed functionality, returns helpful message)\r\n   */\n  async scanFoodImage(file, context) {\n    logger.warn('scanFoodImage method called but scanning functionality has been removed per API v4.0.0 update');\n    const query = context ? `Analyze food: ${context}` : 'General food analysis and nutrition information';\n    const response = await this.searchHealth(query);\n    return {\n      success: true,\n      message: \"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\",\n      analysis: response.message,\n      recommendations: this.extractRecommendations(response)\n    };\n  }\n\n  /**\r\n   * Ask a health question with enhanced OpenAI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param analyse - Whether to include enhanced OpenAI analysis (default: false)\r\n   */\n  async askWithAnalysis(query, userContext, analyse = false) {\n    const healthRequest = {\n      query: query,\n      analyse: analyse,\n      user_context: userContext ? {\n        age: userContext.age,\n        health_concerns: userContext.health_concerns,\n        dietary_restrictions: userContext.dietary_restrictions,\n        activity_level: userContext.activity_level,\n        health_goals: userContext.health_concerns // Map health_concerns to health_goals for v4.0.0\n      } : undefined\n    };\n    return this.askHealthQuestion(healthRequest);\n  }\n\n  /**\r\n   * Ask a health question with enhanced OpenAI analysis enabled\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   */\n  async askWithEnhancedAnalysis(query, userContext) {\n    return this.askWithAnalysis(query, userContext, true);\n  }\n\n  /**\r\n   * ENHANCED ANALYSIS - Use this method from \"Analyze with WiHy\" buttons\r\n   * This method explicitly enables the analyse flag for comprehensive AI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param source - Source component calling this method (for logging)\r\n   */\n  async analyzeWithWiHy(query, userContext, source) {\n    logger.info(`Enhanced WiHy analysis requested from ${source || 'unknown component'}`, {\n      query\n    });\n    const healthRequest = {\n      query: query,\n      analyse: true,\n      // Always enable enhanced analysis for \"Analyze with WiHy\" buttons\n      user_context: userContext ? {\n        age: userContext.age,\n        health_concerns: userContext.health_concerns,\n        dietary_restrictions: userContext.dietary_restrictions,\n        activity_level: userContext.activity_level,\n        health_goals: userContext.health_concerns // Map health_concerns to health_goals for v4.0.0\n      } : undefined\n    };\n    return this.askHealthQuestion(healthRequest);\n  }\n}\n\n// Export singleton instance\nexport const wihyAPI = new WihyAPIService();\n\n// Default export for compatibility\nexport default wihyAPI;","map":{"version":3,"names":["logger","API_CONFIG","isUnifiedResponse","obj","WihyAPIService","constructor","baseURL","WIHY_API_URL","askHealthQuestion","request","_data$data","_data$data2","info","query","endpoint","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","errorText","text","error","status","statusText","Error","data","json","success","processor","processor_used","processingTime","processing_time","handleError","checkHealth","askAnything","healthRequest","user_context","age","health_concerns","dietary_restrictions","activity_level","undefined","convertToLegacyFormat","searchHealth","userContext","conversation_mode","newResponse","searchNutrition","foodQuery","getHealthNews","categories","limit","length","join","originalQuery","timestamp","response_type","wihy_response","query_type","core_principle","personalized_analysis","identified_risk_factors","priority_health_goals","health_insights","key_benefits","action_items","recommendations","map","rec","index","action","priority","target_illness","evidence_level","mechanism","timeline","research_foundation","citation_text","study_type","key_finding","progress_tracking","key_metrics","reassessment_period","biblical_wisdom","message","name","includes","formatResponse","_response$analysis","_response$analysis2","_response$analysis3","formatted","analysis","summary","_response$data$health","_response$data$health2","_response$data$health3","forEach","benefit","potential_risks","risk","openai_analysis","_openai$sources","_openai$related_topic","_openai$recommendatio","openai","details","sources","source","related_topics","topic","medical_disclaimer","confidence_score","Math","round","toFixed","formatWihyResponse","_response$wihy_respon","_response$wihy_respon2","item","goal","Date","toLocaleString","extractRecommendations","_healthResp$analysis","_healthResp$analysis$","_healthResp$analysis2","healthResp","push","_legacyResp$wihy_resp","legacyResp","extractBenefits","extractCitations","_healthResp$analysis3","_healthResp$analysis4","citations","_legacyResp$wihy_resp2","research","unifiedResp","service_used","askEnhancedHealthQuestion","_request$analyse","analyse","context","parse","scanFood","file","options","warn","scanFoodImage","askWithAnalysis","health_goals","askWithEnhancedAnalysis","analyzeWithWiHy","wihyAPI"],"sources":["C:/repo/wihy_ui/client/src/services/wihyAPI.ts"],"sourcesContent":["// ==================== WIHY HEALTH INTELLIGENCE API v4.0.0 ====================\r\n// Simplified implementation using ONLY the ASK endpoint\r\n// All legacy functionality removed per user request\r\n// Documentation: WIHY Health Intelligence API v4.0.0\r\n\r\nimport logger from '../utils/logger';\r\nimport { API_CONFIG } from '../config/apiConfig';\r\n\r\n// ==================== API v4.0.0 INTERFACES ====================\r\n\r\n// ASK endpoint request interface (OpenAPI v4.0.0)\r\nexport interface HealthQuestionRequest {\r\n  query: string;\r\n  analyse?: boolean; // Optional OpenAI enhanced analysis\r\n  user_context?: {\r\n    age?: number;\r\n    health_goals?: string[];\r\n    dietary_restrictions?: string[];\r\n    current_medications?: string[];\r\n    activity_level?: 'low' | 'moderate' | 'high' | 'very_high';\r\n    health_concerns?: string[];\r\n  };\r\n}\r\n\r\n// ASK endpoint response interface (OpenAPI v4.0.0)\r\nexport interface HealthQuestionResponse {\r\n  success: boolean;\r\n  data: {\r\n    response: string;\r\n    health_insights: {\r\n      key_benefits: string[];\r\n      potential_risks: string[];\r\n      recommendations: string[];\r\n    };\r\n    processor_used: string;\r\n    processing_time: number;\r\n  };\r\n  analysis?: {\r\n    summary: string;\r\n    recommendations: string[];\r\n    confidence_score: number;\r\n    charts?: {\r\n      [key: string]: {\r\n        type: string;\r\n        title: string;\r\n        data: any[];\r\n        colors?: string[];\r\n      };\r\n    };\r\n    metadata?: {\r\n      processor: string;\r\n      nova_group?: number;\r\n      health_score?: number;\r\n    };\r\n    openai_analysis?: {\r\n      summary: string;\r\n      details: string;\r\n      sources: string[];\r\n      related_topics: string[];\r\n      recommendations: string[];\r\n      medical_disclaimer: string;\r\n    };\r\n  };\r\n  timestamp: string;\r\n  processing_time?: number;\r\n}\r\n\r\n// Legacy compatibility types (minimal set for existing components)\r\nexport interface UserContext {\r\n  age?: number;\r\n  health_concerns?: string[];\r\n  dietary_restrictions?: string[];\r\n  activity_level?: 'low' | 'moderate' | 'high';\r\n  conversation_mode?: boolean; // For ChatWidget compatibility\r\n  response_style?: string; // For ChatWidget compatibility\r\n  current_context?: string; // For ChatWidget compatibility\r\n  is_followup?: boolean; // For ChatWidget compatibility\r\n  conversation_context?: any; // For ChatWidget conversation history\r\n}\r\n\r\nexport interface WihyRequest {\r\n  query: string;\r\n  user_context?: UserContext;\r\n}\r\n\r\n// Legacy response interface for backward compatibility\r\nexport interface WihyResponse {\r\n  success: boolean;\r\n  timestamp: string;\r\n  response_type: string;\r\n  query: string;\r\n  user_context?: UserContext;\r\n  wihy_response: {\r\n    query_type: string;\r\n    query: string;\r\n    core_principle: string;\r\n    personalized_analysis: {\r\n      identified_risk_factors: any[];\r\n      priority_health_goals: string[];\r\n      action_items: Array<{\r\n        action: string;\r\n        priority: string;\r\n        target_illness: string;\r\n        evidence_level: string;\r\n        mechanism: string;\r\n        timeline: string;\r\n      }>;\r\n      timeline: string;\r\n    };\r\n    research_foundation: Array<{\r\n      citation_text: string;\r\n      study_type: string;\r\n      key_finding: string;\r\n    }>;\r\n    progress_tracking: {\r\n      key_metrics: string[];\r\n      reassessment_period: string;\r\n    };\r\n    biblical_wisdom: string[];\r\n  };\r\n  message: string;\r\n}\r\n\r\n// Legacy UnifiedResponse interface for chart components compatibility\r\nexport interface UnifiedResponse {\r\n  success: boolean;\r\n  data: {\r\n    response?: string;\r\n    analysis?: string;\r\n    recommendations?: {\r\n      immediate_actions?: string[];\r\n      lifestyle_changes?: string[];\r\n      better_alternatives?: string[];\r\n      shopping_tips?: string[];\r\n      meal_planning?: string[];\r\n    };\r\n    sources?: string[];\r\n    [key: string]: any;\r\n  };\r\n  service_used: string;\r\n  request_type?: string;\r\n  processing_time?: number;\r\n}\r\n\r\n// Type guard for detecting unified responses at runtime (for chart compatibility)\r\nexport function isUnifiedResponse(obj: any): obj is UnifiedResponse {\r\n  return obj && typeof obj === 'object' && ('data' in obj) && ('service_used' in obj);\r\n}\r\n\r\n// ==================== WIHY API SERVICE CLASS ====================\r\n\r\nclass WihyAPIService {\r\n  private baseURL: string;\r\n\r\n  constructor() {\r\n    this.baseURL = API_CONFIG.WIHY_API_URL;\r\n  }\r\n\r\n  /**\r\n   * Ask WiHy Health Intelligence a question using the v4.0.0 ASK endpoint\r\n   */\r\n  async askHealthQuestion(request: HealthQuestionRequest): Promise<HealthQuestionResponse> {\r\n    try {\r\n      logger.info('Making WiHy API v4.0.0 ASK request', { query: request.query });\r\n      \r\n      const endpoint = `${this.baseURL}/ask`;\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n      \r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(request),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        logger.error(`WiHy API error: ${response.status} ${response.statusText}`, { error: errorText });\r\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n      }\r\n\r\n      const data: HealthQuestionResponse = await response.json();\r\n      logger.info('WiHy API response received', { \r\n        success: data.success, \r\n        processor: data.data?.processor_used || 'unknown',\r\n        processingTime: data.data?.processing_time || 'unknown'\r\n      });\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      logger.error('WiHy API request failed:', error);\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API health status\r\n   */\r\n  async checkHealth(): Promise<{ status: string; version: string }> {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/health`, {\r\n        method: 'GET',\r\n        headers: { 'Accept': 'application/json' }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      logger.error('WiHy API health check failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - converts old request format to new format\r\n   */\r\n  async askAnything(request: WihyRequest): Promise<WihyResponse> {\r\n    try {\r\n      // Convert legacy request to v4.0.0 format\r\n      const healthRequest: HealthQuestionRequest = {\r\n        query: request.query,\r\n        user_context: request.user_context ? {\r\n          age: request.user_context.age,\r\n          health_concerns: request.user_context.health_concerns,\r\n          dietary_restrictions: request.user_context.dietary_restrictions,\r\n          activity_level: request.user_context.activity_level\r\n        } : undefined\r\n      };\r\n      \r\n      // Call the new API\r\n      const response = await this.askHealthQuestion(healthRequest);\r\n      \r\n      // Convert response to legacy format for backward compatibility\r\n      return this.convertToLegacyFormat(response, request.query);\r\n      \r\n    } catch (error) {\r\n      logger.error('Legacy askAnything failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - general health search\r\n   */\r\n  async searchHealth(query: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const request: WihyRequest = {\r\n      query: query,\r\n      user_context: userContext\r\n    };\r\n\r\n    // If conversation_mode is enabled, use new API and convert to legacy format\r\n    if (userContext?.conversation_mode) {\r\n      const healthRequest: HealthQuestionRequest = {\r\n        query: query,\r\n        user_context: userContext ? {\r\n          age: userContext.age,\r\n          health_concerns: userContext.health_concerns,\r\n          dietary_restrictions: userContext.dietary_restrictions,\r\n          activity_level: userContext.activity_level\r\n        } : undefined\r\n      };\r\n      \r\n      const newResponse = await this.askHealthQuestion(healthRequest);\r\n      return this.convertToLegacyFormat(newResponse, query);\r\n    }\r\n\r\n    return this.askAnything(request);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - nutrition search  \r\n   */\r\n  async searchNutrition(foodQuery: string, userContext?: UserContext): Promise<WihyResponse> {\r\n    const query = `Nutrition information for ${foodQuery}`;\r\n    return this.searchHealth(query, userContext);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility method - health news (now uses general health search)\r\n   */\r\n  async getHealthNews(categories?: string[], limit?: number): Promise<WihyResponse> {\r\n    const query = categories && categories.length > 0 \r\n      ? `Latest health news about ${categories.join(', ')}`\r\n      : 'Latest health news and wellness updates';\r\n    \r\n    return this.searchHealth(query);\r\n  }\r\n\r\n  /**\r\n   * Convert new API response to legacy format for backward compatibility\r\n   */\r\n  private convertToLegacyFormat(response: HealthQuestionResponse, originalQuery: string): WihyResponse {\r\n    return {\r\n      success: response.success,\r\n      timestamp: response.timestamp,\r\n      response_type: 'health_intelligence_v4',\r\n      query: originalQuery,\r\n      wihy_response: {\r\n        query_type: 'health_intelligence',\r\n        query: originalQuery,\r\n        core_principle: response.data.response,\r\n        personalized_analysis: {\r\n          identified_risk_factors: [],\r\n          priority_health_goals: response.data.health_insights.key_benefits,\r\n          action_items: response.data.health_insights.recommendations.map((rec: string, index: number) => ({\r\n            action: rec,\r\n            priority: 'high',\r\n            target_illness: 'general_health',\r\n            evidence_level: 'high',\r\n            mechanism: 'lifestyle_modification',\r\n            timeline: 'ongoing'\r\n          })),\r\n          timeline: 'ongoing'\r\n        },\r\n        research_foundation: [{\r\n          citation_text: `WiHy Health Intelligence v4.0.0 (${response.data.processor_used})`,\r\n          study_type: 'ai_analysis',\r\n          key_finding: response.data.response\r\n        }],\r\n        progress_tracking: {\r\n          key_metrics: ['health_understanding', 'wellness_improvement'],\r\n          reassessment_period: '2 weeks'\r\n        },\r\n        biblical_wisdom: []\r\n      },\r\n      message: response.data.response\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling\r\n   */\r\n  private handleError(error: any): Error {\r\n    if (error instanceof Error) {\r\n      // Check for timeout/abort errors\r\n      if (error.name === 'AbortError') {\r\n        return new Error('Request timed out - WiHy Health Intelligence services may be under heavy load');\r\n      }\r\n      \r\n      // Check for CORS errors\r\n      if (error.message.includes('CORS') || \r\n          error.message.includes('Access to fetch') ||\r\n          error.message.includes('No \\'Access-Control-Allow-Origin\\'')) {\r\n        return new Error('Unable to connect to WiHy Health Intelligence from this domain');\r\n      }\r\n      \r\n      // Check for network/connectivity issues\r\n      if (error.message.includes('fetch') || \r\n          error.message.includes('network') || \r\n          error.name === 'TypeError' ||\r\n          error.message.includes('Failed to fetch')) {\r\n        return new Error('Network error - Unable to connect to WiHy Health Intelligence services');\r\n      }\r\n      \r\n      // Check for server errors\r\n      if (error.message.includes('HTTP error! status: 5')) {\r\n        return new Error('WiHy Health Intelligence services temporarily unavailable');\r\n      }\r\n      \r\n      return error;\r\n    }\r\n    \r\n    return new Error('Unknown error occurred while contacting WiHy Health Intelligence');\r\n  }\r\n\r\n  /**\r\n   * Format response for display in the UI\r\n   */\r\n  formatResponse(response: HealthQuestionResponse): string {\r\n    let formatted = `# WiHy Health Intelligence\\n\\n`;\r\n    \r\n    // Main response content (prioritize analysis summary if available)\r\n    if (response.analysis?.summary) {\r\n      formatted += response.analysis.summary;\r\n    } else {\r\n      formatted += response.data.response;\r\n    }\r\n    \r\n    // Add health insights if available\r\n    if (response.data.health_insights) {\r\n      if (response.data.health_insights.key_benefits?.length) {\r\n        formatted += `\\n\\n## 🌟 Key Benefits\\n`;\r\n        response.data.health_insights.key_benefits.forEach(benefit => {\r\n          formatted += `- ${benefit}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (response.data.health_insights.potential_risks?.length) {\r\n        formatted += `\\n\\n## ⚠️ Potential Risks\\n`;\r\n        response.data.health_insights.potential_risks.forEach(risk => {\r\n          formatted += `- ${risk}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (response.data.health_insights.recommendations?.length) {\r\n        formatted += `\\n\\n## 📋 Recommendations\\n`;\r\n        response.data.health_insights.recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add enhanced OpenAI analysis if available\r\n    if (response.analysis?.openai_analysis) {\r\n      const openai = response.analysis.openai_analysis;\r\n      \r\n      formatted += `\\n\\n## 🧠 Enhanced Scientific Analysis\\n\\n`;\r\n      formatted += openai.details;\r\n      \r\n      if (openai.sources?.length) {\r\n        formatted += `\\n\\n### 📚 Research Sources\\n`;\r\n        openai.sources.forEach((source, index) => {\r\n          formatted += `${index + 1}. ${source}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (openai.related_topics?.length) {\r\n        formatted += `\\n\\n### 🔗 Related Topics\\n`;\r\n        openai.related_topics.forEach(topic => {\r\n          formatted += `- ${topic}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (openai.recommendations?.length) {\r\n        formatted += `\\n\\n### 💡 Evidence-Based Recommendations\\n`;\r\n        openai.recommendations.forEach(rec => {\r\n          formatted += `- ${rec}\\n`;\r\n        });\r\n      }\r\n      \r\n      if (openai.medical_disclaimer) {\r\n        formatted += `\\n\\n### ⚕️ Medical Disclaimer\\n`;\r\n        formatted += `*${openai.medical_disclaimer}*`;\r\n      }\r\n    }\r\n    \r\n    // Add confidence score if available\r\n    if (response.analysis?.confidence_score !== undefined) {\r\n      formatted += `\\n\\n**Confidence Score**: ${Math.round(response.analysis.confidence_score * 100)}%`;\r\n    }\r\n    \r\n    // Add processing info\r\n    const processingTime = response.processing_time || response.data.processing_time;\r\n    formatted += `\\n\\n---\\n\\n*Processed by ${response.data.processor_used} in ${processingTime.toFixed(2)}ms*`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Format legacy response for display\r\n   */\r\n  formatWihyResponse(response: WihyResponse): string {\r\n    let formatted = `# ${response.wihy_response.core_principle}\\n\\n`;\r\n    \r\n    // Add recommendations\r\n    if (response.wihy_response.personalized_analysis.action_items?.length > 0) {\r\n      formatted += `## 📋 Recommendations\\n`;\r\n      response.wihy_response.personalized_analysis.action_items.forEach(item => {\r\n        formatted += `- ${item.action}\\n`;\r\n      });\r\n      formatted += '\\n';\r\n    }\r\n    \r\n    // Add health goals\r\n    if (response.wihy_response.personalized_analysis.priority_health_goals?.length > 0) {\r\n      formatted += `## 🎯 Health Benefits\\n`;\r\n      response.wihy_response.personalized_analysis.priority_health_goals.forEach(goal => {\r\n        formatted += `- ${goal}\\n`;\r\n      });\r\n      formatted += '\\n';\r\n    }\r\n    \r\n    // Add timestamp\r\n    formatted += `---\\n\\n*WiHy Health Intelligence analysis generated at: ${new Date(response.timestamp).toLocaleString()}*\\n`;\r\n    \r\n    return formatted;\r\n  }\r\n\r\n  /**\r\n   * Extract recommendations from response for UI display\r\n   */\r\n  extractRecommendations(response: HealthQuestionResponse | WihyResponse): string[] {\r\n    if ('data' in response && response.data) {\r\n      // New format - check both standard and enhanced recommendations\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const recommendations: string[] = [];\r\n      \r\n      // Add standard recommendations\r\n      if (healthResp.data.health_insights.recommendations) {\r\n        recommendations.push(...healthResp.data.health_insights.recommendations);\r\n      }\r\n      \r\n      // Add enhanced OpenAI recommendations if available\r\n      if (healthResp.analysis?.openai_analysis?.recommendations) {\r\n        recommendations.push(...healthResp.analysis.openai_analysis.recommendations);\r\n      }\r\n      \r\n      // Add analysis-level recommendations if available\r\n      if (healthResp.analysis?.recommendations) {\r\n        recommendations.push(...healthResp.analysis.recommendations);\r\n      }\r\n      \r\n      return recommendations;\r\n    } else {\r\n      // Legacy format\r\n      const legacyResp = response as WihyResponse;\r\n      return legacyResp.wihy_response.personalized_analysis.action_items?.map(item => item.action) || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract key benefits from response for UI display\r\n   */\r\n  extractBenefits(response: HealthQuestionResponse | WihyResponse): string[] {\r\n    if ('data' in response && response.data) {\r\n      // New format\r\n      return (response as HealthQuestionResponse).data.health_insights.key_benefits || [];\r\n    } else {\r\n      // Legacy format  \r\n      const legacyResp = response as WihyResponse;\r\n      return legacyResp.wihy_response.personalized_analysis.priority_health_goals || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract citations from response for UI display (legacy compatibility)\r\n   */\r\n  extractCitations(response: HealthQuestionResponse | WihyResponse | UnifiedResponse): string[] {\r\n    // Handle new HealthQuestionResponse format\r\n    if ('data' in response && response.data && 'processor_used' in response.data) {\r\n      const healthResp = response as HealthQuestionResponse;\r\n      const citations: string[] = [];\r\n      \r\n      // Add standard processor citation\r\n      citations.push(`WiHy Health Intelligence v4.0.0 (${healthResp.data.processor_used})`);\r\n      \r\n      // Add OpenAI sources if available\r\n      if (healthResp.analysis?.openai_analysis?.sources) {\r\n        citations.push(...healthResp.analysis.openai_analysis.sources);\r\n      }\r\n      \r\n      return citations;\r\n    }\r\n\r\n    // Handle legacy WihyResponse format\r\n    if ('wihy_response' in response) {\r\n      const legacyResp = response as WihyResponse;\r\n      return legacyResp.wihy_response.research_foundation?.map(research => \r\n        `${research.citation_text}: ${research.key_finding}`\r\n      ) || [];\r\n    }\r\n\r\n    // Handle UnifiedResponse format\r\n    if ('service_used' in response) {\r\n      const unifiedResp = response as UnifiedResponse;\r\n      return unifiedResp.data.sources || [`${unifiedResp.service_used} service`];\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility - Enhanced health question (renamed method)\r\n   * NOTE: This method now defaults to analyse: false unless explicitly specified\r\n   */\r\n  async askEnhancedHealthQuestion(request: { query: string; context?: string; user_id?: string; analyse?: boolean }): Promise<HealthQuestionResponse> {\r\n    const healthRequest: HealthQuestionRequest = {\r\n      query: request.query,\r\n      analyse: request.analyse ?? false, // Default to basic analysis unless explicitly requested\r\n      user_context: request.context ? JSON.parse(request.context) : undefined\r\n    };\r\n    \r\n    return this.askHealthQuestion(healthRequest);\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility - Scan food (removed functionality, returns helpful message)\r\n   */\r\n  async scanFood(file?: File, options?: any): Promise<WihyResponse> {\r\n    logger.warn('scanFood method called but scanning functionality has been removed per API v4.0.0 update');\r\n    \r\n    const query = `Analyze the food in this image: general food analysis`;\r\n    const response = await this.searchHealth(query);\r\n    \r\n    // Add a note about the removed functionality  \r\n    response.message = \"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\";\r\n    \r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Legacy compatibility - Scan food image (removed functionality, returns helpful message)\r\n   */\r\n  async scanFoodImage(file: File, context?: string): Promise<any> {\r\n    logger.warn('scanFoodImage method called but scanning functionality has been removed per API v4.0.0 update');\r\n    \r\n    const query = context ? `Analyze food: ${context}` : 'General food analysis and nutrition information';\r\n    const response = await this.searchHealth(query);\r\n    \r\n    return {\r\n      success: true,\r\n      message: \"Food scanning functionality has been updated. For food analysis, please describe the food in your question.\",\r\n      analysis: response.message,\r\n      recommendations: this.extractRecommendations(response)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ask a health question with enhanced OpenAI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param analyse - Whether to include enhanced OpenAI analysis (default: false)\r\n   */\r\n  async askWithAnalysis(query: string, userContext?: UserContext, analyse: boolean = false): Promise<HealthQuestionResponse> {\r\n    const healthRequest: HealthQuestionRequest = {\r\n      query: query,\r\n      analyse: analyse,\r\n      user_context: userContext ? {\r\n        age: userContext.age,\r\n        health_concerns: userContext.health_concerns,\r\n        dietary_restrictions: userContext.dietary_restrictions,\r\n        activity_level: userContext.activity_level,\r\n        health_goals: userContext.health_concerns // Map health_concerns to health_goals for v4.0.0\r\n      } : undefined\r\n    };\r\n    \r\n    return this.askHealthQuestion(healthRequest);\r\n  }\r\n\r\n  /**\r\n   * Ask a health question with enhanced OpenAI analysis enabled\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   */\r\n  async askWithEnhancedAnalysis(query: string, userContext?: UserContext): Promise<HealthQuestionResponse> {\r\n    return this.askWithAnalysis(query, userContext, true);\r\n  }\r\n\r\n  /**\r\n   * ENHANCED ANALYSIS - Use this method from \"Analyze with WiHy\" buttons\r\n   * This method explicitly enables the analyse flag for comprehensive AI analysis\r\n   * @param query - The health question to ask\r\n   * @param userContext - Optional user context for personalization\r\n   * @param source - Source component calling this method (for logging)\r\n   */\r\n  async analyzeWithWiHy(query: string, userContext?: UserContext, source?: string): Promise<HealthQuestionResponse> {\r\n    logger.info(`Enhanced WiHy analysis requested from ${source || 'unknown component'}`, { query });\r\n    \r\n    const healthRequest: HealthQuestionRequest = {\r\n      query: query,\r\n      analyse: true, // Always enable enhanced analysis for \"Analyze with WiHy\" buttons\r\n      user_context: userContext ? {\r\n        age: userContext.age,\r\n        health_concerns: userContext.health_concerns,\r\n        dietary_restrictions: userContext.dietary_restrictions,\r\n        activity_level: userContext.activity_level,\r\n        health_goals: userContext.health_concerns // Map health_concerns to health_goals for v4.0.0\r\n      } : undefined\r\n    };\r\n    \r\n    return this.askHealthQuestion(healthRequest);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const wihyAPI = new WihyAPIService();\r\n\r\n// Default export for compatibility\r\nexport default wihyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}