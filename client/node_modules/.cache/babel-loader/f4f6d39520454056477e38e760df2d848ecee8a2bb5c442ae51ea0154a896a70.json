{"ast":null,"code":"// src/services/visionAnalysisService.ts\n\n// WIHY Scanner API Configuration\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\nclass VisionAnalysisService {\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\n  async analyzeImage(imageFile) {\n    try {\n      console.log('🔍 Starting WIHY image analysis...');\n\n      // Get basic image information\n      const imageInfo = this.getImageInfo(imageFile);\n      console.log('Image info:', imageInfo);\n\n      // Use WIHY Scanner API for comprehensive food analysis\n      let wihyResult = null;\n      try {\n        console.log('Analyzing with WIHY Scanner API...');\n        wihyResult = await this.analyzeWithWihyAPI(imageFile, {\n          user_context: 'web_upload',\n          image_name: imageFile.name\n        });\n        console.log('WIHY Scanner analysis result:', wihyResult);\n      } catch (error) {\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n      if (wihyResult && wihyResult.success) {\n        return this.processWihyImageResponse(wihyResult, imageInfo);\n      } else {\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n    } catch (error) {\n      console.error('Vision analysis error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Analysis failed'\n      };\n    }\n  }\n\n  /**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */\n  async analyzeWithWihyAPI(input, userContext = {}) {\n    let response;\n    if (typeof input === 'string') {\n      // URL analysis\n      console.log('🌐 Analyzing image from URL:', input);\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image_url: input,\n          context: JSON.stringify({\n            analysis_type: 'food_health',\n            user_location: 'web_app',\n            input_type: 'url',\n            ...userContext\n          })\n        })\n      });\n    } else {\n      // File upload analysis\n      console.log('📁 Analyzing uploaded file:', input.name);\n      const formData = new FormData();\n      formData.append('image', input);\n      formData.append('context', JSON.stringify({\n        analysis_type: 'food_health',\n        user_location: 'web_app',\n        input_type: 'file_upload',\n        file_name: input.name,\n        file_size: input.size,\n        ...userContext\n      }));\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\n        method: 'POST',\n        body: formData\n      });\n    }\n    if (!response.ok) {\n      throw new Error(`WIHY API Error: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  /**\r\n   * Analyze image from URL\r\n   */\n  async analyzeImageUrl(imageUrl, userContext = {}) {\n    try {\n      console.log('🔍 Analyzing image from URL with WIHY Scanner API');\n      const wihyResult = await this.analyzeWithWihyAPI(imageUrl, {\n        ...userContext,\n        source: 'url_input'\n      });\n      if (wihyResult && wihyResult.success) {\n        return this.processWihyImageResponse(wihyResult, {\n          name: 'Image from URL',\n          size: 'Unknown',\n          type: 'url',\n          dimensions: 'Unknown'\n        });\n      } else {\n        return this.handleUrlAnalysisError(imageUrl);\n      }\n    } catch (error) {\n      console.error('URL image analysis failed:', error);\n      return this.handleUrlAnalysisError(imageUrl, error);\n    }\n  }\n\n  /**\r\n   * Handle URL analysis errors\r\n   */\n  handleUrlAnalysisError(imageUrl, error) {\n    return {\n      success: false,\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'URL analysis failed',\n      data: {\n        description: 'Could not analyze image from URL',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Analysis failed',\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: 'Image from URL',\n          size: 'Unknown',\n          type: 'url',\n          dimensions: 'Unknown'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Analysis failed',\n        isHealthy: false,\n        recommendations: ['URL Error - When in doubt, choose whole foods', 'Real food doesn\\'t need complex analysis'],\n        warnings: ['Could not analyze image from URL'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods when uncertain',\n        dataSources: ['Error - No data available']\n      }\n    };\n  }\n\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\n  processWihyImageResponse(wihyResult, imageInfo) {\n    var _nova_chart_reference, _wihy_analysis$family;\n    const {\n      success,\n      overall_assessment,\n      google_vision_analysis,\n      detected_foods,\n      nova_chart_reference,\n      wihy_recommendations,\n      wihy_analysis\n    } = wihyResult;\n    const healthScore = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.health_score) || 0;\n    const novaGroup = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.nova_group) || 4;\n    const verdict = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.verdict) || 'Analysis completed';\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference = nova_chart_reference.client_guidance) === null || _nova_chart_reference === void 0 ? void 0 : _nova_chart_reference.color_coding) || 'red';\n\n    // Extract detected foods\n    const foodItems = (detected_foods === null || detected_foods === void 0 ? void 0 : detected_foods.map(food => food.name || food)) || [];\n\n    // Extract recommendations and warnings\n    const recommendations = wihy_recommendations || [];\n    const warnings = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [];\n\n    // Determine if healthy based on NOVA group and health score\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family = wihy_analysis.family_safety) === null || _wihy_analysis$family === void 0 ? void 0 : _wihy_analysis$family.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: verdict,\n        foodItems: foodItems,\n        brands: [],\n        // Could extract from vision analysis\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\n        barcodes: [],\n        qrCodes: [],\n        text: (google_vision_analysis === null || google_vision_analysis === void 0 ? void 0 : google_vision_analysis.detected_text) || '',\n        imageInfo,\n        // WIHY Scanner specific data\n        healthScore,\n        novaGroup,\n        novaDescription: this.getNovaDescription(novaGroup),\n        isHealthy,\n        recommendations,\n        warnings,\n        familySafe,\n        colorCode,\n        verdict,\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\n      }\n    };\n  }\n\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\n  async fallbackAnalysis(imageFile, imageInfo) {\n    console.log('Using fallback analysis...');\n\n    // Try legacy WiHy API as fallback\n    let wihyAnalysis = '';\n    try {\n      const {\n        wihyAPI\n      } = await import('./wihyAPI');\n      const wihyResult = await wihyAPI.scanFood(imageFile);\n      if (wihyResult.success && wihyResult.message) {\n        wihyAnalysis = wihyResult.message;\n      }\n    } catch (error) {\n      console.log('Legacy WiHy API also unavailable');\n    }\n\n    // Extract potential nutrition and food information\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\n    return {\n      success: true,\n      data: {\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\n        foodItems: foodAnalysis.foodItems,\n        brands: foodAnalysis.brands,\n        nutritionText: foodAnalysis.nutritionText,\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo,\n        // Default WIHY values for fallback\n        healthScore: 50,\n        novaGroup: 4,\n        novaDescription: 'Unknown processing level',\n        isHealthy: false,\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\n        warnings: ['Could not analyze product completely'],\n        familySafe: false,\n        colorCode: 'orange',\n        verdict: 'Analysis limited - choose natural foods',\n        dataSources: ['Local Analysis']\n      }\n    };\n  }\n\n  /**\r\n   * Get NOVA group description\r\n   */\n  getNovaDescription(novaGroup) {\n    const descriptions = {\n      1: 'Natural - Real food as God intended',\n      2: 'Processed - Use sparingly',\n      3: 'Highly Processed - Find alternatives',\n      4: 'Ultra-Processed - Your family deserves better'\n    };\n    return descriptions[novaGroup] || descriptions[4];\n  }\n\n  /**\r\n   * Get basic image file information\r\n   */\n  getImageInfo(file) {\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\n    return {\n      name: file.name,\n      size: `${sizeInMB} MB`,\n      type: file.type,\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\n    };\n  }\n\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\n  analyzeFoodContent(analysisText, imageInfo) {\n    const text = analysisText.toLowerCase();\n\n    // Common food keywords\n    const foodKeywords = ['apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef', 'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable', 'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'];\n\n    // Common brand keywords\n    const brandKeywords = ['coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills', 'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'];\n\n    // Nutrition-related keywords\n    const nutritionKeywords = ['calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber', 'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'];\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\n    return {\n      foodItems: detectedFood,\n      brands: detectedBrands,\n      nutritionText: nutritionMentions.length > 0 ? `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : ''\n    };\n  }\n\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\n  async scanBarcode(barcode, userContext = {}) {\n    try {\n      console.log('🔍 Scanning barcode with WIHY Scanner API:', barcode);\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: barcode,\n          user_context: {\n            scan_location: 'web_app',\n            device_type: 'browser',\n            ...userContext\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\n      }\n      const result = await response.json();\n      return this.processWihyBarcodeResponse(result, barcode);\n    } catch (error) {\n      console.error('Barcode scan failed:', error);\n      return this.handleBarcodeError(error, barcode);\n    }\n  }\n\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\n  processWihyBarcodeResponse(result, barcode) {\n    var _nova_chart_reference2, _wihy_analysis$family2;\n    const {\n      success,\n      nova_group,\n      nova_description,\n      nova_chart_reference,\n      health_score,\n      wihy_analysis,\n      data_sources,\n      product_name\n    } = result;\n    const isHealthy = nova_group <= 2 && health_score >= 60;\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference2 = nova_chart_reference.client_guidance) === null || _nova_chart_reference2 === void 0 ? void 0 : _nova_chart_reference2.color_coding) || 'red';\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family2 = wihy_analysis.family_safety) === null || _wihy_analysis$family2 === void 0 ? void 0 : _wihy_analysis$family2.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: product_name || `Product ${barcode}`,\n        foodItems: product_name ? [product_name] : [],\n        brands: [],\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\n        barcodes: [barcode],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: `Barcode-${barcode}`,\n          size: 'N/A',\n          type: 'barcode',\n          dimensions: 'N/A'\n        },\n        // WIHY Scanner specific data\n        healthScore: health_score,\n        novaGroup: nova_group,\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\n        isHealthy,\n        recommendations: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.wihy_recommendations) || [],\n        warnings: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [],\n        familySafe,\n        colorCode,\n        verdict: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.verdict) || this.getHealthVerdict(health_score, nova_group),\n        dataSources: data_sources || ['WIHY Enhanced DB']\n      }\n    };\n  }\n\n  /**\r\n   * Handle barcode scan errors\r\n   */\n  handleBarcodeError(error, barcode) {\n    return {\n      success: false,\n      error: error.message || 'Barcode scan failed',\n      data: {\n        description: 'Could not analyze product',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Analysis failed',\n        barcodes: [barcode],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: `Barcode-${barcode}`,\n          size: 'N/A',\n          type: 'barcode',\n          dimensions: 'N/A'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Analysis failed',\n        isHealthy: false,\n        recommendations: ['API Error - When in doubt, choose whole foods', 'Real food doesn\\'t need barcodes'],\n        warnings: ['Could not analyze product'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods when uncertain',\n        dataSources: ['Error - No data available']\n      }\n    };\n  }\n\n  /**\r\n   * Get health verdict based on scores\r\n   */\n  getHealthVerdict(healthScore, novaGroup) {\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\n    if (novaGroup === 3) return 'Caution - highly processed food';\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\n    return 'Choose whole foods for better health';\n  }\n\n  /**\r\n   * Format analysis results for display\r\n   */\n  formatForDisplay(result) {\n    if (!result.success || !result.data) {\n      return result.error || 'Analysis failed';\n    }\n    const {\n      data\n    } = result;\n    const parts = [];\n\n    // WIHY Scanner results\n    if (data.verdict) {\n      parts.push(`🎯 ${data.verdict}`);\n    }\n\n    // Health information\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\n      parts.push(`📊 Health Score: ${data.healthScore}/100`);\n      parts.push(`🏷️ ${data.novaDescription}`);\n    }\n\n    // Detected foods\n    if (data.foodItems && data.foodItems.length > 0) {\n      parts.push(`🍎 Detected: ${data.foodItems.join(', ')}`);\n    }\n\n    // Recommendations\n    if (data.recommendations && data.recommendations.length > 0) {\n      parts.push(`💡 Recommendations:`);\n      data.recommendations.forEach(rec => parts.push(`  • ${rec}`));\n    }\n\n    // Warnings\n    if (data.warnings && data.warnings.length > 0) {\n      parts.push(`⚠️ Warnings:`);\n      data.warnings.forEach(warning => parts.push(`  • ${warning}`));\n    }\n\n    // Data sources\n    if (data.dataSources && data.dataSources.length > 0) {\n      parts.push(`📋 Data from: ${data.dataSources.join(' • ')}`);\n    }\n\n    // Fallback to basic info\n    if (parts.length === 0) {\n      if (data.description) {\n        parts.push(data.description);\n      }\n      if (data.imageInfo) {\n        parts.push(`📁 ${data.imageInfo.name} (${data.imageInfo.size})`);\n      }\n    }\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\n  }\n\n  /**\r\n   * Get color coding for UI display\r\n   */\n  getColorCoding(result) {\n    var _result$data;\n    if (!result.success || !((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.colorCode)) {\n      return {\n        color: 'red',\n        label: 'ERROR',\n        action: 'TRY AGAIN'\n      };\n    }\n    const colorMap = {\n      'green': {\n        color: '#4CAF50',\n        label: 'CHOOSE',\n        action: 'Great choice!'\n      },\n      'yellow': {\n        color: '#FFEB3B',\n        label: 'MODERATE',\n        action: 'Use sparingly'\n      },\n      'orange': {\n        color: '#FF9800',\n        label: 'LIMIT',\n        action: 'Find alternatives'\n      },\n      'red': {\n        color: '#F44336',\n        label: 'AVOID',\n        action: 'Choose whole foods instead'\n      }\n    };\n    return colorMap[result.data.colorCode] || colorMap.red;\n  }\n\n  /**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */\n  async analyzeAnyImage(input, context = {}) {\n    try {\n      // Handle different input types\n      if (input instanceof Blob && !(input instanceof File)) {\n        // Convert Blob to File for camera captures\n        const file = new File([input], 'camera-capture.jpg', {\n          type: 'image/jpeg'\n        });\n        return this.analyzeImage(file);\n      } else if (typeof input === 'string') {\n        // Handle URLs\n        return this.analyzeImageUrl(input, context);\n      } else {\n        // Handle File objects\n        return this.analyzeImage(input);\n      }\n    } catch (error) {\n      console.error('Image analysis failed:', error);\n      return this.handleGenericError(error);\n    }\n  }\n\n  /**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */\n  handleGenericError(error) {\n    return {\n      success: false,\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'Analysis failed',\n      data: {\n        description: 'Image analysis failed',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Choose whole foods when technology fails',\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: 'Analysis Failed',\n          size: 'N/A',\n          type: 'error',\n          dimensions: 'N/A'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Technical error',\n        isHealthy: false,\n        recommendations: ['Technical error - When in doubt, choose whole foods', 'Real food doesn\\'t need complex analysis', 'Shop the perimeter of the grocery store', 'If it has more than 5 ingredients, consider alternatives'],\n        warnings: ['Analysis system temporarily unavailable'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods - they\\'re always the safest bet',\n        dataSources: ['WIHY Health Guidance']\n      }\n    };\n  }\n\n  /**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */\n  async testApiHealth() {\n    try {\n      const startTime = Date.now();\n\n      // Test with a simple barcode scan\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: '3017620422003',\n          // Nutella test barcode\n          user_context: {\n            test: true\n          }\n        })\n      });\n      const latency = Date.now() - startTime;\n      if (response.ok) {\n        const result = await response.json();\n        const hasRequired = result.nova_group && result.health_score !== undefined;\n        return {\n          healthy: hasRequired,\n          message: hasRequired ? '✅ WIHY Scanner API is healthy' : '⚠️ API missing required fields',\n          latency\n        };\n      } else {\n        return {\n          healthy: false,\n          message: `❌ API Error: ${response.status}`,\n          latency\n        };\n      }\n    } catch (error) {\n      return {\n        healthy: false,\n        message: `❌ Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n}\nexport const visionAnalysisService = new VisionAnalysisService();","map":{"version":3,"names":["WIHY_API_BASE","VisionAnalysisService","analyzeImage","imageFile","console","log","imageInfo","getImageInfo","wihyResult","analyzeWithWihyAPI","user_context","image_name","name","error","fallbackAnalysis","success","processWihyImageResponse","Error","message","input","userContext","response","fetch","method","headers","body","JSON","stringify","image_url","context","analysis_type","user_location","input_type","formData","FormData","append","file_name","file_size","size","ok","status","json","analyzeImageUrl","imageUrl","source","type","dimensions","handleUrlAnalysisError","data","description","foodItems","brands","nutritionText","barcodes","qrCodes","text","healthScore","novaGroup","novaDescription","isHealthy","recommendations","warnings","familySafe","colorCode","verdict","dataSources","_nova_chart_reference","_wihy_analysis$family","overall_assessment","google_vision_analysis","detected_foods","nova_chart_reference","wihy_recommendations","wihy_analysis","health_score","nova_group","client_guidance","color_coding","map","food","carcinogen_warnings","family_safety","safety_score","detected_text","getNovaDescription","data_sources","wihyAnalysis","wihyAPI","scanFood","foodAnalysis","analyzeFoodContent","descriptions","file","sizeInMB","toFixed","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","length","join","scanBarcode","barcode","query","scan_location","device_type","result","processWihyBarcodeResponse","handleBarcodeError","_nova_chart_reference2","_wihy_analysis$family2","nova_description","product_name","getHealthVerdict","formatForDisplay","parts","push","undefined","forEach","rec","warning","getColorCoding","_result$data","color","label","action","colorMap","red","analyzeAnyImage","Blob","File","handleGenericError","testApiHealth","startTime","Date","now","test","latency","hasRequired","healthy","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n    // WIHY Scanner API fields\r\n    healthScore?: number;\r\n    novaGroup?: number;\r\n    novaDescription?: string;\r\n    isHealthy?: boolean;\r\n    recommendations?: string[];\r\n    warnings?: string[];\r\n    familySafe?: boolean;\r\n    colorCode?: string;\r\n    verdict?: string;\r\n    dataSources?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\n// WIHY Scanner API Configuration\r\nconst WIHY_API_BASE = 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\r\n\r\nclass VisionAnalysisService {\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Starting WIHY image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // Use WIHY Scanner API for comprehensive food analysis\r\n      let wihyResult: any = null;\r\n      \r\n      try {\r\n        console.log('Analyzing with WIHY Scanner API...');\r\n        wihyResult = await this.analyzeWithWihyAPI(imageFile, {\r\n          user_context: 'web_upload',\r\n          image_name: imageFile.name\r\n        });\r\n        console.log('WIHY Scanner analysis result:', wihyResult);\r\n      } catch (error) {\r\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, imageInfo);\r\n      } else {\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */\r\n  private async analyzeWithWihyAPI(input: File | string, userContext = {}): Promise<any> {\r\n    let response: Response;\r\n    \r\n    if (typeof input === 'string') {\r\n      // URL analysis\r\n      console.log('🌐 Analyzing image from URL:', input);\r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          image_url: input,\r\n          context: JSON.stringify({\r\n            analysis_type: 'food_health',\r\n            user_location: 'web_app',\r\n            input_type: 'url',\r\n            ...userContext\r\n          })\r\n        })\r\n      });\r\n    } else {\r\n      // File upload analysis\r\n      console.log('📁 Analyzing uploaded file:', input.name);\r\n      const formData = new FormData();\r\n      formData.append('image', input);\r\n      formData.append('context', JSON.stringify({\r\n        analysis_type: 'food_health',\r\n        user_location: 'web_app',\r\n        input_type: 'file_upload',\r\n        file_name: input.name,\r\n        file_size: input.size,\r\n        ...userContext\r\n      }));\r\n      \r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`WIHY API Error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Analyze image from URL\r\n   */\r\n  async analyzeImageUrl(imageUrl: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Analyzing image from URL with WIHY Scanner API');\r\n      \r\n      const wihyResult = await this.analyzeWithWihyAPI(imageUrl, {\r\n        ...userContext,\r\n        source: 'url_input'\r\n      });\r\n      \r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        });\r\n      } else {\r\n        return this.handleUrlAnalysisError(imageUrl);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('URL image analysis failed:', error);\r\n      return this.handleUrlAnalysisError(imageUrl, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle URL analysis errors\r\n   */\r\n  private handleUrlAnalysisError(imageUrl: string, error?: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'URL analysis failed',\r\n      data: {\r\n        description: 'Could not analyze image from URL',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'URL Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis'\r\n        ],\r\n        warnings: ['Could not analyze image from URL'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\r\n  private processWihyImageResponse(wihyResult: any, imageInfo: any): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      overall_assessment,\r\n      google_vision_analysis,\r\n      detected_foods,\r\n      nova_chart_reference,\r\n      wihy_recommendations,\r\n      wihy_analysis\r\n    } = wihyResult;\r\n\r\n    const healthScore = overall_assessment?.health_score || 0;\r\n    const novaGroup = overall_assessment?.nova_group || 4;\r\n    const verdict = overall_assessment?.verdict || 'Analysis completed';\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    \r\n    // Extract detected foods\r\n    const foodItems = detected_foods?.map((food: any) => food.name || food) || [];\r\n    \r\n    // Extract recommendations and warnings\r\n    const recommendations = wihy_recommendations || [];\r\n    const warnings = wihy_analysis?.carcinogen_warnings || [];\r\n    \r\n    // Determine if healthy based on NOVA group and health score\r\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: verdict,\r\n        foodItems: foodItems,\r\n        brands: [], // Could extract from vision analysis\r\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: google_vision_analysis?.detected_text || '',\r\n        imageInfo,\r\n        // WIHY Scanner specific data\r\n        healthScore,\r\n        novaGroup,\r\n        novaDescription: this.getNovaDescription(novaGroup),\r\n        isHealthy,\r\n        recommendations,\r\n        warnings,\r\n        familySafe,\r\n        colorCode,\r\n        verdict,\r\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\r\n  private async fallbackAnalysis(imageFile: File, imageInfo: any): Promise<VisionAnalysisResult> {\r\n    console.log('Using fallback analysis...');\r\n    \r\n    // Try legacy WiHy API as fallback\r\n    let wihyAnalysis = '';\r\n    \r\n    try {\r\n      const { wihyAPI } = await import('./wihyAPI');\r\n      const wihyResult = await wihyAPI.scanFood(imageFile);\r\n      \r\n      if (wihyResult.success && wihyResult.message) {\r\n        wihyAnalysis = wihyResult.message;\r\n      }\r\n    } catch (error) {\r\n      console.log('Legacy WiHy API also unavailable');\r\n    }\r\n\r\n    // Extract potential nutrition and food information\r\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\r\n        foodItems: foodAnalysis.foodItems,\r\n        brands: foodAnalysis.brands,\r\n        nutritionText: foodAnalysis.nutritionText,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo,\r\n        // Default WIHY values for fallback\r\n        healthScore: 50,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown processing level',\r\n        isHealthy: false,\r\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\r\n        warnings: ['Could not analyze product completely'],\r\n        familySafe: false,\r\n        colorCode: 'orange',\r\n        verdict: 'Analysis limited - choose natural foods',\r\n        dataSources: ['Local Analysis']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group description\r\n   */\r\n  private getNovaDescription(novaGroup: number): string {\r\n    const descriptions = {\r\n      1: 'Natural - Real food as God intended',\r\n      2: 'Processed - Use sparingly',\r\n      3: 'Highly Processed - Find alternatives',\r\n      4: 'Ultra-Processed - Your family deserves better'\r\n    };\r\n    \r\n    return descriptions[novaGroup as keyof typeof descriptions] || descriptions[4];\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\r\n  async scanBarcode(barcode: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Scanning barcode with WIHY Scanner API:', barcode);\r\n      \r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: barcode,\r\n          user_context: {\r\n            scan_location: 'web_app',\r\n            device_type: 'browser',\r\n            ...userContext\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      return this.processWihyBarcodeResponse(result, barcode);\r\n      \r\n    } catch (error) {\r\n      console.error('Barcode scan failed:', error);\r\n      return this.handleBarcodeError(error, barcode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\r\n  private processWihyBarcodeResponse(result: any, barcode: string): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      nova_group,\r\n      nova_description,\r\n      nova_chart_reference,\r\n      health_score,\r\n      wihy_analysis,\r\n      data_sources,\r\n      product_name\r\n    } = result;\r\n    \r\n    const isHealthy = nova_group <= 2 && health_score >= 60;\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: product_name || `Product ${barcode}`,\r\n        foodItems: product_name ? [product_name] : [],\r\n        brands: [],\r\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        // WIHY Scanner specific data\r\n        healthScore: health_score,\r\n        novaGroup: nova_group,\r\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\r\n        isHealthy,\r\n        recommendations: wihy_analysis?.wihy_recommendations || [],\r\n        warnings: wihy_analysis?.carcinogen_warnings || [],\r\n        familySafe,\r\n        colorCode,\r\n        verdict: wihy_analysis?.verdict || this.getHealthVerdict(health_score, nova_group),\r\n        dataSources: data_sources || ['WIHY Enhanced DB']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle barcode scan errors\r\n   */\r\n  private handleBarcodeError(error: any, barcode: string): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Barcode scan failed',\r\n      data: {\r\n        description: 'Could not analyze product',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'API Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need barcodes'\r\n        ],\r\n        warnings: ['Could not analyze product'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health verdict based on scores\r\n   */\r\n  private getHealthVerdict(healthScore: number, novaGroup: number): string {\r\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\r\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\r\n    if (novaGroup === 3) return 'Caution - highly processed food';\r\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\r\n    return 'Choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // WIHY Scanner results\r\n    if (data.verdict) {\r\n      parts.push(`🎯 ${data.verdict}`);\r\n    }\r\n\r\n    // Health information\r\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\r\n      parts.push(`📊 Health Score: ${data.healthScore}/100`);\r\n      parts.push(`🏷️ ${data.novaDescription}`);\r\n    }\r\n\r\n    // Detected foods\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`🍎 Detected: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Recommendations\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      parts.push(`💡 Recommendations:`);\r\n      data.recommendations.forEach(rec => parts.push(`  • ${rec}`));\r\n    }\r\n\r\n    // Warnings\r\n    if (data.warnings && data.warnings.length > 0) {\r\n      parts.push(`⚠️ Warnings:`);\r\n      data.warnings.forEach(warning => parts.push(`  • ${warning}`));\r\n    }\r\n\r\n    // Data sources\r\n    if (data.dataSources && data.dataSources.length > 0) {\r\n      parts.push(`📋 Data from: ${data.dataSources.join(' • ')}`);\r\n    }\r\n\r\n    // Fallback to basic info\r\n    if (parts.length === 0) {\r\n      if (data.description) {\r\n        parts.push(data.description);\r\n      }\r\n      if (data.imageInfo) {\r\n        parts.push(`📁 ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n      }\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Get color coding for UI display\r\n   */\r\n  getColorCoding(result: VisionAnalysisResult): { color: string; label: string; action: string } {\r\n    if (!result.success || !result.data?.colorCode) {\r\n      return { color: 'red', label: 'ERROR', action: 'TRY AGAIN' };\r\n    }\r\n\r\n    const colorMap = {\r\n      'green': { color: '#4CAF50', label: 'CHOOSE', action: 'Great choice!' },\r\n      'yellow': { color: '#FFEB3B', label: 'MODERATE', action: 'Use sparingly' },\r\n      'orange': { color: '#FF9800', label: 'LIMIT', action: 'Find alternatives' },\r\n      'red': { color: '#F44336', label: 'AVOID', action: 'Choose whole foods instead' }\r\n    };\r\n\r\n    return colorMap[result.data.colorCode as keyof typeof colorMap] || colorMap.red;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */\r\n  async analyzeAnyImage(input: File | string | Blob, context = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      // Handle different input types\r\n      if (input instanceof Blob && !(input instanceof File)) {\r\n        // Convert Blob to File for camera captures\r\n        const file = new File([input], 'camera-capture.jpg', { type: 'image/jpeg' });\r\n        return this.analyzeImage(file);\r\n      } else if (typeof input === 'string') {\r\n        // Handle URLs\r\n        return this.analyzeImageUrl(input, context);\r\n      } else {\r\n        // Handle File objects\r\n        return this.analyzeImage(input);\r\n      }\r\n    } catch (error) {\r\n      console.error('Image analysis failed:', error);\r\n      return this.handleGenericError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */\r\n  private handleGenericError(error: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'Analysis failed',\r\n      data: {\r\n        description: 'Image analysis failed',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Choose whole foods when technology fails',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Analysis Failed',\r\n          size: 'N/A',\r\n          type: 'error',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Technical error',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'Technical error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis',\r\n          'Shop the perimeter of the grocery store',\r\n          'If it has more than 5 ingredients, consider alternatives'\r\n        ],\r\n        warnings: ['Analysis system temporarily unavailable'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods - they\\'re always the safest bet',\r\n        dataSources: ['WIHY Health Guidance']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */\r\n  async testApiHealth(): Promise<{ healthy: boolean; message: string; latency?: number }> {\r\n    try {\r\n      const startTime = Date.now();\r\n      \r\n      // Test with a simple barcode scan\r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: '3017620422003', // Nutella test barcode\r\n          user_context: { test: true }\r\n        })\r\n      });\r\n      \r\n      const latency = Date.now() - startTime;\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const hasRequired = result.nova_group && result.health_score !== undefined;\r\n        \r\n        return {\r\n          healthy: hasRequired,\r\n          message: hasRequired ? '✅ WIHY Scanner API is healthy' : '⚠️ API missing required fields',\r\n          latency\r\n        };\r\n      } else {\r\n        return {\r\n          healthy: false,\r\n          message: `❌ API Error: ${response.status}`,\r\n          latency\r\n        };\r\n      }\r\n      \r\n    } catch (error) {\r\n      return {\r\n        healthy: false,\r\n        message: `❌ Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}