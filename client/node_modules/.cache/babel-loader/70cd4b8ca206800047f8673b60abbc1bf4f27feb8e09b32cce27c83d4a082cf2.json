{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';// Define trusted domains directly here instead of importing from self\nexport const TRUSTED_DOMAINS={'nih.gov':1,'ncbi.nlm.nih.gov':1,// PubMed\n'who.int':1,'cdc.gov':1,'fda.gov':1,'usda.gov':1,'jamanetwork.com':1,'nejm.org':1,'thelancet.com':1,'bmj.com':1,'nature.com':1,'mayoclinic.org':1,'health.harvard.edu':1};// Update API URL configuration\nclass NewsService{// Get the correct endpoint based on environment\ngetNewsEndpoint(){const isDevelopment=process.env.NODE_ENV==='development'||window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1';if(isDevelopment){// Based on working endpoint: /api/news\nconst localEndpoint='http://localhost:5001/api/news';console.log('🔧 Development mode: Using local endpoint:',localEndpoint);return localEndpoint;}else{// In production: use production endpoint\nconst prodEndpoint='https://services.wihy.ai/api/news';console.log('🚀 Production mode: Using production endpoint:',prodEndpoint);return prodEndpoint;}}/**\r\n   * Fetch news articles based on provided parameters\r\n   */async getArticles(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// Get the endpoint\nconst endpoint=this.getNewsEndpoint();// Set minimal parameters - backend may not support all OpenAPI parameters\nconst queryParams=_objectSpread({},params);// Only add limit if specified or use a reasonable default\nif(!queryParams.limit){queryParams.limit=50;}// Try to prioritize sources that might have images\n// Don't restrict to clinical trials only - get diverse news sources\nif(!queryParams.feed_id){// Remove any feed_id restriction to get articles from all sources\ndelete queryParams.feed_id;}// Remove any undefined parameters that might cause issues\nObject.keys(queryParams).forEach(key=>{if(queryParams[key]===undefined||queryParams[key]===null||queryParams[key]===''){delete queryParams[key];}});console.log('Fetching news with params:',queryParams);const isDevelopment=process.env.NODE_ENV==='development'||window.location.hostname==='localhost';console.log(\"\\uD83C\\uDF0D Environment: \".concat(isDevelopment?'Development':'Production'));console.log(\"\\uD83D\\uDCE1 Using endpoint: \".concat(endpoint));try{var _response$data,_response$data$articl,_response$data2,_response$data3,_response$data4,_response$data5;// Set timeout based on endpoint type (local vs remote)\nconst isLocal=endpoint.includes('localhost');const timeout=isLocal?30000:15000;// Much longer timeout for local development\nconsole.log(\"\\uD83D\\uDE80 Making request to: \".concat(endpoint));console.log(\"\\uD83D\\uDCCB Request params:\",queryParams);console.log(\"\\uD83D\\uDD0D Current window location:\",window.location.href);console.log(\"\\uD83D\\uDD0D Process NODE_ENV:\",process.env.NODE_ENV);console.log(\"\\uD83D\\uDD0D Final axios URL will be:\",endpoint);// For local development, try a simple connectivity test first\nif(isLocal){try{console.log('🔍 Testing basic connectivity to service...');const healthCheck=await axios.get('http://localhost:5001/',{timeout:5000});console.log('✅ Service is reachable');}catch(connectError){console.log('⚠️ Service connectivity check failed:',connectError.message);if(connectError.code==='ECONNREFUSED'){throw new Error('Local news service is not running on port 5001. Please start the service first.');}}}const response=await axios.get(endpoint,{params:queryParams,timeout:timeout,headers:{'Accept':'application/json','Content-Type':'application/json'}});console.log(\"\\u2705 Response status: \".concat(response.status));console.log(\"\\uD83D\\uDCE6 Response data type:\",typeof response.data);console.log(\"\\uD83D\\uDD0D Response structure:\",{keys:Object.keys(response.data||{}),isArray:Array.isArray(response.data),articlesCount:((_response$data=response.data)===null||_response$data===void 0?void 0:(_response$data$articl=_response$data.articles)===null||_response$data$articl===void 0?void 0:_response$data$articl.length)||0,totalCount:((_response$data2=response.data)===null||_response$data2===void 0?void 0:_response$data2.count)||0,totalAvailable:((_response$data3=response.data)===null||_response$data3===void 0?void 0:_response$data3.total)||0,success:(_response$data4=response.data)===null||_response$data4===void 0?void 0:_response$data4.success});// Log detailed information about sources and images\nconst articles=((_response$data5=response.data)===null||_response$data5===void 0?void 0:_response$data5.articles)||[];if(articles.length>0){console.log(\"\\uD83D\\uDCF0 Article sources and images:\");articles.slice(0,5).forEach((article,idx)=>{var _article$title;console.log(\"\".concat(idx+1,\". Source: \").concat(article.source,\" (Feed ID: \").concat(article.feed_id,\")\"));console.log(\"   Domain: \".concat(article.domain));console.log(\"   Has Image: \".concat(article.has_image));console.log(\"   Media URL: \".concat(article.media_url||'none'));console.log(\"   Thumbnail URL: \".concat(article.media_thumb_url||'none'));console.log(\"   Thumbnail: \".concat(article.thumbnail||'none'));console.log(\"   Title: \".concat((_article$title=article.title)===null||_article$title===void 0?void 0:_article$title.substring(0,60),\"...\"));console.log(\"---\");});// Show unique sources and their image stats\nconst sourceStats=articles.reduce((acc,article)=>{const source=article.source||'Unknown';if(!acc[source]){acc[source]={count:0,withImages:0,feedId:article.feed_id};}acc[source].count++;if(article.has_media||article.media_url||article.media_thumb_url){acc[source].withImages++;}return acc;},{});console.log('📊 Source statistics:');Object.entries(sourceStats).forEach(_ref=>{let[source,stats]=_ref;console.log(\"\".concat(source,\": \").concat(stats.count,\" articles, \").concat(stats.withImages,\" with images (Feed ID: \").concat(stats.feedId,\")\"));});}if(isLocal){var _response$data6;console.log('✅ Local endpoint successful:',endpoint);// Check if database is empty\nconst articleCount=((_response$data6=response.data)===null||_response$data6===void 0?void 0:_response$data6.count)||0;if(articleCount===0){console.log('📭 No articles found in local database');console.log('💡 The database appears to be empty');}}else{console.log('✅ Production endpoint successful:',endpoint);}// Process the response to add compatibility fields\nconst apiResponse=response.data;// Map API articles to client format\nif(apiResponse.articles&&apiResponse.articles.length>0){apiResponse.articles=apiResponse.articles.map(article=>this.adaptArticleForClient(article));}return apiResponse;}catch(error){var _error$response,_error$response2,_error$config,_error$config2;console.error(\"\\u274C Failed to fetch from \".concat(endpoint,\":\"),error.name);console.log(\"\\uD83D\\uDD0D Error details:\",{message:error.message,code:error.code,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,statusText:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.statusText,url:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,method:(_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.method});const isLocal=endpoint.includes('localhost');if(isLocal&&isDevelopment){var _error$response3;if(error.code==='ECONNREFUSED'||error.message.includes('Network Error')){console.error('💡 Local service not available. Make sure the RSS news service is running on port 5001');console.error('💡 You can start it with the appropriate command for your local setup');}else if(error.code==='ECONNABORTED'||error.message.includes('timeout')){console.error('💡 Request timed out. The service might be running but responding slowly');console.error('💡 Try testing the endpoint manually: http://localhost:5001/api/news');console.error('💡 Check if the service is processing data or needs time to start up');}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===404){console.error('💡 404 Error: The /api/news endpoint may not exist');console.error('💡 Check the API documentation at http://localhost:5001/api/service/docs/');console.error('💡 Verify the correct endpoint path with the service documentation');}}throw error;// Re-throw the error instead of trying fallbacks\n}}catch(error){console.error('Error fetching news articles:',error);return{success:false,articles:[],count:0,pagination:{total_items:0,total_pages:0,current_page:1,per_page:50,has_next_page:false,has_prev_page:false},filters_applied:{category:null,country:null,feed_id:null,limit:0},error:error instanceof Error?error.message:'Unknown error',message:error instanceof Error?error.message:'Unknown error'// For backward compatibility\n};}}/**\r\n   * Helper method to adapt API response article format to client format\r\n   */adaptArticleForClient(article){return _objectSpread(_objectSpread({},article),{},{// Map API fields to legacy compatibility fields\nurl:article.link,summary:article.description,publishedDate:article.pubDate,thumbnailUrl:article.media_thumb_url||'',imageUrl:article.media_url||'',hasMedia:article.has_media,source:article.feed_title,tags:article.keywords||[],readingTime:article.reading_time||Math.ceil((article.word_count||0)/200),wordCount:article.word_count});}/**\r\n   * Get available news categories from articles endpoint\r\n   */async getCategories(){try{// Based on the OpenAPI spec, health categories are:\nreturn['All Health News','Nutrition','Medical Research','Public Health','Clinical Studies','Prevention','Mental Health','General Health','Environment'];}catch(error){console.error('Error fetching news categories:',error);return[];}}/**\r\n   * Get available countries from articles endpoint\r\n   */async getCountries(){try{// Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\nreturn[{code:'US',name:'United States'},{code:'IN',name:'India'},{code:'UK',name:'United Kingdom'},{code:'CA',name:'Canada'},{code:'AU',name:'Australia'},{code:'DE',name:'Germany'},{code:'FR',name:'France'},{code:'JP',name:'Japan'}];}catch(error){console.error('Error fetching countries:',error);return[];}}/**\r\n   * Calculate trust score based on domain\r\n   */calculateTrustScore(article){try{// Extract domain from article link\nconst url=new URL(article.link);const domain=url.hostname.replace('www.','');return TRUSTED_DOMAINS[domain]||TRUSTED_DOMAINS[\"www.\".concat(domain)]||0.5;}catch(_unused){return 0.5;// Default score if URL parsing fails\n}}}export const newsService=new NewsService();// Update these functions to improve category filtering and sort by date\nexport const fetchNewsFeed=async(categories,limit)=>{// First, set up the API request parameters\nconst params={};// Only add category parameter if categories array is non-empty\nif(categories&&categories.length>0){params.category=categories.join(',');}// Request more articles than needed for better sorting/filtering\nparams.limit=limit?limit*2:50;// Note: Sorting is handled by the API internally, no sort parameters needed\nconsole.log('Fetching news with params:',params);// Fetch articles from API\nconst response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// Define priority categories in exact order\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];// Sort articles by our priority scheme\nconst sortedArticles=sortArticlesByPriority(response.articles,priorityCategories);// Limit to requested count after sorting\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Log first few articles to verify order\nconsole.log('Articles returned after prioritization:');limitedArticles.slice(0,5).forEach((article,i)=>{console.log(\"  \".concat(i+1,\". [\").concat(article.category||'uncategorized',\"]: \").concat(article.title));});// Return a modified response with our prioritized articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};// Add the prioritization function to the newsService file\nfunction sortArticlesByPriority(articles,priorityCategories){// Create a copy of the articles array\nconst sortedArticles=[...articles];// Define a function to get priority score (lower is higher priority)\nconst getPriorityScore=article=>{const category=article.category||'';const categoryLower=category.toLowerCase();// FIRST: Explicitly handle tech content - make sure it's always at the bottom\n// Check if it's explicitly categorized as tech\nif(categoryLower==='tech'||categoryLower.includes('technology')||categoryLower.includes('computing')||categoryLower.includes('it ')||categoryLower.includes('software')){console.log(\"\\uD83D\\uDC49 Found tech article, assigning lowest priority: \".concat(article.title));return 1000;// Tech should be shown last\n}// 1. Exact match with priority categories (in strict order)\nfor(let i=0;i<priorityCategories.length;i++){if(category===priorityCategories[i]){return i;// Return the exact index position (0, 1, 2, etc.)\n}}// 2. Partial match with priority categories\nfor(let i=0;i<priorityCategories.length;i++){if(category.includes(priorityCategories[i])){return i+20;// Still keep order but with lower priority than exact matches\n}}// 3. Check for health-related keywords in title/description\nconst title=article.title||'';const description=article.description||'';const content=title+' '+description;const contentLower=content.toLowerCase();const healthKeywords=['health','medical','medicine','doctor','patient','hospital','disease','treatment','cure','wellness','fitness','diet','nutrition','mental','therapy','clinical','drug','vaccine','symptom','diagnosis','cancer','heart','diabetes','covid'];if(healthKeywords.some(keyword=>contentLower.includes(keyword))){return 100;// All health-related content after categorized content\n}// 4. Check for tech keywords in title/description if not already caught above\nconst techKeywords=['tech','technology','computing','software','hardware','ai','artificial intelligence','computer','code','programming','developer','cybersecurity','digital','internet','smartphone','app ','apps ','device','gadget','google','apple','microsoft','facebook','twitter','social media','tesla','elon musk'];if(techKeywords.some(keyword=>contentLower.includes(keyword))){// Extra debug log for tech content detection\nconsole.log(\"\\uD83D\\uDC49 Found tech content by keyword, assigning lowest priority: \".concat(article.title));return 900;// Tech content at the bottom, but just above explicitly categorized tech\n}// 5. Everything else (general content)\nreturn 500;};// Sort articles by priority score\nsortedArticles.sort((a,b)=>{const priorityA=getPriorityScore(a);const priorityB=getPriorityScore(b);// First sort by priority category\nif(priorityA!==priorityB){return priorityA-priorityB;}// If same priority category, sort by date (newest first)\nconst dateA=a.publishedDate||a.pubDate;const dateB=b.publishedDate||b.pubDate;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Add debug information to see what categories are being returned\nconsole.log('Article order after prioritization:');sortedArticles.slice(0,8).forEach((article,idx)=>{// Show the priority score as part of the debugging\nconst score=getPriorityScore(article);const category=article.category||'uncategorized';console.log(\"  \".concat(idx+1,\". [\").concat(score,\"] [\").concat(category,\"]: \").concat(article.title));});return sortedArticles;}// Update getArticlesByCategory to use the same prioritization logic\nexport const getArticlesByCategory=async(category,limit)=>{if(category==='all'){return fetchNewsFeed([],limit);}const params={category,limit:limit?Math.round(limit*1.5):20,// Fetch a few more than needed\nquality:'1'// Get quality articles with good images\n};const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// For category views, we still want to sort by date but within the category\nconst sortedArticles=response.articles.sort((a,b)=>{const dateA=a.publishedDate||a.pubDate;const dateB=b.publishedDate||b.pubDate;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Limit to requested count\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Return a modified response with our sorted articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};// Add these functions at the end of the file\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */export const refreshNewsFeed=async(categories,limit)=>{const timestamp=new Date().getTime();const params={timestamp,// Add timestamp to bust cache\nlimit:limit||50};if(categories&&categories.length>0){params.category=categories.join(',');}// Use quality parameter for better articles\nparams.quality='1';console.log('Refreshing news feed with timestamp:',timestamp);const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// Use the same priority sorting as fetchNewsFeed\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];const sortedArticles=sortArticlesByPriority(response.articles,priorityCategories);// Limit to requested count after sorting\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);// Return a modified response with our prioritized articles\nreturn _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};/**\r\n * Search for news articles based on query\r\n */export const searchNewsArticles=async(query,limit)=>{if(!query||query.trim()===''){// If no query, return empty results\nreturn{success:true,articles:[],count:0,pagination:{total_items:0,total_pages:0,current_page:1,per_page:12,has_next_page:false,has_prev_page:false},filters_applied:{category:null,country:null,feed_id:null,limit:0}};}const params={query:query.trim(),limit:limit||50,quality:'1'// Get quality articles with good images for search\n};console.log(\"Searching news articles with query: \\\"\".concat(query,\"\\\"\"));const response=await newsService.getArticles(params);if(response.success&&response.articles&&response.articles.length>0){// For search results, we want to prioritize by relevance to search term\n// But still use our priority categories as a secondary sort\nconst priorityCategories=['Nutrition & Diet','Medical Research','Public Health','Clinical Studies','Disease Prevention','Mental Health','General Health'];// Sort articles based on search relevance and category\nconst sortedArticles=response.articles.sort((a,b)=>{// First, prioritize by relevance score if available\nif(a.relevanceScore!==undefined&&b.relevanceScore!==undefined){if(a.relevanceScore!==b.relevanceScore){return b.relevanceScore-a.relevanceScore;}}// If relevance scores are the same, use our category priority\nconst categoryA=a.category||'';const categoryB=b.category||'';// Check if categories are in our priority list\nconst indexA=priorityCategories.findIndex(cat=>categoryA.includes(cat));const indexB=priorityCategories.findIndex(cat=>categoryB.includes(cat));// If both categories are in priority list\nif(indexA>=0&&indexB>=0){if(indexA!==indexB){return indexA-indexB;}}// If only one category is in priority list\nelse if(indexA>=0){return-1;}else if(indexB>=0){return 1;}// Finally, sort by date\nconst dateA=a.publishedDate||a.pubDate;const dateB=b.publishedDate||b.pubDate;if(dateA&&dateB){return new Date(dateB).getTime()-new Date(dateA).getTime();}return 0;});// Limit to requested count\nconst limitedArticles=sortedArticles.slice(0,limit||sortedArticles.length);return _objectSpread(_objectSpread({},response),{},{articles:limitedArticles,count:limitedArticles.length});}return response;};","map":{"version":3,"names":["axios","TRUSTED_DOMAINS","NewsService","getNewsEndpoint","isDevelopment","process","env","NODE_ENV","window","location","hostname","localEndpoint","console","log","prodEndpoint","getArticles","params","arguments","length","undefined","endpoint","queryParams","_objectSpread","limit","feed_id","Object","keys","forEach","key","concat","_response$data","_response$data$articl","_response$data2","_response$data3","_response$data4","_response$data5","isLocal","includes","timeout","href","healthCheck","get","connectError","message","code","Error","response","headers","status","data","isArray","Array","articlesCount","articles","totalCount","count","totalAvailable","total","success","slice","article","idx","_article$title","source","domain","has_image","media_url","media_thumb_url","thumbnail","title","substring","sourceStats","reduce","acc","withImages","feedId","has_media","entries","_ref","stats","_response$data6","articleCount","apiResponse","map","adaptArticleForClient","error","_error$response","_error$response2","_error$config","_error$config2","name","statusText","url","config","method","_error$response3","pagination","total_items","total_pages","current_page","per_page","has_next_page","has_prev_page","filters_applied","category","country","link","summary","description","publishedDate","pubDate","thumbnailUrl","imageUrl","hasMedia","feed_title","tags","keywords","readingTime","reading_time","Math","ceil","word_count","wordCount","getCategories","getCountries","calculateTrustScore","URL","replace","_unused","newsService","fetchNewsFeed","categories","join","priorityCategories","sortedArticles","sortArticlesByPriority","limitedArticles","i","getPriorityScore","categoryLower","toLowerCase","content","contentLower","healthKeywords","some","keyword","techKeywords","sort","a","b","priorityA","priorityB","dateA","dateB","Date","getTime","score","getArticlesByCategory","round","quality","refreshNewsFeed","timestamp","searchNewsArticles","query","trim","relevanceScore","categoryA","categoryB","indexA","findIndex","cat","indexB"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define trusted domains directly here instead of importing from self\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,  // PubMed\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'mayoclinic.org': 1,\r\n  'health.harvard.edu': 1\r\n};\r\n\r\n// Update API URL configuration\r\nimport { getApiEndpoint } from '../config/apiConfig';\r\n\r\nexport interface NewsArticle {\r\n  // Core API response fields (expected CNN Health API structure)\r\n  id: number;                        // Unique article identifier (number format like 12359)\r\n  title: string;                     // Article title\r\n  description: string;               // Article description/summary\r\n  link: string;                      // Article URL\r\n  pubDate: string;                   // Publication date (ISO format)\r\n  category: string;                  // Original category from feed\r\n  mapped_category: string;           // Health-specific category mapping\r\n  feed_title: string;                // Source publication name (e.g., \"CNN Health\")\r\n  feed_id: number;                   // RSS feed ID\r\n  media_url: string;                 // Main image URL (actual images from CNN/sources)\r\n  media_thumb_url: string;           // Thumbnail image URL\r\n  has_media: boolean;                // Whether article has images\r\n  word_count: number;                // Article word count\r\n  time_ago: string;                  // Human-readable time since publication\r\n  is_recent: boolean;                // Published within last 24 hours\r\n  keywords: string[];                // Article keywords/tags\r\n  \r\n  // Optional fields that may not always be present\r\n  author?: string;                   // Article author (can be empty)\r\n  has_author?: boolean;              // Whether article has author info\r\n  feed_priority?: string;            // Feed priority level\r\n  reading_time?: number;             // Estimated reading time in minutes\r\n  content_quality?: 'high' | 'medium' | 'low';  // Content quality assessment\r\n  completeness?: 'complete' | 'partial' | 'minimal';  // Data completeness\r\n  domain?: string;                   // Source domain\r\n  extracted_at?: string;             // When article was extracted\r\n  \r\n  // Legacy/compatibility fields for existing client code\r\n  url?: string;                      // Alias for link\r\n  summary?: string;                  // Alias for description\r\n  publishedDate?: string;            // Alias for pubDate\r\n  thumbnailUrl?: string;             // Alias for media_thumb_url\r\n  imageUrl?: string;                 // Alias for media_url\r\n  hasMedia?: boolean;                // Alias for has_media\r\n  source?: string;                   // Alias for feed_title\r\n  tags?: string[];                   // Alias for keywords\r\n  wordCount?: number;                // Alias for word_count\r\n  readingTime?: number;              // Calculated reading time\r\n  relevanceScore?: number;           // Client-side scoring\r\n  mediaType?: string;                // Media type classification\r\n  contentLength?: number;            // Content length\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  total?: number;                    // Total available articles\r\n  message?: string;                  // API message\r\n  pagination?: {\r\n    total_items: number;\r\n    total_pages: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n    has_prev_page: boolean;\r\n  };\r\n  filters_applied?: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: number | null;\r\n    limit: number;\r\n    quality?: string;                // Added from OpenAPI spec\r\n  };\r\n  // Quality mode field (when quality=1)\r\n  flagged_for_review?: Array<{\r\n    id: number;\r\n    title: string;\r\n    reason: string;\r\n    category: string;\r\n  }>;\r\n  error?: string; // Added to handle errors from the API\r\n}\r\n\r\nexport interface NewsQueryParams {\r\n  limit?: number;                    // Number of articles to return (1-500)\r\n  quality?: string;                  // '1'/'true' for quality articles, '0'/'false' for all\r\n  category?: string;                 // Health categories: 'All Health News', 'Nutrition', etc.\r\n  country?: string;                  // Country code: US, IN, UK, CA, AU, DE, FR, JP\r\n  feed_id?: number;                  // Filter by specific feed ID\r\n  feed_priority?: string;            // Feed priority: single, range, or comma-separated\r\n  flat?: string | boolean;           // Return flat structure ('true'/'false')\r\n  page?: number;                     // Page number (starts at 1)\r\n  per_page?: number;                 // Number of articles per page (1-100)\r\n  your_new_param?: string;           // Additional parameter from API spec\r\n  timestamp?: number;                // Added to support refreshNewsFeed\r\n  query?: string;                    // Added to support searchNewsArticles\r\n}\r\n\r\nclass NewsService {\r\n  // Get the correct endpoint based on environment\r\n  private getNewsEndpoint(): string {\r\n    const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                         window.location.hostname === 'localhost' ||\r\n                         window.location.hostname === '127.0.0.1';\r\n    \r\n    if (isDevelopment) {\r\n      // Based on working endpoint: /api/news\r\n      const localEndpoint = 'http://localhost:5001/api/news';\r\n      console.log('🔧 Development mode: Using local endpoint:', localEndpoint);\r\n      return localEndpoint;\r\n    } else {\r\n      // In production: use production endpoint\r\n      const prodEndpoint = 'https://services.wihy.ai/api/news';\r\n      console.log('🚀 Production mode: Using production endpoint:', prodEndpoint);\r\n      return prodEndpoint;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Fetch news articles based on provided parameters\r\n   */\r\n  async getArticles(params: NewsQueryParams = {}): Promise<NewsFeedResponse> {\r\n    try {\r\n      // Get the endpoint\r\n      const endpoint = this.getNewsEndpoint();\r\n      \r\n      // Set minimal parameters - backend may not support all OpenAPI parameters\r\n      const queryParams: any = {\r\n        ...params // Start with provided params\r\n      };\r\n\r\n      // Only add limit if specified or use a reasonable default\r\n      if (!queryParams.limit) {\r\n        queryParams.limit = 50;\r\n      }\r\n\r\n      // Try to prioritize sources that might have images\r\n      // Don't restrict to clinical trials only - get diverse news sources\r\n      if (!queryParams.feed_id) {\r\n        // Remove any feed_id restriction to get articles from all sources\r\n        delete queryParams.feed_id;\r\n      }\r\n\r\n      // Remove any undefined parameters that might cause issues\r\n      Object.keys(queryParams).forEach(key => {\r\n        if (queryParams[key] === undefined || queryParams[key] === null || queryParams[key] === '') {\r\n          delete queryParams[key];\r\n        }\r\n      });\r\n\r\n      console.log('Fetching news with params:', queryParams);\r\n      \r\n      const isDevelopment = process.env.NODE_ENV === 'development' || \r\n                           window.location.hostname === 'localhost';\r\n      \r\n      console.log(`🌍 Environment: ${isDevelopment ? 'Development' : 'Production'}`);\r\n      console.log(`📡 Using endpoint: ${endpoint}`);\r\n      \r\n      try {\r\n        // Set timeout based on endpoint type (local vs remote)\r\n        const isLocal = endpoint.includes('localhost');\r\n        const timeout = isLocal ? 30000 : 15000; // Much longer timeout for local development\r\n        \r\n        console.log(`🚀 Making request to: ${endpoint}`);\r\n        console.log(`📋 Request params:`, queryParams);\r\n        console.log(`🔍 Current window location:`, window.location.href);\r\n        console.log(`🔍 Process NODE_ENV:`, process.env.NODE_ENV);\r\n        console.log(`🔍 Final axios URL will be:`, endpoint);\r\n        \r\n        // For local development, try a simple connectivity test first\r\n        if (isLocal) {\r\n          try {\r\n            console.log('🔍 Testing basic connectivity to service...');\r\n            const healthCheck = await axios.get('http://localhost:5001/', { timeout: 5000 });\r\n            console.log('✅ Service is reachable');\r\n          } catch (connectError: any) {\r\n            console.log('⚠️ Service connectivity check failed:', connectError.message);\r\n            if (connectError.code === 'ECONNREFUSED') {\r\n              throw new Error('Local news service is not running on port 5001. Please start the service first.');\r\n            }\r\n          }\r\n        }\r\n        \r\n        const response = await axios.get(endpoint, { \r\n          params: queryParams,\r\n          timeout: timeout,\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        console.log(`✅ Response status: ${response.status}`);\r\n        console.log(`📦 Response data type:`, typeof response.data);\r\n        console.log(`🔍 Response structure:`, {\r\n          keys: Object.keys(response.data || {}),\r\n          isArray: Array.isArray(response.data),\r\n          articlesCount: (response.data as any)?.articles?.length || 0,\r\n          totalCount: (response.data as any)?.count || 0,\r\n          totalAvailable: (response.data as any)?.total || 0,\r\n          success: (response.data as any)?.success\r\n        });\r\n\r\n        // Log detailed information about sources and images\r\n        const articles = (response.data as any)?.articles || [];\r\n        if (articles.length > 0) {\r\n          console.log(`📰 Article sources and images:`)\r\n          articles.slice(0, 5).forEach((article: any, idx: number) => {\r\n            console.log(`${idx + 1}. Source: ${article.source} (Feed ID: ${article.feed_id})`);\r\n            console.log(`   Domain: ${article.domain}`);\r\n            console.log(`   Has Image: ${article.has_image}`);\r\n            console.log(`   Media URL: ${article.media_url || 'none'}`);\r\n            console.log(`   Thumbnail URL: ${article.media_thumb_url || 'none'}`);\r\n            console.log(`   Thumbnail: ${article.thumbnail || 'none'}`);\r\n            console.log(`   Title: ${article.title?.substring(0, 60)}...`);\r\n            console.log(`---`);\r\n          });\r\n\r\n          // Show unique sources and their image stats\r\n          const sourceStats = articles.reduce((acc: any, article: any) => {\r\n            const source = article.source || 'Unknown';\r\n            if (!acc[source]) {\r\n              acc[source] = { count: 0, withImages: 0, feedId: article.feed_id };\r\n            }\r\n            acc[source].count++;\r\n            if (article.has_media || article.media_url || article.media_thumb_url) {\r\n              acc[source].withImages++;\r\n            }\r\n            return acc;\r\n          }, {});\r\n\r\n          console.log('📊 Source statistics:');\r\n          Object.entries(sourceStats).forEach(([source, stats]: [string, any]) => {\r\n            console.log(`${source}: ${stats.count} articles, ${stats.withImages} with images (Feed ID: ${stats.feedId})`);\r\n          });\r\n        }\r\n        \r\n        if (isLocal) {\r\n          console.log('✅ Local endpoint successful:', endpoint);\r\n          \r\n          // Check if database is empty\r\n          const articleCount = (response.data as any)?.count || 0;\r\n          if (articleCount === 0) {\r\n            console.log('📭 No articles found in local database');\r\n            console.log('💡 The database appears to be empty');\r\n          }\r\n        } else {\r\n          console.log('✅ Production endpoint successful:', endpoint);\r\n        }\r\n        \r\n        // Process the response to add compatibility fields\r\n        const apiResponse = response.data as NewsFeedResponse;\r\n        \r\n        // Map API articles to client format\r\n        if (apiResponse.articles && apiResponse.articles.length > 0) {\r\n          apiResponse.articles = apiResponse.articles.map(article => this.adaptArticleForClient(article));\r\n        }\r\n        \r\n        return apiResponse;\r\n        \r\n      } catch (error: any) {\r\n        console.error(`❌ Failed to fetch from ${endpoint}:`, error.name);\r\n        console.log(`🔍 Error details:`, {\r\n          message: error.message,\r\n          code: error.code,\r\n          status: error.response?.status,\r\n          statusText: error.response?.statusText,\r\n          url: error.config?.url,\r\n          method: error.config?.method\r\n        });\r\n        \r\n        const isLocal = endpoint.includes('localhost');\r\n        \r\n        if (isLocal && isDevelopment) {\r\n          if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error')) {\r\n            console.error('💡 Local service not available. Make sure the RSS news service is running on port 5001');\r\n            console.error('💡 You can start it with the appropriate command for your local setup');\r\n          } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n            console.error('💡 Request timed out. The service might be running but responding slowly');\r\n            console.error('💡 Try testing the endpoint manually: http://localhost:5001/api/news');\r\n            console.error('💡 Check if the service is processing data or needs time to start up');\r\n          } else if (error.response?.status === 404) {\r\n            console.error('💡 404 Error: The /api/news endpoint may not exist');\r\n            console.error('💡 Check the API documentation at http://localhost:5001/api/service/docs/');\r\n            console.error('💡 Verify the correct endpoint path with the service documentation');\r\n          }\r\n        }\r\n        \r\n        throw error; // Re-throw the error instead of trying fallbacks\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching news articles:', error);\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        count: 0,\r\n        pagination: {\r\n          total_items: 0,\r\n          total_pages: 0,\r\n          current_page: 1,\r\n          per_page: 50,\r\n          has_next_page: false,\r\n          has_prev_page: false\r\n        },\r\n        filters_applied: {\r\n          category: null,\r\n          country: null,\r\n          feed_id: null,\r\n          limit: 0\r\n        },\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        message: error instanceof Error ? error.message : 'Unknown error' // For backward compatibility\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to adapt API response article format to client format\r\n   */\r\n  private adaptArticleForClient(article: NewsArticle): NewsArticle {\r\n    return {\r\n      ...article,\r\n      // Map API fields to legacy compatibility fields\r\n      url: article.link,\r\n      summary: article.description,\r\n      publishedDate: article.pubDate,\r\n      thumbnailUrl: article.media_thumb_url || '',\r\n      imageUrl: article.media_url || '',\r\n      hasMedia: article.has_media,\r\n      source: article.feed_title,\r\n      tags: article.keywords || [],\r\n      readingTime: article.reading_time || Math.ceil((article.word_count || 0) / 200),\r\n      wordCount: article.word_count\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available news categories from articles endpoint\r\n   */\r\n  async getCategories(): Promise<string[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, health categories are:\r\n      return [\r\n        'All Health News', \r\n        'Nutrition', \r\n        'Medical Research', \r\n        'Public Health', \r\n        'Clinical Studies', \r\n        'Prevention', \r\n        'Mental Health', \r\n        'General Health', \r\n        'Environment'\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching news categories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available countries from articles endpoint\r\n   */\r\n  async getCountries(): Promise<{code: string, name: string}[]> {\r\n    try {\r\n      // Based on the OpenAPI spec, supported countries are: US, IN, UK, CA, AU, DE, FR, JP\r\n      return [\r\n        { code: 'US', name: 'United States' },\r\n        { code: 'IN', name: 'India' },\r\n        { code: 'UK', name: 'United Kingdom' },\r\n        { code: 'CA', name: 'Canada' },\r\n        { code: 'AU', name: 'Australia' },\r\n        { code: 'DE', name: 'Germany' },\r\n        { code: 'FR', name: 'France' },\r\n        { code: 'JP', name: 'Japan' }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate trust score based on domain\r\n   */\r\n  calculateTrustScore(article: NewsArticle): number {\r\n    try {\r\n      // Extract domain from article link\r\n      const url = new URL(article.link);\r\n      const domain = url.hostname.replace('www.', '');\r\n      \r\n      return TRUSTED_DOMAINS[domain] || \r\n             TRUSTED_DOMAINS[`www.${domain}`] || \r\n             0.5;\r\n    } catch {\r\n      return 0.5; // Default score if URL parsing fails\r\n    }\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();\r\n\r\n// Update these functions to improve category filtering and sort by date\r\n\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  // First, set up the API request parameters\r\n  const params: NewsQueryParams = {};\r\n  \r\n  // Only add category parameter if categories array is non-empty\r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Request more articles than needed for better sorting/filtering\r\n  params.limit = limit ? limit * 2 : 50;\r\n  \r\n  // Note: Sorting is handled by the API internally, no sort parameters needed\r\n  \r\n  console.log('Fetching news with params:', params);\r\n  \r\n  // Fetch articles from API\r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Define priority categories in exact order\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles by our priority scheme\r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Log first few articles to verify order\r\n    console.log('Articles returned after prioritization:');\r\n    limitedArticles.slice(0, 5).forEach((article, i) => {\r\n      console.log(`  ${i+1}. [${article.category || 'uncategorized'}]: ${article.title}`);\r\n    });\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add the prioritization function to the newsService file\r\nfunction sortArticlesByPriority(articles: NewsArticle[], priorityCategories: string[]): NewsArticle[] {\r\n  // Create a copy of the articles array\r\n  const sortedArticles = [...articles];\r\n  \r\n  // Define a function to get priority score (lower is higher priority)\r\n  const getPriorityScore = (article: NewsArticle): number => {\r\n    const category = article.category || '';\r\n    const categoryLower = category.toLowerCase();\r\n    \r\n    // FIRST: Explicitly handle tech content - make sure it's always at the bottom\r\n    // Check if it's explicitly categorized as tech\r\n    if (categoryLower === 'tech' || \r\n        categoryLower.includes('technology') || \r\n        categoryLower.includes('computing') || \r\n        categoryLower.includes('it ') || \r\n        categoryLower.includes('software')) {\r\n      console.log(`👉 Found tech article, assigning lowest priority: ${article.title}`);\r\n      return 1000; // Tech should be shown last\r\n    }\r\n    \r\n    // 1. Exact match with priority categories (in strict order)\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category === priorityCategories[i]) {\r\n        return i; // Return the exact index position (0, 1, 2, etc.)\r\n      }\r\n    }\r\n    \r\n    // 2. Partial match with priority categories\r\n    for (let i = 0; i < priorityCategories.length; i++) {\r\n      if (category.includes(priorityCategories[i])) {\r\n        return i + 20; // Still keep order but with lower priority than exact matches\r\n      }\r\n    }\r\n    \r\n    // 3. Check for health-related keywords in title/description\r\n    const title = article.title || '';\r\n    const description = article.description || '';\r\n    const content = title + ' ' + description;\r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const healthKeywords = [\r\n      'health', 'medical', 'medicine', 'doctor', 'patient', 'hospital',\r\n      'disease', 'treatment', 'cure', 'wellness', 'fitness', 'diet',\r\n      'nutrition', 'mental', 'therapy', 'clinical', 'drug', 'vaccine',\r\n      'symptom', 'diagnosis', 'cancer', 'heart', 'diabetes', 'covid'\r\n    ];\r\n    \r\n    if (healthKeywords.some(keyword => contentLower.includes(keyword))) {\r\n      return 100; // All health-related content after categorized content\r\n    }\r\n    \r\n    // 4. Check for tech keywords in title/description if not already caught above\r\n    const techKeywords = ['tech', 'technology', 'computing', 'software', 'hardware', \r\n                        'ai', 'artificial intelligence', 'computer', 'code', 'programming',\r\n                        'developer', 'cybersecurity', 'digital', 'internet', 'smartphone',\r\n                        'app ', 'apps ', 'device', 'gadget', 'google', 'apple', 'microsoft',\r\n                        'facebook', 'twitter', 'social media', 'tesla', 'elon musk'];\r\n    \r\n    if (techKeywords.some(keyword => \r\n      contentLower.includes(keyword)\r\n    )) {\r\n      // Extra debug log for tech content detection\r\n      console.log(`👉 Found tech content by keyword, assigning lowest priority: ${article.title}`);\r\n      return 900; // Tech content at the bottom, but just above explicitly categorized tech\r\n    }\r\n    \r\n    // 5. Everything else (general content)\r\n    return 500; \r\n  };\r\n  \r\n  // Sort articles by priority score\r\n  sortedArticles.sort((a, b) => {\r\n    const priorityA = getPriorityScore(a);\r\n    const priorityB = getPriorityScore(b);\r\n    \r\n    // First sort by priority category\r\n    if (priorityA !== priorityB) {\r\n      return priorityA - priorityB;\r\n    }\r\n    \r\n    // If same priority category, sort by date (newest first)\r\n    const dateA = a.publishedDate || a.pubDate;\r\n    const dateB = b.publishedDate || b.pubDate;\r\n    \r\n    if (dateA && dateB) {\r\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n  \r\n  // Add debug information to see what categories are being returned\r\n  console.log('Article order after prioritization:');\r\n  sortedArticles.slice(0, 8).forEach((article, idx) => {\r\n    // Show the priority score as part of the debugging\r\n    const score = getPriorityScore(article);\r\n    const category = article.category || 'uncategorized';\r\n    console.log(`  ${idx + 1}. [${score}] [${category}]: ${article.title}`);\r\n  });\r\n  \r\n  return sortedArticles;\r\n}\r\n\r\n// Update getArticlesByCategory to use the same prioritization logic\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (category === 'all') {\r\n    return fetchNewsFeed([], limit);\r\n  }\r\n  \r\n  const params: NewsQueryParams = { \r\n    category, \r\n    limit: limit ? Math.round(limit * 1.5) : 20, // Fetch a few more than needed\r\n    quality: '1' // Get quality articles with good images\r\n  };\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For category views, we still want to sort by date but within the category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      const dateA = a.publishedDate || a.pubDate;\r\n      const dateB = b.publishedDate || b.pubDate;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our sorted articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n// Add these functions at the end of the file\r\n\r\n/**\r\n * Refresh news feed with timestamp to get latest articles\r\n */\r\nexport const refreshNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  const timestamp = new Date().getTime();\r\n  const params: NewsQueryParams = {\r\n    timestamp, // Add timestamp to bust cache\r\n    limit: limit || 50\r\n  };\r\n  \r\n  if (categories && categories.length > 0) {\r\n    params.category = categories.join(',');\r\n  }\r\n  \r\n  // Use quality parameter for better articles\r\n  params.quality = '1';\r\n  \r\n  console.log('Refreshing news feed with timestamp:', timestamp);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // Use the same priority sorting as fetchNewsFeed\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    const sortedArticles = sortArticlesByPriority(response.articles, priorityCategories);\r\n    \r\n    // Limit to requested count after sorting\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    // Return a modified response with our prioritized articles\r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * Search for news articles based on query\r\n */\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  if (!query || query.trim() === '') {\r\n    // If no query, return empty results\r\n    return {\r\n      success: true,\r\n      articles: [],\r\n      count: 0,\r\n      pagination: {\r\n        total_items: 0,\r\n        total_pages: 0,\r\n        current_page: 1,\r\n        per_page: 12,\r\n        has_next_page: false,\r\n        has_prev_page: false\r\n      },\r\n      filters_applied: {\r\n        category: null,\r\n        country: null,\r\n        feed_id: null,\r\n        limit: 0\r\n      }\r\n    };\r\n  }\r\n  \r\n  const params: NewsQueryParams = {\r\n    query: query.trim(),\r\n    limit: limit || 50,\r\n    quality: '1' // Get quality articles with good images for search\r\n  };\r\n  \r\n  console.log(`Searching news articles with query: \"${query}\"`);\r\n  \r\n  const response = await newsService.getArticles(params);\r\n  \r\n  if (response.success && response.articles && response.articles.length > 0) {\r\n    // For search results, we want to prioritize by relevance to search term\r\n    // But still use our priority categories as a secondary sort\r\n    const priorityCategories = [\r\n      'Nutrition & Diet', \r\n      'Medical Research', \r\n      'Public Health', \r\n      'Clinical Studies', \r\n      'Disease Prevention', \r\n      'Mental Health', \r\n      'General Health'\r\n    ];\r\n    \r\n    // Sort articles based on search relevance and category\r\n    const sortedArticles = response.articles.sort((a, b) => {\r\n      // First, prioritize by relevance score if available\r\n      if (a.relevanceScore !== undefined && b.relevanceScore !== undefined) {\r\n        if (a.relevanceScore !== b.relevanceScore) {\r\n          return b.relevanceScore - a.relevanceScore;\r\n        }\r\n      }\r\n      \r\n      // If relevance scores are the same, use our category priority\r\n      const categoryA = a.category || '';\r\n      const categoryB = b.category || '';\r\n      \r\n      // Check if categories are in our priority list\r\n      const indexA = priorityCategories.findIndex(cat => categoryA.includes(cat));\r\n      const indexB = priorityCategories.findIndex(cat => categoryB.includes(cat));\r\n      \r\n      // If both categories are in priority list\r\n      if (indexA >= 0 && indexB >= 0) {\r\n        if (indexA !== indexB) {\r\n          return indexA - indexB;\r\n        }\r\n      } \r\n      // If only one category is in priority list\r\n      else if (indexA >= 0) {\r\n        return -1;\r\n      } else if (indexB >= 0) {\r\n        return 1;\r\n      }\r\n      \r\n      // Finally, sort by date\r\n      const dateA = a.publishedDate || a.pubDate;\r\n      const dateB = b.publishedDate || b.pubDate;\r\n      \r\n      if (dateA && dateB) {\r\n        return new Date(dateB).getTime() - new Date(dateA).getTime();\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n    \r\n    // Limit to requested count\r\n    const limitedArticles = sortedArticles.slice(0, limit || sortedArticles.length);\r\n    \r\n    return {\r\n      ...response,\r\n      articles: limitedArticles,\r\n      count: limitedArticles.length\r\n    };\r\n  }\r\n  \r\n  return response;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}