{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// vHealth News API Client Integration\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\n// API Configuration\nconst API_BASE_URL={production:'https://services.wihy.ai',development:'http://localhost:5001'};class VHealthNewsClient{constructor(baseUrl){this.baseUrl=void 0;// Use production by default\nthis.baseUrl=baseUrl||API_BASE_URL.production;}async getArticles(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryParams=new URLSearchParams();if(params.limit)queryParams.append('limit',params.limit.toString());if(params.category)queryParams.append('category',params.category);if(params.fresh!==undefined)queryParams.append('fresh',params.fresh.toString());const fullUrl=\"\".concat(this.baseUrl,\"/api/news/articles?\").concat(queryParams);console.log('Making API request to:',fullUrl);const response=await fetch(fullUrl,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}const data=await response.json();// Add legacy compatibility fields to articles\nconst articles=data.articles||[];data.articles=articles.map(article=>_objectSpread(_objectSpread({},article),{},{// Legacy compatibility fields\npublishedDate:article.published_at,pubDate:article.published_at,category:article.ai_category,summary:article.description,tags:[article.ai_category,article.source],media_url:article.image_url,media_thumb_url:article.image_url,relevanceScore:article.quality_score/10,link:article.url}));return{success:data.success!==false,articles:data.articles,count:data.count||data.articles.length,sources_used:data.sources_used||[],pagination:data.pagination||{total_items:data.articles.length,current_page:1,per_page:data.articles.length,has_next_page:false},filters_applied:data.filters_applied||{category:params.category||null,source:'all',limit:params.limit||20,ai_categorization:true},timestamp:data.timestamp||new Date().toISOString()};}async getCategories(){const response=await fetch(\"\".concat(this.baseUrl,\"/api/news/categories\"));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}async getStats(){const response=await fetch(\"\".concat(this.baseUrl,\"/api/news/stats\"));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}async healthCheck(){const response=await fetch(\"\".concat(this.baseUrl,\"/api/health\"));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}async testSource(source){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;const response=await fetch(\"\".concat(this.baseUrl,\"/api/news/test/\").concat(source,\"?limit=\").concat(limit));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}}// Initialize the client\nconst newsClient=new VHealthNewsClient();// Simple function to fetch news feed - API handles all filtering\nexport const fetchNewsFeed=async(categories,limit)=>{try{// Simple API call - no client-side filtering needed\nconst response=await newsClient.getArticles({limit:limit||100,fresh:true});return{success:response.success,articles:response.articles};}catch(error){console.error('vHealth News API error:',error);return{success:false,articles:[]};}};export const getArticlesByCategory=async(category,limit)=>{try{// Simple API call with category - API handles filtering\nconst response=await newsClient.getArticles({category,limit:limit||100,fresh:true});return{success:response.success,articles:response.articles};}catch(error){console.error('vHealth News API error (category):',error);return{success:false,articles:[]};}};export const refreshNewsFeed=async()=>{// Simple refresh - API handles everything\nreturn await fetchNewsFeed(undefined,100);};export const searchNewsArticles=async(query,limit)=>{try{// Simple search call - API handles query processing\nconst response=await newsClient.getArticles({limit:limit||100,fresh:true});return{success:response.success,articles:response.articles};}catch(error){console.error('vHealth News API error (search):',error);return{success:false,articles:[]};}};// Simple function to get all news - API handles filtering and priority\nexport const getAllNews=async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;try{// Simple API call - server handles all filtering, categorization, and priority sorting\nconst response=await newsClient.getArticles({limit:limit,fresh:true});return{success:response.success,articles:response.articles,count:response.count,sources_used:response.sources_used};}catch(error){console.error('Error fetching all news:',error);return{success:false,articles:[],count:0,sources_used:[]};}};export const getNewsCategories=async()=>{try{const response=await newsClient.getCategories();return response.success?response.categories:[];}catch(error){console.error('Error fetching categories:',error);// Return default categories if API fails\nreturn[{category:'Medical Research',description:'Latest medical studies and breakthroughs'},{category:'Clinical Studies',description:'Clinical trials and medical research'},{category:'Public Health',description:'Community health and disease prevention'},{category:'Prevention',description:'Preventive medicine and wellness'},{category:'Nutrition',description:'Diet, supplements, and nutritional research'},{category:'Mental Health',description:'Mental wellness and psychological health'},{category:'Health Technology',description:'Health tech and medical AI innovations'},{category:'Medical Technology',description:'Medical devices and healthcare technology'},{category:'General Health',description:'General health news and information'},{category:'Environment',description:'Environmental health and sustainability'},{category:'Technology',description:'Tech innovations and digital trends'},{category:'General News',description:'General news and current events'}];}};export const getNewsStats=async()=>{try{return await newsClient.getStats();}catch(error){console.error('Error fetching news stats:',error);return{error:'Stats unavailable'};}};export const checkNewsServiceHealth=async()=>{try{const health=await newsClient.healthCheck();return health.status==='healthy';}catch(error){console.error('News service health check failed:',error);return false;}};// Export the client for advanced usage\nexport{VHealthNewsClient,newsClient};","map":{"version":3,"names":["API_BASE_URL","production","development","VHealthNewsClient","constructor","baseUrl","getArticles","params","arguments","length","undefined","queryParams","URLSearchParams","limit","append","toString","category","fresh","fullUrl","concat","console","log","response","fetch","method","headers","ok","Error","status","data","json","articles","map","article","_objectSpread","publishedDate","published_at","pubDate","ai_category","summary","description","tags","source","media_url","image_url","media_thumb_url","relevanceScore","quality_score","link","url","success","count","sources_used","pagination","total_items","current_page","per_page","has_next_page","filters_applied","ai_categorization","timestamp","Date","toISOString","getCategories","getStats","healthCheck","testSource","newsClient","fetchNewsFeed","categories","error","getArticlesByCategory","refreshNewsFeed","searchNewsArticles","query","getAllNews","getNewsCategories","getNewsStats","checkNewsServiceHealth","health"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// vHealth News API Client Integration\r\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content: string;\r\n  url: string;\r\n  link?: string; // Alternative URL field for legacy compatibility\r\n  image_url: string | null;\r\n  source: string;\r\n  author: string | null;\r\n  published_at: string;\r\n  publishedDate?: string; // Alternative date field for legacy compatibility\r\n  pubDate?: string; // Alternative date field for legacy compatibility\r\n  api_source: 'NewsAPI' | 'GNews' | 'NewsData' | 'MediaStack';\r\n  ai_category: string;\r\n  category?: string; // Legacy compatibility\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  has_image: boolean;\r\n  has_author: boolean;\r\n  reading_time: number;\r\n  quality_score: number;\r\n  tags: string[]; // Legacy compatibility\r\n  summary?: string; // Legacy compatibility\r\n  media_url?: string; // Legacy compatibility\r\n  media_thumb_url?: string; // Legacy compatibility\r\n  relevanceScore?: number; // Legacy compatibility\r\n}\r\n\r\nexport interface ArticlesResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  sources_used: string[];\r\n  pagination: {\r\n    total_items: number;\r\n    current_page: number;\r\n    per_page: number;\r\n    has_next_page: boolean;\r\n  };\r\n  filters_applied: {\r\n    category: string | null;\r\n    source: string;\r\n    limit: number;\r\n    ai_categorization: boolean;\r\n  };\r\n  timestamp: string;\r\n}\r\n\r\nexport interface Category {\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n// API Configuration\r\nconst API_BASE_URL = {\r\n  production: 'https://services.wihy.ai',\r\n  development: 'http://localhost:5001'\r\n};\r\n\r\nclass VHealthNewsClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl?: string) {\r\n    // Use production by default\r\n    this.baseUrl = baseUrl || API_BASE_URL.production;\r\n  }\r\n\r\n  async getArticles(params: {\r\n    limit?: number;\r\n    category?: string;\r\n    fresh?: boolean;\r\n  } = {}): Promise<ArticlesResponse> {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params.category) queryParams.append('category', params.category);\r\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\r\n\r\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\r\n    console.log('Making API request to:', fullUrl);\r\n\r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data: ArticlesResponse = await response.json();\r\n    \r\n    // Add legacy compatibility fields to articles\r\n    const articles = data.articles || [];\r\n    data.articles = articles.map(article => ({\r\n      ...article,\r\n      // Legacy compatibility fields\r\n      publishedDate: article.published_at,\r\n      pubDate: article.published_at,\r\n      category: article.ai_category,\r\n      summary: article.description,\r\n      tags: [article.ai_category, article.source],\r\n      media_url: article.image_url,\r\n      media_thumb_url: article.image_url,\r\n      relevanceScore: article.quality_score / 10,\r\n      link: article.url\r\n    }));\r\n    \r\n    return {\r\n      success: data.success !== false,\r\n      articles: data.articles,\r\n      count: data.count || data.articles.length,\r\n      sources_used: data.sources_used || [],\r\n      pagination: data.pagination || {\r\n        total_items: data.articles.length,\r\n        current_page: 1,\r\n        per_page: data.articles.length,\r\n        has_next_page: false\r\n      },\r\n      filters_applied: data.filters_applied || {\r\n        category: params.category || null,\r\n        source: 'all',\r\n        limit: params.limit || 20,\r\n        ai_categorization: true\r\n      },\r\n      timestamp: data.timestamp || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  async getCategories(): Promise<{ success: boolean; categories: Category[] }> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getStats(): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    const response = await fetch(`${this.baseUrl}/api/health`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async testSource(source: 'newsapi' | 'gnews' | 'newsdata' | 'mediastack', limit: number = 5): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Initialize the client\r\nconst newsClient = new VHealthNewsClient();\r\n\r\n// Simple function to fetch news feed - API handles all filtering\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call - no client-side filtering needed\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error:', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call with category - API handles filtering\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (category):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Simple refresh - API handles everything\r\n  return await fetchNewsFeed(undefined, 100);\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple search call - API handles query processing\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (search):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\n// Simple function to get all news - API handles filtering and priority\r\nexport const getAllNews = async (limit: number = 100): Promise<{ success: boolean; articles: NewsArticle[]; count: number; sources_used: string[] }> => {\r\n  try {\r\n    // Simple API call - server handles all filtering, categorization, and priority sorting\r\n    const response = await newsClient.getArticles({\r\n      limit: limit,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles,\r\n      count: response.count,\r\n      sources_used: response.sources_used\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching all news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      count: 0,\r\n      sources_used: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    const response = await newsClient.getCategories();\r\n    return response.success ? response.categories : [];\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return default categories if API fails\r\n    return [\r\n      { category: 'Medical Research', description: 'Latest medical studies and breakthroughs' },\r\n      { category: 'Clinical Studies', description: 'Clinical trials and medical research' },\r\n      { category: 'Public Health', description: 'Community health and disease prevention' },\r\n      { category: 'Prevention', description: 'Preventive medicine and wellness' },\r\n      { category: 'Nutrition', description: 'Diet, supplements, and nutritional research' },\r\n      { category: 'Mental Health', description: 'Mental wellness and psychological health' },\r\n      { category: 'Health Technology', description: 'Health tech and medical AI innovations' },\r\n      { category: 'Medical Technology', description: 'Medical devices and healthcare technology' },\r\n      { category: 'General Health', description: 'General health news and information' },\r\n      { category: 'Environment', description: 'Environmental health and sustainability' },\r\n      { category: 'Technology', description: 'Tech innovations and digital trends' },\r\n      { category: 'General News', description: 'General news and current events' }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getNewsStats = async (): Promise<any> => {\r\n  try {\r\n    return await newsClient.getStats();\r\n  } catch (error) {\r\n    console.error('Error fetching news stats:', error);\r\n    return { error: 'Stats unavailable' };\r\n  }\r\n};\r\n\r\nexport const checkNewsServiceHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const health = await newsClient.healthCheck();\r\n    return health.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('News service health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export the client for advanced usage\r\nexport { VHealthNewsClient, newsClient };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}