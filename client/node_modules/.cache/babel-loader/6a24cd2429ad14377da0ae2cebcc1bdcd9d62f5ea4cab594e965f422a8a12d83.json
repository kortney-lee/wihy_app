{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,useSearchParams,useNavigate}from'react-router-dom';import VHealthSearch from'./VHealthSearch';import SearchResults from'./SearchResults';import openaiAPI from'./services/openaiAPI';import'./VHealthSearch.css';// Create or update this function in your existing API service\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000';export const searchFoodDatabase=async query=>{try{console.log('Calling food database API for:',query);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/food/search?q=\").concat(encodeURIComponent(query)),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log('Food API response:',data);return data;}catch(error){console.error('Food database API error:',error);throw error;}};// Add to your existing openaiAPI object or create a new foodAPI object\nexport const foodAPI={searchFood:searchFoodDatabase};// Define a type for the allowed data sources that matches SearchResults requirements\n// Results page wrapper to handle URL parameters\nconst ResultsPage=()=>{const[searchParams]=useSearchParams();const navigate=useNavigate();const query=searchParams.get('q')||'';const[isLoading,setIsLoading]=useState(true);const[results,setResults]=useState('');const[dataSource,setDataSource]=useState(\"local\");const[citations,setCitations]=useState([]);const[recommendations,setRecommendations]=useState([]);const[disclaimer,setDisclaimer]=useState('');// Fetch results when query changes\nuseEffect(()=>{const fetchResults=async()=>{if(!query){setIsLoading(false);return;}console.log(\"Fetching results for query:\",query);setIsLoading(true);try{// STEP 1: First try the nutrition database\ntry{console.log('Trying nutrition database first...');console.log('API URL:',\"\".concat(API_BASE_URL,\"/api/search/food?q=\").concat(encodeURIComponent(query)));const nutritionResponse=await fetch(\"\".concat(API_BASE_URL,\"/api/search/food?q=\").concat(encodeURIComponent(query)));console.log('Nutrition response status:',nutritionResponse.status);console.log('Nutrition response ok:',nutritionResponse.ok);if(nutritionResponse.ok){const nutritionData=await nutritionResponse.json();console.log('Nutrition API response:',nutritionData);console.log('Found status:',nutritionData.found);console.log('Nova classification:',nutritionData.nova_classification);if(nutritionData&&nutritionData.found===true){console.log('Found nutrition data - using vnutrition source');setResults(JSON.stringify(nutritionData));setDataSource('vnutrition');setIsLoading(false);return;// Exit early - we have nutrition data\n}else{console.log('No nutrition data found, falling back to OpenAI');}}else{console.log('Nutrition API request failed with status:',nutritionResponse.status);const errorText=await nutritionResponse.text();console.log('Error response:',errorText);}}catch(nutritionError){console.log('Nutrition API error:',nutritionError);}// STEP 2: Fall back to OpenAI if no nutrition data found\nconsole.log('Using OpenAI as fallback...');const result=await openaiAPI.searchHealthInfo(query);console.log(\"OpenAI Search result:\",result);// Safely extract the text content\nconst resultText=result.details||result.response||JSON.stringify(result);setResults(resultText);setDataSource(\"openai\");setCitations(result.sources||[]);setRecommendations(result.recommendations||[]);setDisclaimer(result.medicalDisclaimer||'');}catch(error){console.error(\"Search error:\",error);setResults(\"Sorry, there was an error processing your request.\");setDataSource(\"error\");setCitations([]);setRecommendations([]);setDisclaimer('');}finally{setIsLoading(false);}};fetchResults();},[query]);const handleBackToSearch=()=>{navigate('/');};const handleNewSearch=newQuery=>{navigate(\"/results?q=\".concat(encodeURIComponent(newQuery)));};return/*#__PURE__*/_jsx(SearchResults,{query:query,results:results,onBackToSearch:handleBackToSearch,onNewSearch:handleNewSearch,isLoading:isLoading,dataSource:dataSource,citations:citations,recommendations:recommendations,disclaimer:disclaimer});};// Main App with routing\nconst App=()=>{console.log(\"App component rendered\");return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(VHealthSearch,{})}),/*#__PURE__*/_jsx(Route,{path:\"/results\",element:/*#__PURE__*/_jsx(ResultsPage,{})})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useSearchParams","useNavigate","VHealthSearch","SearchResults","openaiAPI","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","process","env","REACT_APP_API_URL","searchFoodDatabase","query","console","log","response","fetch","concat","encodeURIComponent","method","headers","ok","Error","status","data","json","error","foodAPI","searchFood","ResultsPage","searchParams","navigate","get","isLoading","setIsLoading","results","setResults","dataSource","setDataSource","citations","setCitations","recommendations","setRecommendations","disclaimer","setDisclaimer","fetchResults","nutritionResponse","nutritionData","found","nova_classification","JSON","stringify","errorText","text","nutritionError","result","searchHealthInfo","resultText","details","sources","medicalDisclaimer","handleBackToSearch","handleNewSearch","newQuery","onBackToSearch","onNewSearch","App","children","path","element"],"sources":["C:/vHealth/vhealth/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, useSearchParams, useNavigate } from 'react-router-dom';\r\nimport VHealthSearch from './VHealthSearch';\r\nimport SearchResults from './SearchResults';\r\nimport openaiAPI from './services/openaiAPI';\r\nimport './VHealthSearch.css';\r\n\r\n// Create or update this function in your existing API service\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const searchFoodDatabase = async (query: string) => {\r\n  try {\r\n    console.log('Calling food database API for:', query);\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/food/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Food API response:', data);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Food database API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add to your existing openaiAPI object or create a new foodAPI object\r\nexport const foodAPI = {\r\n  searchFood: searchFoodDatabase\r\n};\r\n\r\n// Define a type for the allowed data sources that matches SearchResults requirements\r\ntype AllowedDataSource = \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n\r\n// Results page wrapper to handle URL parameters\r\nconst ResultsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const query = searchParams.get('q') || '';\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState<string>('');\r\n  const [dataSource, setDataSource] = useState<AllowedDataSource>(\"local\");\r\n  const [citations, setCitations] = useState<string[]>([]);\r\n  const [recommendations, setRecommendations] = useState<string[]>([]);\r\n  const [disclaimer, setDisclaimer] = useState<string>('');\r\n  \r\n  // Fetch results when query changes\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      console.log(\"Fetching results for query:\", query);\r\n      setIsLoading(true);\r\n      \r\n      try {\r\n        // STEP 1: First try the nutrition database\r\n        try {\r\n          console.log('Trying nutrition database first...');\r\n          console.log('API URL:', `${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          const nutritionResponse = await fetch(`${API_BASE_URL}/api/search/food?q=${encodeURIComponent(query)}`);\r\n          \r\n          console.log('Nutrition response status:', nutritionResponse.status);\r\n          console.log('Nutrition response ok:', nutritionResponse.ok);\r\n          \r\n          if (nutritionResponse.ok) {\r\n            const nutritionData = await nutritionResponse.json();\r\n            console.log('Nutrition API response:', nutritionData);\r\n            console.log('Found status:', nutritionData.found);\r\n            console.log('Nova classification:', nutritionData.nova_classification);\r\n            \r\n            if (nutritionData && nutritionData.found === true) {\r\n              console.log('Found nutrition data - using vnutrition source');\r\n              setResults(JSON.stringify(nutritionData));\r\n              setDataSource('vnutrition');\r\n              setIsLoading(false);\r\n              return; // Exit early - we have nutrition data\r\n            } else {\r\n              console.log('No nutrition data found, falling back to OpenAI');\r\n            }\r\n          } else {\r\n            console.log('Nutrition API request failed with status:', nutritionResponse.status);\r\n            const errorText = await nutritionResponse.text();\r\n            console.log('Error response:', errorText);\r\n          }\r\n        } catch (nutritionError) {\r\n          console.log('Nutrition API error:', nutritionError);\r\n        }\r\n        \r\n        // STEP 2: Fall back to OpenAI if no nutrition data found\r\n        console.log('Using OpenAI as fallback...');\r\n        const result: ChatGPTResponse = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"OpenAI Search result:\", result);\r\n        \r\n        // Safely extract the text content\r\n        const resultText = result.details || result.response || JSON.stringify(result);\r\n        setResults(resultText);\r\n        setDataSource(\"openai\");\r\n        \r\n        setCitations(result.sources || []);\r\n        setRecommendations(result.recommendations || []);\r\n        setDisclaimer(result.medicalDisclaimer || '');\r\n        \r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        setResults(\"Sorry, there was an error processing your request.\");\r\n        setDataSource(\"error\");\r\n        setCitations([]);\r\n        setRecommendations([]);\r\n        setDisclaimer('');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query]);\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleNewSearch = (newQuery: string) => {\r\n    navigate(`/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  return (\r\n    <SearchResults\r\n      query={query}\r\n      results={results}\r\n      onBackToSearch={handleBackToSearch}\r\n      onNewSearch={handleNewSearch}\r\n      isLoading={isLoading}\r\n      dataSource={dataSource}\r\n      citations={citations}\r\n      recommendations={recommendations}\r\n      disclaimer={disclaimer}\r\n    />\r\n  );\r\n};\r\n\r\n// Main App with routing\r\nconst App: React.FC = () => {\r\n  console.log(\"App component rendered\");\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<VHealthSearch />} />\r\n        <Route path=\"/results\" element={<ResultsPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\ninterface ChatGPTResponse {\r\n  details: string;\r\n  sources?: string[];\r\n  recommendations?: string[];\r\n  medicalDisclaimer?: string;\r\n  response?: string; // Alternative field name\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}