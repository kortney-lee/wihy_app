{"ast":null,"code":"var _jsxFileName = \"C:\\\\repo\\\\wihy_ui\\\\client\\\\src\\\\components\\\\NutritionChart.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n// Extract nutrition data from unified API response or legacy format\nconst extractNutritionData = (apiResponse, results, dataSource) => {\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\n  console.log('API Response:', apiResponse);\n  console.log('DataSource:', dataSource);\n\n  // Handle unified API response first\n  if (apiResponse && apiResponse.success && apiResponse.data) {\n    var _apiResponse$data$cha, _apiResponse$data$nut;\n    console.log('Processing unified API nutrition data');\n\n    // Use charts_data if available for direct rendering\n    if ((_apiResponse$data$cha = apiResponse.data.charts_data) !== null && _apiResponse$data$cha !== void 0 && _apiResponse$data$cha.nutrition_breakdown) {\n      const chartData = apiResponse.data.charts_data.nutrition_breakdown;\n      console.log('Using charts_data for nutrition breakdown:', chartData);\n      return {\n        type: 'chart_data',\n        labels: chartData.labels,\n        values: chartData.values,\n        colors: chartData.colors,\n        chart_type: chartData.chart_type\n      };\n    }\n\n    // Use nutrition facts if available\n    if ((_apiResponse$data$nut = apiResponse.data.nutrition) !== null && _apiResponse$data$nut !== void 0 && _apiResponse$data$nut.facts) {\n      var _nutrition$nourish_sc, _nutrition$nourish_sc2;\n      const nutrition = apiResponse.data.nutrition;\n      const extractedData = {\n        type: 'nutrition_facts',\n        calories: nutrition.facts.calories_per_serving || 0,\n        protein: nutrition.facts.protein_g || 0,\n        carbs: nutrition.facts.carbs_g || 0,\n        fat: nutrition.facts.fat_g || 0,\n        fiber: nutrition.facts.fiber_g || 0,\n        sugar: nutrition.facts.sugar_g || 0,\n        sodium: nutrition.facts.sodium_mg || 0,\n        nourish_score: ((_nutrition$nourish_sc = nutrition.nourish_score) === null || _nutrition$nourish_sc === void 0 ? void 0 : _nutrition$nourish_sc.score) || 0,\n        nourish_category: ((_nutrition$nourish_sc2 = nutrition.nourish_score) === null || _nutrition$nourish_sc2 === void 0 ? void 0 : _nutrition$nourish_sc2.category) || 'Unknown',\n        macronutrients: nutrition.macronutrients || null\n      };\n      console.log('=== EXTRACTED UNIFIED NUTRITION DATA ===');\n      console.log('Final extracted data:', extractedData);\n      return extractedData;\n    }\n  }\n\n  // Fallback to legacy extraction\n  if (dataSource === 'vnutrition' && results) {\n    try {\n      console.log('Processing vnutrition data source');\n      let nutrition;\n      if (typeof results === 'string') {\n        console.log('Parsing string results');\n\n        // Check if this is markdown/formatted text instead of JSON\n        if (results.startsWith('#') || results.includes('AI Chat response')) {\n          console.log('Results appear to be formatted text, not JSON nutrition data');\n          return null;\n        }\n        nutrition = JSON.parse(results);\n      } else {\n        console.log('Using object results directly');\n        nutrition = results;\n      }\n      console.log('=== RAW NUTRITION OBJECT ===');\n      console.log('Full object:', nutrition);\n      console.log('Object keys:', Object.keys(nutrition || {}));\n      if (nutrition && nutrition.found !== false) {\n        const extractedData = {\n          calories: nutrition.calories_per_serving || 0,\n          protein: nutrition.protein_g || 0,\n          carbs: nutrition.carbs_g || 0,\n          fat: nutrition.fat_g || 0,\n          fiber: nutrition.fiber_g || 0,\n          sugar: nutrition.sugar_g || 0,\n          sodium: nutrition.sodium_mg || 0,\n          novaScore: nutrition.nova_classification || 1,\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\n        };\n        console.log('=== EXTRACTED DATA ===');\n        console.log('Final extracted data:', extractedData);\n        return extractedData;\n      } else {\n        var _nutrition;\n        console.log('No valid nutrition data - found:', (_nutrition = nutrition) === null || _nutrition === void 0 ? void 0 : _nutrition.found);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error parsing nutrition data:', error);\n      console.log('This is likely because results are formatted text, not JSON nutrition data');\n      return null;\n    }\n  }\n  console.log('Not vnutrition source');\n  return null;\n};\nconst NutritionChart = ({\n  query,\n  results,\n  dataSource\n}) => {\n  // Extract nutrition data using internal function\n  const nutritionData = extractNutritionData(results, dataSource);\n\n  // Only render if we have nutrition data\n  if (!nutritionData || dataSource !== 'vnutrition') {\n    return null;\n  }\n  const {\n    calories,\n    protein,\n    carbs,\n    fat\n  } = nutritionData;\n\n  // Calculate total for percentages (excluding calories as it's not in grams)\n  const total = protein + carbs + fat;\n\n  // Prepare data for the pie chart\n  const data = {\n    datasets: [{\n      data: [protein, carbs, fat],\n      backgroundColor: ['#10B981',\n      // Green for protein\n      '#F59E0B',\n      // Yellow for carbs  \n      '#EF4444' // Red for fat\n      ],\n      borderWidth: 0,\n      cutout: '60%'\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const labels = ['Protein', 'Carbs', 'Fat'];\n            const label = labels[context.dataIndex];\n            const value = context.parsed;\n            const percentage = total > 0 ? Math.round(value / total * 100) : 0;\n            return `${label}: ${value}g (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '200px',\n        width: '200px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#374151'\n          },\n          children: calories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.75rem',\n            color: '#6B7280'\n          },\n          children: \"Calories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '1.2rem',\n            marginRight: '0.5rem'\n          },\n          children: \"\\u26A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: '500',\n            color: '#374151',\n            fontSize: '1rem'\n          },\n          children: \"Good\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '1rem',\n          fontSize: '0.875rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#10B981',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Protein: \", total > 0 ? Math.round(protein / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#F59E0B',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Carbs: \", total > 0 ? Math.round(carbs / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: '#EF4444',\n              borderRadius: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Fat: \", total > 0 ? Math.round(fat / total * 100) : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_c = NutritionChart;\nexport default NutritionChart;\nvar _c;\n$RefreshReg$(_c, \"NutritionChart\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsxDEV","_jsxDEV","register","extractNutritionData","apiResponse","results","dataSource","console","log","success","data","_apiResponse$data$cha","_apiResponse$data$nut","charts_data","nutrition_breakdown","chartData","type","labels","values","colors","chart_type","nutrition","facts","_nutrition$nourish_sc","_nutrition$nourish_sc2","extractedData","calories","calories_per_serving","protein","protein_g","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","nourish_score","score","nourish_category","category","macronutrients","startsWith","includes","JSON","parse","Object","keys","found","novaScore","nova_classification","processedLevel","nova_description","processed_level","_nutrition","error","NutritionChart","query","nutritionData","total","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","label","context","dataIndex","value","parsed","percentage","Math","round","style","textAlign","children","position","height","width","margin","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","marginRight","gap","borderRadius","_c","$RefreshReg$"],"sources":["C:/repo/wihy_ui/client/src/components/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  apiResponse?: UnifiedResponse | any;\r\n  query?: string;\r\n  results?: string;\r\n  dataSource?: \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n}\r\n\r\n// Extract nutrition data from unified API response or legacy format\r\nconst extractNutritionData = (apiResponse?: UnifiedResponse | any, results?: string, dataSource?: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\r\n  console.log('API Response:', apiResponse);\r\n  console.log('DataSource:', dataSource);\r\n  \r\n  // Handle unified API response first\r\n  if (apiResponse && apiResponse.success && apiResponse.data) {\r\n    console.log('Processing unified API nutrition data');\r\n    \r\n    // Use charts_data if available for direct rendering\r\n    if (apiResponse.data.charts_data?.nutrition_breakdown) {\r\n      const chartData = apiResponse.data.charts_data.nutrition_breakdown;\r\n      console.log('Using charts_data for nutrition breakdown:', chartData);\r\n      return {\r\n        type: 'chart_data',\r\n        labels: chartData.labels,\r\n        values: chartData.values,\r\n        colors: chartData.colors,\r\n        chart_type: chartData.chart_type\r\n      };\r\n    }\r\n    \r\n    // Use nutrition facts if available\r\n    if (apiResponse.data.nutrition?.facts) {\r\n      const nutrition = apiResponse.data.nutrition;\r\n      const extractedData = {\r\n        type: 'nutrition_facts',\r\n        calories: nutrition.facts.calories_per_serving || 0,\r\n        protein: nutrition.facts.protein_g || 0,\r\n        carbs: nutrition.facts.carbs_g || 0,\r\n        fat: nutrition.facts.fat_g || 0,\r\n        fiber: nutrition.facts.fiber_g || 0,\r\n        sugar: nutrition.facts.sugar_g || 0,\r\n        sodium: nutrition.facts.sodium_mg || 0,\r\n        nourish_score: nutrition.nourish_score?.score || 0,\r\n        nourish_category: nutrition.nourish_score?.category || 'Unknown',\r\n        macronutrients: nutrition.macronutrients || null\r\n      };\r\n      \r\n      console.log('=== EXTRACTED UNIFIED NUTRITION DATA ===');\r\n      console.log('Final extracted data:', extractedData);\r\n      return extractedData;\r\n    }\r\n  }\r\n  \r\n  // Fallback to legacy extraction\r\n  if (dataSource === 'vnutrition' && results) {\r\n    try {\r\n      console.log('Processing vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        \r\n        // Check if this is markdown/formatted text instead of JSON\r\n        if (results.startsWith('#') || results.includes('AI Chat response')) {\r\n          console.log('Results appear to be formatted text, not JSON nutrition data');\r\n          return null;\r\n        }\r\n        \r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      console.log('=== RAW NUTRITION OBJECT ===');\r\n      console.log('Full object:', nutrition);\r\n      console.log('Object keys:', Object.keys(nutrition || {}));\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        \r\n        return extractedData;\r\n      } else {\r\n        console.log('No valid nutrition data - found:', nutrition?.found);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      console.log('This is likely because results are formatted text, not JSON nutrition data');\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('Not vnutrition source');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ query, results, dataSource }) => {\r\n  // Extract nutrition data using internal function\r\n  const nutritionData = extractNutritionData(results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData || dataSource !== 'vnutrition') {\r\n    return null;\r\n  }\r\n\r\n  const { calories, protein, carbs, fat } = nutritionData;\r\n\r\n  // Calculate total for percentages (excluding calories as it's not in grams)\r\n  const total = protein + carbs + fat;\r\n  \r\n  // Prepare data for the pie chart\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [protein, carbs, fat],\r\n        backgroundColor: [\r\n          '#10B981', // Green for protein\r\n          '#F59E0B', // Yellow for carbs  \r\n          '#EF4444', // Red for fat\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '60%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const labels = ['Protein', 'Carbs', 'Fat'];\r\n            const label = labels[context.dataIndex];\r\n            const value = context.parsed;\r\n            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\r\n            return `${label}: ${value}g (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {calories}\r\n          </div>\r\n          <div style={{ fontSize: '0.75rem', color: '#6B7280' }}>\r\n            Calories\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            ⚡\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Good\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#10B981',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Protein: {total > 0 ? Math.round((protein / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#F59E0B',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Carbs: {total > 0 ? Math.round((carbs / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#EF4444',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Fat: {total > 0 ? Math.round((fat / total) * 100) : 0}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,KAAK,IAAIC,OAAO,EAChBC,UAAU,EACVC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG3CN,OAAO,CAACO,QAAQ,CAACN,UAAU,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAS7C;AACA,MAAMK,oBAAoB,GAAGA,CAACC,WAAmC,EAAEC,OAAgB,EAAEC,UAAmB,KAAK;EAC3GC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;EAClED,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,WAAW,CAAC;EACzCG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,UAAU,CAAC;;EAEtC;EACA,IAAIF,WAAW,IAAIA,WAAW,CAACK,OAAO,IAAIL,WAAW,CAACM,IAAI,EAAE;IAAA,IAAAC,qBAAA,EAAAC,qBAAA;IAC1DL,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;IAEpD;IACA,KAAAG,qBAAA,GAAIP,WAAW,CAACM,IAAI,CAACG,WAAW,cAAAF,qBAAA,eAA5BA,qBAAA,CAA8BG,mBAAmB,EAAE;MACrD,MAAMC,SAAS,GAAGX,WAAW,CAACM,IAAI,CAACG,WAAW,CAACC,mBAAmB;MAClEP,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEO,SAAS,CAAC;MACpE,OAAO;QACLC,IAAI,EAAE,YAAY;QAClBC,MAAM,EAAEF,SAAS,CAACE,MAAM;QACxBC,MAAM,EAAEH,SAAS,CAACG,MAAM;QACxBC,MAAM,EAAEJ,SAAS,CAACI,MAAM;QACxBC,UAAU,EAAEL,SAAS,CAACK;MACxB,CAAC;IACH;;IAEA;IACA,KAAAR,qBAAA,GAAIR,WAAW,CAACM,IAAI,CAACW,SAAS,cAAAT,qBAAA,eAA1BA,qBAAA,CAA4BU,KAAK,EAAE;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACrC,MAAMH,SAAS,GAAGjB,WAAW,CAACM,IAAI,CAACW,SAAS;MAC5C,MAAMI,aAAa,GAAG;QACpBT,IAAI,EAAE,iBAAiB;QACvBU,QAAQ,EAAEL,SAAS,CAACC,KAAK,CAACK,oBAAoB,IAAI,CAAC;QACnDC,OAAO,EAAEP,SAAS,CAACC,KAAK,CAACO,SAAS,IAAI,CAAC;QACvCC,KAAK,EAAET,SAAS,CAACC,KAAK,CAACS,OAAO,IAAI,CAAC;QACnCC,GAAG,EAAEX,SAAS,CAACC,KAAK,CAACW,KAAK,IAAI,CAAC;QAC/BC,KAAK,EAAEb,SAAS,CAACC,KAAK,CAACa,OAAO,IAAI,CAAC;QACnCC,KAAK,EAAEf,SAAS,CAACC,KAAK,CAACe,OAAO,IAAI,CAAC;QACnCC,MAAM,EAAEjB,SAAS,CAACC,KAAK,CAACiB,SAAS,IAAI,CAAC;QACtCC,aAAa,EAAE,EAAAjB,qBAAA,GAAAF,SAAS,CAACmB,aAAa,cAAAjB,qBAAA,uBAAvBA,qBAAA,CAAyBkB,KAAK,KAAI,CAAC;QAClDC,gBAAgB,EAAE,EAAAlB,sBAAA,GAAAH,SAAS,CAACmB,aAAa,cAAAhB,sBAAA,uBAAvBA,sBAAA,CAAyBmB,QAAQ,KAAI,SAAS;QAChEC,cAAc,EAAEvB,SAAS,CAACuB,cAAc,IAAI;MAC9C,CAAC;MAEDrC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEiB,aAAa,CAAC;MACnD,OAAOA,aAAa;IACtB;EACF;;EAEA;EACA,IAAInB,UAAU,KAAK,YAAY,IAAID,OAAO,EAAE;IAC1C,IAAI;MACFE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,IAAIa,SAAS;MAEb,IAAI,OAAOhB,OAAO,KAAK,QAAQ,EAAE;QAC/BE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;QAErC;QACA,IAAIH,OAAO,CAACwC,UAAU,CAAC,GAAG,CAAC,IAAIxC,OAAO,CAACyC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UACnEvC,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC;UAC3E,OAAO,IAAI;QACb;QAEAa,SAAS,GAAG0B,IAAI,CAACC,KAAK,CAAC3C,OAAO,CAAC;MACjC,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5Ca,SAAS,GAAGhB,OAAO;MACrB;MAEAE,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEa,SAAS,CAAC;MACtCd,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEyC,MAAM,CAACC,IAAI,CAAC7B,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;MAEzD,IAAIA,SAAS,IAAIA,SAAS,CAAC8B,KAAK,KAAK,KAAK,EAAE;QAC1C,MAAM1B,aAAa,GAAG;UACpBC,QAAQ,EAAEL,SAAS,CAACM,oBAAoB,IAAI,CAAC;UAC7CC,OAAO,EAAEP,SAAS,CAACQ,SAAS,IAAI,CAAC;UACjCC,KAAK,EAAET,SAAS,CAACU,OAAO,IAAI,CAAC;UAC7BC,GAAG,EAAEX,SAAS,CAACY,KAAK,IAAI,CAAC;UACzBC,KAAK,EAAEb,SAAS,CAACc,OAAO,IAAI,CAAC;UAC7BC,KAAK,EAAEf,SAAS,CAACgB,OAAO,IAAI,CAAC;UAC7BC,MAAM,EAAEjB,SAAS,CAACkB,SAAS,IAAI,CAAC;UAChCa,SAAS,EAAE/B,SAAS,CAACgC,mBAAmB,IAAI,CAAC;UAC7CC,cAAc,EAAEjC,SAAS,CAACkC,gBAAgB,IAAIlC,SAAS,CAACmC,eAAe,IAAI;QAC7E,CAAC;QAEDjD,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEiB,aAAa,CAAC;QAEnD,OAAOA,aAAa;MACtB,CAAC,MAAM;QAAA,IAAAgC,UAAA;QACLlD,OAAO,CAACC,GAAG,CAAC,kCAAkC,GAAAiD,UAAA,GAAEpC,SAAS,cAAAoC,UAAA,uBAATA,UAAA,CAAWN,KAAK,CAAC;QACjE,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdnD,OAAO,CAACmD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDnD,OAAO,CAACC,GAAG,CAAC,4EAA4E,CAAC;MACzF,OAAO,IAAI;IACb;EACF;EAEAD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC,OAAO,IAAI;AACb,CAAC;AAED,MAAMmD,cAA6C,GAAGA,CAAC;EAAEC,KAAK;EAAEvD,OAAO;EAAEC;AAAW,CAAC,KAAK;EACxF;EACA,MAAMuD,aAAa,GAAG1D,oBAAoB,CAACE,OAAO,EAAEC,UAAU,CAAC;;EAE/D;EACA,IAAI,CAACuD,aAAa,IAAIvD,UAAU,KAAK,YAAY,EAAE;IACjD,OAAO,IAAI;EACb;EAEA,MAAM;IAAEoB,QAAQ;IAAEE,OAAO;IAAEE,KAAK;IAAEE;EAAI,CAAC,GAAG6B,aAAa;;EAEvD;EACA,MAAMC,KAAK,GAAGlC,OAAO,GAAGE,KAAK,GAAGE,GAAG;;EAEnC;EACA,MAAMtB,IAAI,GAAG;IACXqD,QAAQ,EAAE,CACR;MACErD,IAAI,EAAE,CAACkB,OAAO,EAAEE,KAAK,EAAEE,GAAG,CAAC;MAC3BgC,eAAe,EAAE,CACf,SAAS;MAAE;MACX,SAAS;MAAE;MACX,SAAS,CAAE;MAAA,CACZ;MACDC,WAAW,EAAE,CAAC;MACdC,MAAM,EAAE;IACV,CAAC;EAEL,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,OAAO,EAAE;MACX,CAAC;MACDC,OAAO,EAAE;QACPC,SAAS,EAAE;UACTC,KAAK,EAAE,SAAAA,CAASC,OAAY,EAAE;YAC5B,MAAM3D,MAAM,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC;YAC1C,MAAM0D,KAAK,GAAG1D,MAAM,CAAC2D,OAAO,CAACC,SAAS,CAAC;YACvC,MAAMC,KAAK,GAAGF,OAAO,CAACG,MAAM;YAC5B,MAAMC,UAAU,GAAGlB,KAAK,GAAG,CAAC,GAAGmB,IAAI,CAACC,KAAK,CAAEJ,KAAK,GAAGhB,KAAK,GAAI,GAAG,CAAC,GAAG,CAAC;YACpE,OAAO,GAAGa,KAAK,KAAKG,KAAK,MAAME,UAAU,IAAI;UAC/C;QACF;MACF;IACF;EACF,CAAC;EAED,oBACE/E,OAAA;IAAKkF,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAClCpF,OAAA;MAAKkF,KAAK,EAAE;QAAEG,QAAQ,EAAE,UAAU;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAJ,QAAA,gBACtFpF,OAAA,CAACF,QAAQ;QAACW,IAAI,EAAEA,IAAK;QAACyD,OAAO,EAAEA;MAAQ;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1C5F,OAAA;QACEkF,KAAK,EAAE;UACLG,QAAQ,EAAE,UAAU;UACpBQ,GAAG,EAAE,KAAK;UACVC,IAAI,EAAE,KAAK;UACXC,SAAS,EAAE,uBAAuB;UAClCZ,SAAS,EAAE;QACb,CAAE;QAAAC,QAAA,gBAEFpF,OAAA;UAAKkF,KAAK,EAAE;YAAEc,QAAQ,EAAE,QAAQ;YAAEC,UAAU,EAAE,MAAM;YAAEC,KAAK,EAAE;UAAU,CAAE;UAAAd,QAAA,EACtE3D;QAAQ;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACN5F,OAAA;UAAKkF,KAAK,EAAE;YAAEc,QAAQ,EAAE,SAAS;YAAEE,KAAK,EAAE;UAAU,CAAE;UAAAd,QAAA,EAAC;QAEvD;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN5F,OAAA;MAAKkF,KAAK,EAAE;QAAEiB,SAAS,EAAE;MAAO,CAAE;MAAAf,QAAA,gBAChCpF,OAAA;QAAKkF,KAAK,EAAE;UACVX,OAAO,EAAE,MAAM;UACf6B,UAAU,EAAE,QAAQ;UACpBC,cAAc,EAAE,QAAQ;UACxBC,YAAY,EAAE;QAChB,CAAE;QAAAlB,QAAA,gBACApF,OAAA;UAAMkF,KAAK,EAAE;YACXc,QAAQ,EAAE,QAAQ;YAClBO,WAAW,EAAE;UACf,CAAE;UAAAnB,QAAA,EAAC;QAEH;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACP5F,OAAA;UAAMkF,KAAK,EAAE;YACXe,UAAU,EAAE,KAAK;YACjBC,KAAK,EAAE,SAAS;YAChBF,QAAQ,EAAE;UACZ,CAAE;UAAAZ,QAAA,EAAC;QAEH;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAEN5F,OAAA;QAAKkF,KAAK,EAAE;UACVX,OAAO,EAAE,MAAM;UACf8B,cAAc,EAAE,QAAQ;UACxBG,GAAG,EAAE,MAAM;UACXR,QAAQ,EAAE;QACZ,CAAE;QAAAZ,QAAA,gBACApF,OAAA;UAAKkF,KAAK,EAAE;YAAEX,OAAO,EAAE,MAAM;YAAE6B,UAAU,EAAE,QAAQ;YAAEI,GAAG,EAAE;UAAU,CAAE;UAAApB,QAAA,gBACpEpF,OAAA;YACEkF,KAAK,EAAE;cACLK,KAAK,EAAE,MAAM;cACbD,MAAM,EAAE,MAAM;cACdvB,eAAe,EAAE,SAAS;cAC1B0C,YAAY,EAAE;YAChB;UAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACF5F,OAAA;YAAAoF,QAAA,GAAM,WAAS,EAACvB,KAAK,GAAG,CAAC,GAAGmB,IAAI,CAACC,KAAK,CAAEtD,OAAO,GAAGkC,KAAK,GAAI,GAAG,CAAC,GAAG,CAAC,EAAC,GAAC;UAAA;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzE,CAAC,eACN5F,OAAA;UAAKkF,KAAK,EAAE;YAAEX,OAAO,EAAE,MAAM;YAAE6B,UAAU,EAAE,QAAQ;YAAEI,GAAG,EAAE;UAAU,CAAE;UAAApB,QAAA,gBACpEpF,OAAA;YACEkF,KAAK,EAAE;cACLK,KAAK,EAAE,MAAM;cACbD,MAAM,EAAE,MAAM;cACdvB,eAAe,EAAE,SAAS;cAC1B0C,YAAY,EAAE;YAChB;UAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACF5F,OAAA;YAAAoF,QAAA,GAAM,SAAO,EAACvB,KAAK,GAAG,CAAC,GAAGmB,IAAI,CAACC,KAAK,CAAEpD,KAAK,GAAGgC,KAAK,GAAI,GAAG,CAAC,GAAG,CAAC,EAAC,GAAC;UAAA;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrE,CAAC,eACN5F,OAAA;UAAKkF,KAAK,EAAE;YAAEX,OAAO,EAAE,MAAM;YAAE6B,UAAU,EAAE,QAAQ;YAAEI,GAAG,EAAE;UAAU,CAAE;UAAApB,QAAA,gBACpEpF,OAAA;YACEkF,KAAK,EAAE;cACLK,KAAK,EAAE,MAAM;cACbD,MAAM,EAAE,MAAM;cACdvB,eAAe,EAAE,SAAS;cAC1B0C,YAAY,EAAE;YAChB;UAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACF5F,OAAA;YAAAoF,QAAA,GAAM,OAAK,EAACvB,KAAK,GAAG,CAAC,GAAGmB,IAAI,CAACC,KAAK,CAAElD,GAAG,GAAG8B,KAAK,GAAI,GAAG,CAAC,GAAG,CAAC,EAAC,GAAC;UAAA;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACc,EAAA,GA1IIhD,cAA6C;AA4InD,eAAeA,cAAc;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}