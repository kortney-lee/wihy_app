{"ast":null,"code":"import openaiAPI from './openaiAPI';\nimport { healthAPI } from './healthAPI';\nimport axios from 'axios';\n// Helper functions defined outside the object\nconst fetchNutritionData = async barcode => {\n  try {\n    const response = await axios.post('/vnutrition/analyze', {\n      barcode\n    });\n    const responseData = response.data || {};\n    return responseData;\n  } catch (error) {\n    console.error('Error fetching nutrition data:', error);\n    throw error;\n  }\n};\nconst getErrorResponse = query => {\n  return {\n    summary: `We encountered an issue searching for information about \"${query}\".`,\n    details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\n    sources: ['System'],\n    relatedTopics: [],\n    recommendations: []\n  };\n};\nexport const healthSearchService = {\n  async searchHealthInfo(query, signal) {\n    console.log(\"HealthSearchService: Searching for\", query);\n    try {\n      // If barcode, call nutrition\n      if (/^\\d{8,14}$/.test(query.trim())) {\n        const nutritionResult = await this.fetchNutritionData(query.trim());\n        return {\n          summary: `Nutrition info for barcode: ${query}`,\n          details: JSON.stringify(nutritionResult, null, 2),\n          sources: [],\n          relatedTopics: [],\n          recommendations: [],\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\n          dataSource: 'vnutrition'\n        };\n      }\n\n      // Otherwise, call OpenAI or local health API\n      if (openaiAPI.isConfigured()) {\n        console.log(\"OpenAI API configured, using it for search\");\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\n        console.log(\"OpenAI search result:\", openaiResult);\n        return {\n          ...openaiResult,\n          dataSource: 'openai'\n        };\n      } else {\n        console.log(\"OpenAI API not configured, using fallback\");\n        const localResult = await healthAPI.searchHealthInfo(query);\n        return {\n          ...localResult,\n          dataSource: 'local'\n        };\n      }\n    } catch (error) {\n      console.error(\"Error in health search:\", error);\n      return this.getErrorResponse(query);\n    }\n  },\n  async searchHealthInfo(query, signal) {\n    try {\n      const response = await fetch('http://localhost:5000/api/search/food', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        }),\n        signal: signal // Pass the abort signal\n      });\n      if (!response.ok) {\n        throw new Error('API request failed');\n      }\n      return await response.json();\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.log('Search request was aborted');\n        throw error; // Re-throw to handle in caller\n      }\n      return getErrorResponse(query);\n    }\n  },\n  async searchByBarcode(barcode) {\n    try {\n      const nutritionData = await fetchNutritionData(barcode);\n      return nutritionData;\n    } catch (error) {\n      console.error('Error in barcode search:', error);\n      return getErrorResponse(`food with barcode ${barcode}`);\n    }\n  }\n};","map":{"version":3,"names":["openaiAPI","healthAPI","axios","fetchNutritionData","barcode","response","post","responseData","data","error","console","getErrorResponse","query","summary","details","sources","relatedTopics","recommendations","healthSearchService","searchHealthInfo","signal","log","test","trim","nutritionResult","JSON","stringify","medicalDisclaimer","dataSource","isConfigured","openaiResult","localResult","fetch","method","headers","body","ok","Error","json","name","searchByBarcode","nutritionData"],"sources":["C:/vHealth/vhealth/client/src/services/healthSearchService.ts"],"sourcesContent":["import openaiAPI, { openaiAPI as openaiService } from './openaiAPI';\r\nimport { healthAPI } from './healthAPI';\r\nimport axios from 'axios';\r\nimport { HealthSearchResult } from '../types/healthTypes';\r\n\r\n// Helper functions defined outside the object\r\nconst fetchNutritionData = async (barcode: string) => {\r\n  try {\r\n    const response = await axios.post('/vnutrition/analyze', { barcode });\r\n    const responseData: any = response.data || {};\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getErrorResponse = (query: string): HealthSearchResult => {\r\n  return {\r\n    summary: `We encountered an issue searching for information about \"${query}\".`,\r\n    details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\r\n    sources: ['System'],\r\n    relatedTopics: [],\r\n    recommendations: []\r\n  };\r\n};\r\n\r\nexport const healthSearchService = {\r\n  async searchHealthInfo(query: string, signal?: AbortSignal): Promise<HealthSearchResult> {\r\n    console.log(\"HealthSearchService: Searching for\", query);\r\n    try {\r\n      // If barcode, call nutrition\r\n      if (/^\\d{8,14}$/.test(query.trim())) {\r\n        const nutritionResult = await this.fetchNutritionData(query.trim());\r\n        return {\r\n          summary: `Nutrition info for barcode: ${query}`,\r\n          details: JSON.stringify(nutritionResult, null, 2),\r\n          sources: [],\r\n          relatedTopics: [],\r\n          recommendations: [],\r\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\r\n          dataSource: 'vnutrition'\r\n        };\r\n      }\r\n\r\n      // Otherwise, call OpenAI or local health API\r\n      if (openaiAPI.isConfigured()) {\r\n        console.log(\"OpenAI API configured, using it for search\");\r\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"OpenAI search result:\", openaiResult);\r\n        return {\r\n          ...openaiResult,\r\n          dataSource: 'openai'\r\n        };\r\n      } else {\r\n        console.log(\"OpenAI API not configured, using fallback\");\r\n        const localResult = await healthAPI.searchHealthInfo(query);\r\n        return {\r\n          ...localResult,\r\n          dataSource: 'local'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in health search:\", error);\r\n      return this.getErrorResponse(query);\r\n    }\r\n  },\r\n\r\n  async searchHealthInfo(query: string, signal?: AbortSignal) {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/search/food', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ query }),\r\n        signal: signal // Pass the abort signal\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('API request failed');\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        console.log('Search request was aborted');\r\n        throw error; // Re-throw to handle in caller\r\n      }\r\n      return getErrorResponse(query);\r\n    }\r\n  },\r\n\r\n  async searchByBarcode(barcode: string) {\r\n    try {\r\n      const nutritionData = await fetchNutritionData(barcode);\r\n      return nutritionData;\r\n    } catch (error) {\r\n      console.error('Error in barcode search:', error);\r\n      return getErrorResponse(`food with barcode ${barcode}`);\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,SAAS,MAAsC,aAAa;AACnE,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAOC,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,kBAAkB,GAAG,MAAOC,OAAe,IAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,qBAAqB,EAAE;MAAEF;IAAQ,CAAC,CAAC;IACrE,MAAMG,YAAiB,GAAGF,QAAQ,CAACG,IAAI,IAAI,CAAC,CAAC;IAC7C,OAAOD,YAAY;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,gBAAgB,GAAIC,KAAa,IAAyB;EAC9D,OAAO;IACLC,OAAO,EAAE,4DAA4DD,KAAK,IAAI;IAC9EE,OAAO,EAAE,wEAAwEF,KAAK,0WAA0W;IAChcG,OAAO,EAAE,CAAC,QAAQ,CAAC;IACnBC,aAAa,EAAE,EAAE;IACjBC,eAAe,EAAE;EACnB,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG;EACjC,MAAMC,gBAAgBA,CAACP,KAAa,EAAEQ,MAAoB,EAA+B;IACvFV,OAAO,CAACW,GAAG,CAAC,oCAAoC,EAAET,KAAK,CAAC;IACxD,IAAI;MACF;MACA,IAAI,YAAY,CAACU,IAAI,CAACV,KAAK,CAACW,IAAI,CAAC,CAAC,CAAC,EAAE;QACnC,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACrB,kBAAkB,CAACS,KAAK,CAACW,IAAI,CAAC,CAAC,CAAC;QACnE,OAAO;UACLV,OAAO,EAAE,+BAA+BD,KAAK,EAAE;UAC/CE,OAAO,EAAEW,IAAI,CAACC,SAAS,CAACF,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;UACjDT,OAAO,EAAE,EAAE;UACXC,aAAa,EAAE,EAAE;UACjBC,eAAe,EAAE,EAAE;UACnBU,iBAAiB,EAAE,qCAAqC;UACxDC,UAAU,EAAE;QACd,CAAC;MACH;;MAEA;MACA,IAAI5B,SAAS,CAAC6B,YAAY,CAAC,CAAC,EAAE;QAC5BnB,OAAO,CAACW,GAAG,CAAC,4CAA4C,CAAC;QACzD,MAAMS,YAAY,GAAG,MAAM9B,SAAS,CAACmB,gBAAgB,CAACP,KAAK,CAAC;QAC5DF,OAAO,CAACW,GAAG,CAAC,uBAAuB,EAAES,YAAY,CAAC;QAClD,OAAO;UACL,GAAGA,YAAY;UACfF,UAAU,EAAE;QACd,CAAC;MACH,CAAC,MAAM;QACLlB,OAAO,CAACW,GAAG,CAAC,2CAA2C,CAAC;QACxD,MAAMU,WAAW,GAAG,MAAM9B,SAAS,CAACkB,gBAAgB,CAACP,KAAK,CAAC;QAC3D,OAAO;UACL,GAAGmB,WAAW;UACdH,UAAU,EAAE;QACd,CAAC;MACH;IACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI,CAACE,gBAAgB,CAACC,KAAK,CAAC;IACrC;EACF,CAAC;EAED,MAAMO,gBAAgBA,CAACP,KAAa,EAAEQ,MAAoB,EAAE;IAC1D,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAM2B,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEV,IAAI,CAACC,SAAS,CAAC;UAAEd;QAAM,CAAC,CAAC;QAC/BQ,MAAM,EAAEA,MAAM,CAAC;MACjB,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAAC+B,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;MACvC;MAEA,OAAO,MAAMhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACd,IAAIA,KAAK,CAAC8B,IAAI,KAAK,YAAY,EAAE;QAC/B7B,OAAO,CAACW,GAAG,CAAC,4BAA4B,CAAC;QACzC,MAAMZ,KAAK,CAAC,CAAC;MACf;MACA,OAAOE,gBAAgB,CAACC,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAM4B,eAAeA,CAACpC,OAAe,EAAE;IACrC,IAAI;MACF,MAAMqC,aAAa,GAAG,MAAMtC,kBAAkB,CAACC,OAAO,CAAC;MACvD,OAAOqC,aAAa;IACtB,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAOE,gBAAgB,CAAC,qBAAqBP,OAAO,EAAE,CAAC;IACzD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}