{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import openaiAPI from'./openaiAPI';import{healthAPI}from'./healthAPI';import axios from'axios';// Debug utility function\nconst safeLog=(message,data)=>{if(data===undefined){console.log(message);return;}try{if(typeof data==='object'&&data!==null){console.log(message,JSON.stringify(data));}else{console.log(message,data);}}catch(error){console.log(message,'(Object could not be stringified)');}};// Helper functions defined outside the object\nconst fetchNutritionData=async barcode=>{try{const response=await axios.post('/vnutrition/analyze',{barcode});const responseData=response.data||{};return responseData;}catch(error){console.error('Error fetching nutrition data:',error);throw error;}};const getErrorResponse=query=>{return{summary:\"We encountered an issue searching for information about \\\"\".concat(query,\"\\\".\"),details:\"We're currently unable to provide detailed health information about \\\"\".concat(query,\"\\\". This could be due to:\\n\\n\\u2022 Temporary service issues\\n\\u2022 Network connectivity problems\\n\\u2022 API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n\\u2022 Contact your healthcare provider\\n\\u2022 Visit reputable medical websites like Mayo Clinic or WebMD\\n\\u2022 Call a health information hotline\\n\\u2022 Consult medical reference books\"),sources:['System'],relatedTopics:[],recommendations:[]};};export const healthSearchService={async searchHealthInfo(query,signal){safeLog(\"HealthSearchService: Searching for \"+query);try{// If request is aborted, throw AbortError\nif(signal!==null&&signal!==void 0&&signal.aborted){throw new DOMException('The operation was aborted','AbortError');}// If barcode, call nutrition\nif(/^\\d{8,14}$/.test(query.trim())){const nutritionResult=await fetchNutritionData(query.trim());return{summary:\"Nutrition info for barcode: \".concat(query),details:JSON.stringify(nutritionResult,null,2),sources:[],relatedTopics:[],recommendations:[],medicalDisclaimer:'Nutrition data from barcode lookup.',dataSource:'vnutrition'};}// Try to use the API with fetch and abort signal\ntry{const response=await fetch('http://localhost:5000/api/search/food',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query}),signal:signal});if(!response.ok){throw new Error('API request failed');}return await response.json();}catch(fetchError){if(fetchError.name==='AbortError'){safeLog('Search request was aborted');throw fetchError;// Re-throw to handle in caller\n}// Fall through to OpenAI if fetch failed\n}// Otherwise, call OpenAI or local health API\nif(openaiAPI.isConfigured()){safeLog(\"OpenAI API configured, using it for search\");const openaiResult=await openaiAPI.searchHealthInfo(query);safeLog(\"OpenAI search result\",openaiResult);return _objectSpread(_objectSpread({},openaiResult),{},{dataSource:'openai'});}else{safeLog(\"OpenAI API not configured, using fallback\");const localResult=await healthAPI.searchHealthInfo(query);return _objectSpread(_objectSpread({},localResult),{},{dataSource:'local'});}}catch(error){if(error.name==='AbortError'){throw error;// Let caller handle abort errors\n}safeLog(\"Error in health search\",error);return getErrorResponse(query);}},async searchByBarcode(barcode){try{const nutritionData=await fetchNutritionData(barcode);return nutritionData;}catch(error){console.error('Error in barcode search:',error);return getErrorResponse(\"food with barcode \".concat(barcode));}},// Add missing checkServiceStatus method\nasync checkServiceStatus(){try{const response=await fetch('http://localhost:5000/api/status',{method:'GET'});if(!response.ok){return{status:'error',message:'Service is not responding properly'};}return await response.json();}catch(error){console.error(\"Error checking service status:\",error);return{status:'offline',message:'Service is offline or unreachable'};}}};","map":{"version":3,"names":["openaiAPI","healthAPI","axios","safeLog","message","data","undefined","console","log","JSON","stringify","error","fetchNutritionData","barcode","response","post","responseData","getErrorResponse","query","summary","concat","details","sources","relatedTopics","recommendations","healthSearchService","searchHealthInfo","signal","aborted","DOMException","test","trim","nutritionResult","medicalDisclaimer","dataSource","fetch","method","headers","body","ok","Error","json","fetchError","name","isConfigured","openaiResult","_objectSpread","localResult","searchByBarcode","nutritionData","checkServiceStatus","status"],"sources":["C:/repo/wihy_ui/client/src/services/healthSearchService.ts"],"sourcesContent":["import openaiAPI, { openaiAPI as openaiService } from './openaiAPI';\r\nimport { healthAPI } from './healthAPI';\r\nimport axios from 'axios';\r\nimport { HealthSearchResult } from '../types/healthTypes';\r\n\r\n// Debug utility function\r\nconst safeLog = (message: string, data?: any) => {\r\n  if (data === undefined) {\r\n    console.log(message);\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    if (typeof data === 'object' && data !== null) {\r\n      console.log(message, JSON.stringify(data));\r\n    } else {\r\n      console.log(message, data);\r\n    }\r\n  } catch (error) {\r\n    console.log(message, '(Object could not be stringified)');\r\n  }\r\n};\r\n\r\n// Helper functions defined outside the object\r\nconst fetchNutritionData = async (barcode: string) => {\r\n  try {\r\n    const response = await axios.post('/vnutrition/analyze', { barcode });\r\n    const responseData: any = response.data || {};\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getErrorResponse = (query: string): HealthSearchResult => {\r\n  return {\r\n    summary: `We encountered an issue searching for information about \"${query}\".`,\r\n    details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\r\n    sources: ['System'],\r\n    relatedTopics: [],\r\n    recommendations: []\r\n  };\r\n};\r\n\r\nexport const healthSearchService = {\r\n  async searchHealthInfo(query: string, signal?: AbortSignal): Promise<HealthSearchResult> {\r\n    safeLog(\"HealthSearchService: Searching for \" + query);\r\n    try {\r\n      // If request is aborted, throw AbortError\r\n      if (signal?.aborted) {\r\n        throw new DOMException('The operation was aborted', 'AbortError');\r\n      }\r\n      \r\n      // If barcode, call nutrition\r\n      if (/^\\d{8,14}$/.test(query.trim())) {\r\n        const nutritionResult = await fetchNutritionData(query.trim());\r\n        return {\r\n          summary: `Nutrition info for barcode: ${query}`,\r\n          details: JSON.stringify(nutritionResult, null, 2),\r\n          sources: [],\r\n          relatedTopics: [],\r\n          recommendations: [],\r\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\r\n          dataSource: 'vnutrition'\r\n        };\r\n      }\r\n\r\n      // Try to use the API with fetch and abort signal\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/search/food', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ query }),\r\n          signal: signal\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('API request failed');\r\n        }\r\n        \r\n        return await response.json();\r\n      } catch (fetchError) {\r\n        if (fetchError.name === 'AbortError') {\r\n          safeLog('Search request was aborted');\r\n          throw fetchError; // Re-throw to handle in caller\r\n        }\r\n        // Fall through to OpenAI if fetch failed\r\n      }\r\n\r\n      // Otherwise, call OpenAI or local health API\r\n      if (openaiAPI.isConfigured()) {\r\n        safeLog(\"OpenAI API configured, using it for search\");\r\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\r\n        safeLog(\"OpenAI search result\", openaiResult);\r\n        return {\r\n          ...openaiResult,\r\n          dataSource: 'openai'\r\n        };\r\n      } else {\r\n        safeLog(\"OpenAI API not configured, using fallback\");\r\n        const localResult = await healthAPI.searchHealthInfo(query);\r\n        return {\r\n          ...localResult,\r\n          dataSource: 'local'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        throw error; // Let caller handle abort errors\r\n      }\r\n      safeLog(\"Error in health search\", error);\r\n      return getErrorResponse(query);\r\n    }\r\n  },\r\n\r\n  async searchByBarcode(barcode: string) {\r\n    try {\r\n      const nutritionData = await fetchNutritionData(barcode);\r\n      return nutritionData;\r\n    } catch (error) {\r\n      console.error('Error in barcode search:', error);\r\n      return getErrorResponse(`food with barcode ${barcode}`);\r\n    }\r\n  },\r\n\r\n  // Add missing checkServiceStatus method\r\n  async checkServiceStatus() {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/status', {\r\n        method: 'GET',\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        return { status: 'error', message: 'Service is not responding properly' };\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error checking service status:\", error);\r\n      return { status: 'offline', message: 'Service is offline or unreachable' };\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}