{"ast":null,"code":"import _objectSpread from\"C:/Users/Kortn/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import openaiAPI from'./openaiAPI';import{healthAPI}from'./healthAPI';import axios from'axios';class HealthSearchService{async searchHealthInfo(query){console.log(\"HealthSearchService: Searching for\",query);try{// If barcode, call nutrition\nif(/^\\d{8,14}$/.test(query.trim())){const nutritionResult=await this.fetchNutritionData(query.trim());return{summary:\"Nutrition info for barcode: \".concat(query),details:JSON.stringify(nutritionResult,null,2),sources:[],relatedTopics:[],recommendations:[],medicalDisclaimer:'Nutrition data from barcode lookup.',dataSource:'vnutrition'};}// Otherwise, call OpenAI or local health API\nif(openaiAPI.isConfigured()){console.log(\"OpenAI API configured, using it for search\");const openaiResult=await openaiAPI.searchHealthInfo(query);console.log(\"OpenAI search result:\",openaiResult);return _objectSpread(_objectSpread({},openaiResult),{},{dataSource:'openai'});}else{console.log(\"OpenAI API not configured, using fallback\");const localResult=await healthAPI.searchHealthInfo(query);return _objectSpread(_objectSpread({},localResult),{},{dataSource:'local'});}}catch(error){console.error(\"Error in health search:\",error);return this.getErrorResponse(query);}}async fetchNutritionData(barcode){try{const response=await axios.post('/vnutrition/analyze',{barcode});const responseData=response.data||{};return{success:responseData.success||false,item:responseData.item||'',calories_per_serving:responseData.calories_per_serving||0,macros:responseData.macros||{protein:'0g',carbs:'0g',fat:'0g'},dataSource:'vnutrition'};}catch(error){console.error('vNutrition API failed:',error);return null;}}getErrorResponse(query){return{summary:\"We encountered an issue searching for information about \\\"\".concat(query,\"\\\".\"),details:\"We're currently unable to provide detailed health information about \\\"\".concat(query,\"\\\". This could be due to:\\n\\n\\u2022 Temporary service issues\\n\\u2022 Network connectivity problems\\n\\u2022 API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n\\u2022 Contact your healthcare provider\\n\\u2022 Visit reputable medical websites like Mayo Clinic or WebMD\\n\\u2022 Call a health information hotline\\n\\u2022 Consult medical reference books\"),sources:['Error Response'],relatedTopics:['Healthcare Providers','Medical Resources','Health Information'],recommendations:['Try your search again in a few minutes','Contact a healthcare professional for urgent concerns','Use reputable medical websites for basic information','Keep a list of trusted health resources'],medicalDisclaimer:'For any health concerns, please consult with a qualified healthcare provider. This error message should not delay seeking professional medical advice.',dataSource:'error'};}// Check service availability\nasync checkServiceStatus(){const openaiAvailable=openaiAPI.isConfigured();const localAvailable=true;// Local service is always available\nreturn{openai:openaiAvailable,local:localAvailable,recommended:openaiAvailable?'openai':'local'};}// Add this method for vNutrition integration\nasync searchNutritionByBarcode(barcode){try{const response=await axios.post('/vnutrition/analyze',{barcode});const responseData=response.data||{};return{success:responseData.success||false,item:responseData.item||'',calories_per_serving:responseData.calories_per_serving||0,macros:responseData.macros||{protein:'0g',carbs:'0g',fat:'0g'},dataSource:'vnutrition'};}catch(error){console.error('vNutrition API failed:',error);return{summary:\"Could not retrieve nutrition info for barcode \\\"\".concat(barcode,\"\\\".\"),details:'There was a problem connecting to the nutrition service.',dataSource:'error'};}}// Optionally, add a method for image upload as well\nasync searchNutritionByImage(file){const formData=new FormData();formData.append('file',file);try{const response=await axios.post('/vnutrition/analyze',formData,{headers:{'Content-Type':'multipart/form-data'}});const responseData=response.data||{};return{success:responseData.success||false,item:responseData.item||'',calories_per_serving:responseData.calories_per_serving||0,macros:responseData.macros||{protein:'0g',carbs:'0g',fat:'0g'},dataSource:'vnutrition'};}catch(error){console.error('vNutrition API failed:',error);return{summary:\"Could not analyze the uploaded image.\",details:'There was a problem connecting to the nutrition service.',dataSource:'error'};}}}export const healthSearchService=new HealthSearchService();","map":{"version":3,"names":["openaiAPI","healthAPI","axios","HealthSearchService","searchHealthInfo","query","console","log","test","trim","nutritionResult","fetchNutritionData","summary","concat","details","JSON","stringify","sources","relatedTopics","recommendations","medicalDisclaimer","dataSource","isConfigured","openaiResult","_objectSpread","localResult","error","getErrorResponse","barcode","response","post","responseData","data","success","item","calories_per_serving","macros","protein","carbs","fat","checkServiceStatus","openaiAvailable","localAvailable","openai","local","recommended","searchNutritionByBarcode","searchNutritionByImage","file","formData","FormData","append","headers","healthSearchService"],"sources":["C:/vHealth/vhealth/client/src/services/healthSearchService.ts"],"sourcesContent":["import openaiAPI, { openaiAPI as openaiService } from './openaiAPI';\r\nimport { healthAPI } from './healthAPI';\r\nimport axios from 'axios';\r\n\r\ninterface HealthSearchResult {\r\n  summary: string;\r\n  details: string;\r\n  sources: string[];\r\n  relatedTopics: string[];\r\n  recommendations: string[];\r\n  medicalDisclaimer: string;\r\n  dataSource: 'openai' | 'local' | 'error' | 'vnutrition';\r\n}\r\n\r\nclass HealthSearchService {\r\n  async searchHealthInfo(query: string): Promise<HealthSearchResult> {\r\n    console.log(\"HealthSearchService: Searching for\", query);\r\n    try {\r\n      // If barcode, call nutrition\r\n      if (/^\\d{8,14}$/.test(query.trim())) {\r\n        const nutritionResult = await this.fetchNutritionData(query.trim());\r\n        return {\r\n          summary: `Nutrition info for barcode: ${query}`,\r\n          details: JSON.stringify(nutritionResult, null, 2),\r\n          sources: [],\r\n          relatedTopics: [],\r\n          recommendations: [],\r\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\r\n          dataSource: 'vnutrition'\r\n        };\r\n      }\r\n\r\n      // Otherwise, call OpenAI or local health API\r\n      if (openaiAPI.isConfigured()) {\r\n        console.log(\"OpenAI API configured, using it for search\");\r\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"OpenAI search result:\", openaiResult);\r\n        return {\r\n          ...openaiResult,\r\n          dataSource: 'openai'\r\n        };\r\n      } else {\r\n        console.log(\"OpenAI API not configured, using fallback\");\r\n        const localResult = await healthAPI.searchHealthInfo(query);\r\n        return {\r\n          ...localResult,\r\n          dataSource: 'local'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in health search:\", error);\r\n      return this.getErrorResponse(query);\r\n    }\r\n  }\r\n\r\n  private async fetchNutritionData(barcode: string) {\r\n    try {\r\n      const response = await axios.post('/vnutrition/analyze', { barcode });\r\n      const responseData: any = response.data || {};\r\n      return {\r\n        success: responseData.success || false,\r\n        item: responseData.item || '',\r\n        calories_per_serving: responseData.calories_per_serving || 0,\r\n        macros: responseData.macros || { protein: '0g', carbs: '0g', fat: '0g' },\r\n        dataSource: 'vnutrition'\r\n      };\r\n    } catch (error) {\r\n      console.error('vNutrition API failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getErrorResponse(query: string): HealthSearchResult {\r\n    return {\r\n      summary: `We encountered an issue searching for information about \"${query}\".`,\r\n      details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\r\n      sources: ['Error Response'],\r\n      relatedTopics: ['Healthcare Providers', 'Medical Resources', 'Health Information'],\r\n      recommendations: [\r\n        'Try your search again in a few minutes',\r\n        'Contact a healthcare professional for urgent concerns',\r\n        'Use reputable medical websites for basic information',\r\n        'Keep a list of trusted health resources'\r\n      ],\r\n      medicalDisclaimer: 'For any health concerns, please consult with a qualified healthcare provider. This error message should not delay seeking professional medical advice.',\r\n      dataSource: 'error'\r\n    };\r\n  }\r\n\r\n  // Check service availability\r\n  async checkServiceStatus(): Promise<{\r\n    openai: boolean;\r\n    local: boolean;\r\n    recommended: 'openai' | 'local';\r\n  }> {\r\n    const openaiAvailable = openaiAPI.isConfigured();\r\n    const localAvailable = true; // Local service is always available\r\n\r\n    return {\r\n      openai: openaiAvailable,\r\n      local: localAvailable,\r\n      recommended: openaiAvailable ? 'openai' : 'local'\r\n    };\r\n  }\r\n\r\n  // Add this method for vNutrition integration\r\n  async searchNutritionByBarcode(barcode: string): Promise<any> {\r\n    try {\r\n      const response = await axios.post('/vnutrition/analyze', { barcode });\r\n      const responseData: any = response.data || {};\r\n      return {\r\n        success: responseData.success || false,\r\n        item: responseData.item || '',\r\n        calories_per_serving: responseData.calories_per_serving || 0,\r\n        macros: responseData.macros || { protein: '0g', carbs: '0g', fat: '0g' },\r\n        dataSource: 'vnutrition'\r\n      };\r\n    } catch (error) {\r\n      console.error('vNutrition API failed:', error);\r\n      return {\r\n        summary: `Could not retrieve nutrition info for barcode \"${barcode}\".`,\r\n        details: 'There was a problem connecting to the nutrition service.',\r\n        dataSource: 'error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Optionally, add a method for image upload as well\r\n  async searchNutritionByImage(file: File): Promise<any> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    try {\r\n      const response = await axios.post('/vnutrition/analyze', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      const responseData: any = response.data || {};\r\n      return {\r\n        success: responseData.success || false,\r\n        item: responseData.item || '',\r\n        calories_per_serving: responseData.calories_per_serving || 0,\r\n        macros: responseData.macros || { protein: '0g', carbs: '0g', fat: '0g' },\r\n        dataSource: 'vnutrition'\r\n      };\r\n    } catch (error) {\r\n      console.error('vNutrition API failed:', error);\r\n      return {\r\n        summary: `Could not analyze the uploaded image.`,\r\n        details: 'There was a problem connecting to the nutrition service.',\r\n        dataSource: 'error'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const healthSearchService = new HealthSearchService();"],"mappings":"kJAAA,MAAO,CAAAA,SAAS,KAAsC,aAAa,CACnE,OAASC,SAAS,KAAQ,aAAa,CACvC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAYzB,KAAM,CAAAC,mBAAoB,CACxB,KAAM,CAAAC,gBAAgBA,CAACC,KAAa,CAA+B,CACjEC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEF,KAAK,CAAC,CACxD,GAAI,CACF;AACA,GAAI,YAAY,CAACG,IAAI,CAACH,KAAK,CAACI,IAAI,CAAC,CAAC,CAAC,CAAE,CACnC,KAAM,CAAAC,eAAe,CAAG,KAAM,KAAI,CAACC,kBAAkB,CAACN,KAAK,CAACI,IAAI,CAAC,CAAC,CAAC,CACnE,MAAO,CACLG,OAAO,gCAAAC,MAAA,CAAiCR,KAAK,CAAE,CAC/CS,OAAO,CAAEC,IAAI,CAACC,SAAS,CAACN,eAAe,CAAE,IAAI,CAAE,CAAC,CAAC,CACjDO,OAAO,CAAE,EAAE,CACXC,aAAa,CAAE,EAAE,CACjBC,eAAe,CAAE,EAAE,CACnBC,iBAAiB,CAAE,qCAAqC,CACxDC,UAAU,CAAE,YACd,CAAC,CACH,CAEA;AACA,GAAIrB,SAAS,CAACsB,YAAY,CAAC,CAAC,CAAE,CAC5BhB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CACzD,KAAM,CAAAgB,YAAY,CAAG,KAAM,CAAAvB,SAAS,CAACI,gBAAgB,CAACC,KAAK,CAAC,CAC5DC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEgB,YAAY,CAAC,CAClD,OAAAC,aAAA,CAAAA,aAAA,IACKD,YAAY,MACfF,UAAU,CAAE,QAAQ,GAExB,CAAC,IAAM,CACLf,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CACxD,KAAM,CAAAkB,WAAW,CAAG,KAAM,CAAAxB,SAAS,CAACG,gBAAgB,CAACC,KAAK,CAAC,CAC3D,OAAAmB,aAAA,CAAAA,aAAA,IACKC,WAAW,MACdJ,UAAU,CAAE,OAAO,GAEvB,CACF,CAAE,MAAOK,KAAK,CAAE,CACdpB,OAAO,CAACoB,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,KAAI,CAACC,gBAAgB,CAACtB,KAAK,CAAC,CACrC,CACF,CAEA,KAAc,CAAAM,kBAAkBA,CAACiB,OAAe,CAAE,CAChD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,qBAAqB,CAAE,CAAEF,OAAQ,CAAC,CAAC,CACrE,KAAM,CAAAG,YAAiB,CAAGF,QAAQ,CAACG,IAAI,EAAI,CAAC,CAAC,CAC7C,MAAO,CACLC,OAAO,CAAEF,YAAY,CAACE,OAAO,EAAI,KAAK,CACtCC,IAAI,CAAEH,YAAY,CAACG,IAAI,EAAI,EAAE,CAC7BC,oBAAoB,CAAEJ,YAAY,CAACI,oBAAoB,EAAI,CAAC,CAC5DC,MAAM,CAAEL,YAAY,CAACK,MAAM,EAAI,CAAEC,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,GAAG,CAAE,IAAK,CAAC,CACxElB,UAAU,CAAE,YACd,CAAC,CACH,CAAE,MAAOK,KAAK,CAAE,CACdpB,OAAO,CAACoB,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,KAAI,CACb,CACF,CAEQC,gBAAgBA,CAACtB,KAAa,CAAsB,CAC1D,MAAO,CACLO,OAAO,8DAAAC,MAAA,CAA8DR,KAAK,OAAI,CAC9ES,OAAO,0EAAAD,MAAA,CAA0ER,KAAK,gZAA0W,CAChcY,OAAO,CAAE,CAAC,gBAAgB,CAAC,CAC3BC,aAAa,CAAE,CAAC,sBAAsB,CAAE,mBAAmB,CAAE,oBAAoB,CAAC,CAClFC,eAAe,CAAE,CACf,wCAAwC,CACxC,uDAAuD,CACvD,sDAAsD,CACtD,yCAAyC,CAC1C,CACDC,iBAAiB,CAAE,wJAAwJ,CAC3KC,UAAU,CAAE,OACd,CAAC,CACH,CAEA;AACA,KAAM,CAAAmB,kBAAkBA,CAAA,CAIrB,CACD,KAAM,CAAAC,eAAe,CAAGzC,SAAS,CAACsB,YAAY,CAAC,CAAC,CAChD,KAAM,CAAAoB,cAAc,CAAG,IAAI,CAAE;AAE7B,MAAO,CACLC,MAAM,CAAEF,eAAe,CACvBG,KAAK,CAAEF,cAAc,CACrBG,WAAW,CAAEJ,eAAe,CAAG,QAAQ,CAAG,OAC5C,CAAC,CACH,CAEA;AACA,KAAM,CAAAK,wBAAwBA,CAAClB,OAAe,CAAgB,CAC5D,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,qBAAqB,CAAE,CAAEF,OAAQ,CAAC,CAAC,CACrE,KAAM,CAAAG,YAAiB,CAAGF,QAAQ,CAACG,IAAI,EAAI,CAAC,CAAC,CAC7C,MAAO,CACLC,OAAO,CAAEF,YAAY,CAACE,OAAO,EAAI,KAAK,CACtCC,IAAI,CAAEH,YAAY,CAACG,IAAI,EAAI,EAAE,CAC7BC,oBAAoB,CAAEJ,YAAY,CAACI,oBAAoB,EAAI,CAAC,CAC5DC,MAAM,CAAEL,YAAY,CAACK,MAAM,EAAI,CAAEC,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,GAAG,CAAE,IAAK,CAAC,CACxElB,UAAU,CAAE,YACd,CAAC,CACH,CAAE,MAAOK,KAAK,CAAE,CACdpB,OAAO,CAACoB,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,CACLd,OAAO,oDAAAC,MAAA,CAAoDe,OAAO,OAAI,CACtEd,OAAO,CAAE,0DAA0D,CACnEO,UAAU,CAAE,OACd,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAA0B,sBAAsBA,CAACC,IAAU,CAAgB,CACrD,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAC7B,GAAI,CACF,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,qBAAqB,CAAEmB,QAAQ,CAAE,CACjEG,OAAO,CAAE,CAAE,cAAc,CAAE,qBAAsB,CACnD,CAAC,CAAC,CACF,KAAM,CAAArB,YAAiB,CAAGF,QAAQ,CAACG,IAAI,EAAI,CAAC,CAAC,CAC7C,MAAO,CACLC,OAAO,CAAEF,YAAY,CAACE,OAAO,EAAI,KAAK,CACtCC,IAAI,CAAEH,YAAY,CAACG,IAAI,EAAI,EAAE,CAC7BC,oBAAoB,CAAEJ,YAAY,CAACI,oBAAoB,EAAI,CAAC,CAC5DC,MAAM,CAAEL,YAAY,CAACK,MAAM,EAAI,CAAEC,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,GAAG,CAAE,IAAK,CAAC,CACxElB,UAAU,CAAE,YACd,CAAC,CACH,CAAE,MAAOK,KAAK,CAAE,CACdpB,OAAO,CAACoB,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,CACLd,OAAO,wCAAyC,CAChDE,OAAO,CAAE,0DAA0D,CACnEO,UAAU,CAAE,OACd,CAAC,CACH,CACF,CACF,CAEA,MAAO,MAAM,CAAAgC,mBAAmB,CAAG,GAAI,CAAAlD,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}