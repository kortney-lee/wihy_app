{"ast":null,"code":"import React from'react';import{Chart as ChartJS,ArcElement,Tooltip,Legend}from'chart.js';import{Doughnut}from'react-chartjs-2';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(ArcElement,Tooltip,Legend);// Extract nutrition data from unified API response or legacy format\nconst extractNutritionData=(apiResponse,results,dataSource)=>{console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');console.log('API Response:',apiResponse);console.log('DataSource:',dataSource);// Handle unified API response first\nif(apiResponse&&apiResponse.data&&apiResponse.data.nutrition){console.log('Processing unified API nutrition data');const nutrition=apiResponse.data.nutrition;if(nutrition.facts){var _nutrition$nourish_sc,_nutrition$nourish_sc2;const extractedData={calories:nutrition.facts.calories_per_serving||0,protein:nutrition.facts.protein_g||0,carbs:nutrition.facts.carbs_g||0,fat:nutrition.facts.fat_g||0,fiber:nutrition.facts.fiber_g||0,sugar:nutrition.facts.sugar_g||0,sodium:nutrition.facts.sodium_mg||0,nourish_score:((_nutrition$nourish_sc=nutrition.nourish_score)===null||_nutrition$nourish_sc===void 0?void 0:_nutrition$nourish_sc.score)||0,nourish_category:((_nutrition$nourish_sc2=nutrition.nourish_score)===null||_nutrition$nourish_sc2===void 0?void 0:_nutrition$nourish_sc2.category)||'Unknown',macronutrients:nutrition.macronutrients||{protein:0,carbs:0,fat:0},type:'unified'};console.log('=== EXTRACTED UNIFIED DATA ===');console.log('Final extracted data:',extractedData);return extractedData;}}// Fallback to legacy extraction\nif(dataSource==='vnutrition'&&results){try{console.log('Processing legacy vnutrition data source');let nutrition;if(typeof results==='string'){console.log('Parsing string results');// Check if this is markdown/formatted text instead of JSON\nif(results.startsWith('#')||results.includes('AI Chat response')){console.log('Results appear to be formatted text, not JSON nutrition data');return null;}nutrition=JSON.parse(results);}else{console.log('Using object results directly');nutrition=results;}if(nutrition&&nutrition.found!==false){const extractedData={calories:nutrition.calories_per_serving||0,protein:nutrition.protein_g||0,carbs:nutrition.carbs_g||0,fat:nutrition.fat_g||0,fiber:nutrition.fiber_g||0,sugar:nutrition.sugar_g||0,sodium:nutrition.sodium_mg||0,novaScore:nutrition.nova_classification||1,processedLevel:nutrition.nova_description||nutrition.processed_level||'Unknown',type:'legacy'};console.log('=== EXTRACTED LEGACY DATA ===');console.log('Final extracted data:',extractedData);return extractedData;}}catch(error){console.error('Error parsing nutrition data:',error);return null;}}console.log('No valid nutrition data found');return null;};const NutritionChart=_ref=>{let{apiResponse,query,results,dataSource}=_ref;// Extract nutrition data using new unified approach\nconst nutritionData=extractNutritionData(apiResponse,results,dataSource);// Only render if we have nutrition data\nif(!nutritionData){return null;}// Use macronutrients from unified response if available, otherwise calculate from facts\nlet protein,carbs,fat,total;if(nutritionData.type==='unified'&&nutritionData.macronutrients){const macros=nutritionData.macronutrients;protein=macros.protein;carbs=macros.carbs;fat=macros.fat;total=protein+carbs+fat;}else{// Calculate percentages from gram values\ntotal=nutritionData.protein+nutritionData.carbs+nutritionData.fat;if(total>0){protein=Math.round(nutritionData.protein/total*100);carbs=Math.round(nutritionData.carbs/total*100);fat=Math.round(nutritionData.fat/total*100);}else{protein=carbs=fat=0;}}const{calories}=nutritionData;// Prepare data for the pie chart\nconst data={datasets:[{data:[protein,carbs,fat],backgroundColor:['#10B981',// Green for protein\n'#F59E0B',// Yellow for carbs  \n'#EF4444'// Red for fat\n],borderWidth:0,cutout:'60%'}]};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{callbacks:{label:function(context){const labels=['Protein','Carbs','Fat'];const label=labels[context.dataIndex];const value=context.parsed;const percentage=total>0?Math.round(value/total*100):0;return\"\".concat(label,\": \").concat(value,\"g (\").concat(percentage,\"%)\");}}}}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',height:'200px',width:'200px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(Doughnut,{data:data,options:options}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'1.5rem',fontWeight:'bold',color:'#374151'},children:calories}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.75rem',color:'#6B7280'},children:\"Calories\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',marginBottom:'0.5rem'},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'1.2rem',marginRight:'0.5rem'},children:\"\\u26A1\"}),/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:'500',color:'#374151',fontSize:'1rem'},children:\"Good\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',gap:'1rem',fontSize:'0.875rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#10B981',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Protein: \",total>0?Math.round(protein/total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#F59E0B',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Carbs: \",total>0?Math.round(carbs/total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#EF4444',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Fat: \",total>0?Math.round(fat/total*100):0,\"%\"]})]})]})]})]});};export default NutritionChart;","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsx","_jsx","jsxs","_jsxs","register","extractNutritionData","apiResponse","results","dataSource","console","log","data","nutrition","facts","_nutrition$nourish_sc","_nutrition$nourish_sc2","extractedData","calories","calories_per_serving","protein","protein_g","carbs","carbs_g","fat","fat_g","fiber","fiber_g","sugar","sugar_g","sodium","sodium_mg","nourish_score","score","nourish_category","category","macronutrients","type","startsWith","includes","JSON","parse","found","novaScore","nova_classification","processedLevel","nova_description","processed_level","error","NutritionChart","_ref","query","nutritionData","total","macros","Math","round","datasets","backgroundColor","borderWidth","cutout","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","label","context","labels","dataIndex","value","parsed","percentage","concat","style","textAlign","children","position","height","width","margin","top","left","transform","fontSize","fontWeight","color","marginTop","alignItems","justifyContent","marginBottom","marginRight","gap","borderRadius"],"sources":["C:/repo/wihy_ui/client/src/components/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  apiResponse?: UnifiedResponse | any; // Accept the full API response\r\n  query?: string;\r\n  results?: string;\r\n  dataSource?: \"error\" | \"openai\" | \"local\" | \"vnutrition\" | \"wihy\";\r\n}\r\n\r\n// Extract nutrition data from unified API response or legacy format\r\nconst extractNutritionData = (apiResponse?: UnifiedResponse | any, results?: string, dataSource?: string) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA IN NUTRITIONCHART ===');\r\n  console.log('API Response:', apiResponse);\r\n  console.log('DataSource:', dataSource);\r\n  \r\n  // Handle unified API response first\r\n  if (apiResponse && apiResponse.data && apiResponse.data.nutrition) {\r\n    console.log('Processing unified API nutrition data');\r\n    const nutrition = apiResponse.data.nutrition;\r\n    \r\n    if (nutrition.facts) {\r\n      const extractedData = {\r\n        calories: nutrition.facts.calories_per_serving || 0,\r\n        protein: nutrition.facts.protein_g || 0,\r\n        carbs: nutrition.facts.carbs_g || 0,\r\n        fat: nutrition.facts.fat_g || 0,\r\n        fiber: nutrition.facts.fiber_g || 0,\r\n        sugar: nutrition.facts.sugar_g || 0,\r\n        sodium: nutrition.facts.sodium_mg || 0,\r\n        nourish_score: nutrition.nourish_score?.score || 0,\r\n        nourish_category: nutrition.nourish_score?.category || 'Unknown',\r\n        macronutrients: nutrition.macronutrients || { protein: 0, carbs: 0, fat: 0 },\r\n        type: 'unified'\r\n      };\r\n      \r\n      console.log('=== EXTRACTED UNIFIED DATA ===');\r\n      console.log('Final extracted data:', extractedData);\r\n      return extractedData;\r\n    }\r\n  }\r\n  \r\n  // Fallback to legacy extraction\r\n  if (dataSource === 'vnutrition' && results) {\r\n    try {\r\n      console.log('Processing legacy vnutrition data source');\r\n      let nutrition;\r\n      \r\n      if (typeof results === 'string') {\r\n        console.log('Parsing string results');\r\n        \r\n        // Check if this is markdown/formatted text instead of JSON\r\n        if (results.startsWith('#') || results.includes('AI Chat response')) {\r\n          console.log('Results appear to be formatted text, not JSON nutrition data');\r\n          return null;\r\n        }\r\n        \r\n        nutrition = JSON.parse(results);\r\n      } else {\r\n        console.log('Using object results directly');\r\n        nutrition = results;\r\n      }\r\n      \r\n      if (nutrition && nutrition.found !== false) {\r\n        const extractedData = {\r\n          calories: nutrition.calories_per_serving || 0,\r\n          protein: nutrition.protein_g || 0,\r\n          carbs: nutrition.carbs_g || 0,\r\n          fat: nutrition.fat_g || 0,\r\n          fiber: nutrition.fiber_g || 0,\r\n          sugar: nutrition.sugar_g || 0,\r\n          sodium: nutrition.sodium_mg || 0,\r\n          novaScore: nutrition.nova_classification || 1,\r\n          processedLevel: nutrition.nova_description || nutrition.processed_level || 'Unknown',\r\n          type: 'legacy'\r\n        };\r\n        \r\n        console.log('=== EXTRACTED LEGACY DATA ===');\r\n        console.log('Final extracted data:', extractedData);\r\n        return extractedData;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing nutrition data:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  console.log('No valid nutrition data found');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ apiResponse, query, results, dataSource }) => {\r\n  // Extract nutrition data using new unified approach\r\n  const nutritionData = extractNutritionData(apiResponse, results, dataSource);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData) {\r\n    return null;\r\n  }\r\n\r\n  // Use macronutrients from unified response if available, otherwise calculate from facts\r\n  let protein, carbs, fat, total;\r\n  \r\n  if (nutritionData.type === 'unified' && (nutritionData as any).macronutrients) {\r\n    const macros = (nutritionData as any).macronutrients;\r\n    protein = macros.protein;\r\n    carbs = macros.carbs;\r\n    fat = macros.fat;\r\n    total = protein + carbs + fat;\r\n  } else {\r\n    // Calculate percentages from gram values\r\n    total = nutritionData.protein + nutritionData.carbs + nutritionData.fat;\r\n    if (total > 0) {\r\n      protein = Math.round((nutritionData.protein / total) * 100);\r\n      carbs = Math.round((nutritionData.carbs / total) * 100);\r\n      fat = Math.round((nutritionData.fat / total) * 100);\r\n    } else {\r\n      protein = carbs = fat = 0;\r\n    }\r\n  }\r\n  \r\n  const { calories } = nutritionData;\r\n  \r\n  // Prepare data for the pie chart\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [protein, carbs, fat],\r\n        backgroundColor: [\r\n          '#10B981', // Green for protein\r\n          '#F59E0B', // Yellow for carbs  \r\n          '#EF4444', // Red for fat\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '60%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const labels = ['Protein', 'Carbs', 'Fat'];\r\n            const label = labels[context.dataIndex];\r\n            const value = context.parsed;\r\n            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\r\n            return `${label}: ${value}g (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {calories}\r\n          </div>\r\n          <div style={{ fontSize: '0.75rem', color: '#6B7280' }}>\r\n            Calories\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            ⚡\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Good\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#10B981',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Protein: {total > 0 ? Math.round((protein / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#F59E0B',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Carbs: {total > 0 ? Math.round((carbs / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#EF4444',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Fat: {total > 0 ? Math.round((fat / total) * 100) : 0}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OACEC,KAAK,GAAI,CAAAC,OAAO,CAChBC,UAAU,CACVC,OAAO,CACPC,MAAM,KACD,UAAU,CACjB,OAASC,QAAQ,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAG3CR,OAAO,CAACS,QAAQ,CAACR,UAAU,CAAEC,OAAO,CAAEC,MAAM,CAAC,CAS7C;AACA,KAAM,CAAAO,oBAAoB,CAAGA,CAACC,WAAmC,CAAEC,OAAgB,CAAEC,UAAmB,GAAK,CAC3GC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CAClED,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEJ,WAAW,CAAC,CACzCG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAEF,UAAU,CAAC,CAEtC;AACA,GAAIF,WAAW,EAAIA,WAAW,CAACK,IAAI,EAAIL,WAAW,CAACK,IAAI,CAACC,SAAS,CAAE,CACjEH,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACpD,KAAM,CAAAE,SAAS,CAAGN,WAAW,CAACK,IAAI,CAACC,SAAS,CAE5C,GAAIA,SAAS,CAACC,KAAK,CAAE,KAAAC,qBAAA,CAAAC,sBAAA,CACnB,KAAM,CAAAC,aAAa,CAAG,CACpBC,QAAQ,CAAEL,SAAS,CAACC,KAAK,CAACK,oBAAoB,EAAI,CAAC,CACnDC,OAAO,CAAEP,SAAS,CAACC,KAAK,CAACO,SAAS,EAAI,CAAC,CACvCC,KAAK,CAAET,SAAS,CAACC,KAAK,CAACS,OAAO,EAAI,CAAC,CACnCC,GAAG,CAAEX,SAAS,CAACC,KAAK,CAACW,KAAK,EAAI,CAAC,CAC/BC,KAAK,CAAEb,SAAS,CAACC,KAAK,CAACa,OAAO,EAAI,CAAC,CACnCC,KAAK,CAAEf,SAAS,CAACC,KAAK,CAACe,OAAO,EAAI,CAAC,CACnCC,MAAM,CAAEjB,SAAS,CAACC,KAAK,CAACiB,SAAS,EAAI,CAAC,CACtCC,aAAa,CAAE,EAAAjB,qBAAA,CAAAF,SAAS,CAACmB,aAAa,UAAAjB,qBAAA,iBAAvBA,qBAAA,CAAyBkB,KAAK,GAAI,CAAC,CAClDC,gBAAgB,CAAE,EAAAlB,sBAAA,CAAAH,SAAS,CAACmB,aAAa,UAAAhB,sBAAA,iBAAvBA,sBAAA,CAAyBmB,QAAQ,GAAI,SAAS,CAChEC,cAAc,CAAEvB,SAAS,CAACuB,cAAc,EAAI,CAAEhB,OAAO,CAAE,CAAC,CAAEE,KAAK,CAAE,CAAC,CAAEE,GAAG,CAAE,CAAE,CAAC,CAC5Ea,IAAI,CAAE,SACR,CAAC,CAED3B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAC7CD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEM,aAAa,CAAC,CACnD,MAAO,CAAAA,aAAa,CACtB,CACF,CAEA;AACA,GAAIR,UAAU,GAAK,YAAY,EAAID,OAAO,CAAE,CAC1C,GAAI,CACFE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CACvD,GAAI,CAAAE,SAAS,CAEb,GAAI,MAAO,CAAAL,OAAO,GAAK,QAAQ,CAAE,CAC/BE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CAErC;AACA,GAAIH,OAAO,CAAC8B,UAAU,CAAC,GAAG,CAAC,EAAI9B,OAAO,CAAC+B,QAAQ,CAAC,kBAAkB,CAAC,CAAE,CACnE7B,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC,CAC3E,MAAO,KAAI,CACb,CAEAE,SAAS,CAAG2B,IAAI,CAACC,KAAK,CAACjC,OAAO,CAAC,CACjC,CAAC,IAAM,CACLE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CE,SAAS,CAAGL,OAAO,CACrB,CAEA,GAAIK,SAAS,EAAIA,SAAS,CAAC6B,KAAK,GAAK,KAAK,CAAE,CAC1C,KAAM,CAAAzB,aAAa,CAAG,CACpBC,QAAQ,CAAEL,SAAS,CAACM,oBAAoB,EAAI,CAAC,CAC7CC,OAAO,CAAEP,SAAS,CAACQ,SAAS,EAAI,CAAC,CACjCC,KAAK,CAAET,SAAS,CAACU,OAAO,EAAI,CAAC,CAC7BC,GAAG,CAAEX,SAAS,CAACY,KAAK,EAAI,CAAC,CACzBC,KAAK,CAAEb,SAAS,CAACc,OAAO,EAAI,CAAC,CAC7BC,KAAK,CAAEf,SAAS,CAACgB,OAAO,EAAI,CAAC,CAC7BC,MAAM,CAAEjB,SAAS,CAACkB,SAAS,EAAI,CAAC,CAChCY,SAAS,CAAE9B,SAAS,CAAC+B,mBAAmB,EAAI,CAAC,CAC7CC,cAAc,CAAEhC,SAAS,CAACiC,gBAAgB,EAAIjC,SAAS,CAACkC,eAAe,EAAI,SAAS,CACpFV,IAAI,CAAE,QACR,CAAC,CAED3B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEM,aAAa,CAAC,CACnD,MAAO,CAAAA,aAAa,CACtB,CACF,CAAE,MAAO+B,KAAK,CAAE,CACdtC,OAAO,CAACsC,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,KAAI,CACb,CACF,CAEAtC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5C,MAAO,KAAI,CACb,CAAC,CAED,KAAM,CAAAsC,cAA6C,CAAGC,IAAA,EAAiD,IAAhD,CAAE3C,WAAW,CAAE4C,KAAK,CAAE3C,OAAO,CAAEC,UAAW,CAAC,CAAAyC,IAAA,CAChG;AACA,KAAM,CAAAE,aAAa,CAAG9C,oBAAoB,CAACC,WAAW,CAAEC,OAAO,CAAEC,UAAU,CAAC,CAE5E;AACA,GAAI,CAAC2C,aAAa,CAAE,CAClB,MAAO,KAAI,CACb,CAEA;AACA,GAAI,CAAAhC,OAAO,CAAEE,KAAK,CAAEE,GAAG,CAAE6B,KAAK,CAE9B,GAAID,aAAa,CAACf,IAAI,GAAK,SAAS,EAAKe,aAAa,CAAShB,cAAc,CAAE,CAC7E,KAAM,CAAAkB,MAAM,CAAIF,aAAa,CAAShB,cAAc,CACpDhB,OAAO,CAAGkC,MAAM,CAAClC,OAAO,CACxBE,KAAK,CAAGgC,MAAM,CAAChC,KAAK,CACpBE,GAAG,CAAG8B,MAAM,CAAC9B,GAAG,CAChB6B,KAAK,CAAGjC,OAAO,CAAGE,KAAK,CAAGE,GAAG,CAC/B,CAAC,IAAM,CACL;AACA6B,KAAK,CAAGD,aAAa,CAAChC,OAAO,CAAGgC,aAAa,CAAC9B,KAAK,CAAG8B,aAAa,CAAC5B,GAAG,CACvE,GAAI6B,KAAK,CAAG,CAAC,CAAE,CACbjC,OAAO,CAAGmC,IAAI,CAACC,KAAK,CAAEJ,aAAa,CAAChC,OAAO,CAAGiC,KAAK,CAAI,GAAG,CAAC,CAC3D/B,KAAK,CAAGiC,IAAI,CAACC,KAAK,CAAEJ,aAAa,CAAC9B,KAAK,CAAG+B,KAAK,CAAI,GAAG,CAAC,CACvD7B,GAAG,CAAG+B,IAAI,CAACC,KAAK,CAAEJ,aAAa,CAAC5B,GAAG,CAAG6B,KAAK,CAAI,GAAG,CAAC,CACrD,CAAC,IAAM,CACLjC,OAAO,CAAGE,KAAK,CAAGE,GAAG,CAAG,CAAC,CAC3B,CACF,CAEA,KAAM,CAAEN,QAAS,CAAC,CAAGkC,aAAa,CAElC;AACA,KAAM,CAAAxC,IAAI,CAAG,CACX6C,QAAQ,CAAE,CACR,CACE7C,IAAI,CAAE,CAACQ,OAAO,CAAEE,KAAK,CAAEE,GAAG,CAAC,CAC3BkC,eAAe,CAAE,CACf,SAAS,CAAE;AACX,SAAS,CAAE;AACX,SAAW;AAAA,CACZ,CACDC,WAAW,CAAE,CAAC,CACdC,MAAM,CAAE,KACV,CAAC,CAEL,CAAC,CAED,KAAM,CAAAC,OAAO,CAAG,CACdC,UAAU,CAAE,IAAI,CAChBC,mBAAmB,CAAE,KAAK,CAC1BC,OAAO,CAAE,CACPC,MAAM,CAAE,CACNC,OAAO,CAAE,KACX,CAAC,CACDC,OAAO,CAAE,CACPC,SAAS,CAAE,CACTC,KAAK,CAAE,QAAAA,CAASC,OAAY,CAAE,CAC5B,KAAM,CAAAC,MAAM,CAAG,CAAC,SAAS,CAAE,OAAO,CAAE,KAAK,CAAC,CAC1C,KAAM,CAAAF,KAAK,CAAGE,MAAM,CAACD,OAAO,CAACE,SAAS,CAAC,CACvC,KAAM,CAAAC,KAAK,CAAGH,OAAO,CAACI,MAAM,CAC5B,KAAM,CAAAC,UAAU,CAAGtB,KAAK,CAAG,CAAC,CAAGE,IAAI,CAACC,KAAK,CAAEiB,KAAK,CAAGpB,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CACpE,SAAAuB,MAAA,CAAUP,KAAK,OAAAO,MAAA,CAAKH,KAAK,QAAAG,MAAA,CAAMD,UAAU,OAC3C,CACF,CACF,CACF,CACF,CAAC,CAED,mBACEvE,KAAA,QAAKyE,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,eAClC3E,KAAA,QAAKyE,KAAK,CAAE,CAAEG,QAAQ,CAAE,UAAU,CAAEC,MAAM,CAAE,OAAO,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,QAAS,CAAE,CAAAJ,QAAA,eACtF7E,IAAA,CAACF,QAAQ,EAACY,IAAI,CAAEA,IAAK,CAACiD,OAAO,CAAEA,OAAQ,CAAE,CAAC,cAC1CzD,KAAA,QACEyE,KAAK,CAAE,CACLG,QAAQ,CAAE,UAAU,CACpBI,GAAG,CAAE,KAAK,CACVC,IAAI,CAAE,KAAK,CACXC,SAAS,CAAE,uBAAuB,CAClCR,SAAS,CAAE,QACb,CAAE,CAAAC,QAAA,eAEF7E,IAAA,QAAK2E,KAAK,CAAE,CAAEU,QAAQ,CAAE,QAAQ,CAAEC,UAAU,CAAE,MAAM,CAAEC,KAAK,CAAE,SAAU,CAAE,CAAAV,QAAA,CACtE7D,QAAQ,CACN,CAAC,cACNhB,IAAA,QAAK2E,KAAK,CAAE,CAAEU,QAAQ,CAAE,SAAS,CAAEE,KAAK,CAAE,SAAU,CAAE,CAAAV,QAAA,CAAC,UAEvD,CAAK,CAAC,EACH,CAAC,EACH,CAAC,cAEN3E,KAAA,QAAKyE,KAAK,CAAE,CAAEa,SAAS,CAAE,MAAO,CAAE,CAAAX,QAAA,eAChC3E,KAAA,QAAKyE,KAAK,CAAE,CACVX,OAAO,CAAE,MAAM,CACfyB,UAAU,CAAE,QAAQ,CACpBC,cAAc,CAAE,QAAQ,CACxBC,YAAY,CAAE,QAChB,CAAE,CAAAd,QAAA,eACA7E,IAAA,SAAM2E,KAAK,CAAE,CACXU,QAAQ,CAAE,QAAQ,CAClBO,WAAW,CAAE,QACf,CAAE,CAAAf,QAAA,CAAC,QAEH,CAAM,CAAC,cACP7E,IAAA,SAAM2E,KAAK,CAAE,CACXW,UAAU,CAAE,KAAK,CACjBC,KAAK,CAAE,SAAS,CAChBF,QAAQ,CAAE,MACZ,CAAE,CAAAR,QAAA,CAAC,MAEH,CAAM,CAAC,EACJ,CAAC,cAEN3E,KAAA,QAAKyE,KAAK,CAAE,CACVX,OAAO,CAAE,MAAM,CACf0B,cAAc,CAAE,QAAQ,CACxBG,GAAG,CAAE,MAAM,CACXR,QAAQ,CAAE,UACZ,CAAE,CAAAR,QAAA,eACA3E,KAAA,QAAKyE,KAAK,CAAE,CAAEX,OAAO,CAAE,MAAM,CAAEyB,UAAU,CAAE,QAAQ,CAAEI,GAAG,CAAE,SAAU,CAAE,CAAAhB,QAAA,eACpE7E,IAAA,QACE2E,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdvB,eAAe,CAAE,SAAS,CAC1BsC,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACF5F,KAAA,SAAA2E,QAAA,EAAM,WAAS,CAAC1B,KAAK,CAAG,CAAC,CAAGE,IAAI,CAACC,KAAK,CAAEpC,OAAO,CAAGiC,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CAAC,GAAC,EAAM,CAAC,EACzE,CAAC,cACNjD,KAAA,QAAKyE,KAAK,CAAE,CAAEX,OAAO,CAAE,MAAM,CAAEyB,UAAU,CAAE,QAAQ,CAAEI,GAAG,CAAE,SAAU,CAAE,CAAAhB,QAAA,eACpE7E,IAAA,QACE2E,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdvB,eAAe,CAAE,SAAS,CAC1BsC,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACF5F,KAAA,SAAA2E,QAAA,EAAM,SAAO,CAAC1B,KAAK,CAAG,CAAC,CAAGE,IAAI,CAACC,KAAK,CAAElC,KAAK,CAAG+B,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CAAC,GAAC,EAAM,CAAC,EACrE,CAAC,cACNjD,KAAA,QAAKyE,KAAK,CAAE,CAAEX,OAAO,CAAE,MAAM,CAAEyB,UAAU,CAAE,QAAQ,CAAEI,GAAG,CAAE,SAAU,CAAE,CAAAhB,QAAA,eACpE7E,IAAA,QACE2E,KAAK,CAAE,CACLK,KAAK,CAAE,MAAM,CACbD,MAAM,CAAE,MAAM,CACdvB,eAAe,CAAE,SAAS,CAC1BsC,YAAY,CAAE,KAChB,CAAE,CACH,CAAC,cACF5F,KAAA,SAAA2E,QAAA,EAAM,OAAK,CAAC1B,KAAK,CAAG,CAAC,CAAGE,IAAI,CAACC,KAAK,CAAEhC,GAAG,CAAG6B,KAAK,CAAI,GAAG,CAAC,CAAG,CAAC,CAAC,GAAC,EAAM,CAAC,EACjE,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}