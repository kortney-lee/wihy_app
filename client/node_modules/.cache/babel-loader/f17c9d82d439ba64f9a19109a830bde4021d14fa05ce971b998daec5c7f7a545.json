{"ast":null,"code":"import _objectSpread from\"C:/repo/wihy_ui/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// vHealth News API Client Integration\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\n// API Configuration\nconst API_BASE_URL={production:'https://services.wihy.ai',development:'http://localhost:5001'};// Local cache configuration\nconst CACHE_DURATION=5*60*1000;// 5 minutes in milliseconds\nconst ARTICLES_PER_PAGE=12;const API_FETCH_LIMIT=100;class NewsCache{constructor(){this.cache=new Map();}getCacheKey(params){return JSON.stringify(params);}get(params){const key=this.getCacheKey(params);const cached=this.cache.get(key);if(!cached)return null;// Check if cache is expired (5 minutes)\nif(Date.now()-cached.timestamp>CACHE_DURATION){this.cache.delete(key);return null;}return cached;}set(params,data,totalCount){const key=this.getCacheKey(params);this.cache.set(key,{articles:data,timestamp:Date.now(),totalCount});}clear(){this.cache.clear();}}class VHealthNewsClient{constructor(baseUrl){this.baseUrl=void 0;this.cache=void 0;// Use production by default\nthis.baseUrl=baseUrl||API_BASE_URL.production;this.cache=new NewsCache();}async getArticles(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const cacheParams={category:params.category,fresh:params.fresh};// Check cache first (unless fresh is explicitly requested or cache is disabled)\nif(params.useCache!==false&&!params.fresh){const cached=this.cache.get(cacheParams);if(cached){if(process.env.NODE_ENV==='development'){console.log('📱 Serving from cache:',{totalArticles:cached.articles.length,cacheAge:Math.round((Date.now()-cached.timestamp)/1000)+'s'});}return{success:true,articles:cached.articles,count:cached.totalCount,meta:{cache_info:{served_from_cache:true,cache_size:cached.articles.length,last_refresh:new Date(cached.timestamp).toISOString(),last_top_refresh:new Date(cached.timestamp).toISOString(),cache_age_minutes:Math.round((Date.now()-cached.timestamp)/60000)}}};}}// Fetch from API with increased limit for better caching\nconst queryParams=new URLSearchParams();const fetchLimit=API_FETCH_LIMIT;// Always fetch 100 for better caching\nqueryParams.append('limit',fetchLimit.toString());if(params.category)queryParams.append('category',params.category);if(params.fresh!==undefined)queryParams.append('fresh',params.fresh.toString());const fullUrl=\"\".concat(this.baseUrl,\"/api/news/articles?\").concat(queryParams);if(process.env.NODE_ENV==='development'){console.log('🌐 Making API request to:',fullUrl);}const response=await fetch(fullUrl,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}const data=await response.json();// Debug: Log API response summary (development only)\nif(process.env.NODE_ENV==='development'){var _data$articles,_data$articles2,_data$articles3;console.log('� News API Response Summary:',{success:data.success,totalArticles:((_data$articles=data.articles)===null||_data$articles===void 0?void 0:_data$articles.length)||0,articlesWithImages:((_data$articles2=data.articles)===null||_data$articles2===void 0?void 0:_data$articles2.filter(a=>a.has_image&&a.image_url).length)||0,articlesWithoutImages:((_data$articles3=data.articles)===null||_data$articles3===void 0?void 0:_data$articles3.filter(a=>!a.has_image||!a.image_url).length)||0});// Log a sample of image statuses\nif(data.articles&&data.articles.length>0){const imageStatuses=data.articles.slice(0,3).map(article=>{var _article$title;return{title:((_article$title=article.title)===null||_article$title===void 0?void 0:_article$title.substring(0,40))+'...',has_image:article.has_image,image_url:article.image_url?'present':'null',image_status:article.image_status};});console.log('📸 Sample image statuses:',imageStatuses);}}// Add legacy compatibility fields to articles\nconst articles=data.articles||[];const processedArticles=articles.map(article=>_objectSpread(_objectSpread({},article),{},{// Ensure core fields are properly mapped\nhas_author:!!article.author,// Legacy compatibility fields\npublished_date:article.published_at,publishedDate:article.published_at,pubDate:article.published_at,category:article.ai_category,summary:article.description,tags:article.ai_category?[article.ai_category,article.source]:[article.source],media_url:article.image_url,// Map image_url to media_url for legacy compatibility\nmedia_thumb_url:article.image_url,// Map image_url to media_thumb_url for legacy compatibility\nrelevanceScore:article.quality_score?article.quality_score/10:0.5,link:article.url}));// Cache the results for future use\nif(params.useCache!==false){this.cache.set(cacheParams,processedArticles,data.count||processedArticles.length);}return{success:data.success!==false,articles:processedArticles,count:data.count||processedArticles.length,meta:_objectSpread(_objectSpread({},data.meta),{},{cache_info:{served_from_cache:false,cache_size:processedArticles.length,last_refresh:new Date().toISOString(),last_top_refresh:new Date().toISOString(),cache_age_minutes:0}}),// Legacy compatibility fields extracted from meta\nsources_used:data.sources_used||[],timestamp:data.timestamp||new Date().toISOString()};}clearCache(){this.cache.clear();}async getCategories(){const response=await fetch(\"\".concat(this.baseUrl,\"/api/news/categories\"));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}async getStats(){const response=await fetch(\"\".concat(this.baseUrl,\"/api/news/stats\"));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}async healthCheck(){const response=await fetch(\"\".concat(this.baseUrl,\"/api/health\"));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}async testSource(source){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;const response=await fetch(\"\".concat(this.baseUrl,\"/api/news/test/\").concat(source,\"?limit=\").concat(limit));if(!response.ok){throw new Error(\"vHealth News API error! status: \".concat(response.status));}return response.json();}}// Initialize the client\nconst newsClient=new VHealthNewsClient();// Simple function to fetch news feed - API handles all filtering\nexport const fetchNewsFeed=async(categories,limit)=>{try{// Simple API call - no client-side filtering needed\nconst response=await newsClient.getArticles({limit:limit||100,fresh:true});return{success:response.success,articles:response.articles};}catch(error){console.error('vHealth News API error:',error);return{success:false,articles:[]};}};export const getArticlesByCategory=async(category,limit)=>{try{// Simple API call with category - API handles filtering\nconst response=await newsClient.getArticles({category,limit:limit||100,fresh:true});return{success:response.success,articles:response.articles};}catch(error){console.error('vHealth News API error (category):',error);return{success:false,articles:[]};}};export const refreshNewsFeed=async()=>{// Simple refresh - API handles everything\nreturn await fetchNewsFeed(undefined,100);};export const searchNewsArticles=async(query,limit)=>{try{// Simple search call - API handles query processing\nconst response=await newsClient.getArticles({limit:limit||100,fresh:true});return{success:response.success,articles:response.articles};}catch(error){console.error('vHealth News API error (search):',error);return{success:false,articles:[]};}};// Simple function to get all news with pagination - API handles filtering and priority\nexport const getAllNews=async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;try{// Simple API call - server handles all filtering, categorization, and priority sorting\nconst response=await newsClient.getArticles({limit:limit,fresh:false,// Allow cache usage\nuseCache:true});return{success:response.success,articles:response.articles,count:response.count,sources_used:response.sources_used||[]};}catch(error){console.error('Error fetching all news:',error);return{success:false,articles:[],count:0,sources_used:[]};}};// New paginated function that returns specific page from cached results\nexport const getPaginatedNews=async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let category=arguments.length>1?arguments[1]:undefined;try{// Fetch full dataset (100 articles) and cache it\nconst response=await newsClient.getArticles({limit:API_FETCH_LIMIT,category:category,fresh:false,useCache:true});if(!response.success||!response.articles){return{success:false,articles:[],totalCount:0,currentPage:page,totalPages:0,hasNextPage:false,hasPrevPage:false};}// Calculate pagination\nconst totalCount=response.articles.length;const totalPages=Math.ceil(totalCount/ARTICLES_PER_PAGE);const startIndex=(page-1)*ARTICLES_PER_PAGE;const endIndex=startIndex+ARTICLES_PER_PAGE;const paginatedArticles=response.articles.slice(startIndex,endIndex);return{success:true,articles:paginatedArticles,totalCount:totalCount,currentPage:page,totalPages:totalPages,hasNextPage:page<totalPages,hasPrevPage:page>1};}catch(error){console.error('Error fetching paginated news:',error);return{success:false,articles:[],totalCount:0,currentPage:page,totalPages:0,hasNextPage:false,hasPrevPage:false};}};// New lazy loading function that returns all articles up to the current page\nexport const getLazyLoadedNews=async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let category=arguments.length>1?arguments[1]:undefined;try{// Fetch full dataset (100 articles) and cache it\nconst response=await newsClient.getArticles({limit:API_FETCH_LIMIT,category:category,fresh:false,useCache:true});if(!response.success||!response.articles){return{success:false,articles:[],newArticles:[],totalCount:0,currentPage:page,totalPages:0,hasNextPage:false,loadedCount:0};}// Calculate lazy loading: return all articles from page 1 to current page\nconst totalCount=response.articles.length;const totalPages=Math.ceil(totalCount/ARTICLES_PER_PAGE);const loadedCount=Math.min(page*ARTICLES_PER_PAGE,totalCount);const allArticles=response.articles.slice(0,loadedCount);// Get just the new articles for this page (for appending)\nconst startIndex=(page-1)*ARTICLES_PER_PAGE;const endIndex=Math.min(startIndex+ARTICLES_PER_PAGE,totalCount);const newArticles=response.articles.slice(startIndex,endIndex);return{success:true,articles:allArticles,// All articles from page 1 to current page\nnewArticles:newArticles,// Just the new articles for this page\ntotalCount:totalCount,currentPage:page,totalPages:totalPages,hasNextPage:page<totalPages,loadedCount:loadedCount};}catch(error){console.error('Error fetching lazy loaded news:',error);return{success:false,articles:[],newArticles:[],totalCount:0,currentPage:page,totalPages:0,hasNextPage:false,loadedCount:0};}};// Clear cache function\nexport const clearNewsCache=()=>{newsClient.clearCache();};export const getNewsCategories=async()=>{try{const response=await newsClient.getCategories();return response.success?response.categories:[];}catch(error){console.error('Error fetching categories:',error);// Return default categories if API fails\nreturn[{category:'Medical Research',description:'Latest medical studies and breakthroughs'},{category:'Clinical Studies',description:'Clinical trials and medical research'},{category:'Public Health',description:'Community health and disease prevention'},{category:'Prevention',description:'Preventive medicine and wellness'},{category:'Nutrition',description:'Diet, supplements, and nutritional research'},{category:'Mental Health',description:'Mental wellness and psychological health'},{category:'Health Technology',description:'Health tech and medical AI innovations'},{category:'Medical Technology',description:'Medical devices and healthcare technology'},{category:'General Health',description:'General health news and information'},{category:'Environment',description:'Environmental health and sustainability'},{category:'Technology',description:'Tech innovations and digital trends'},{category:'General News',description:'General news and current events'}];}};export const getNewsStats=async()=>{try{return await newsClient.getStats();}catch(error){console.error('Error fetching news stats:',error);return{error:'Stats unavailable'};}};export const checkNewsServiceHealth=async()=>{try{const health=await newsClient.healthCheck();return health.status==='healthy';}catch(error){console.error('News service health check failed:',error);return false;}};// Helper functions to extract information from the new meta structure\nexport const getImageStats=response=>{var _response$meta;return((_response$meta=response.meta)===null||_response$meta===void 0?void 0:_response$meta.image_stats)||null;};export const getCacheInfo=response=>{var _response$meta2;return((_response$meta2=response.meta)===null||_response$meta2===void 0?void 0:_response$meta2.cache_info)||null;};export const getPriorityInfo=response=>{var _response$meta3;return((_response$meta3=response.meta)===null||_response$meta3===void 0?void 0:_response$meta3.priority_sorting)||null;};export const getRecencyStats=response=>{var _response$meta4;return((_response$meta4=response.meta)===null||_response$meta4===void 0?void 0:_response$meta4.recency_stats)||null;};export const getCategoryDistribution=response=>{var _response$meta5;return((_response$meta5=response.meta)===null||_response$meta5===void 0?void 0:_response$meta5.category_distribution)||{};};export const getCategoryPriorities=response=>{var _response$meta6,_response$meta7,_response$meta7$prior;return((_response$meta6=response.meta)===null||_response$meta6===void 0?void 0:_response$meta6.category_priorities)||((_response$meta7=response.meta)===null||_response$meta7===void 0?void 0:(_response$meta7$prior=_response$meta7.priority_sorting)===null||_response$meta7$prior===void 0?void 0:_response$meta7$prior.category_priorities)||{};};// Export the client for advanced usage\nexport{VHealthNewsClient,newsClient};// Export pagination constants\nexport{ARTICLES_PER_PAGE,API_FETCH_LIMIT,CACHE_DURATION};","map":{"version":3,"names":["API_BASE_URL","production","development","CACHE_DURATION","ARTICLES_PER_PAGE","API_FETCH_LIMIT","NewsCache","constructor","cache","Map","getCacheKey","params","JSON","stringify","get","key","cached","Date","now","timestamp","delete","set","data","totalCount","articles","clear","VHealthNewsClient","baseUrl","getArticles","arguments","length","undefined","cacheParams","category","fresh","useCache","process","env","NODE_ENV","console","log","totalArticles","cacheAge","Math","round","success","count","meta","cache_info","served_from_cache","cache_size","last_refresh","toISOString","last_top_refresh","cache_age_minutes","queryParams","URLSearchParams","fetchLimit","append","toString","fullUrl","concat","response","fetch","method","headers","ok","Error","status","json","_data$articles","_data$articles2","_data$articles3","articlesWithImages","filter","a","has_image","image_url","articlesWithoutImages","imageStatuses","slice","map","article","_article$title","title","substring","image_status","processedArticles","_objectSpread","has_author","author","published_date","published_at","publishedDate","pubDate","ai_category","summary","description","tags","source","media_url","media_thumb_url","relevanceScore","quality_score","link","url","sources_used","clearCache","getCategories","getStats","healthCheck","testSource","limit","newsClient","fetchNewsFeed","categories","error","getArticlesByCategory","refreshNewsFeed","searchNewsArticles","query","getAllNews","getPaginatedNews","page","currentPage","totalPages","hasNextPage","hasPrevPage","ceil","startIndex","endIndex","paginatedArticles","getLazyLoadedNews","newArticles","loadedCount","min","allArticles","clearNewsCache","getNewsCategories","getNewsStats","checkNewsServiceHealth","health","getImageStats","_response$meta","image_stats","getCacheInfo","_response$meta2","getPriorityInfo","_response$meta3","priority_sorting","getRecencyStats","_response$meta4","recency_stats","getCategoryDistribution","_response$meta5","category_distribution","getCategoryPriorities","_response$meta6","_response$meta7","_response$meta7$prior","category_priorities"],"sources":["C:/repo/wihy_ui/client/src/services/newsService.ts"],"sourcesContent":["// vHealth News API Client Integration\r\n// Swagger UI Documentation: https://services.wihy.ai/api/docs\r\n\r\nexport interface NewsArticle {\r\n  // Article Identity\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content?: string;\r\n  url: string;\r\n  \r\n  // Source Information\r\n  source: string;\r\n  api_source?: 'NewsAPI' | 'GNews' | 'NewsData' | 'MediaStack';\r\n  author: string | null;\r\n  published_at: string; // API uses published_at\r\n  \r\n  // AI Categorization\r\n  ai_category: string;\r\n  category_priority?: number;\r\n  priority_position?: number;\r\n  \r\n  // Image Data (Complete)\r\n  image_url: string | null;\r\n  has_image: boolean;\r\n  image_status?: 'original' | 'generated' | 'missing';\r\n  image_source?: 'unsplash' | 'pexels' | 'pixabay' | 'extracted';\r\n  image_attribution?: string;\r\n  photographer?: string;\r\n  \r\n  // Enriched Metadata\r\n  time_ago: string;\r\n  is_recent: boolean;\r\n  reading_time: number; // Minutes\r\n  quality_score: number; // 0-10 scale\r\n  \r\n  // Legacy compatibility fields\r\n  published_date?: string; // Alternative date field\r\n  publishedDate?: string; // Alternative date field\r\n  pubDate?: string; // Alternative date field\r\n  category?: string; // Maps to ai_category\r\n  has_author?: boolean; // Computed from author field\r\n  tags?: string[]; // Legacy compatibility\r\n  summary?: string; // Maps to description\r\n  media_url?: string; // Maps to image_url\r\n  media_thumb_url?: string; // Maps to image_url\r\n  relevanceScore?: number; // Maps to quality_score\r\n  link?: string; // Maps to url\r\n}\r\n\r\nexport interface ArticlesResponse {\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  count: number;\r\n  meta?: {\r\n    // Cache Information\r\n    total_articles?: number;\r\n    returned_articles?: number;\r\n    cache_info?: {\r\n      served_from_cache: boolean;\r\n      cache_size: number;\r\n      last_refresh: string;\r\n      last_top_refresh: string;\r\n      cache_age_minutes: number;\r\n    };\r\n    \r\n    // Sorting Information\r\n    sorting?: {\r\n      sort_by: string;\r\n      sort_order: string;\r\n      sorted_field: string;\r\n    };\r\n    \r\n    // Image Statistics\r\n    image_stats?: {\r\n      total_articles: number;\r\n      articles_with_images: number;\r\n      image_percentage: number;\r\n      original_images: number;\r\n      generated_images: number;\r\n      ai_enhanced_images: number;\r\n      sources: {\r\n        extracted: number;\r\n        unsplash: number;\r\n        pexels: number;\r\n        pixabay: number;\r\n      };\r\n    };\r\n    \r\n    // Pagination\r\n    pagination?: {\r\n      total_items: number;\r\n      current_page: number;\r\n      per_page: number;\r\n      has_next_page: boolean;\r\n    };\r\n    \r\n    // Applied Filters\r\n    filters_applied?: {\r\n      images_only: boolean;\r\n      top_articles_only: boolean;\r\n      limit: number;\r\n      offset: number;\r\n      category?: string | null;\r\n      source?: string;\r\n      ai_categorization?: boolean;\r\n    };\r\n    \r\n    // Priority Sorting System\r\n    priority_sorting?: {\r\n      enabled: boolean;\r\n      description: string;\r\n      sorting_order: string;\r\n      total: number;\r\n      priority_categories: number;\r\n      discovered_categories: number;\r\n      categories: string[];\r\n      category_priorities: Record<string, number>;\r\n      dynamic_learning: string;\r\n    };\r\n    \r\n    // Adaptive Recency System\r\n    recency_stats?: {\r\n      recent_articles: number;\r\n      older_articles: number;\r\n      threshold: string;\r\n      threshold_description: string;\r\n      adaptive_sorting?: string;\r\n    };\r\n    \r\n    // Category Distribution (Current Response)\r\n    category_distribution?: Record<string, number>;\r\n    \r\n    // Category Priorities (Duplicate for convenience)\r\n    category_priorities?: Record<string, number>;\r\n  };\r\n  \r\n  // Legacy compatibility fields\r\n  sources_used?: string[];\r\n  timestamp?: string;\r\n}\r\n\r\nexport interface Category {\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n// API Configuration\r\nconst API_BASE_URL = {\r\n  production: 'https://services.wihy.ai',\r\n  development: 'http://localhost:5001'\r\n};\r\n\r\n// Local cache configuration\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds\r\nconst ARTICLES_PER_PAGE = 12;\r\nconst API_FETCH_LIMIT = 100;\r\n\r\ninterface CachedData {\r\n  articles: NewsArticle[];\r\n  timestamp: number;\r\n  totalCount: number;\r\n}\r\n\r\nclass NewsCache {\r\n  private cache: Map<string, CachedData> = new Map();\r\n\r\n  private getCacheKey(params: any): string {\r\n    return JSON.stringify(params);\r\n  }\r\n\r\n  get(params: any): CachedData | null {\r\n    const key = this.getCacheKey(params);\r\n    const cached = this.cache.get(key);\r\n    \r\n    if (!cached) return null;\r\n    \r\n    // Check if cache is expired (5 minutes)\r\n    if (Date.now() - cached.timestamp > CACHE_DURATION) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return cached;\r\n  }\r\n\r\n  set(params: any, data: NewsArticle[], totalCount: number): void {\r\n    const key = this.getCacheKey(params);\r\n    this.cache.set(key, {\r\n      articles: data,\r\n      timestamp: Date.now(),\r\n      totalCount\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n\r\nclass VHealthNewsClient {\r\n  private baseUrl: string;\r\n  private cache: NewsCache;\r\n\r\n  constructor(baseUrl?: string) {\r\n    // Use production by default\r\n    this.baseUrl = baseUrl || API_BASE_URL.production;\r\n    this.cache = new NewsCache();\r\n  }\r\n\r\n  async getArticles(params: {\r\n    limit?: number;\r\n    category?: string;\r\n    fresh?: boolean;\r\n    useCache?: boolean;\r\n  } = {}): Promise<ArticlesResponse> {\r\n    const cacheParams = {\r\n      category: params.category,\r\n      fresh: params.fresh\r\n    };\r\n\r\n    // Check cache first (unless fresh is explicitly requested or cache is disabled)\r\n    if (params.useCache !== false && !params.fresh) {\r\n      const cached = this.cache.get(cacheParams);\r\n      if (cached) {\r\n        if (process.env.NODE_ENV === 'development') {\r\n          console.log('📱 Serving from cache:', {\r\n            totalArticles: cached.articles.length,\r\n            cacheAge: Math.round((Date.now() - cached.timestamp) / 1000) + 's'\r\n          });\r\n        }\r\n        \r\n        return {\r\n          success: true,\r\n          articles: cached.articles,\r\n          count: cached.totalCount,\r\n          meta: {\r\n            cache_info: {\r\n              served_from_cache: true,\r\n              cache_size: cached.articles.length,\r\n              last_refresh: new Date(cached.timestamp).toISOString(),\r\n              last_top_refresh: new Date(cached.timestamp).toISOString(),\r\n              cache_age_minutes: Math.round((Date.now() - cached.timestamp) / 60000)\r\n            }\r\n          }\r\n        };\r\n      }\r\n    }\r\n\r\n    // Fetch from API with increased limit for better caching\r\n    const queryParams = new URLSearchParams();\r\n    const fetchLimit = API_FETCH_LIMIT; // Always fetch 100 for better caching\r\n    queryParams.append('limit', fetchLimit.toString());\r\n    \r\n    if (params.category) queryParams.append('category', params.category);\r\n    if (params.fresh !== undefined) queryParams.append('fresh', params.fresh.toString());\r\n\r\n    const fullUrl = `${this.baseUrl}/api/news/articles?${queryParams}`;\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('🌐 Making API request to:', fullUrl);\r\n    }\r\n\r\n    const response = await fetch(fullUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data: ArticlesResponse = await response.json();\r\n    \r\n    // Debug: Log API response summary (development only)\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('� News API Response Summary:', {\r\n        success: data.success,\r\n        totalArticles: data.articles?.length || 0,\r\n        articlesWithImages: data.articles?.filter(a => a.has_image && a.image_url).length || 0,\r\n        articlesWithoutImages: data.articles?.filter(a => !a.has_image || !a.image_url).length || 0\r\n      });\r\n      \r\n      // Log a sample of image statuses\r\n      if (data.articles && data.articles.length > 0) {\r\n        const imageStatuses = data.articles.slice(0, 3).map(article => ({\r\n          title: article.title?.substring(0, 40) + '...',\r\n          has_image: article.has_image,\r\n          image_url: article.image_url ? 'present' : 'null',\r\n          image_status: article.image_status\r\n        }));\r\n        console.log('📸 Sample image statuses:', imageStatuses);\r\n      }\r\n    }\r\n    \r\n    // Add legacy compatibility fields to articles\r\n    const articles = data.articles || [];\r\n    const processedArticles = articles.map(article => ({\r\n      ...article,\r\n      // Ensure core fields are properly mapped\r\n      has_author: !!article.author,\r\n      // Legacy compatibility fields\r\n      published_date: article.published_at,\r\n      publishedDate: article.published_at,\r\n      pubDate: article.published_at,\r\n      category: article.ai_category,\r\n      summary: article.description,\r\n      tags: article.ai_category ? [article.ai_category, article.source] : [article.source],\r\n      media_url: article.image_url, // Map image_url to media_url for legacy compatibility\r\n      media_thumb_url: article.image_url, // Map image_url to media_thumb_url for legacy compatibility\r\n      relevanceScore: article.quality_score ? article.quality_score / 10 : 0.5,\r\n      link: article.url\r\n    }));\r\n\r\n    // Cache the results for future use\r\n    if (params.useCache !== false) {\r\n      this.cache.set(cacheParams, processedArticles, data.count || processedArticles.length);\r\n    }\r\n    \r\n    return {\r\n      success: data.success !== false,\r\n      articles: processedArticles,\r\n      count: data.count || processedArticles.length,\r\n      meta: {\r\n        ...data.meta,\r\n        cache_info: {\r\n          served_from_cache: false,\r\n          cache_size: processedArticles.length,\r\n          last_refresh: new Date().toISOString(),\r\n          last_top_refresh: new Date().toISOString(),\r\n          cache_age_minutes: 0\r\n        }\r\n      },\r\n      // Legacy compatibility fields extracted from meta\r\n      sources_used: data.sources_used || [],\r\n      timestamp: data.timestamp || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  async getCategories(): Promise<{ success: boolean; categories: Category[] }> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/categories`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getStats(): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/stats`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    const response = await fetch(`${this.baseUrl}/api/health`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async testSource(source: 'newsapi' | 'gnews' | 'newsdata' | 'mediastack', limit: number = 5): Promise<any> {\r\n    const response = await fetch(`${this.baseUrl}/api/news/test/${source}?limit=${limit}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`vHealth News API error! status: ${response.status}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Initialize the client\r\nconst newsClient = new VHealthNewsClient();\r\n\r\n// Simple function to fetch news feed - API handles all filtering\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call - no client-side filtering needed\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error:', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple API call with category - API handles filtering\r\n    const response = await newsClient.getArticles({\r\n      category,\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (category):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  // Simple refresh - API handles everything\r\n  return await fetchNewsFeed(undefined, 100);\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, limit?: number): Promise<{ success: boolean; articles: NewsArticle[] }> => {\r\n  try {\r\n    // Simple search call - API handles query processing\r\n    const response = await newsClient.getArticles({\r\n      limit: limit || 100,\r\n      fresh: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles\r\n    };\r\n  } catch (error) {\r\n    console.error('vHealth News API error (search):', error);\r\n    return {\r\n      success: false,\r\n      articles: []\r\n    };\r\n  }\r\n};\r\n\r\n// Simple function to get all news with pagination - API handles filtering and priority\r\nexport const getAllNews = async (limit: number = 100): Promise<{ success: boolean; articles: NewsArticle[]; count: number; sources_used: string[] }> => {\r\n  try {\r\n    // Simple API call - server handles all filtering, categorization, and priority sorting\r\n    const response = await newsClient.getArticles({\r\n      limit: limit,\r\n      fresh: false, // Allow cache usage\r\n      useCache: true\r\n    });\r\n    \r\n    return {\r\n      success: response.success,\r\n      articles: response.articles,\r\n      count: response.count,\r\n      sources_used: response.sources_used || []\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching all news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      count: 0,\r\n      sources_used: []\r\n    };\r\n  }\r\n};\r\n\r\n// New paginated function that returns specific page from cached results\r\nexport const getPaginatedNews = async (page: number = 1, category?: string): Promise<{\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  totalCount: number;\r\n  currentPage: number;\r\n  totalPages: number;\r\n  hasNextPage: boolean;\r\n  hasPrevPage: boolean;\r\n}> => {\r\n  try {\r\n    // Fetch full dataset (100 articles) and cache it\r\n    const response = await newsClient.getArticles({\r\n      limit: API_FETCH_LIMIT,\r\n      category: category,\r\n      fresh: false,\r\n      useCache: true\r\n    });\r\n\r\n    if (!response.success || !response.articles) {\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        totalCount: 0,\r\n        currentPage: page,\r\n        totalPages: 0,\r\n        hasNextPage: false,\r\n        hasPrevPage: false\r\n      };\r\n    }\r\n\r\n    // Calculate pagination\r\n    const totalCount = response.articles.length;\r\n    const totalPages = Math.ceil(totalCount / ARTICLES_PER_PAGE);\r\n    const startIndex = (page - 1) * ARTICLES_PER_PAGE;\r\n    const endIndex = startIndex + ARTICLES_PER_PAGE;\r\n    const paginatedArticles = response.articles.slice(startIndex, endIndex);\r\n\r\n    return {\r\n      success: true,\r\n      articles: paginatedArticles,\r\n      totalCount: totalCount,\r\n      currentPage: page,\r\n      totalPages: totalPages,\r\n      hasNextPage: page < totalPages,\r\n      hasPrevPage: page > 1\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching paginated news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      totalCount: 0,\r\n      currentPage: page,\r\n      totalPages: 0,\r\n      hasNextPage: false,\r\n      hasPrevPage: false\r\n    };\r\n  }\r\n};\r\n\r\n// New lazy loading function that returns all articles up to the current page\r\nexport const getLazyLoadedNews = async (page: number = 1, category?: string): Promise<{\r\n  success: boolean;\r\n  articles: NewsArticle[];\r\n  newArticles: NewsArticle[];\r\n  totalCount: number;\r\n  currentPage: number;\r\n  totalPages: number;\r\n  hasNextPage: boolean;\r\n  loadedCount: number;\r\n}> => {\r\n  try {\r\n    // Fetch full dataset (100 articles) and cache it\r\n    const response = await newsClient.getArticles({\r\n      limit: API_FETCH_LIMIT,\r\n      category: category,\r\n      fresh: false,\r\n      useCache: true\r\n    });\r\n\r\n    if (!response.success || !response.articles) {\r\n      return {\r\n        success: false,\r\n        articles: [],\r\n        newArticles: [],\r\n        totalCount: 0,\r\n        currentPage: page,\r\n        totalPages: 0,\r\n        hasNextPage: false,\r\n        loadedCount: 0\r\n      };\r\n    }\r\n\r\n    // Calculate lazy loading: return all articles from page 1 to current page\r\n    const totalCount = response.articles.length;\r\n    const totalPages = Math.ceil(totalCount / ARTICLES_PER_PAGE);\r\n    const loadedCount = Math.min(page * ARTICLES_PER_PAGE, totalCount);\r\n    const allArticles = response.articles.slice(0, loadedCount);\r\n    \r\n    // Get just the new articles for this page (for appending)\r\n    const startIndex = (page - 1) * ARTICLES_PER_PAGE;\r\n    const endIndex = Math.min(startIndex + ARTICLES_PER_PAGE, totalCount);\r\n    const newArticles = response.articles.slice(startIndex, endIndex);\r\n\r\n    return {\r\n      success: true,\r\n      articles: allArticles, // All articles from page 1 to current page\r\n      newArticles: newArticles, // Just the new articles for this page\r\n      totalCount: totalCount,\r\n      currentPage: page,\r\n      totalPages: totalPages,\r\n      hasNextPage: page < totalPages,\r\n      loadedCount: loadedCount\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching lazy loaded news:', error);\r\n    return {\r\n      success: false,\r\n      articles: [],\r\n      newArticles: [],\r\n      totalCount: 0,\r\n      currentPage: page,\r\n      totalPages: 0,\r\n      hasNextPage: false,\r\n      loadedCount: 0\r\n    };\r\n  }\r\n};\r\n\r\n// Clear cache function\r\nexport const clearNewsCache = (): void => {\r\n  newsClient.clearCache();\r\n};\r\n\r\nexport const getNewsCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    const response = await newsClient.getCategories();\r\n    return response.success ? response.categories : [];\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    // Return default categories if API fails\r\n    return [\r\n      { category: 'Medical Research', description: 'Latest medical studies and breakthroughs' },\r\n      { category: 'Clinical Studies', description: 'Clinical trials and medical research' },\r\n      { category: 'Public Health', description: 'Community health and disease prevention' },\r\n      { category: 'Prevention', description: 'Preventive medicine and wellness' },\r\n      { category: 'Nutrition', description: 'Diet, supplements, and nutritional research' },\r\n      { category: 'Mental Health', description: 'Mental wellness and psychological health' },\r\n      { category: 'Health Technology', description: 'Health tech and medical AI innovations' },\r\n      { category: 'Medical Technology', description: 'Medical devices and healthcare technology' },\r\n      { category: 'General Health', description: 'General health news and information' },\r\n      { category: 'Environment', description: 'Environmental health and sustainability' },\r\n      { category: 'Technology', description: 'Tech innovations and digital trends' },\r\n      { category: 'General News', description: 'General news and current events' }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getNewsStats = async (): Promise<any> => {\r\n  try {\r\n    return await newsClient.getStats();\r\n  } catch (error) {\r\n    console.error('Error fetching news stats:', error);\r\n    return { error: 'Stats unavailable' };\r\n  }\r\n};\r\n\r\nexport const checkNewsServiceHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const health = await newsClient.healthCheck();\r\n    return health.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('News service health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Helper functions to extract information from the new meta structure\r\nexport const getImageStats = (response: ArticlesResponse) => {\r\n  return response.meta?.image_stats || null;\r\n};\r\n\r\nexport const getCacheInfo = (response: ArticlesResponse) => {\r\n  return response.meta?.cache_info || null;\r\n};\r\n\r\nexport const getPriorityInfo = (response: ArticlesResponse) => {\r\n  return response.meta?.priority_sorting || null;\r\n};\r\n\r\nexport const getRecencyStats = (response: ArticlesResponse) => {\r\n  return response.meta?.recency_stats || null;\r\n};\r\n\r\nexport const getCategoryDistribution = (response: ArticlesResponse) => {\r\n  return response.meta?.category_distribution || {};\r\n};\r\n\r\nexport const getCategoryPriorities = (response: ArticlesResponse) => {\r\n  return response.meta?.category_priorities || response.meta?.priority_sorting?.category_priorities || {};\r\n};\r\n\r\n// Export the client for advanced usage\r\nexport { VHealthNewsClient, newsClient };\r\n\r\n// Export pagination constants\r\nexport { ARTICLES_PER_PAGE, API_FETCH_LIMIT, CACHE_DURATION };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}