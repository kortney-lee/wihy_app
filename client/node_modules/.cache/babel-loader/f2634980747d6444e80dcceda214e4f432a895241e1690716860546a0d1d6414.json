{"ast":null,"code":"// src/services/visionAnalysisService.ts\n\nimport { BrowserMultiFormatReader } from '@zxing/browser';\n// WIHY Scanner API Configuration with dev flag support\nconst getWihyMLApiUrl = () => {\n  // Check for explicit environment variable first (highest priority)\n  if (process.env.REACT_APP_WIHY_ML_API_URL) {\n    return process.env.REACT_APP_WIHY_ML_API_URL;\n  }\n\n  // Development flag - set to true to use local ML dev server, false for production\n  const USE_LOCAL_ML = process.env.REACT_APP_USE_LOCAL_ML === 'true';\n\n  // Check if we're on localhost (local development)\n  const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n  if (isLocalhost && USE_LOCAL_ML) {\n    // Local development with dev flag enabled - use localhost ML API\n    return 'http://localhost:8001'; // Assuming ML service runs on different port\n  } else {\n    // Production/deployed OR dev flag disabled - use production ML API\n    return 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\n  }\n};\nconst WIHY_API_BASE = getWihyMLApiUrl();\n\n// Debug logging for ML API\nconsole.log('🔍 ML API CONFIG DEBUG:', {\n  NODE_ENV: process.env.NODE_ENV,\n  REACT_APP_WIHY_ML_API_URL: process.env.REACT_APP_WIHY_ML_API_URL,\n  FINAL_ML_URL: WIHY_API_BASE,\n  HOSTNAME: window.location.hostname,\n  IS_LOCALHOST: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1',\n  USE_LOCAL_ML: process.env.REACT_APP_USE_LOCAL_ML === 'true',\n  DETECTION_REASON: process.env.REACT_APP_WIHY_ML_API_URL ? 'ENV_VAR' : (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') && process.env.REACT_APP_USE_LOCAL_ML === 'true' ? 'LOCAL_ML_DEV' : 'PRODUCTION_ML_API'\n});\nclass VisionAnalysisService {\n  constructor() {\n    this.barcodeReader = void 0;\n    this.barcodeReader = new BrowserMultiFormatReader();\n  }\n\n  /**\r\n   * Smart detection: Analyze image to determine if it contains barcode patterns\r\n   */\n  async analyzeImagePattern(imageFile) {\n    return new Promise(resolve => {\n      const img = new Image();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      img.onload = () => {\n        if (!ctx) {\n          resolve({\n            hasBarcodeLikePattern: false,\n            confidence: 0\n          });\n          return;\n        }\n\n        // Set canvas size (optimize for analysis)\n        const maxSize = 800;\n        const scale = Math.min(maxSize / img.width, maxSize / img.height);\n        canvas.width = img.width * scale;\n        canvas.height = img.height * scale;\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Get image data for pattern analysis\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n\n        // Analyze for barcode patterns (vertical lines, alternating dark/light patterns)\n        let verticalLineScore = 0;\n        let horizontalVariance = 0;\n        const sampleRows = 5; // Sample multiple rows\n\n        for (let row = 0; row < sampleRows; row++) {\n          const y = Math.floor(canvas.height / (sampleRows + 1) * (row + 1));\n          let transitions = 0;\n          let lastBrightness = 0;\n          for (let x = 0; x < canvas.width; x += 2) {\n            // Sample every 2 pixels for performance\n            const i = (y * canvas.width + x) * 4;\n            const brightness = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            if (Math.abs(brightness - lastBrightness) > 30) {\n              // Threshold for transition\n              transitions++;\n            }\n            lastBrightness = brightness;\n          }\n\n          // Barcodes typically have many transitions (vertical lines)\n          verticalLineScore += transitions;\n        }\n\n        // Calculate confidence based on pattern analysis\n        const avgTransitions = verticalLineScore / sampleRows;\n        const confidence = Math.min(avgTransitions / 20, 1); // Normalize to 0-1\n        const hasBarcodeLikePattern = confidence > 0.3; // Threshold for barcode detection\n\n        console.log('🔍 Pattern Analysis:', {\n          avgTransitions,\n          confidence: Math.round(confidence * 100) + '%',\n          hasBarcodeLikePattern,\n          imageSize: `${canvas.width}x${canvas.height}`\n        });\n        URL.revokeObjectURL(img.src);\n        resolve({\n          hasBarcodeLikePattern,\n          confidence\n        });\n      };\n      img.onerror = () => {\n        URL.revokeObjectURL(img.src);\n        resolve({\n          hasBarcodeLikePattern: false,\n          confidence: 0\n        });\n      };\n      img.src = URL.createObjectURL(imageFile);\n    });\n  }\n\n  /**\r\n   * Helper: Create ImageBitmap from File\r\n   */\n  async createImageBitmap(file) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        createImageBitmap(img).then(resolve).catch(reject);\n        URL.revokeObjectURL(img.src);\n      };\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  /**\r\n   * Helper: Load image from File\r\n   */\n  async loadImage(file) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  /**\r\n   * Normalize barcode to GTIN-14 format for food product lookup\r\n   */\n  normalizeToGTIN14(barcode) {\n    // Remove any non-digit characters\n    const digits = barcode.replace(/\\D/g, '');\n\n    // Handle different UPC/EAN formats and normalize to GTIN-14\n    switch (digits.length) {\n      case 8:\n        // EAN-8\n        return '000000' + digits;\n      case 12:\n        // UPC-A\n        return '00' + digits;\n      case 13:\n        // EAN-13\n        return '0' + digits;\n      case 14:\n        // Already GTIN-14\n        return digits;\n      default:\n        // If not a standard food product barcode format, return as-is\n        return digits;\n    }\n  }\n\n  /**\r\n   * Hybrid barcode detection: Native BarcodeDetector → ZXing fallback\r\n   * Optimized for food product barcodes (UPC/EAN formats)\r\n   */\n  async detectBarcodes(imageFile) {\n    console.log('🔍 Starting hybrid barcode detection...', {\n      fileName: imageFile.name,\n      fileSize: imageFile.size,\n      fileType: imageFile.type\n    });\n\n    // First, smart pattern detection\n    const patternAnalysis = await this.analyzeImagePattern(imageFile);\n    if (!patternAnalysis.hasBarcodeLikePattern) {\n      console.log('📷 No barcode pattern detected, skipping barcode scanning');\n      return [];\n    }\n    console.log('📊 Barcode pattern detected, proceeding with detection...');\n    const detectedBarcodes = [];\n\n    // Method 1: Try native BarcodeDetector (fast path)\n    if ('BarcodeDetector' in window) {\n      try {\n        console.log('🚀 Trying native BarcodeDetector (fast path)...');\n        const barcodeDetector = new window.BarcodeDetector({\n          formats: ['ean_13', 'ean_8', 'upc_a', 'upc_e'] // Food retail formats\n        });\n        const barcodes = await barcodeDetector.detect(await this.createImageBitmap(imageFile));\n        if (barcodes.length > 0) {\n          barcodes.forEach(barcode => {\n            const normalizedBarcode = this.normalizeToGTIN14(barcode.rawValue);\n            console.log('✅ Native detector found:', barcode.rawValue, '→', normalizedBarcode);\n            detectedBarcodes.push(normalizedBarcode);\n          });\n          return [...new Set(detectedBarcodes)]; // Remove duplicates\n        }\n      } catch (nativeError) {\n        console.log('⚠️ Native BarcodeDetector failed:', nativeError.message);\n      }\n    } else {\n      console.log('ℹ️ Native BarcodeDetector not supported');\n    }\n\n    // Method 2: ZXing fallback (reliable path) - only for food barcode formats\n    try {\n      console.log('� Falling back to ZXing detection...');\n      const img = await this.loadImage(imageFile);\n\n      // Try ZXing with timeout and format restrictions\n      const zxingPromise = this.barcodeReader.decodeFromImageElement(img);\n      const timeout = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('ZXing timeout')), 3000); // Shorter timeout\n      });\n      const result = await Promise.race([zxingPromise, timeout]);\n      if (result && result.getText) {\n        const rawBarcode = result.getText();\n        const normalizedBarcode = this.normalizeToGTIN14(rawBarcode);\n        console.log('✅ ZXing detected:', rawBarcode, '→', normalizedBarcode);\n        detectedBarcodes.push(normalizedBarcode);\n      }\n    } catch (zxingError) {\n      console.log('⚠️ ZXing detection failed:', zxingError.message || zxingError);\n    }\n    const uniqueBarcodes = [...new Set(detectedBarcodes)];\n    console.log('🎯 Final detected barcodes (GTIN-14):', uniqueBarcodes);\n    return uniqueBarcodes;\n  }\n\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\n  async analyzeImage(imageFile) {\n    try {\n      console.log('🔍 Starting WIHY image analysis...');\n\n      // Get basic image information\n      const imageInfo = this.getImageInfo(imageFile);\n      console.log('Image info:', imageInfo);\n\n      // Try hybrid barcode detection \n      console.log('🔍 Starting hybrid barcode detection...');\n      const detectedBarcodes = await this.detectBarcodes(imageFile);\n      console.log('🔍 Barcode detection result:', detectedBarcodes);\n\n      // If we found barcodes, scan them instead of doing image analysis\n      if (detectedBarcodes.length > 0) {\n        console.log('🎯 Barcodes detected, performing barcode scan:', detectedBarcodes);\n        try {\n          // Scan the first detected barcode\n          const barcodeResult = await this.scanBarcode(detectedBarcodes[0]);\n          console.log('📊 Barcode scan result:', barcodeResult);\n\n          // Add the detected barcodes to the result\n          if (barcodeResult.success && barcodeResult.data) {\n            barcodeResult.data.barcodes = detectedBarcodes;\n            console.log('✅ Returning barcode analysis result');\n            return barcodeResult;\n          }\n        } catch (barcodeError) {\n          console.log('Barcode scan failed, falling back to image analysis:', barcodeError);\n        }\n      } else {\n        console.log('ℹ️ No barcodes detected, proceeding with regular image analysis');\n      }\n\n      // Use WIHY Scanner API for comprehensive food analysis\n      let wihyResult = null;\n      try {\n        console.log('Analyzing with WIHY Scanner API...');\n        wihyResult = await this.analyzeWithWihyAPI(imageFile, {\n          user_context: 'web_upload',\n          image_name: imageFile.name\n        });\n        console.log('WIHY Scanner analysis result:', wihyResult);\n      } catch (error) {\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\n        return this.fallbackAnalysis(imageFile, imageInfo);\n      }\n      if (wihyResult && wihyResult.success) {\n        const processedResult = this.processWihyImageResponse(wihyResult, imageInfo);\n        // Add any detected barcodes to the image analysis result\n        if (processedResult.data && detectedBarcodes.length > 0) {\n          processedResult.data.barcodes = detectedBarcodes;\n        }\n        return processedResult;\n      } else {\n        const fallbackResult = await this.fallbackAnalysis(imageFile, imageInfo);\n        // Add any detected barcodes to the fallback result\n        if (fallbackResult.data && detectedBarcodes.length > 0) {\n          fallbackResult.data.barcodes = detectedBarcodes;\n        }\n        return fallbackResult;\n      }\n    } catch (error) {\n      console.error('Vision analysis error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Analysis failed'\n      };\n    }\n  }\n\n  /**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */\n  async analyzeWithWihyAPI(input, userContext = {}) {\n    let response;\n    if (typeof input === 'string') {\n      // URL analysis\n      console.log('🌐 Analyzing image from URL:', input);\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image_url: input,\n          context: JSON.stringify({\n            analysis_type: 'food_health',\n            user_location: 'web_app',\n            input_type: 'url',\n            ...userContext\n          })\n        })\n      });\n    } else {\n      // File upload analysis\n      console.log('📁 Analyzing uploaded file:', input.name);\n      const formData = new FormData();\n      formData.append('image', input);\n      formData.append('context', JSON.stringify({\n        analysis_type: 'food_health',\n        user_location: 'web_app',\n        input_type: 'file_upload',\n        file_name: input.name,\n        file_size: input.size,\n        ...userContext\n      }));\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\n        method: 'POST',\n        body: formData\n      });\n    }\n    if (!response.ok) {\n      throw new Error(`WIHY API Error: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  /**\r\n   * Analyze image from URL\r\n   */\n  async analyzeImageUrl(imageUrl, userContext = {}) {\n    try {\n      console.log('🔍 Analyzing image from URL with WIHY Scanner API');\n      const wihyResult = await this.analyzeWithWihyAPI(imageUrl, {\n        ...userContext,\n        source: 'url_input'\n      });\n      if (wihyResult && wihyResult.success) {\n        return this.processWihyImageResponse(wihyResult, {\n          name: 'Image from URL',\n          size: 'Unknown',\n          type: 'url',\n          dimensions: 'Unknown'\n        });\n      } else {\n        return this.handleUrlAnalysisError(imageUrl);\n      }\n    } catch (error) {\n      console.error('URL image analysis failed:', error);\n      return this.handleUrlAnalysisError(imageUrl, error);\n    }\n  }\n\n  /**\r\n   * Handle URL analysis errors\r\n   */\n  handleUrlAnalysisError(imageUrl, error) {\n    return {\n      success: false,\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'URL analysis failed',\n      data: {\n        description: 'Could not analyze image from URL',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Analysis failed',\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: 'Image from URL',\n          size: 'Unknown',\n          type: 'url',\n          dimensions: 'Unknown'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Analysis failed',\n        isHealthy: false,\n        recommendations: ['URL Error - When in doubt, choose whole foods', 'Real food doesn\\'t need complex analysis'],\n        warnings: ['Could not analyze image from URL'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods when uncertain',\n        dataSources: ['Error - No data available']\n      }\n    };\n  }\n\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\n  processWihyImageResponse(wihyResult, imageInfo) {\n    var _nova_chart_reference, _wihy_analysis$family;\n    const {\n      success,\n      overall_assessment,\n      google_vision_analysis,\n      detected_foods,\n      nova_chart_reference,\n      wihy_recommendations,\n      wihy_analysis\n    } = wihyResult;\n    const healthScore = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.health_score) || 0;\n    const novaGroup = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.nova_group) || 4;\n    const verdict = (overall_assessment === null || overall_assessment === void 0 ? void 0 : overall_assessment.verdict) || 'Analysis completed';\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference = nova_chart_reference.client_guidance) === null || _nova_chart_reference === void 0 ? void 0 : _nova_chart_reference.color_coding) || 'red';\n\n    // Extract detected foods\n    const foodItems = (detected_foods === null || detected_foods === void 0 ? void 0 : detected_foods.map(food => food.name || food)) || [];\n\n    // Extract recommendations and warnings\n    const recommendations = wihy_recommendations || [];\n    const warnings = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [];\n\n    // Determine if healthy based on NOVA group and health score\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family = wihy_analysis.family_safety) === null || _wihy_analysis$family === void 0 ? void 0 : _wihy_analysis$family.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: verdict,\n        foodItems: foodItems,\n        brands: [],\n        // Could extract from vision analysis\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\n        barcodes: [],\n        qrCodes: [],\n        text: (google_vision_analysis === null || google_vision_analysis === void 0 ? void 0 : google_vision_analysis.detected_text) || '',\n        imageInfo,\n        // WIHY Scanner specific data\n        healthScore,\n        novaGroup,\n        novaDescription: this.getNovaDescription(novaGroup),\n        isHealthy,\n        recommendations,\n        warnings,\n        familySafe,\n        colorCode,\n        verdict,\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\n      }\n    };\n  }\n\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\n  async fallbackAnalysis(imageFile, imageInfo) {\n    console.log('Using fallback analysis...');\n\n    // Try legacy WiHy API as fallback\n    let wihyAnalysis = '';\n    try {\n      const {\n        wihyAPI\n      } = await import('./wihyAPI');\n      const wihyResult = await wihyAPI.scanFood(imageFile);\n      if ('success' in wihyResult && wihyResult.success || !('success' in wihyResult)) {\n        const message = 'message' in wihyResult ? wihyResult.message : 'data' in wihyResult && wihyResult.data.ai_response ? wihyResult.data.ai_response.response : null;\n        if (message) {\n          wihyAnalysis = message;\n        }\n      }\n    } catch (error) {\n      console.log('Legacy WiHy API also unavailable');\n    }\n\n    // Extract potential nutrition and food information\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\n    return {\n      success: true,\n      data: {\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\n        foodItems: foodAnalysis.foodItems,\n        brands: foodAnalysis.brands,\n        nutritionText: foodAnalysis.nutritionText,\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo,\n        // Default WIHY values for fallback\n        healthScore: 50,\n        novaGroup: 4,\n        novaDescription: 'Unknown processing level',\n        isHealthy: false,\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\n        warnings: ['Could not analyze product completely'],\n        familySafe: false,\n        colorCode: 'orange',\n        verdict: 'Analysis limited - choose natural foods',\n        dataSources: ['Local Analysis']\n      }\n    };\n  }\n\n  /**\r\n   * Get NOVA group description\r\n   */\n  getNovaDescription(novaGroup) {\n    const descriptions = {\n      1: 'Natural - Real food as God intended',\n      2: 'Processed - Use sparingly',\n      3: 'Highly Processed - Find alternatives',\n      4: 'Ultra-Processed - Your family deserves better'\n    };\n    return descriptions[novaGroup] || descriptions[4];\n  }\n\n  /**\r\n   * Get basic image file information\r\n   */\n  getImageInfo(file) {\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\n    return {\n      name: file.name,\n      size: `${sizeInMB} MB`,\n      type: file.type,\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\n    };\n  }\n\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\n  analyzeFoodContent(analysisText, imageInfo) {\n    const text = analysisText.toLowerCase();\n\n    // Common food keywords\n    const foodKeywords = ['apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef', 'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable', 'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'];\n\n    // Common brand keywords\n    const brandKeywords = ['coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills', 'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'];\n\n    // Nutrition-related keywords\n    const nutritionKeywords = ['calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber', 'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'];\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\n    return {\n      foodItems: detectedFood,\n      brands: detectedBrands,\n      nutritionText: nutritionMentions.length > 0 ? `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : ''\n    };\n  }\n\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\n  async scanBarcode(barcode, userContext = {}) {\n    try {\n      console.log('🔍 Scanning barcode with WIHY Scanner API:', barcode);\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: barcode,\n          user_context: {\n            scan_location: 'web_app',\n            device_type: 'browser',\n            ...userContext\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\n      }\n      const result = await response.json();\n      return this.processWihyBarcodeResponse(result, barcode);\n    } catch (error) {\n      console.error('Barcode scan failed:', error);\n      return this.handleBarcodeError(error, barcode);\n    }\n  }\n\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\n  processWihyBarcodeResponse(result, barcode) {\n    var _nova_chart_reference2, _wihy_analysis$family2;\n    const {\n      success,\n      nova_group,\n      nova_description,\n      nova_chart_reference,\n      health_score,\n      wihy_analysis,\n      data_sources,\n      product_name\n    } = result;\n    const isHealthy = nova_group <= 2 && health_score >= 60;\n    const colorCode = (nova_chart_reference === null || nova_chart_reference === void 0 ? void 0 : (_nova_chart_reference2 = nova_chart_reference.client_guidance) === null || _nova_chart_reference2 === void 0 ? void 0 : _nova_chart_reference2.color_coding) || 'red';\n    const familySafe = (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : (_wihy_analysis$family2 = wihy_analysis.family_safety) === null || _wihy_analysis$family2 === void 0 ? void 0 : _wihy_analysis$family2.safety_score) >= 60;\n    return {\n      success: true,\n      data: {\n        description: product_name || `Product ${barcode}`,\n        foodItems: product_name ? [product_name] : [],\n        brands: [],\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\n        barcodes: [barcode],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: `Barcode-${barcode}`,\n          size: 'N/A',\n          type: 'barcode',\n          dimensions: 'N/A'\n        },\n        // WIHY Scanner specific data\n        healthScore: health_score,\n        novaGroup: nova_group,\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\n        isHealthy,\n        recommendations: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.wihy_recommendations) || [],\n        warnings: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.carcinogen_warnings) || [],\n        familySafe,\n        colorCode,\n        verdict: (wihy_analysis === null || wihy_analysis === void 0 ? void 0 : wihy_analysis.verdict) || this.getHealthVerdict(health_score, nova_group),\n        dataSources: data_sources || ['WIHY Enhanced DB']\n      }\n    };\n  }\n\n  /**\r\n   * Handle barcode scan errors\r\n   */\n  handleBarcodeError(error, barcode) {\n    return {\n      success: false,\n      error: error.message || 'Barcode scan failed',\n      data: {\n        description: 'Could not analyze product',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Analysis failed',\n        barcodes: [barcode],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: `Barcode-${barcode}`,\n          size: 'N/A',\n          type: 'barcode',\n          dimensions: 'N/A'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Analysis failed',\n        isHealthy: false,\n        recommendations: ['API Error - When in doubt, choose whole foods', 'Real food doesn\\'t need barcodes'],\n        warnings: ['Could not analyze product'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods when uncertain',\n        dataSources: ['Error - No data available']\n      }\n    };\n  }\n\n  /**\r\n   * Get health verdict based on scores\r\n   */\n  getHealthVerdict(healthScore, novaGroup) {\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\n    if (novaGroup === 3) return 'Caution - highly processed food';\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\n    return 'Choose whole foods for better health';\n  }\n\n  /**\r\n   * Format analysis results for display\r\n   */\n  formatForDisplay(result) {\n    if (!result.success || !result.data) {\n      return result.error || 'Analysis failed';\n    }\n    const {\n      data\n    } = result;\n    const parts = [];\n\n    // Barcode detection info\n    if (data.barcodes && data.barcodes.length > 0) {\n      parts.push(`📱 Barcode detected: ${data.barcodes[0]}`);\n    }\n\n    // WIHY Scanner results\n    if (data.verdict) {\n      parts.push(`🎯 ${data.verdict}`);\n    }\n\n    // Health information\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\n      parts.push(`📊 Health Score: ${data.healthScore}/100`);\n      parts.push(`🏷️ ${data.novaDescription}`);\n    }\n\n    // Detected foods\n    if (data.foodItems && data.foodItems.length > 0) {\n      parts.push(`🍎 Detected: ${data.foodItems.join(', ')}`);\n    }\n\n    // Recommendations\n    if (data.recommendations && data.recommendations.length > 0) {\n      parts.push(`💡 Recommendations:`);\n      data.recommendations.forEach(rec => parts.push(`  • ${rec}`));\n    }\n\n    // Warnings\n    if (data.warnings && data.warnings.length > 0) {\n      parts.push(`⚠️ Warnings:`);\n      data.warnings.forEach(warning => parts.push(`  • ${warning}`));\n    }\n\n    // Data sources\n    if (data.dataSources && data.dataSources.length > 0) {\n      parts.push(`📋 Data from: ${data.dataSources.join(' • ')}`);\n    }\n\n    // Fallback to basic info\n    if (parts.length === 0) {\n      if (data.description) {\n        parts.push(data.description);\n      }\n      if (data.imageInfo) {\n        parts.push(`📁 ${data.imageInfo.name} (${data.imageInfo.size})`);\n      }\n    }\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\n  }\n\n  /**\r\n   * Get color coding for UI display\r\n   */\n  getColorCoding(result) {\n    var _result$data;\n    if (!result.success || !((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.colorCode)) {\n      return {\n        color: 'red',\n        label: 'ERROR',\n        action: 'TRY AGAIN'\n      };\n    }\n    const colorMap = {\n      'green': {\n        color: '#4CAF50',\n        label: 'CHOOSE',\n        action: 'Great choice!'\n      },\n      'yellow': {\n        color: '#FFEB3B',\n        label: 'MODERATE',\n        action: 'Use sparingly'\n      },\n      'orange': {\n        color: '#FF9800',\n        label: 'LIMIT',\n        action: 'Find alternatives'\n      },\n      'red': {\n        color: '#F44336',\n        label: 'AVOID',\n        action: 'Choose whole foods instead'\n      }\n    };\n    return colorMap[result.data.colorCode] || colorMap.red;\n  }\n\n  /**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */\n  async analyzeAnyImage(input, context = {}) {\n    try {\n      // Handle different input types\n      if (input instanceof Blob && !(input instanceof File)) {\n        // Convert Blob to File for camera captures\n        const file = new File([input], 'camera-capture.jpg', {\n          type: 'image/jpeg'\n        });\n        return this.analyzeImage(file);\n      } else if (typeof input === 'string') {\n        // Handle URLs\n        return this.analyzeImageUrl(input, context);\n      } else {\n        // Handle File objects\n        return this.analyzeImage(input);\n      }\n    } catch (error) {\n      console.error('Image analysis failed:', error);\n      return this.handleGenericError(error);\n    }\n  }\n\n  /**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */\n  handleGenericError(error) {\n    return {\n      success: false,\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'Analysis failed',\n      data: {\n        description: 'Image analysis failed',\n        foodItems: [],\n        brands: [],\n        nutritionText: 'Choose whole foods when technology fails',\n        barcodes: [],\n        qrCodes: [],\n        text: '',\n        imageInfo: {\n          name: 'Analysis Failed',\n          size: 'N/A',\n          type: 'error',\n          dimensions: 'N/A'\n        },\n        healthScore: 0,\n        novaGroup: 4,\n        novaDescription: 'Unknown - Technical error',\n        isHealthy: false,\n        recommendations: ['Technical error - When in doubt, choose whole foods', 'Real food doesn\\'t need complex analysis', 'Shop the perimeter of the grocery store', 'If it has more than 5 ingredients, consider alternatives'],\n        warnings: ['Analysis system temporarily unavailable'],\n        familySafe: false,\n        colorCode: 'red',\n        verdict: 'Choose whole foods - they\\'re always the safest bet',\n        dataSources: ['WIHY Health Guidance']\n      }\n    };\n  }\n\n  /**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */\n  async testApiHealth() {\n    try {\n      const startTime = Date.now();\n\n      // Test with a simple barcode scan\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: '3017620422003',\n          // Nutella test barcode\n          user_context: {\n            test: true\n          }\n        })\n      });\n      const latency = Date.now() - startTime;\n      if (response.ok) {\n        const result = await response.json();\n        const hasRequired = result.nova_group && result.health_score !== undefined;\n        return {\n          healthy: hasRequired,\n          message: hasRequired ? '✅ WIHY Scanner API is healthy' : '⚠️ API missing required fields',\n          latency\n        };\n      } else {\n        return {\n          healthy: false,\n          message: `❌ API Error: ${response.status}`,\n          latency\n        };\n      }\n    } catch (error) {\n      return {\n        healthy: false,\n        message: `❌ Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n}\nexport const visionAnalysisService = new VisionAnalysisService();","map":{"version":3,"names":["BrowserMultiFormatReader","getWihyMLApiUrl","process","env","REACT_APP_WIHY_ML_API_URL","USE_LOCAL_ML","REACT_APP_USE_LOCAL_ML","isLocalhost","window","location","hostname","WIHY_API_BASE","console","log","NODE_ENV","FINAL_ML_URL","HOSTNAME","IS_LOCALHOST","DETECTION_REASON","VisionAnalysisService","constructor","barcodeReader","analyzeImagePattern","imageFile","Promise","resolve","img","Image","canvas","document","createElement","ctx","getContext","onload","hasBarcodeLikePattern","confidence","maxSize","scale","Math","min","width","height","drawImage","imageData","getImageData","data","verticalLineScore","horizontalVariance","sampleRows","row","y","floor","transitions","lastBrightness","x","i","brightness","abs","avgTransitions","round","imageSize","URL","revokeObjectURL","src","onerror","createObjectURL","createImageBitmap","file","reject","then","catch","loadImage","normalizeToGTIN14","barcode","digits","replace","length","detectBarcodes","fileName","name","fileSize","size","fileType","type","patternAnalysis","detectedBarcodes","barcodeDetector","BarcodeDetector","formats","barcodes","detect","forEach","normalizedBarcode","rawValue","push","Set","nativeError","message","zxingPromise","decodeFromImageElement","timeout","_","setTimeout","Error","result","race","getText","rawBarcode","zxingError","uniqueBarcodes","analyzeImage","imageInfo","getImageInfo","barcodeResult","scanBarcode","success","barcodeError","wihyResult","analyzeWithWihyAPI","user_context","image_name","error","fallbackAnalysis","processedResult","processWihyImageResponse","fallbackResult","input","userContext","response","fetch","method","headers","body","JSON","stringify","image_url","context","analysis_type","user_location","input_type","formData","FormData","append","file_name","file_size","ok","status","json","analyzeImageUrl","imageUrl","source","dimensions","handleUrlAnalysisError","description","foodItems","brands","nutritionText","qrCodes","text","healthScore","novaGroup","novaDescription","isHealthy","recommendations","warnings","familySafe","colorCode","verdict","dataSources","_nova_chart_reference","_wihy_analysis$family","overall_assessment","google_vision_analysis","detected_foods","nova_chart_reference","wihy_recommendations","wihy_analysis","health_score","nova_group","client_guidance","color_coding","map","food","carcinogen_warnings","family_safety","safety_score","detected_text","getNovaDescription","data_sources","wihyAnalysis","wihyAPI","scanFood","ai_response","foodAnalysis","analyzeFoodContent","descriptions","sizeInMB","toFixed","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","join","query","scan_location","device_type","processWihyBarcodeResponse","handleBarcodeError","_nova_chart_reference2","_wihy_analysis$family2","nova_description","product_name","getHealthVerdict","formatForDisplay","parts","undefined","rec","warning","getColorCoding","_result$data","color","label","action","colorMap","red","analyzeAnyImage","Blob","File","handleGenericError","testApiHealth","startTime","Date","now","test","latency","hasRequired","healthy","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\nimport { BrowserMultiFormatReader } from '@zxing/browser';\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n    // WIHY Scanner API fields\r\n    healthScore?: number;\r\n    novaGroup?: number;\r\n    novaDescription?: string;\r\n    isHealthy?: boolean;\r\n    recommendations?: string[];\r\n    warnings?: string[];\r\n    familySafe?: boolean;\r\n    colorCode?: string;\r\n    verdict?: string;\r\n    dataSources?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\n// WIHY Scanner API Configuration with dev flag support\r\nconst getWihyMLApiUrl = () => {\r\n  // Check for explicit environment variable first (highest priority)\r\n  if (process.env.REACT_APP_WIHY_ML_API_URL) {\r\n    return process.env.REACT_APP_WIHY_ML_API_URL;\r\n  }\r\n  \r\n  // Development flag - set to true to use local ML dev server, false for production\r\n  const USE_LOCAL_ML = process.env.REACT_APP_USE_LOCAL_ML === 'true';\r\n  \r\n  // Check if we're on localhost (local development)\r\n  const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n  \r\n  if (isLocalhost && USE_LOCAL_ML) {\r\n    // Local development with dev flag enabled - use localhost ML API\r\n    return 'http://localhost:8001'; // Assuming ML service runs on different port\r\n  } else {\r\n    // Production/deployed OR dev flag disabled - use production ML API\r\n    return 'https://vhealth-wihy-ml-api.gentlebush-f35a13de.westus2.azurecontainerapps.io';\r\n  }\r\n};\r\n\r\nconst WIHY_API_BASE = getWihyMLApiUrl();\r\n\r\n// Debug logging for ML API\r\nconsole.log('🔍 ML API CONFIG DEBUG:', {\r\n  NODE_ENV: process.env.NODE_ENV,\r\n  REACT_APP_WIHY_ML_API_URL: process.env.REACT_APP_WIHY_ML_API_URL,\r\n  FINAL_ML_URL: WIHY_API_BASE,\r\n  HOSTNAME: window.location.hostname,\r\n  IS_LOCALHOST: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1',\r\n  USE_LOCAL_ML: process.env.REACT_APP_USE_LOCAL_ML === 'true',\r\n  DETECTION_REASON: process.env.REACT_APP_WIHY_ML_API_URL ? 'ENV_VAR' : \r\n    (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') && process.env.REACT_APP_USE_LOCAL_ML === 'true' ? 'LOCAL_ML_DEV' : 'PRODUCTION_ML_API'\r\n});\r\n\r\nclass VisionAnalysisService {\r\n  private barcodeReader: BrowserMultiFormatReader;\r\n  \r\n  constructor() {\r\n    this.barcodeReader = new BrowserMultiFormatReader();\r\n  }\r\n\r\n  /**\r\n   * Smart detection: Analyze image to determine if it contains barcode patterns\r\n   */\r\n  private async analyzeImagePattern(imageFile: File): Promise<{ hasBarcodeLikePattern: boolean; confidence: number }> {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      \r\n      img.onload = () => {\r\n        if (!ctx) {\r\n          resolve({ hasBarcodeLikePattern: false, confidence: 0 });\r\n          return;\r\n        }\r\n        \r\n        // Set canvas size (optimize for analysis)\r\n        const maxSize = 800;\r\n        const scale = Math.min(maxSize / img.width, maxSize / img.height);\r\n        canvas.width = img.width * scale;\r\n        canvas.height = img.height * scale;\r\n        \r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n        \r\n        // Get image data for pattern analysis\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n        \r\n        // Analyze for barcode patterns (vertical lines, alternating dark/light patterns)\r\n        let verticalLineScore = 0;\r\n        let horizontalVariance = 0;\r\n        const sampleRows = 5; // Sample multiple rows\r\n        \r\n        for (let row = 0; row < sampleRows; row++) {\r\n          const y = Math.floor((canvas.height / (sampleRows + 1)) * (row + 1));\r\n          let transitions = 0;\r\n          let lastBrightness = 0;\r\n          \r\n          for (let x = 0; x < canvas.width; x += 2) { // Sample every 2 pixels for performance\r\n            const i = (y * canvas.width + x) * 4;\r\n            const brightness = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n            \r\n            if (Math.abs(brightness - lastBrightness) > 30) { // Threshold for transition\r\n              transitions++;\r\n            }\r\n            lastBrightness = brightness;\r\n          }\r\n          \r\n          // Barcodes typically have many transitions (vertical lines)\r\n          verticalLineScore += transitions;\r\n        }\r\n        \r\n        // Calculate confidence based on pattern analysis\r\n        const avgTransitions = verticalLineScore / sampleRows;\r\n        const confidence = Math.min(avgTransitions / 20, 1); // Normalize to 0-1\r\n        const hasBarcodeLikePattern = confidence > 0.3; // Threshold for barcode detection\r\n        \r\n        console.log('🔍 Pattern Analysis:', {\r\n          avgTransitions,\r\n          confidence: Math.round(confidence * 100) + '%',\r\n          hasBarcodeLikePattern,\r\n          imageSize: `${canvas.width}x${canvas.height}`\r\n        });\r\n        \r\n        URL.revokeObjectURL(img.src);\r\n        resolve({ hasBarcodeLikePattern, confidence });\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        URL.revokeObjectURL(img.src);\r\n        resolve({ hasBarcodeLikePattern: false, confidence: 0 });\r\n      };\r\n      \r\n      img.src = URL.createObjectURL(imageFile);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper: Create ImageBitmap from File\r\n   */\r\n  private async createImageBitmap(file: File): Promise<ImageBitmap> {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        createImageBitmap(img)\r\n          .then(resolve)\r\n          .catch(reject);\r\n        URL.revokeObjectURL(img.src);\r\n      };\r\n      img.onerror = reject;\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper: Load image from File\r\n   */\r\n  private async loadImage(file: File): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.onload = () => resolve(img);\r\n      img.onerror = reject;\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Normalize barcode to GTIN-14 format for food product lookup\r\n   */\r\n  private normalizeToGTIN14(barcode: string): string {\r\n    // Remove any non-digit characters\r\n    const digits = barcode.replace(/\\D/g, '');\r\n    \r\n    // Handle different UPC/EAN formats and normalize to GTIN-14\r\n    switch (digits.length) {\r\n      case 8:  // EAN-8\r\n        return '000000' + digits;\r\n      case 12: // UPC-A\r\n        return '00' + digits;\r\n      case 13: // EAN-13\r\n        return '0' + digits;\r\n      case 14: // Already GTIN-14\r\n        return digits;\r\n      default:\r\n        // If not a standard food product barcode format, return as-is\r\n        return digits;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hybrid barcode detection: Native BarcodeDetector → ZXing fallback\r\n   * Optimized for food product barcodes (UPC/EAN formats)\r\n   */\r\n  private async detectBarcodes(imageFile: File): Promise<string[]> {\r\n    console.log('🔍 Starting hybrid barcode detection...', {\r\n      fileName: imageFile.name,\r\n      fileSize: imageFile.size,\r\n      fileType: imageFile.type\r\n    });\r\n\r\n    // First, smart pattern detection\r\n    const patternAnalysis = await this.analyzeImagePattern(imageFile);\r\n    \r\n    if (!patternAnalysis.hasBarcodeLikePattern) {\r\n      console.log('📷 No barcode pattern detected, skipping barcode scanning');\r\n      return [];\r\n    }\r\n    \r\n    console.log('📊 Barcode pattern detected, proceeding with detection...');\r\n    \r\n    const detectedBarcodes: string[] = [];\r\n    \r\n    // Method 1: Try native BarcodeDetector (fast path)\r\n    if ('BarcodeDetector' in window) {\r\n      try {\r\n        console.log('🚀 Trying native BarcodeDetector (fast path)...');\r\n        \r\n        const barcodeDetector = new (window as any).BarcodeDetector({\r\n          formats: ['ean_13', 'ean_8', 'upc_a', 'upc_e'] // Food retail formats\r\n        });\r\n        \r\n        const barcodes = await barcodeDetector.detect(await this.createImageBitmap(imageFile));\r\n        \r\n        if (barcodes.length > 0) {\r\n          barcodes.forEach((barcode: any) => {\r\n            const normalizedBarcode = this.normalizeToGTIN14(barcode.rawValue);\r\n            console.log('✅ Native detector found:', barcode.rawValue, '→', normalizedBarcode);\r\n            detectedBarcodes.push(normalizedBarcode);\r\n          });\r\n          return [...new Set(detectedBarcodes)]; // Remove duplicates\r\n        }\r\n      } catch (nativeError) {\r\n        console.log('⚠️ Native BarcodeDetector failed:', nativeError.message);\r\n      }\r\n    } else {\r\n      console.log('ℹ️ Native BarcodeDetector not supported');\r\n    }\r\n    \r\n    // Method 2: ZXing fallback (reliable path) - only for food barcode formats\r\n    try {\r\n      console.log('� Falling back to ZXing detection...');\r\n      \r\n      const img = await this.loadImage(imageFile);\r\n      \r\n      // Try ZXing with timeout and format restrictions\r\n      const zxingPromise = this.barcodeReader.decodeFromImageElement(img);\r\n      const timeout = new Promise((_, reject) => {\r\n        setTimeout(() => reject(new Error('ZXing timeout')), 3000); // Shorter timeout\r\n      });\r\n      \r\n      const result = await Promise.race([zxingPromise, timeout]) as any;\r\n      \r\n      if (result && result.getText) {\r\n        const rawBarcode = result.getText();\r\n        const normalizedBarcode = this.normalizeToGTIN14(rawBarcode);\r\n        console.log('✅ ZXing detected:', rawBarcode, '→', normalizedBarcode);\r\n        detectedBarcodes.push(normalizedBarcode);\r\n      }\r\n      \r\n    } catch (zxingError) {\r\n      console.log('⚠️ ZXing detection failed:', zxingError.message || zxingError);\r\n    }\r\n    \r\n    const uniqueBarcodes = [...new Set(detectedBarcodes)];\r\n    console.log('🎯 Final detected barcodes (GTIN-14):', uniqueBarcodes);\r\n    \r\n    return uniqueBarcodes;\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Starting WIHY image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('Image info:', imageInfo);\r\n\r\n      // Try hybrid barcode detection \r\n      console.log('🔍 Starting hybrid barcode detection...');\r\n      const detectedBarcodes = await this.detectBarcodes(imageFile);\r\n      \r\n      console.log('🔍 Barcode detection result:', detectedBarcodes);\r\n      \r\n      // If we found barcodes, scan them instead of doing image analysis\r\n      if (detectedBarcodes.length > 0) {\r\n        console.log('🎯 Barcodes detected, performing barcode scan:', detectedBarcodes);\r\n        \r\n        try {\r\n          // Scan the first detected barcode\r\n          const barcodeResult = await this.scanBarcode(detectedBarcodes[0]);\r\n          console.log('📊 Barcode scan result:', barcodeResult);\r\n          \r\n          // Add the detected barcodes to the result\r\n          if (barcodeResult.success && barcodeResult.data) {\r\n            barcodeResult.data.barcodes = detectedBarcodes;\r\n            console.log('✅ Returning barcode analysis result');\r\n            return barcodeResult;\r\n          }\r\n        } catch (barcodeError) {\r\n          console.log('Barcode scan failed, falling back to image analysis:', barcodeError);\r\n        }\r\n      } else {\r\n        console.log('ℹ️ No barcodes detected, proceeding with regular image analysis');\r\n      }\r\n\r\n      // Use WIHY Scanner API for comprehensive food analysis\r\n      let wihyResult: any = null;\r\n      \r\n      try {\r\n        console.log('Analyzing with WIHY Scanner API...');\r\n        wihyResult = await this.analyzeWithWihyAPI(imageFile, {\r\n          user_context: 'web_upload',\r\n          image_name: imageFile.name\r\n        });\r\n        console.log('WIHY Scanner analysis result:', wihyResult);\r\n      } catch (error) {\r\n        console.log('WIHY Scanner API not available, falling back to legacy analysis');\r\n        return this.fallbackAnalysis(imageFile, imageInfo);\r\n      }\r\n\r\n      if (wihyResult && wihyResult.success) {\r\n        const processedResult = this.processWihyImageResponse(wihyResult, imageInfo);\r\n        // Add any detected barcodes to the image analysis result\r\n        if (processedResult.data && detectedBarcodes.length > 0) {\r\n          processedResult.data.barcodes = detectedBarcodes;\r\n        }\r\n        return processedResult;\r\n      } else {\r\n        const fallbackResult = await this.fallbackAnalysis(imageFile, imageInfo);\r\n        // Add any detected barcodes to the fallback result\r\n        if (fallbackResult.data && detectedBarcodes.length > 0) {\r\n          fallbackResult.data.barcodes = detectedBarcodes;\r\n        }\r\n        return fallbackResult;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze image using WIHY Scanner API (supports File objects and URLs)\r\n   */\r\n  private async analyzeWithWihyAPI(input: File | string, userContext = {}): Promise<any> {\r\n    let response: Response;\r\n    \r\n    if (typeof input === 'string') {\r\n      // URL analysis\r\n      console.log('🌐 Analyzing image from URL:', input);\r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          image_url: input,\r\n          context: JSON.stringify({\r\n            analysis_type: 'food_health',\r\n            user_location: 'web_app',\r\n            input_type: 'url',\r\n            ...userContext\r\n          })\r\n        })\r\n      });\r\n    } else {\r\n      // File upload analysis\r\n      console.log('📁 Analyzing uploaded file:', input.name);\r\n      const formData = new FormData();\r\n      formData.append('image', input);\r\n      formData.append('context', JSON.stringify({\r\n        analysis_type: 'food_health',\r\n        user_location: 'web_app',\r\n        input_type: 'file_upload',\r\n        file_name: input.name,\r\n        file_size: input.size,\r\n        ...userContext\r\n      }));\r\n      \r\n      response = await fetch(`${WIHY_API_BASE}/wihy/scan-image`, {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`WIHY API Error: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Analyze image from URL\r\n   */\r\n  async analyzeImageUrl(imageUrl: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Analyzing image from URL with WIHY Scanner API');\r\n      \r\n      const wihyResult = await this.analyzeWithWihyAPI(imageUrl, {\r\n        ...userContext,\r\n        source: 'url_input'\r\n      });\r\n      \r\n      if (wihyResult && wihyResult.success) {\r\n        return this.processWihyImageResponse(wihyResult, {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        });\r\n      } else {\r\n        return this.handleUrlAnalysisError(imageUrl);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('URL image analysis failed:', error);\r\n      return this.handleUrlAnalysisError(imageUrl, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle URL analysis errors\r\n   */\r\n  private handleUrlAnalysisError(imageUrl: string, error?: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'URL analysis failed',\r\n      data: {\r\n        description: 'Could not analyze image from URL',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Image from URL',\r\n          size: 'Unknown',\r\n          type: 'url',\r\n          dimensions: 'Unknown'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'URL Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis'\r\n        ],\r\n        warnings: ['Could not analyze image from URL'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process WIHY Scanner API response\r\n   */\r\n  private processWihyImageResponse(wihyResult: any, imageInfo: any): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      overall_assessment,\r\n      google_vision_analysis,\r\n      detected_foods,\r\n      nova_chart_reference,\r\n      wihy_recommendations,\r\n      wihy_analysis\r\n    } = wihyResult;\r\n\r\n    const healthScore = overall_assessment?.health_score || 0;\r\n    const novaGroup = overall_assessment?.nova_group || 4;\r\n    const verdict = overall_assessment?.verdict || 'Analysis completed';\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    \r\n    // Extract detected foods\r\n    const foodItems = detected_foods?.map((food: any) => food.name || food) || [];\r\n    \r\n    // Extract recommendations and warnings\r\n    const recommendations = wihy_recommendations || [];\r\n    const warnings = wihy_analysis?.carcinogen_warnings || [];\r\n    \r\n    // Determine if healthy based on NOVA group and health score\r\n    const isHealthy = novaGroup <= 2 && healthScore >= 60;\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: verdict,\r\n        foodItems: foodItems,\r\n        brands: [], // Could extract from vision analysis\r\n        nutritionText: `Health Score: ${healthScore}/100 | NOVA Group: ${novaGroup}`,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: google_vision_analysis?.detected_text || '',\r\n        imageInfo,\r\n        // WIHY Scanner specific data\r\n        healthScore,\r\n        novaGroup,\r\n        novaDescription: this.getNovaDescription(novaGroup),\r\n        isHealthy,\r\n        recommendations,\r\n        warnings,\r\n        familySafe,\r\n        colorCode,\r\n        verdict,\r\n        dataSources: wihyResult.data_sources || ['WIHY Scanner', 'Google Vision']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fallback analysis when WIHY API is not available\r\n   */\r\n  private async fallbackAnalysis(imageFile: File, imageInfo: any): Promise<VisionAnalysisResult> {\r\n    console.log('Using fallback analysis...');\r\n    \r\n    // Try legacy WiHy API as fallback\r\n    let wihyAnalysis = '';\r\n    \r\n    try {\r\n      const { wihyAPI } = await import('./wihyAPI');\r\n      const wihyResult = await wihyAPI.scanFood(imageFile);\r\n      \r\n      if (('success' in wihyResult && wihyResult.success) || !('success' in wihyResult)) {\r\n        const message = ('message' in wihyResult) ? wihyResult.message : \r\n                       ('data' in wihyResult && wihyResult.data.ai_response) ? wihyResult.data.ai_response.response : \r\n                       null;\r\n        if (message) {\r\n          wihyAnalysis = message;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Legacy WiHy API also unavailable');\r\n    }\r\n\r\n    // Extract potential nutrition and food information\r\n    const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: wihyAnalysis || 'Image analyzed - choose whole foods when in doubt',\r\n        foodItems: foodAnalysis.foodItems,\r\n        brands: foodAnalysis.brands,\r\n        nutritionText: foodAnalysis.nutritionText,\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo,\r\n        // Default WIHY values for fallback\r\n        healthScore: 50,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown processing level',\r\n        isHealthy: false,\r\n        recommendations: ['Choose whole foods when uncertain', 'Real food doesn\\'t need complicated analysis'],\r\n        warnings: ['Could not analyze product completely'],\r\n        familySafe: false,\r\n        colorCode: 'orange',\r\n        verdict: 'Analysis limited - choose natural foods',\r\n        dataSources: ['Local Analysis']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get NOVA group description\r\n   */\r\n  private getNovaDescription(novaGroup: number): string {\r\n    const descriptions = {\r\n      1: 'Natural - Real food as God intended',\r\n      2: 'Processed - Use sparingly',\r\n      3: 'Highly Processed - Find alternatives',\r\n      4: 'Ultra-Processed - Your family deserves better'\r\n    };\r\n    \r\n    return descriptions[novaGroup as keyof typeof descriptions] || descriptions[4];\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Scan barcode using WIHY Scanner API\r\n   */\r\n  async scanBarcode(barcode: string, userContext = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Scanning barcode with WIHY Scanner API:', barcode);\r\n      \r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: barcode,\r\n          user_context: {\r\n            scan_location: 'web_app',\r\n            device_type: 'browser',\r\n            ...userContext\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`WIHY Barcode API Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      return this.processWihyBarcodeResponse(result, barcode);\r\n      \r\n    } catch (error) {\r\n      console.error('Barcode scan failed:', error);\r\n      return this.handleBarcodeError(error, barcode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process WIHY barcode scan response\r\n   */\r\n  private processWihyBarcodeResponse(result: any, barcode: string): VisionAnalysisResult {\r\n    const {\r\n      success,\r\n      nova_group,\r\n      nova_description,\r\n      nova_chart_reference,\r\n      health_score,\r\n      wihy_analysis,\r\n      data_sources,\r\n      product_name\r\n    } = result;\r\n    \r\n    const isHealthy = nova_group <= 2 && health_score >= 60;\r\n    const colorCode = nova_chart_reference?.client_guidance?.color_coding || 'red';\r\n    const familySafe = wihy_analysis?.family_safety?.safety_score >= 60;\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        description: product_name || `Product ${barcode}`,\r\n        foodItems: product_name ? [product_name] : [],\r\n        brands: [],\r\n        nutritionText: `Health Score: ${health_score}/100 | NOVA Group: ${nova_group}`,\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        // WIHY Scanner specific data\r\n        healthScore: health_score,\r\n        novaGroup: nova_group,\r\n        novaDescription: nova_description || this.getNovaDescription(nova_group),\r\n        isHealthy,\r\n        recommendations: wihy_analysis?.wihy_recommendations || [],\r\n        warnings: wihy_analysis?.carcinogen_warnings || [],\r\n        familySafe,\r\n        colorCode,\r\n        verdict: wihy_analysis?.verdict || this.getHealthVerdict(health_score, nova_group),\r\n        dataSources: data_sources || ['WIHY Enhanced DB']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle barcode scan errors\r\n   */\r\n  private handleBarcodeError(error: any, barcode: string): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Barcode scan failed',\r\n      data: {\r\n        description: 'Could not analyze product',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Analysis failed',\r\n        barcodes: [barcode],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: `Barcode-${barcode}`,\r\n          size: 'N/A',\r\n          type: 'barcode',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Analysis failed',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'API Error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need barcodes'\r\n        ],\r\n        warnings: ['Could not analyze product'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods when uncertain',\r\n        dataSources: ['Error - No data available']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get health verdict based on scores\r\n   */\r\n  private getHealthVerdict(healthScore: number, novaGroup: number): string {\r\n    if (novaGroup === 1 && healthScore >= 80) return 'Excellent choice - natural and healthy!';\r\n    if (novaGroup <= 2 && healthScore >= 60) return 'Good choice - moderately processed';\r\n    if (novaGroup === 3) return 'Caution - highly processed food';\r\n    if (novaGroup === 4) return 'Avoid - ultra-processed food';\r\n    return 'Choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // Barcode detection info\r\n    if (data.barcodes && data.barcodes.length > 0) {\r\n      parts.push(`📱 Barcode detected: ${data.barcodes[0]}`);\r\n    }\r\n\r\n    // WIHY Scanner results\r\n    if (data.verdict) {\r\n      parts.push(`🎯 ${data.verdict}`);\r\n    }\r\n\r\n    // Health information\r\n    if (data.healthScore !== undefined && data.novaGroup !== undefined) {\r\n      parts.push(`📊 Health Score: ${data.healthScore}/100`);\r\n      parts.push(`🏷️ ${data.novaDescription}`);\r\n    }\r\n\r\n    // Detected foods\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`🍎 Detected: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Recommendations\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      parts.push(`💡 Recommendations:`);\r\n      data.recommendations.forEach(rec => parts.push(`  • ${rec}`));\r\n    }\r\n\r\n    // Warnings\r\n    if (data.warnings && data.warnings.length > 0) {\r\n      parts.push(`⚠️ Warnings:`);\r\n      data.warnings.forEach(warning => parts.push(`  • ${warning}`));\r\n    }\r\n\r\n    // Data sources\r\n    if (data.dataSources && data.dataSources.length > 0) {\r\n      parts.push(`📋 Data from: ${data.dataSources.join(' • ')}`);\r\n    }\r\n\r\n    // Fallback to basic info\r\n    if (parts.length === 0) {\r\n      if (data.description) {\r\n        parts.push(data.description);\r\n      }\r\n      if (data.imageInfo) {\r\n        parts.push(`📁 ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n      }\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - choose whole foods for better health';\r\n  }\r\n\r\n  /**\r\n   * Get color coding for UI display\r\n   */\r\n  getColorCoding(result: VisionAnalysisResult): { color: string; label: string; action: string } {\r\n    if (!result.success || !result.data?.colorCode) {\r\n      return { color: 'red', label: 'ERROR', action: 'TRY AGAIN' };\r\n    }\r\n\r\n    const colorMap = {\r\n      'green': { color: '#4CAF50', label: 'CHOOSE', action: 'Great choice!' },\r\n      'yellow': { color: '#FFEB3B', label: 'MODERATE', action: 'Use sparingly' },\r\n      'orange': { color: '#FF9800', label: 'LIMIT', action: 'Find alternatives' },\r\n      'red': { color: '#F44336', label: 'AVOID', action: 'Choose whole foods instead' }\r\n    };\r\n\r\n    return colorMap[result.data.colorCode as keyof typeof colorMap] || colorMap.red;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive image analysis supporting files, URLs, and camera captures\r\n   */\r\n  async analyzeAnyImage(input: File | string | Blob, context = {}): Promise<VisionAnalysisResult> {\r\n    try {\r\n      // Handle different input types\r\n      if (input instanceof Blob && !(input instanceof File)) {\r\n        // Convert Blob to File for camera captures\r\n        const file = new File([input], 'camera-capture.jpg', { type: 'image/jpeg' });\r\n        return this.analyzeImage(file);\r\n      } else if (typeof input === 'string') {\r\n        // Handle URLs\r\n        return this.analyzeImageUrl(input, context);\r\n      } else {\r\n        // Handle File objects\r\n        return this.analyzeImage(input);\r\n      }\r\n    } catch (error) {\r\n      console.error('Image analysis failed:', error);\r\n      return this.handleGenericError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle generic analysis errors with WIHY guidance\r\n   */\r\n  private handleGenericError(error: any): VisionAnalysisResult {\r\n    return {\r\n      success: false,\r\n      error: error?.message || 'Analysis failed',\r\n      data: {\r\n        description: 'Image analysis failed',\r\n        foodItems: [],\r\n        brands: [],\r\n        nutritionText: 'Choose whole foods when technology fails',\r\n        barcodes: [],\r\n        qrCodes: [],\r\n        text: '',\r\n        imageInfo: {\r\n          name: 'Analysis Failed',\r\n          size: 'N/A',\r\n          type: 'error',\r\n          dimensions: 'N/A'\r\n        },\r\n        healthScore: 0,\r\n        novaGroup: 4,\r\n        novaDescription: 'Unknown - Technical error',\r\n        isHealthy: false,\r\n        recommendations: [\r\n          'Technical error - When in doubt, choose whole foods',\r\n          'Real food doesn\\'t need complex analysis',\r\n          'Shop the perimeter of the grocery store',\r\n          'If it has more than 5 ingredients, consider alternatives'\r\n        ],\r\n        warnings: ['Analysis system temporarily unavailable'],\r\n        familySafe: false,\r\n        colorCode: 'red',\r\n        verdict: 'Choose whole foods - they\\'re always the safest bet',\r\n        dataSources: ['WIHY Health Guidance']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test WIHY Scanner API health and connectivity\r\n   */\r\n  async testApiHealth(): Promise<{ healthy: boolean; message: string; latency?: number }> {\r\n    try {\r\n      const startTime = Date.now();\r\n      \r\n      // Test with a simple barcode scan\r\n      const response = await fetch(`${WIHY_API_BASE}/wihy/scan-barcode`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          query: '3017620422003', // Nutella test barcode\r\n          user_context: { test: true }\r\n        })\r\n      });\r\n      \r\n      const latency = Date.now() - startTime;\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        const hasRequired = result.nova_group && result.health_score !== undefined;\r\n        \r\n        return {\r\n          healthy: hasRequired,\r\n          message: hasRequired ? '✅ WIHY Scanner API is healthy' : '⚠️ API missing required fields',\r\n          latency\r\n        };\r\n      } else {\r\n        return {\r\n          healthy: false,\r\n          message: `❌ API Error: ${response.status}`,\r\n          latency\r\n        };\r\n      }\r\n      \r\n    } catch (error) {\r\n      return {\r\n        healthy: false,\r\n        message: `❌ Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"AAAA;;AAEA,SAASA,wBAAwB,QAAQ,gBAAgB;AAiCzD;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,yBAAyB,EAAE;IACzC,OAAOF,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAC9C;;EAEA;EACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,sBAAsB,KAAK,MAAM;;EAElE;EACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IAAIF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW;EAExG,IAAIH,WAAW,IAAIF,YAAY,EAAE;IAC/B;IACA,OAAO,uBAAuB,CAAC,CAAC;EAClC,CAAC,MAAM;IACL;IACA,OAAO,+EAA+E;EACxF;AACF,CAAC;AAED,MAAMM,aAAa,GAAGV,eAAe,CAAC,CAAC;;AAEvC;AACAW,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;EACrCC,QAAQ,EAAEZ,OAAO,CAACC,GAAG,CAACW,QAAQ;EAC9BV,yBAAyB,EAAEF,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAChEW,YAAY,EAAEJ,aAAa;EAC3BK,QAAQ,EAAER,MAAM,CAACC,QAAQ,CAACC,QAAQ;EAClCO,YAAY,EAAET,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IAAIF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW;EAClGL,YAAY,EAAEH,OAAO,CAACC,GAAG,CAACG,sBAAsB,KAAK,MAAM;EAC3DY,gBAAgB,EAAEhB,OAAO,CAACC,GAAG,CAACC,yBAAyB,GAAG,SAAS,GACjE,CAACI,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IAAIF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,KAAKR,OAAO,CAACC,GAAG,CAACG,sBAAsB,KAAK,MAAM,GAAG,cAAc,GAAG;AAC/J,CAAC,CAAC;AAEF,MAAMa,qBAAqB,CAAC;EAG1BC,WAAWA,CAAA,EAAG;IAAA,KAFNC,aAAa;IAGnB,IAAI,CAACA,aAAa,GAAG,IAAIrB,wBAAwB,CAAC,CAAC;EACrD;;EAEA;AACF;AACA;EACE,MAAcsB,mBAAmBA,CAACC,SAAe,EAAmE;IAClH,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MAEnCN,GAAG,CAACO,MAAM,GAAG,MAAM;QACjB,IAAI,CAACF,GAAG,EAAE;UACRN,OAAO,CAAC;YAAES,qBAAqB,EAAE,KAAK;YAAEC,UAAU,EAAE;UAAE,CAAC,CAAC;UACxD;QACF;;QAEA;QACA,MAAMC,OAAO,GAAG,GAAG;QACnB,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACH,OAAO,GAAGV,GAAG,CAACc,KAAK,EAAEJ,OAAO,GAAGV,GAAG,CAACe,MAAM,CAAC;QACjEb,MAAM,CAACY,KAAK,GAAGd,GAAG,CAACc,KAAK,GAAGH,KAAK;QAChCT,MAAM,CAACa,MAAM,GAAGf,GAAG,CAACe,MAAM,GAAGJ,KAAK;QAElCN,GAAG,CAACW,SAAS,CAAChB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEE,MAAM,CAACY,KAAK,EAAEZ,MAAM,CAACa,MAAM,CAAC;;QAErD;QACA,MAAME,SAAS,GAAGZ,GAAG,CAACa,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEhB,MAAM,CAACY,KAAK,EAAEZ,MAAM,CAACa,MAAM,CAAC;QACrE,MAAMI,IAAI,GAAGF,SAAS,CAACE,IAAI;;QAE3B;QACA,IAAIC,iBAAiB,GAAG,CAAC;QACzB,IAAIC,kBAAkB,GAAG,CAAC;QAC1B,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;;QAEtB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,UAAU,EAAEC,GAAG,EAAE,EAAE;UACzC,MAAMC,CAAC,GAAGZ,IAAI,CAACa,KAAK,CAAEvB,MAAM,CAACa,MAAM,IAAIO,UAAU,GAAG,CAAC,CAAC,IAAKC,GAAG,GAAG,CAAC,CAAC,CAAC;UACpE,IAAIG,WAAW,GAAG,CAAC;UACnB,IAAIC,cAAc,GAAG,CAAC;UAEtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,MAAM,CAACY,KAAK,EAAEc,CAAC,IAAI,CAAC,EAAE;YAAE;YAC1C,MAAMC,CAAC,GAAG,CAACL,CAAC,GAAGtB,MAAM,CAACY,KAAK,GAAGc,CAAC,IAAI,CAAC;YACpC,MAAME,UAAU,GAAG,CAACX,IAAI,CAACU,CAAC,CAAC,GAAGV,IAAI,CAACU,CAAC,GAAG,CAAC,CAAC,GAAGV,IAAI,CAACU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAE5D,IAAIjB,IAAI,CAACmB,GAAG,CAACD,UAAU,GAAGH,cAAc,CAAC,GAAG,EAAE,EAAE;cAAE;cAChDD,WAAW,EAAE;YACf;YACAC,cAAc,GAAGG,UAAU;UAC7B;;UAEA;UACAV,iBAAiB,IAAIM,WAAW;QAClC;;QAEA;QACA,MAAMM,cAAc,GAAGZ,iBAAiB,GAAGE,UAAU;QACrD,MAAMb,UAAU,GAAGG,IAAI,CAACC,GAAG,CAACmB,cAAc,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,MAAMxB,qBAAqB,GAAGC,UAAU,GAAG,GAAG,CAAC,CAAC;;QAEhDvB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE;UAClC6C,cAAc;UACdvB,UAAU,EAAEG,IAAI,CAACqB,KAAK,CAACxB,UAAU,GAAG,GAAG,CAAC,GAAG,GAAG;UAC9CD,qBAAqB;UACrB0B,SAAS,EAAE,GAAGhC,MAAM,CAACY,KAAK,IAAIZ,MAAM,CAACa,MAAM;QAC7C,CAAC,CAAC;QAEFoB,GAAG,CAACC,eAAe,CAACpC,GAAG,CAACqC,GAAG,CAAC;QAC5BtC,OAAO,CAAC;UAAES,qBAAqB;UAAEC;QAAW,CAAC,CAAC;MAChD,CAAC;MAEDT,GAAG,CAACsC,OAAO,GAAG,MAAM;QAClBH,GAAG,CAACC,eAAe,CAACpC,GAAG,CAACqC,GAAG,CAAC;QAC5BtC,OAAO,CAAC;UAAES,qBAAqB,EAAE,KAAK;UAAEC,UAAU,EAAE;QAAE,CAAC,CAAC;MAC1D,CAAC;MAEDT,GAAG,CAACqC,GAAG,GAAGF,GAAG,CAACI,eAAe,CAAC1C,SAAS,CAAC;IAC1C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,MAAc2C,iBAAiBA,CAACC,IAAU,EAAwB;IAChE,OAAO,IAAI3C,OAAO,CAAC,CAACC,OAAO,EAAE2C,MAAM,KAAK;MACtC,MAAM1C,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACO,MAAM,GAAG,MAAM;QACjBiC,iBAAiB,CAACxC,GAAG,CAAC,CACnB2C,IAAI,CAAC5C,OAAO,CAAC,CACb6C,KAAK,CAACF,MAAM,CAAC;QAChBP,GAAG,CAACC,eAAe,CAACpC,GAAG,CAACqC,GAAG,CAAC;MAC9B,CAAC;MACDrC,GAAG,CAACsC,OAAO,GAAGI,MAAM;MACpB1C,GAAG,CAACqC,GAAG,GAAGF,GAAG,CAACI,eAAe,CAACE,IAAI,CAAC;IACrC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,MAAcI,SAASA,CAACJ,IAAU,EAA6B;IAC7D,OAAO,IAAI3C,OAAO,CAAC,CAACC,OAAO,EAAE2C,MAAM,KAAK;MACtC,MAAM1C,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACO,MAAM,GAAG,MAAMR,OAAO,CAACC,GAAG,CAAC;MAC/BA,GAAG,CAACsC,OAAO,GAAGI,MAAM;MACpB1C,GAAG,CAACqC,GAAG,GAAGF,GAAG,CAACI,eAAe,CAACE,IAAI,CAAC;IACrC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACUK,iBAAiBA,CAACC,OAAe,EAAU;IACjD;IACA,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;IAEzC;IACA,QAAQD,MAAM,CAACE,MAAM;MACnB,KAAK,CAAC;QAAG;QACP,OAAO,QAAQ,GAAGF,MAAM;MAC1B,KAAK,EAAE;QAAE;QACP,OAAO,IAAI,GAAGA,MAAM;MACtB,KAAK,EAAE;QAAE;QACP,OAAO,GAAG,GAAGA,MAAM;MACrB,KAAK,EAAE;QAAE;QACP,OAAOA,MAAM;MACf;QACE;QACA,OAAOA,MAAM;IACjB;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAcG,cAAcA,CAACtD,SAAe,EAAqB;IAC/DX,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE;MACrDiE,QAAQ,EAAEvD,SAAS,CAACwD,IAAI;MACxBC,QAAQ,EAAEzD,SAAS,CAAC0D,IAAI;MACxBC,QAAQ,EAAE3D,SAAS,CAAC4D;IACtB,CAAC,CAAC;;IAEF;IACA,MAAMC,eAAe,GAAG,MAAM,IAAI,CAAC9D,mBAAmB,CAACC,SAAS,CAAC;IAEjE,IAAI,CAAC6D,eAAe,CAAClD,qBAAqB,EAAE;MAC1CtB,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;MACxE,OAAO,EAAE;IACX;IAEAD,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;IAExE,MAAMwE,gBAA0B,GAAG,EAAE;;IAErC;IACA,IAAI,iBAAiB,IAAI7E,MAAM,EAAE;MAC/B,IAAI;QACFI,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAE9D,MAAMyE,eAAe,GAAG,IAAK9E,MAAM,CAAS+E,eAAe,CAAC;UAC1DC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC;QAEF,MAAMC,QAAQ,GAAG,MAAMH,eAAe,CAACI,MAAM,CAAC,MAAM,IAAI,CAACxB,iBAAiB,CAAC3C,SAAS,CAAC,CAAC;QAEtF,IAAIkE,QAAQ,CAACb,MAAM,GAAG,CAAC,EAAE;UACvBa,QAAQ,CAACE,OAAO,CAAElB,OAAY,IAAK;YACjC,MAAMmB,iBAAiB,GAAG,IAAI,CAACpB,iBAAiB,CAACC,OAAO,CAACoB,QAAQ,CAAC;YAClEjF,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE4D,OAAO,CAACoB,QAAQ,EAAE,GAAG,EAAED,iBAAiB,CAAC;YACjFP,gBAAgB,CAACS,IAAI,CAACF,iBAAiB,CAAC;UAC1C,CAAC,CAAC;UACF,OAAO,CAAC,GAAG,IAAIG,GAAG,CAACV,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACzC;MACF,CAAC,CAAC,OAAOW,WAAW,EAAE;QACpBpF,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEmF,WAAW,CAACC,OAAO,CAAC;MACvE;IACF,CAAC,MAAM;MACLrF,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD;;IAEA;IACA,IAAI;MACFD,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MAEnD,MAAMa,GAAG,GAAG,MAAM,IAAI,CAAC6C,SAAS,CAAChD,SAAS,CAAC;;MAE3C;MACA,MAAM2E,YAAY,GAAG,IAAI,CAAC7E,aAAa,CAAC8E,sBAAsB,CAACzE,GAAG,CAAC;MACnE,MAAM0E,OAAO,GAAG,IAAI5E,OAAO,CAAC,CAAC6E,CAAC,EAAEjC,MAAM,KAAK;QACzCkC,UAAU,CAAC,MAAMlC,MAAM,CAAC,IAAImC,KAAK,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MAC9D,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAG,MAAMhF,OAAO,CAACiF,IAAI,CAAC,CAACP,YAAY,EAAEE,OAAO,CAAC,CAAQ;MAEjE,IAAII,MAAM,IAAIA,MAAM,CAACE,OAAO,EAAE;QAC5B,MAAMC,UAAU,GAAGH,MAAM,CAACE,OAAO,CAAC,CAAC;QACnC,MAAMd,iBAAiB,GAAG,IAAI,CAACpB,iBAAiB,CAACmC,UAAU,CAAC;QAC5D/F,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE8F,UAAU,EAAE,GAAG,EAAEf,iBAAiB,CAAC;QACpEP,gBAAgB,CAACS,IAAI,CAACF,iBAAiB,CAAC;MAC1C;IAEF,CAAC,CAAC,OAAOgB,UAAU,EAAE;MACnBhG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE+F,UAAU,CAACX,OAAO,IAAIW,UAAU,CAAC;IAC7E;IAEA,MAAMC,cAAc,GAAG,CAAC,GAAG,IAAId,GAAG,CAACV,gBAAgB,CAAC,CAAC;IACrDzE,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEgG,cAAc,CAAC;IAEpE,OAAOA,cAAc;EACvB;;EAEA;AACF;AACA;EACE,MAAMC,YAAYA,CAACvF,SAAe,EAAiC;IACjE,IAAI;MACFX,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;;MAEjD;MACA,MAAMkG,SAAS,GAAG,IAAI,CAACC,YAAY,CAACzF,SAAS,CAAC;MAC9CX,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEkG,SAAS,CAAC;;MAErC;MACAnG,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD,MAAMwE,gBAAgB,GAAG,MAAM,IAAI,CAACR,cAAc,CAACtD,SAAS,CAAC;MAE7DX,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEwE,gBAAgB,CAAC;;MAE7D;MACA,IAAIA,gBAAgB,CAACT,MAAM,GAAG,CAAC,EAAE;QAC/BhE,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEwE,gBAAgB,CAAC;QAE/E,IAAI;UACF;UACA,MAAM4B,aAAa,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC7B,gBAAgB,CAAC,CAAC,CAAC,CAAC;UACjEzE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEoG,aAAa,CAAC;;UAErD;UACA,IAAIA,aAAa,CAACE,OAAO,IAAIF,aAAa,CAACpE,IAAI,EAAE;YAC/CoE,aAAa,CAACpE,IAAI,CAAC4C,QAAQ,GAAGJ,gBAAgB;YAC9CzE,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;YAClD,OAAOoG,aAAa;UACtB;QACF,CAAC,CAAC,OAAOG,YAAY,EAAE;UACrBxG,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEuG,YAAY,CAAC;QACnF;MACF,CAAC,MAAM;QACLxG,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;MAChF;;MAEA;MACA,IAAIwG,UAAe,GAAG,IAAI;MAE1B,IAAI;QACFzG,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjDwG,UAAU,GAAG,MAAM,IAAI,CAACC,kBAAkB,CAAC/F,SAAS,EAAE;UACpDgG,YAAY,EAAE,YAAY;UAC1BC,UAAU,EAAEjG,SAAS,CAACwD;QACxB,CAAC,CAAC;QACFnE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEwG,UAAU,CAAC;MAC1D,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd7G,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;QAC9E,OAAO,IAAI,CAAC6G,gBAAgB,CAACnG,SAAS,EAAEwF,SAAS,CAAC;MACpD;MAEA,IAAIM,UAAU,IAAIA,UAAU,CAACF,OAAO,EAAE;QACpC,MAAMQ,eAAe,GAAG,IAAI,CAACC,wBAAwB,CAACP,UAAU,EAAEN,SAAS,CAAC;QAC5E;QACA,IAAIY,eAAe,CAAC9E,IAAI,IAAIwC,gBAAgB,CAACT,MAAM,GAAG,CAAC,EAAE;UACvD+C,eAAe,CAAC9E,IAAI,CAAC4C,QAAQ,GAAGJ,gBAAgB;QAClD;QACA,OAAOsC,eAAe;MACxB,CAAC,MAAM;QACL,MAAME,cAAc,GAAG,MAAM,IAAI,CAACH,gBAAgB,CAACnG,SAAS,EAAEwF,SAAS,CAAC;QACxE;QACA,IAAIc,cAAc,CAAChF,IAAI,IAAIwC,gBAAgB,CAACT,MAAM,GAAG,CAAC,EAAE;UACtDiD,cAAc,CAAChF,IAAI,CAAC4C,QAAQ,GAAGJ,gBAAgB;QACjD;QACA,OAAOwC,cAAc;MACvB;IAEF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd7G,OAAO,CAAC6G,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACLN,OAAO,EAAE,KAAK;QACdM,KAAK,EAAEA,KAAK,YAAYlB,KAAK,GAAGkB,KAAK,CAACxB,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,MAAcqB,kBAAkBA,CAACQ,KAAoB,EAAEC,WAAW,GAAG,CAAC,CAAC,EAAgB;IACrF,IAAIC,QAAkB;IAEtB,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACAlH,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEiH,KAAK,CAAC;MAClDE,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtH,aAAa,kBAAkB,EAAE;QACzDuH,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAET,KAAK;UAChBU,OAAO,EAAEH,IAAI,CAACC,SAAS,CAAC;YACtBG,aAAa,EAAE,aAAa;YAC5BC,aAAa,EAAE,SAAS;YACxBC,UAAU,EAAE,KAAK;YACjB,GAAGZ;UACL,CAAC;QACH,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAnH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEiH,KAAK,CAAC/C,IAAI,CAAC;MACtD,MAAM6D,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEhB,KAAK,CAAC;MAC/Bc,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAET,IAAI,CAACC,SAAS,CAAC;QACxCG,aAAa,EAAE,aAAa;QAC5BC,aAAa,EAAE,SAAS;QACxBC,UAAU,EAAE,aAAa;QACzBI,SAAS,EAAEjB,KAAK,CAAC/C,IAAI;QACrBiE,SAAS,EAAElB,KAAK,CAAC7C,IAAI;QACrB,GAAG8C;MACL,CAAC,CAAC,CAAC;MAEHC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtH,aAAa,kBAAkB,EAAE;QACzDuH,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEQ;MACR,CAAC,CAAC;IACJ;IAEA,IAAI,CAACZ,QAAQ,CAACiB,EAAE,EAAE;MAChB,MAAM,IAAI1C,KAAK,CAAC,mBAAmByB,QAAQ,CAACkB,MAAM,EAAE,CAAC;IACvD;IAEA,OAAO,MAAMlB,QAAQ,CAACmB,IAAI,CAAC,CAAC;EAC9B;;EAEA;AACF;AACA;EACE,MAAMC,eAAeA,CAACC,QAAgB,EAAEtB,WAAW,GAAG,CAAC,CAAC,EAAiC;IACvF,IAAI;MACFnH,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAEhE,MAAMwG,UAAU,GAAG,MAAM,IAAI,CAACC,kBAAkB,CAAC+B,QAAQ,EAAE;QACzD,GAAGtB,WAAW;QACduB,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAIjC,UAAU,IAAIA,UAAU,CAACF,OAAO,EAAE;QACpC,OAAO,IAAI,CAACS,wBAAwB,CAACP,UAAU,EAAE;UAC/CtC,IAAI,EAAE,gBAAgB;UACtBE,IAAI,EAAE,SAAS;UACfE,IAAI,EAAE,KAAK;UACXoE,UAAU,EAAE;QACd,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,OAAO,IAAI,CAACC,sBAAsB,CAACH,QAAQ,CAAC;MAC9C;IAEF,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACd7G,OAAO,CAAC6G,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,IAAI,CAAC+B,sBAAsB,CAACH,QAAQ,EAAE5B,KAAK,CAAC;IACrD;EACF;;EAEA;AACF;AACA;EACU+B,sBAAsBA,CAACH,QAAgB,EAAE5B,KAAW,EAAwB;IAClF,OAAO;MACLN,OAAO,EAAE,KAAK;MACdM,KAAK,EAAE,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAExB,OAAO,KAAI,qBAAqB;MAC9CpD,IAAI,EAAE;QACJ4G,WAAW,EAAE,kCAAkC;QAC/CC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE,iBAAiB;QAChCnE,QAAQ,EAAE,EAAE;QACZoE,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACR/C,SAAS,EAAE;UACThC,IAAI,EAAE,gBAAgB;UACtBE,IAAI,EAAE,SAAS;UACfE,IAAI,EAAE,KAAK;UACXoE,UAAU,EAAE;QACd,CAAC;QACDQ,WAAW,EAAE,CAAC;QACdC,SAAS,EAAE,CAAC;QACZC,eAAe,EAAE,2BAA2B;QAC5CC,SAAS,EAAE,KAAK;QAChBC,eAAe,EAAE,CACf,+CAA+C,EAC/C,0CAA0C,CAC3C;QACDC,QAAQ,EAAE,CAAC,kCAAkC,CAAC;QAC9CC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAE,mCAAmC;QAC5CC,WAAW,EAAE,CAAC,2BAA2B;MAC3C;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACU5C,wBAAwBA,CAACP,UAAe,EAAEN,SAAc,EAAwB;IAAA,IAAA0D,qBAAA,EAAAC,qBAAA;IACtF,MAAM;MACJvD,OAAO;MACPwD,kBAAkB;MAClBC,sBAAsB;MACtBC,cAAc;MACdC,oBAAoB;MACpBC,oBAAoB;MACpBC;IACF,CAAC,GAAG3D,UAAU;IAEd,MAAM0C,WAAW,GAAG,CAAAY,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEM,YAAY,KAAI,CAAC;IACzD,MAAMjB,SAAS,GAAG,CAAAW,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEO,UAAU,KAAI,CAAC;IACrD,MAAMX,OAAO,GAAG,CAAAI,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEJ,OAAO,KAAI,oBAAoB;IACnE,MAAMD,SAAS,GAAG,CAAAQ,oBAAoB,aAApBA,oBAAoB,wBAAAL,qBAAA,GAApBK,oBAAoB,CAAEK,eAAe,cAAAV,qBAAA,uBAArCA,qBAAA,CAAuCW,YAAY,KAAI,KAAK;;IAE9E;IACA,MAAM1B,SAAS,GAAG,CAAAmB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEQ,GAAG,CAAEC,IAAS,IAAKA,IAAI,CAACvG,IAAI,IAAIuG,IAAI,CAAC,KAAI,EAAE;;IAE7E;IACA,MAAMnB,eAAe,GAAGY,oBAAoB,IAAI,EAAE;IAClD,MAAMX,QAAQ,GAAG,CAAAY,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEO,mBAAmB,KAAI,EAAE;;IAEzD;IACA,MAAMrB,SAAS,GAAGF,SAAS,IAAI,CAAC,IAAID,WAAW,IAAI,EAAE;IACrD,MAAMM,UAAU,GAAG,CAAAW,aAAa,aAAbA,aAAa,wBAAAN,qBAAA,GAAbM,aAAa,CAAEQ,aAAa,cAAAd,qBAAA,uBAA5BA,qBAAA,CAA8Be,YAAY,KAAI,EAAE;IAEnE,OAAO;MACLtE,OAAO,EAAE,IAAI;MACbtE,IAAI,EAAE;QACJ4G,WAAW,EAAEc,OAAO;QACpBb,SAAS,EAAEA,SAAS;QACpBC,MAAM,EAAE,EAAE;QAAE;QACZC,aAAa,EAAE,iBAAiBG,WAAW,sBAAsBC,SAAS,EAAE;QAC5EvE,QAAQ,EAAE,EAAE;QACZoE,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,CAAAc,sBAAsB,aAAtBA,sBAAsB,uBAAtBA,sBAAsB,CAAEc,aAAa,KAAI,EAAE;QACjD3E,SAAS;QACT;QACAgD,WAAW;QACXC,SAAS;QACTC,eAAe,EAAE,IAAI,CAAC0B,kBAAkB,CAAC3B,SAAS,CAAC;QACnDE,SAAS;QACTC,eAAe;QACfC,QAAQ;QACRC,UAAU;QACVC,SAAS;QACTC,OAAO;QACPC,WAAW,EAAEnD,UAAU,CAACuE,YAAY,IAAI,CAAC,cAAc,EAAE,eAAe;MAC1E;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAclE,gBAAgBA,CAACnG,SAAe,EAAEwF,SAAc,EAAiC;IAC7FnG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,IAAIgL,YAAY,GAAG,EAAE;IAErB,IAAI;MACF,MAAM;QAAEC;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC;MAC7C,MAAMzE,UAAU,GAAG,MAAMyE,OAAO,CAACC,QAAQ,CAACxK,SAAS,CAAC;MAEpD,IAAK,SAAS,IAAI8F,UAAU,IAAIA,UAAU,CAACF,OAAO,IAAK,EAAE,SAAS,IAAIE,UAAU,CAAC,EAAE;QACjF,MAAMpB,OAAO,GAAI,SAAS,IAAIoB,UAAU,GAAIA,UAAU,CAACpB,OAAO,GAC9C,MAAM,IAAIoB,UAAU,IAAIA,UAAU,CAACxE,IAAI,CAACmJ,WAAW,GAAI3E,UAAU,CAACxE,IAAI,CAACmJ,WAAW,CAAChE,QAAQ,GAC5F,IAAI;QACnB,IAAI/B,OAAO,EAAE;UACX4F,YAAY,GAAG5F,OAAO;QACxB;MACF;IACF,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACd7G,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACjD;;IAEA;IACA,MAAMoL,YAAY,GAAG,IAAI,CAACC,kBAAkB,CAACL,YAAY,EAAE9E,SAAS,CAAC;IAErE,OAAO;MACLI,OAAO,EAAE,IAAI;MACbtE,IAAI,EAAE;QACJ4G,WAAW,EAAEoC,YAAY,IAAI,mDAAmD;QAChFnC,SAAS,EAAEuC,YAAY,CAACvC,SAAS;QACjCC,MAAM,EAAEsC,YAAY,CAACtC,MAAM;QAC3BC,aAAa,EAAEqC,YAAY,CAACrC,aAAa;QACzCnE,QAAQ,EAAE,EAAE;QACZoE,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACR/C,SAAS;QACT;QACAgD,WAAW,EAAE,EAAE;QACfC,SAAS,EAAE,CAAC;QACZC,eAAe,EAAE,0BAA0B;QAC3CC,SAAS,EAAE,KAAK;QAChBC,eAAe,EAAE,CAAC,mCAAmC,EAAE,8CAA8C,CAAC;QACtGC,QAAQ,EAAE,CAAC,sCAAsC,CAAC;QAClDC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,QAAQ;QACnBC,OAAO,EAAE,yCAAyC;QAClDC,WAAW,EAAE,CAAC,gBAAgB;MAChC;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACUmB,kBAAkBA,CAAC3B,SAAiB,EAAU;IACpD,MAAMmC,YAAY,GAAG;MACnB,CAAC,EAAE,qCAAqC;MACxC,CAAC,EAAE,2BAA2B;MAC9B,CAAC,EAAE,sCAAsC;MACzC,CAAC,EAAE;IACL,CAAC;IAED,OAAOA,YAAY,CAACnC,SAAS,CAA8B,IAAImC,YAAY,CAAC,CAAC,CAAC;EAChF;;EAEA;AACF;AACA;EACUnF,YAAYA,CAAC7C,IAAU,EAAE;IAC/B,MAAMiI,QAAQ,GAAG,CAACjI,IAAI,CAACc,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,EAAEoH,OAAO,CAAC,CAAC,CAAC;IAEvD,OAAO;MACLtH,IAAI,EAAEZ,IAAI,CAACY,IAAI;MACfE,IAAI,EAAE,GAAGmH,QAAQ,KAAK;MACtBjH,IAAI,EAAEhB,IAAI,CAACgB,IAAI;MACfoE,UAAU,EAAE,cAAc,CAAC;IAC7B,CAAC;EACH;;EAEA;AACF;AACA;EACU2C,kBAAkBA,CAACI,YAAoB,EAAEvF,SAAc,EAAE;IAC/D,MAAM+C,IAAI,GAAGwC,YAAY,CAACC,WAAW,CAAC,CAAC;;IAEvC;IACA,MAAMC,YAAY,GAAG,CACnB,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EACzE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAC7E,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,CACpE;;IAED;IACA,MAAMC,aAAa,GAAG,CACpB,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,EACnE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAC9D;;IAED;IACA,MAAMC,iBAAiB,GAAG,CACxB,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EACjE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,CACnE;IAED,MAAMC,YAAY,GAAGH,YAAY,CAACI,MAAM,CAACC,OAAO,IAAI/C,IAAI,CAACgD,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC3E,MAAME,cAAc,GAAGN,aAAa,CAACG,MAAM,CAACC,OAAO,IAAI/C,IAAI,CAACgD,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC9E,MAAMG,iBAAiB,GAAGN,iBAAiB,CAACE,MAAM,CAACC,OAAO,IAAI/C,IAAI,CAACgD,QAAQ,CAACD,OAAO,CAAC,CAAC;IAErF,OAAO;MACLnD,SAAS,EAAEiD,YAAY;MACvBhD,MAAM,EAAEoD,cAAc;MACtBnD,aAAa,EAAEoD,iBAAiB,CAACpI,MAAM,GAAG,CAAC,GACzC,uCAAuCoI,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,GACrE;IACJ,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAM/F,WAAWA,CAACzC,OAAe,EAAEsD,WAAW,GAAG,CAAC,CAAC,EAAiC;IAClF,IAAI;MACFnH,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAE4D,OAAO,CAAC;MAElE,MAAMuD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtH,aAAa,oBAAoB,EAAE;QACjEuH,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB4E,KAAK,EAAEzI,OAAO;UACd8C,YAAY,EAAE;YACZ4F,aAAa,EAAE,SAAS;YACxBC,WAAW,EAAE,SAAS;YACtB,GAAGrF;UACL;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACiB,EAAE,EAAE;QAChB,MAAM,IAAI1C,KAAK,CAAC,2BAA2ByB,QAAQ,CAACkB,MAAM,EAAE,CAAC;MAC/D;MAEA,MAAM1C,MAAM,GAAG,MAAMwB,QAAQ,CAACmB,IAAI,CAAC,CAAC;MACpC,OAAO,IAAI,CAACkE,0BAA0B,CAAC7G,MAAM,EAAE/B,OAAO,CAAC;IAEzD,CAAC,CAAC,OAAOgD,KAAK,EAAE;MACd7G,OAAO,CAAC6G,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI,CAAC6F,kBAAkB,CAAC7F,KAAK,EAAEhD,OAAO,CAAC;IAChD;EACF;;EAEA;AACF;AACA;EACU4I,0BAA0BA,CAAC7G,MAAW,EAAE/B,OAAe,EAAwB;IAAA,IAAA8I,sBAAA,EAAAC,sBAAA;IACrF,MAAM;MACJrG,OAAO;MACP+D,UAAU;MACVuC,gBAAgB;MAChB3C,oBAAoB;MACpBG,YAAY;MACZD,aAAa;MACbY,YAAY;MACZ8B;IACF,CAAC,GAAGlH,MAAM;IAEV,MAAM0D,SAAS,GAAGgB,UAAU,IAAI,CAAC,IAAID,YAAY,IAAI,EAAE;IACvD,MAAMX,SAAS,GAAG,CAAAQ,oBAAoB,aAApBA,oBAAoB,wBAAAyC,sBAAA,GAApBzC,oBAAoB,CAAEK,eAAe,cAAAoC,sBAAA,uBAArCA,sBAAA,CAAuCnC,YAAY,KAAI,KAAK;IAC9E,MAAMf,UAAU,GAAG,CAAAW,aAAa,aAAbA,aAAa,wBAAAwC,sBAAA,GAAbxC,aAAa,CAAEQ,aAAa,cAAAgC,sBAAA,uBAA5BA,sBAAA,CAA8B/B,YAAY,KAAI,EAAE;IAEnE,OAAO;MACLtE,OAAO,EAAE,IAAI;MACbtE,IAAI,EAAE;QACJ4G,WAAW,EAAEiE,YAAY,IAAI,WAAWjJ,OAAO,EAAE;QACjDiF,SAAS,EAAEgE,YAAY,GAAG,CAACA,YAAY,CAAC,GAAG,EAAE;QAC7C/D,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE,iBAAiBqB,YAAY,sBAAsBC,UAAU,EAAE;QAC9EzF,QAAQ,EAAE,CAAChB,OAAO,CAAC;QACnBoF,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACR/C,SAAS,EAAE;UACThC,IAAI,EAAE,WAAWN,OAAO,EAAE;UAC1BQ,IAAI,EAAE,KAAK;UACXE,IAAI,EAAE,SAAS;UACfoE,UAAU,EAAE;QACd,CAAC;QACD;QACAQ,WAAW,EAAEkB,YAAY;QACzBjB,SAAS,EAAEkB,UAAU;QACrBjB,eAAe,EAAEwD,gBAAgB,IAAI,IAAI,CAAC9B,kBAAkB,CAACT,UAAU,CAAC;QACxEhB,SAAS;QACTC,eAAe,EAAE,CAAAa,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAED,oBAAoB,KAAI,EAAE;QAC1DX,QAAQ,EAAE,CAAAY,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEO,mBAAmB,KAAI,EAAE;QAClDlB,UAAU;QACVC,SAAS;QACTC,OAAO,EAAE,CAAAS,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAET,OAAO,KAAI,IAAI,CAACoD,gBAAgB,CAAC1C,YAAY,EAAEC,UAAU,CAAC;QAClFV,WAAW,EAAEoB,YAAY,IAAI,CAAC,kBAAkB;MAClD;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACU0B,kBAAkBA,CAAC7F,KAAU,EAAEhD,OAAe,EAAwB;IAC5E,OAAO;MACL0C,OAAO,EAAE,KAAK;MACdM,KAAK,EAAEA,KAAK,CAACxB,OAAO,IAAI,qBAAqB;MAC7CpD,IAAI,EAAE;QACJ4G,WAAW,EAAE,2BAA2B;QACxCC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE,iBAAiB;QAChCnE,QAAQ,EAAE,CAAChB,OAAO,CAAC;QACnBoF,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACR/C,SAAS,EAAE;UACThC,IAAI,EAAE,WAAWN,OAAO,EAAE;UAC1BQ,IAAI,EAAE,KAAK;UACXE,IAAI,EAAE,SAAS;UACfoE,UAAU,EAAE;QACd,CAAC;QACDQ,WAAW,EAAE,CAAC;QACdC,SAAS,EAAE,CAAC;QACZC,eAAe,EAAE,2BAA2B;QAC5CC,SAAS,EAAE,KAAK;QAChBC,eAAe,EAAE,CACf,+CAA+C,EAC/C,kCAAkC,CACnC;QACDC,QAAQ,EAAE,CAAC,2BAA2B,CAAC;QACvCC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAE,mCAAmC;QAC5CC,WAAW,EAAE,CAAC,2BAA2B;MAC3C;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACUmD,gBAAgBA,CAAC5D,WAAmB,EAAEC,SAAiB,EAAU;IACvE,IAAIA,SAAS,KAAK,CAAC,IAAID,WAAW,IAAI,EAAE,EAAE,OAAO,yCAAyC;IAC1F,IAAIC,SAAS,IAAI,CAAC,IAAID,WAAW,IAAI,EAAE,EAAE,OAAO,oCAAoC;IACpF,IAAIC,SAAS,KAAK,CAAC,EAAE,OAAO,iCAAiC;IAC7D,IAAIA,SAAS,KAAK,CAAC,EAAE,OAAO,8BAA8B;IAC1D,OAAO,sCAAsC;EAC/C;;EAEA;AACF;AACA;EACE4D,gBAAgBA,CAACpH,MAA4B,EAAU;IACrD,IAAI,CAACA,MAAM,CAACW,OAAO,IAAI,CAACX,MAAM,CAAC3D,IAAI,EAAE;MACnC,OAAO2D,MAAM,CAACiB,KAAK,IAAI,iBAAiB;IAC1C;IAEA,MAAM;MAAE5E;IAAK,CAAC,GAAG2D,MAAM;IACvB,MAAMqH,KAAe,GAAG,EAAE;;IAE1B;IACA,IAAIhL,IAAI,CAAC4C,QAAQ,IAAI5C,IAAI,CAAC4C,QAAQ,CAACb,MAAM,GAAG,CAAC,EAAE;MAC7CiJ,KAAK,CAAC/H,IAAI,CAAC,wBAAwBjD,IAAI,CAAC4C,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;IACxD;;IAEA;IACA,IAAI5C,IAAI,CAAC0H,OAAO,EAAE;MAChBsD,KAAK,CAAC/H,IAAI,CAAC,MAAMjD,IAAI,CAAC0H,OAAO,EAAE,CAAC;IAClC;;IAEA;IACA,IAAI1H,IAAI,CAACkH,WAAW,KAAK+D,SAAS,IAAIjL,IAAI,CAACmH,SAAS,KAAK8D,SAAS,EAAE;MAClED,KAAK,CAAC/H,IAAI,CAAC,oBAAoBjD,IAAI,CAACkH,WAAW,MAAM,CAAC;MACtD8D,KAAK,CAAC/H,IAAI,CAAC,OAAOjD,IAAI,CAACoH,eAAe,EAAE,CAAC;IAC3C;;IAEA;IACA,IAAIpH,IAAI,CAAC6G,SAAS,IAAI7G,IAAI,CAAC6G,SAAS,CAAC9E,MAAM,GAAG,CAAC,EAAE;MAC/CiJ,KAAK,CAAC/H,IAAI,CAAC,gBAAgBjD,IAAI,CAAC6G,SAAS,CAACuD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACzD;;IAEA;IACA,IAAIpK,IAAI,CAACsH,eAAe,IAAItH,IAAI,CAACsH,eAAe,CAACvF,MAAM,GAAG,CAAC,EAAE;MAC3DiJ,KAAK,CAAC/H,IAAI,CAAC,qBAAqB,CAAC;MACjCjD,IAAI,CAACsH,eAAe,CAACxE,OAAO,CAACoI,GAAG,IAAIF,KAAK,CAAC/H,IAAI,CAAC,OAAOiI,GAAG,EAAE,CAAC,CAAC;IAC/D;;IAEA;IACA,IAAIlL,IAAI,CAACuH,QAAQ,IAAIvH,IAAI,CAACuH,QAAQ,CAACxF,MAAM,GAAG,CAAC,EAAE;MAC7CiJ,KAAK,CAAC/H,IAAI,CAAC,cAAc,CAAC;MAC1BjD,IAAI,CAACuH,QAAQ,CAACzE,OAAO,CAACqI,OAAO,IAAIH,KAAK,CAAC/H,IAAI,CAAC,OAAOkI,OAAO,EAAE,CAAC,CAAC;IAChE;;IAEA;IACA,IAAInL,IAAI,CAAC2H,WAAW,IAAI3H,IAAI,CAAC2H,WAAW,CAAC5F,MAAM,GAAG,CAAC,EAAE;MACnDiJ,KAAK,CAAC/H,IAAI,CAAC,iBAAiBjD,IAAI,CAAC2H,WAAW,CAACyC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;IAC7D;;IAEA;IACA,IAAIY,KAAK,CAACjJ,MAAM,KAAK,CAAC,EAAE;MACtB,IAAI/B,IAAI,CAAC4G,WAAW,EAAE;QACpBoE,KAAK,CAAC/H,IAAI,CAACjD,IAAI,CAAC4G,WAAW,CAAC;MAC9B;MACA,IAAI5G,IAAI,CAACkE,SAAS,EAAE;QAClB8G,KAAK,CAAC/H,IAAI,CAAC,MAAMjD,IAAI,CAACkE,SAAS,CAAChC,IAAI,KAAKlC,IAAI,CAACkE,SAAS,CAAC9B,IAAI,GAAG,CAAC;MAClE;IACF;IAEA,OAAO4I,KAAK,CAACjJ,MAAM,GAAG,CAAC,GAAGiJ,KAAK,CAACZ,IAAI,CAAC,MAAM,CAAC,GAAG,uDAAuD;EACxG;;EAEA;AACF;AACA;EACEgB,cAAcA,CAACzH,MAA4B,EAAoD;IAAA,IAAA0H,YAAA;IAC7F,IAAI,CAAC1H,MAAM,CAACW,OAAO,IAAI,GAAA+G,YAAA,GAAC1H,MAAM,CAAC3D,IAAI,cAAAqL,YAAA,eAAXA,YAAA,CAAa5D,SAAS,GAAE;MAC9C,OAAO;QAAE6D,KAAK,EAAE,KAAK;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAY,CAAC;IAC9D;IAEA,MAAMC,QAAQ,GAAG;MACf,OAAO,EAAE;QAAEH,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAgB,CAAC;MACvE,QAAQ,EAAE;QAAEF,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAgB,CAAC;MAC1E,QAAQ,EAAE;QAAEF,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAoB,CAAC;MAC3E,KAAK,EAAE;QAAEF,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAA6B;IAClF,CAAC;IAED,OAAOC,QAAQ,CAAC9H,MAAM,CAAC3D,IAAI,CAACyH,SAAS,CAA0B,IAAIgE,QAAQ,CAACC,GAAG;EACjF;;EAEA;AACF;AACA;EACE,MAAMC,eAAeA,CAAC1G,KAA2B,EAAEU,OAAO,GAAG,CAAC,CAAC,EAAiC;IAC9F,IAAI;MACF;MACA,IAAIV,KAAK,YAAY2G,IAAI,IAAI,EAAE3G,KAAK,YAAY4G,IAAI,CAAC,EAAE;QACrD;QACA,MAAMvK,IAAI,GAAG,IAAIuK,IAAI,CAAC,CAAC5G,KAAK,CAAC,EAAE,oBAAoB,EAAE;UAAE3C,IAAI,EAAE;QAAa,CAAC,CAAC;QAC5E,OAAO,IAAI,CAAC2B,YAAY,CAAC3C,IAAI,CAAC;MAChC,CAAC,MAAM,IAAI,OAAO2D,KAAK,KAAK,QAAQ,EAAE;QACpC;QACA,OAAO,IAAI,CAACsB,eAAe,CAACtB,KAAK,EAAEU,OAAO,CAAC;MAC7C,CAAC,MAAM;QACL;QACA,OAAO,IAAI,CAAC1B,YAAY,CAACgB,KAAK,CAAC;MACjC;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd7G,OAAO,CAAC6G,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,IAAI,CAACkH,kBAAkB,CAAClH,KAAK,CAAC;IACvC;EACF;;EAEA;AACF;AACA;EACUkH,kBAAkBA,CAAClH,KAAU,EAAwB;IAC3D,OAAO;MACLN,OAAO,EAAE,KAAK;MACdM,KAAK,EAAE,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAExB,OAAO,KAAI,iBAAiB;MAC1CpD,IAAI,EAAE;QACJ4G,WAAW,EAAE,uBAAuB;QACpCC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE,0CAA0C;QACzDnE,QAAQ,EAAE,EAAE;QACZoE,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,EAAE;QACR/C,SAAS,EAAE;UACThC,IAAI,EAAE,iBAAiB;UACvBE,IAAI,EAAE,KAAK;UACXE,IAAI,EAAE,OAAO;UACboE,UAAU,EAAE;QACd,CAAC;QACDQ,WAAW,EAAE,CAAC;QACdC,SAAS,EAAE,CAAC;QACZC,eAAe,EAAE,2BAA2B;QAC5CC,SAAS,EAAE,KAAK;QAChBC,eAAe,EAAE,CACf,qDAAqD,EACrD,0CAA0C,EAC1C,yCAAyC,EACzC,0DAA0D,CAC3D;QACDC,QAAQ,EAAE,CAAC,yCAAyC,CAAC;QACrDC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAE,qDAAqD;QAC9DC,WAAW,EAAE,CAAC,sBAAsB;MACtC;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMoE,aAAaA,CAAA,EAAqE;IACtF,IAAI;MACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;;MAE5B;MACA,MAAM/G,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGtH,aAAa,oBAAoB,EAAE;QACjEuH,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB4E,KAAK,EAAE,eAAe;UAAE;UACxB3F,YAAY,EAAE;YAAEyH,IAAI,EAAE;UAAK;QAC7B,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,OAAO,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MAEtC,IAAI7G,QAAQ,CAACiB,EAAE,EAAE;QACf,MAAMzC,MAAM,GAAG,MAAMwB,QAAQ,CAACmB,IAAI,CAAC,CAAC;QACpC,MAAM+F,WAAW,GAAG1I,MAAM,CAAC0E,UAAU,IAAI1E,MAAM,CAACyE,YAAY,KAAK6C,SAAS;QAE1E,OAAO;UACLqB,OAAO,EAAED,WAAW;UACpBjJ,OAAO,EAAEiJ,WAAW,GAAG,+BAA+B,GAAG,gCAAgC;UACzFD;QACF,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACLE,OAAO,EAAE,KAAK;UACdlJ,OAAO,EAAE,gBAAgB+B,QAAQ,CAACkB,MAAM,EAAE;UAC1C+F;QACF,CAAC;MACH;IAEF,CAAC,CAAC,OAAOxH,KAAK,EAAE;MACd,OAAO;QACL0H,OAAO,EAAE,KAAK;QACdlJ,OAAO,EAAE,wBAAwBwB,KAAK,YAAYlB,KAAK,GAAGkB,KAAK,CAACxB,OAAO,GAAG,eAAe;MAC3F,CAAC;IACH;EACF;AACF;AAEA,OAAO,MAAMmJ,qBAAqB,GAAG,IAAIjO,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}