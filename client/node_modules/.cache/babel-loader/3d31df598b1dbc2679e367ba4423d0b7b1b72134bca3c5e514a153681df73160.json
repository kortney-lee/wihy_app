{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const fetchNutritionData = async query => {\n  try {\n    const response = await axios.get(`${API_URL}/nutrition/${encodeURIComponent(query)}`);\n\n    // Type assertion to tell TypeScript what to expect\n    const data = response.data;\n    return {\n      success: true,\n      item: data === null || data === void 0 ? void 0 : data.item,\n      calories_per_serving: data === null || data === void 0 ? void 0 : data.calories_per_serving,\n      macros: data === null || data === void 0 ? void 0 : data.macros,\n      processed_level: data === null || data === void 0 ? void 0 : data.processed_level,\n      verdict: data === null || data === void 0 ? void 0 : data.verdict,\n      snap_eligible: data === null || data === void 0 ? void 0 : data.snap_eligible,\n      message: data === null || data === void 0 ? void 0 : data.message\n    };\n  } catch (error) {\n    console.error('Error fetching nutrition data:', error);\n    return {\n      success: false,\n      message: 'Error fetching nutrition data'\n    };\n  }\n};\nexport const processUploadedFoodImage = async file => {\n  try {\n    const formData = new FormData();\n    formData.append('image', file);\n    const response = await axios.post(`${API_URL}/nutrition/analyze`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    // Type assertion for image analysis response\n    const data = response.data;\n    return {\n      success: true,\n      analysis: data === null || data === void 0 ? void 0 : data.analysis,\n      nutrition: data === null || data === void 0 ? void 0 : data.nutrition,\n      foodName: data === null || data === void 0 ? void 0 : data.foodName,\n      tags: data === null || data === void 0 ? void 0 : data.tags,\n      confidence: data === null || data === void 0 ? void 0 : data.confidence,\n      timestamp: data === null || data === void 0 ? void 0 : data.timestamp\n    };\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    return {\n      success: false,\n      message: 'Error analyzing image'\n    };\n  }\n};\nexport const analyzeFoodImage = async imageData => {\n  try {\n    const response = await fetch(imageData);\n    const blob = await response.blob();\n    const file = new File([blob], 'image.jpg', {\n      type: 'image/jpeg'\n    });\n    return await processUploadedFoodImage(file);\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    return {\n      success: false,\n      message: 'Error analyzing image'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchNutritionData","query","response","get","encodeURIComponent","data","success","item","calories_per_serving","macros","processed_level","verdict","snap_eligible","message","error","console","processUploadedFoodImage","file","formData","FormData","append","post","headers","analysis","nutrition","foodName","tags","confidence","timestamp","analyzeFoodImage","imageData","fetch","blob","File","type"],"sources":["C:/vHealth/vhealth/client/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NutritionResponse {\r\n  success?: boolean;\r\n  item?: string;\r\n  calories_per_serving?: number;\r\n  macros?: {\r\n    protein: string;\r\n    carbs: string;\r\n    fat: string;\r\n  };\r\n  processed_level?: string;\r\n  verdict?: string;\r\n  snap_eligible?: boolean;\r\n  message?: string;\r\n}\r\n\r\nexport const fetchNutritionData = async (query: string): Promise<NutritionResponse> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/nutrition/${encodeURIComponent(query)}`);\r\n    \r\n    // Type assertion to tell TypeScript what to expect\r\n    const data = response.data as any;\r\n    return {\r\n      success: true,\r\n      item: data?.item,\r\n      calories_per_serving: data?.calories_per_serving,\r\n      macros: data?.macros,\r\n      processed_level: data?.processed_level,\r\n      verdict: data?.verdict,\r\n      snap_eligible: data?.snap_eligible,\r\n      message: data?.message\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition data:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Error fetching nutrition data' \r\n    };\r\n  }\r\n};\r\n\r\nexport const processUploadedFoodImage = async (file: File): Promise<any> => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('image', file);\r\n    \r\n    const response = await axios.post(`${API_URL}/nutrition/analyze`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    });\r\n    \r\n    // Type assertion for image analysis response\r\n    const data = response.data as any;\r\n    return {\r\n      success: true,\r\n      analysis: data?.analysis,\r\n      nutrition: data?.nutrition,\r\n      foodName: data?.foodName,\r\n      tags: data?.tags,\r\n      confidence: data?.confidence,\r\n      timestamp: data?.timestamp\r\n    };\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Error analyzing image' \r\n    };\r\n  }\r\n};\r\n\r\nexport const analyzeFoodImage = async (imageData: string): Promise<any> => {\r\n  try {\r\n    const response = await fetch(imageData);\r\n    const blob = await response.blob();\r\n    const file = new File([blob], 'image.jpg', { type: 'image/jpeg' });\r\n    \r\n    return await processUploadedFoodImage(file);\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Error analyzing image' \r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}