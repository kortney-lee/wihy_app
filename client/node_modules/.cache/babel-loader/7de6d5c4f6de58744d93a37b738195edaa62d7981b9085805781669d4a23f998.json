{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const fetchNutritionData = async query => {\n  try {\n    const response = await axios.get(`${API_URL}/nutrition/${encodeURIComponent(query)}`);\n\n    // Type assertion to tell TypeScript what to expect\n    const data = response.data;\n    return {\n      success: true,\n      item: data === null || data === void 0 ? void 0 : data.item,\n      calories_per_serving: data === null || data === void 0 ? void 0 : data.calories_per_serving,\n      macros: data === null || data === void 0 ? void 0 : data.macros,\n      processed_level: data === null || data === void 0 ? void 0 : data.processed_level,\n      verdict: data === null || data === void 0 ? void 0 : data.verdict,\n      snap_eligible: data === null || data === void 0 ? void 0 : data.snap_eligible,\n      message: data === null || data === void 0 ? void 0 : data.message\n    };\n  } catch (error) {\n    console.error('Error fetching nutrition data:', error);\n    return {\n      success: false,\n      message: 'Error fetching nutrition data'\n    };\n  }\n};\nexport const processUploadedFoodImage = async file => {\n  console.log('Sending file:', file.name, 'Size:', file.size); // Add debugging\n\n  const formData = new FormData();\n  formData.append('image', file); // Make sure key is 'image', not something else\n\n  const response = await fetch('http://localhost:5000/api/analyze-image', {\n    method: 'POST',\n    body: formData\n    // Don't set Content-Type header - let browser set it with boundary\n  });\n  console.log('Response status:', response.status); // Add debugging\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('Error response:', errorText);\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\nexport const analyzeFoodImage = async imageData => {\n  try {\n    const response = await fetch(imageData);\n    const blob = await response.blob();\n    const file = new File([blob], 'image.jpg', {\n      type: 'image/jpeg'\n    });\n    return await processUploadedFoodImage(file);\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    return {\n      success: false,\n      message: 'Error analyzing image'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchNutritionData","query","response","get","encodeURIComponent","data","success","item","calories_per_serving","macros","processed_level","verdict","snap_eligible","message","error","console","processUploadedFoodImage","file","log","name","size","formData","FormData","append","fetch","method","body","status","ok","errorText","text","Error","json","analyzeFoodImage","imageData","blob","File","type"],"sources":["C:/vHealth/vhealth/client/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NutritionResponse {\r\n  success?: boolean;\r\n  item?: string;\r\n  calories_per_serving?: number;\r\n  macros?: {\r\n    protein: string;\r\n    carbs: string;\r\n    fat: string;\r\n  };\r\n  processed_level?: string;\r\n  verdict?: string;\r\n  snap_eligible?: boolean;\r\n  message?: string;\r\n}\r\n\r\nexport const fetchNutritionData = async (query: string): Promise<NutritionResponse> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/nutrition/${encodeURIComponent(query)}`);\r\n    \r\n    // Type assertion to tell TypeScript what to expect\r\n    const data = response.data as any;\r\n    return {\r\n      success: true,\r\n      item: data?.item,\r\n      calories_per_serving: data?.calories_per_serving,\r\n      macros: data?.macros,\r\n      processed_level: data?.processed_level,\r\n      verdict: data?.verdict,\r\n      snap_eligible: data?.snap_eligible,\r\n      message: data?.message\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition data:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Error fetching nutrition data' \r\n    };\r\n  }\r\n};\r\n\r\nexport const processUploadedFoodImage = async (file: File): Promise<NutritionResponse> => {\r\n  console.log('Sending file:', file.name, 'Size:', file.size); // Add debugging\r\n  \r\n  const formData = new FormData();\r\n  formData.append('image', file); // Make sure key is 'image', not something else\r\n  \r\n  const response = await fetch('http://localhost:5000/api/analyze-image', {\r\n    method: 'POST',\r\n    body: formData\r\n    // Don't set Content-Type header - let browser set it with boundary\r\n  });\r\n  \r\n  console.log('Response status:', response.status); // Add debugging\r\n  \r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error('Error response:', errorText);\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport const analyzeFoodImage = async (imageData: string): Promise<any> => {\r\n  try {\r\n    const response = await fetch(imageData);\r\n    const blob = await response.blob();\r\n    const file = new File([blob], 'image.jpg', { type: 'image/jpeg' });\r\n    \r\n    return await processUploadedFoodImage(file);\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    return { \r\n      success: false, \r\n      message: 'Error analyzing image' \r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}