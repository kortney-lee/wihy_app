{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// RSS API response types\n\nexport const TRUSTED_DOMAINS = {\n  'nih.gov': 1,\n  'ncbi.nlm.nih.gov': 1,\n  'who.int': 1,\n  'cdc.gov': 1,\n  'fda.gov': 1,\n  'usda.gov': 1,\n  'jamanetwork.com': 1,\n  'nejm.org': 1,\n  'thelancet.com': 1,\n  'bmj.com': 1,\n  'nature.com': 1,\n  'science.org': 1,\n  'mayoclinic.org': 1,\n  'harvard.edu': 1,\n  'stanford.edu': 1,\n  'clevelandclinic.org': 1,\n  'uptodate.com': 1,\n  'cochranelibrary.com': 1,\n  'pubmed.ncbi.nlm.nih.gov': 1,\n  'medlineplus.gov': 1,\n  'livemint.com': 0.8,\n  'npr.org': 0.9,\n  'reuters.com': 0.9,\n  'cnn.com': 0.8,\n  'cbsnews.com': 0.8,\n  'abcnews.com': 0.8,\n  'washingtonpost.com': 0.8,\n  'nytimes.com': 0.8\n};\nexport const NEWS_CATEGORIES = {\n  NUTRITION: 'nutrition',\n  MEDICAL: 'medical',\n  PUBLIC_HEALTH: 'health',\n  CLINICAL: 'clinical',\n  PREVENTION: 'prevention',\n  MENTAL_HEALTH: 'mental',\n  GENERAL: 'general',\n  SCIENCE: 'science',\n  TECH: 'tech',\n  POLITICAL: 'political',\n  SPORTS: 'sports',\n  ENTERTAINMENT: 'entertainment',\n  BUSINESS: 'business',\n  NATURE: 'nature'\n};\n\n// Main function to fetch RSS articles\nexport const fetchNewsFeed = async (categories, limit) => {\n  try {\n    var _data$articles;\n    console.log('🔍 Fetching RSS articles...', {\n      categories,\n      limit\n    });\n    const params = {\n      limit: limit || 100,\n      // Increase default limit to 100\n      flat: true\n    };\n\n    // Map frontend categories to backend categories\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\n      if (mappedCategory) {\n        params.category = mappedCategory;\n      }\n    }\n\n    // Add the parameters that work in your curl example\n    if (!params.category) {\n      params.category = 'health'; // Default to health category\n    }\n    params.country = 'US'; // Add country parameter\n    params.feed_id = 276; // Add feed_id parameter as shown in working curl\n\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\n    const response = await axios.get(`${API_URL}/news/articles`, {\n      params,\n      timeout: 10000\n    });\n    const data = response.data;\n    console.log('✅ RSS API response:', {\n      success: data.success,\n      articleCount: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.length) || 0,\n      count: data.count,\n      filtersApplied: data.filters_applied\n    });\n    if (!data.success) {\n      console.warn('⚠️ RSS API returned success=false, using fallback');\n      return await getFallbackNews();\n    }\n\n    // Convert RSS articles to NewsArticle format\n    const articles = (data.articles || []).filter(article => article.title && article.title.trim() !== '').map((article, index) => {\n      var _article$title, _article$description, _article$id;\n      console.log(`📰 Processing article ${index + 1}:`, {\n        title: ((_article$title = article.title) === null || _article$title === void 0 ? void 0 : _article$title.substring(0, 50)) + '...',\n        description: ((_article$description = article.description) === null || _article$description === void 0 ? void 0 : _article$description.substring(0, 100)) + '...',\n        hasMedia: article.has_media,\n        mediaUrl: article.media_url,\n        thumbUrl: article.media_thumb_url,\n        category: article.category,\n        domain: article.domain\n      });\n\n      // Enhanced image URL extraction\n      const extractValidImageUrl = url => {\n        if (!url) return '';\n        const trimmed = url.trim();\n        if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\n        if (trimmed.startsWith('http') || trimmed.startsWith('//')) return trimmed;\n        return '';\n      };\n      const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\n      const imageUrl = extractValidImageUrl(article.media_url);\n      const hasMedia = article.has_media || !!(thumbnailUrl || imageUrl);\n\n      // Better summary handling\n      const summary = article.description || article.content_encoded || 'Click to read full article';\n      const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\n      return {\n        id: ((_article$id = article.id) === null || _article$id === void 0 ? void 0 : _article$id.toString()) || article.guid || `rss_${Date.now()}_${index}`,\n        title: article.title || 'No title',\n        summary: cleanSummary,\n        url: article.link || '#',\n        source: article.feed_name || 'Unknown Source',\n        domain: article.domain || extractDomain(article.link || ''),\n        category: mapBackendCategory(article.category),\n        publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\n        relevanceScore: calculateRelevanceScore(article.title, article.description),\n        tags: extractTags(article.title, article.description),\n        // RSS enhanced fields\n        thumbnailUrl,\n        imageUrl,\n        mediaType: article.media_type || (hasMedia ? 'image' : ''),\n        mediaDescription: article.media_description || '',\n        author: article.author || '',\n        fullContent: article.content_encoded || '',\n        wordCount: article.word_count || 0,\n        readingTime: article.reading_time || Math.ceil((article.word_count || 0) / 200),\n        // Estimate reading time\n        hasMedia,\n        hasAuthor: article.has_author || !!(article.author && article.author.trim()),\n        contentLength: article.content_length || 0,\n        feedTitle: article.feed_name || '',\n        guid: article.guid || '',\n        commentsUrl: article.comments_url || '',\n        language: article.language || '',\n        rights: article.rights || '',\n        extractedAt: article.extracted_at || '',\n        lastModified: article.last_modified || '',\n        // RSS API specific fields\n        timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\n        isRecent: article.is_recent || false,\n        contentQuality: article.content_quality || 'medium',\n        completeness: article.completeness || 'partial',\n        country: article.country || '',\n        feedName: article.feed_name || '',\n        feedId: article.feed_id || 0\n      };\n    });\n    console.log('📰 Processed RSS articles:', {\n      total: articles.length,\n      withImages: articles.filter(a => a.hasMedia).length,\n      withAuthors: articles.filter(a => a.hasAuthor).length,\n      withSummaries: articles.filter(a => a.summary !== 'Click to read full article').length,\n      categories: [...new Set(articles.map(a => a.category))]\n    });\n\n    // Categorize articles\n    const categorizedArticles = {};\n    articles.forEach(article => {\n      const category = article.category;\n      if (!categorizedArticles[category]) {\n        categorizedArticles[category] = [];\n      }\n      categorizedArticles[category].push(article);\n    });\n    return {\n      success: true,\n      articles: articles,\n      categories: categorizedArticles,\n      lastUpdated: new Date().toISOString(),\n      count: articles.length,\n      filtersApplied: data.filters_applied,\n      message: 'Health news fetched successfully from RSS feeds'\n    };\n  } catch (error) {\n    var _error$response;\n    console.error('❌ Error fetching RSS feed:', error);\n    if (error.code === 'ECONNREFUSED' || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 500) {\n      console.log('📱 RSS service unavailable, using fallback news...');\n    } else {\n      console.log('📱 RSS error, using fallback news...', error.message);\n    }\n    const fallback = await getFallbackNews();\n    return {\n      ...fallback,\n      message: `RSS service error (${error.message}). Showing sample news.`\n    };\n  }\n};\n\n// Get available categories and countries from RSS API\nexport const getRSSFilters = async () => {\n  try {\n    console.log('🏷️ Fetching RSS categories and countries...');\n    const response = await axios.get(`${API_URL}/news/categories-countries`, {\n      timeout: 5000\n    });\n    const data = response.data;\n    console.log('✅ RSS filters response:', data);\n    return {\n      success: data.success,\n      categories: data.categories || [],\n      countries: data.countries || []\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS filters:', error);\n    return {\n      success: false,\n      message: `Failed to fetch filters: ${error.message}`\n    };\n  }\n};\n\n// Trigger RSS polling manually\nexport const triggerRSSPolling = async (force, feedId) => {\n  try {\n    console.log('🔄 Triggering RSS polling...', {\n      force,\n      feedId\n    });\n    const params = {};\n    if (force) params.force = 'true';\n    if (feedId) params.feed_id = feedId.toString();\n    const response = await axios.post(`${API_URL}/news/polling/trigger`, {}, {\n      params,\n      timeout: 30000 // Longer timeout for polling\n    });\n    const data = response.data;\n    console.log('✅ RSS polling response:', data);\n    return {\n      success: data.success,\n      results: data.results,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('❌ Error triggering RSS polling:', error);\n    return {\n      success: false,\n      message: `Failed to trigger polling: ${error.message}`\n    };\n  }\n};\n\n// Map frontend categories to backend RSS categories\nconst mapFrontendToBackendCategory = frontendCategory => {\n  const categoryMap = {\n    'nutrition': 'nutrition',\n    'medical': 'medical',\n    'health': 'health',\n    'clinical': 'medical',\n    'prevention': 'health',\n    'mental': 'mental',\n    'science': 'science',\n    'general': 'health',\n    'tech': 'tech',\n    'business': 'business'\n  };\n  return categoryMap[frontendCategory.toLowerCase()] || 'health'; // Default to 'health' instead of null\n};\n\n// Map backend categories to frontend display categories\nconst mapBackendCategory = backendCategory => {\n  if (!backendCategory) return 'General Health';\n  const categoryMap = {\n    'nutrition': 'Nutrition & Diet',\n    'diet': 'Nutrition & Diet',\n    'medical': 'Medical Research',\n    'health': 'Public Health',\n    'mental': 'Mental Health',\n    'prevention': 'Disease Prevention',\n    'clinical': 'Clinical Studies',\n    'science': 'Medical Research',\n    'tech': 'Medical Technology',\n    'political': 'Health Policy',\n    'sports': 'Fitness & Sports',\n    'entertainment': 'Wellness',\n    'business': 'Health Business',\n    'nature': 'Environmental Health'\n  };\n  const lowerCategory = backendCategory.toLowerCase();\n  for (const [key, value] of Object.entries(categoryMap)) {\n    if (lowerCategory.includes(key)) {\n      return value;\n    }\n  }\n  return 'General Health';\n};\n\n// Enhanced fallback news with RSS structure\nconst getFallbackNews = async () => {\n  const fallbackArticles = [{\n    id: 'fallback_1',\n    title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\n    summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\n    url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\n    source: \"NIH Health News\",\n    domain: \"nih.gov\",\n    category: \"Nutrition & Diet\",\n    publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.95,\n    tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Sarah Johnson\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 150,\n    readingTime: 1,\n    contentLength: 750,\n    timeAgo: \"1 day ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_2',\n    title: \"Exercise and Mental Health: The Connection You Need to Know\",\n    summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\n    url: \"https://www.cdc.gov/mental-health/exercise-connection\",\n    source: \"CDC Health Updates\",\n    domain: \"cdc.gov\",\n    category: \"Mental Health\",\n    publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.90,\n    tags: ['mental-health', 'exercise', 'wellness', 'depression'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Michael Chen\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 180,\n    readingTime: 1,\n    contentLength: 900,\n    timeAgo: \"2 days ago\",\n    isRecent: true,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }, {\n    id: 'fallback_3',\n    title: \"The Importance of Sleep for Immune System Function\",\n    summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\n    url: \"https://www.nih.gov/news-events/sleep-immune-system\",\n    source: \"Sleep Health Research\",\n    domain: \"nih.gov\",\n    category: \"General Health\",\n    publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    relevanceScore: 0.85,\n    tags: ['sleep', 'immune-system', 'health', 'wellness'],\n    thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\n    imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\n    mediaType: \"image\",\n    author: \"Dr. Lisa Rodriguez\",\n    hasMedia: true,\n    hasAuthor: true,\n    wordCount: 200,\n    readingTime: 1,\n    contentLength: 1000,\n    timeAgo: \"3 days ago\",\n    isRecent: false,\n    contentQuality: \"high\",\n    completeness: \"complete\"\n  }];\n\n  // Categorize fallback articles\n  const categorizedArticles = {};\n  fallbackArticles.forEach(article => {\n    if (!categorizedArticles[article.category]) {\n      categorizedArticles[article.category] = [];\n    }\n    categorizedArticles[article.category].push(article);\n  });\n  return {\n    success: true,\n    articles: fallbackArticles,\n    categories: categorizedArticles,\n    lastUpdated: new Date().toISOString(),\n    count: fallbackArticles.length,\n    message: 'Using sample health news (RSS service unavailable)'\n  };\n};\n\n// Updated utility functions\nexport const getArticlesByCategory = async (category, limit) => {\n  try {\n    console.log('📂 Fetching RSS articles for category:', category);\n    return await fetchNewsFeed([category], limit);\n  } catch (error) {\n    console.error('❌ Error fetching articles by category:', error);\n    return {\n      success: false,\n      message: 'Error fetching articles by category'\n    };\n  }\n};\nexport const searchNewsArticles = async (query, category, limit) => {\n  try {\n    console.log('🔎 Searching RSS articles:', {\n      query,\n      category,\n      limit\n    });\n    if (!query.trim()) {\n      return {\n        success: false,\n        message: 'Search query cannot be empty'\n      };\n    }\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available to search'\n      };\n    }\n    const searchTerm = query.toLowerCase();\n    const matchingArticles = feedResponse.articles.filter(article => article.title.toLowerCase().includes(searchTerm) || article.summary.toLowerCase().includes(searchTerm) || article.tags.some(tag => tag.includes(searchTerm)) || article.author && article.author.toLowerCase().includes(searchTerm)).slice(0, limit || 10);\n    return {\n      success: true,\n      articles: matchingArticles,\n      lastUpdated: new Date().toISOString(),\n      count: matchingArticles.length,\n      message: `Search results for \"${query}\"`\n    };\n  } catch (error) {\n    console.error('❌ Error searching articles:', error);\n    return {\n      success: false,\n      message: 'Error searching articles'\n    };\n  }\n};\nexport const refreshNewsFeed = async () => {\n  try {\n    console.log('🔄 Refreshing RSS feed...');\n\n    // Trigger RSS polling\n    const pollingResult = await triggerRSSPolling(true);\n    if (pollingResult.success) {\n      console.log('✅ RSS polling triggered successfully:', pollingResult.results);\n    } else {\n      console.warn('⚠️ RSS polling failed:', pollingResult.message);\n    }\n\n    // Fetch fresh articles\n    return await fetchNewsFeed();\n  } catch (error) {\n    console.error('❌ Error refreshing news feed:', error);\n    return {\n      success: false,\n      message: 'Error refreshing news feed'\n    };\n  }\n};\nexport const getNewsFeedStats = async () => {\n  try {\n    const feedResponse = await fetchNewsFeed();\n    if (!feedResponse.success || !feedResponse.articles) {\n      return {\n        success: false,\n        message: 'No articles available for stats'\n      };\n    }\n    const categoryCounts = {};\n    const sourcesCounts = {};\n    let totalWordCount = 0;\n    let totalReadingTime = 0;\n    let articlesWithImages = 0;\n    let articlesWithAuthors = 0;\n    let trustedSources = 0;\n    feedResponse.articles.forEach(article => {\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\n      if (article.hasMedia) articlesWithImages++;\n      if (article.hasAuthor) articlesWithAuthors++;\n      if (isTrustedDomain(article.url)) trustedSources++;\n      if (article.wordCount) totalWordCount += article.wordCount;\n      if (article.readingTime) totalReadingTime += article.readingTime;\n    });\n    return {\n      success: true,\n      stats: {\n        totalArticles: feedResponse.articles.length,\n        categoryCounts,\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\n        sourcesCounts,\n        articlesWithImages,\n        articlesWithAuthors,\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\n        trustedSources\n      }\n    };\n  } catch (error) {\n    console.error('❌ Error fetching RSS stats:', error);\n    return {\n      success: false,\n      message: 'Error fetching news feed statistics'\n    };\n  }\n};\n\n// Utility functions\nexport const formatArticleForDisplay = article => {\n  return {\n    ...article,\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\n    isTrusted: isTrustedDomain(article.url),\n    relevancePercentage: Math.round(article.relevanceScore * 100),\n    shortSummary: article.summary.length > 150 ? article.summary.substring(0, 150) + '...' : article.summary,\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\n    qualityScore: calculateQualityScore(article),\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read'\n  };\n};\nconst calculateQualityScore = article => {\n  let score = 0;\n  if (article.hasAuthor) score += 0.2;\n  if (article.hasMedia) score += 0.2;\n  if (article.wordCount && article.wordCount > 100) score += 0.2;\n  if (article.contentLength && article.contentLength > 500) score += 0.2;\n  if (isTrustedDomain(article.url)) score += 0.2;\n  return Math.min(score, 1.0);\n};\nconst extractDomain = url => {\n  try {\n    return new URL(url).hostname.toLowerCase();\n  } catch {\n    return 'unknown';\n  }\n};\nconst calculateRelevanceScore = (title = '', description = '') => {\n  const content = `${title} ${description}`.toLowerCase();\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\n  let score = 0.5;\n  score += matchingKeywords.length * 0.08;\n  return Math.min(score, 1.0);\n};\nconst extractTags = (title = '', description = '', existingTags) => {\n  const content = `${title} ${description}`.toLowerCase();\n  const tags = [];\n  if (existingTags) {\n    try {\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n      tags.push(...parsedTags);\n    } catch (e) {\n      // Continue with keyword extraction\n    }\n  }\n  const tagKeywords = ['health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise', 'mental-health', 'wellness', 'prevention', 'treatment', 'research', 'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor', 'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'];\n  tagKeywords.forEach(keyword => {\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\n      tags.push(keyword);\n    }\n  });\n  return tags.slice(0, 5);\n};\nexport const isTrustedDomain = url => {\n  try {\n    const domain = new URL(url).hostname.toLowerCase();\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => domain.includes(trustedDomain.toLowerCase()));\n  } catch {\n    return false;\n  }\n};\nexport const formatTimeAgo = dateString => {\n  try {\n    const now = new Date();\n    const publishedDate = new Date(dateString);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths}mo ago`;\n  } catch {\n    return 'Unknown';\n  }\n};\nexport const getAvailableCategories = async () => {\n  try {\n    const filters = await getRSSFilters();\n    if (filters.success && filters.categories) {\n      // Map RSS categories to display labels\n      const rssCategories = filters.categories.map(cat => ({\n        id: cat,\n        label: mapBackendCategory(cat)\n      }));\n      return [{\n        id: 'all',\n        label: 'All Health News'\n      }, ...rssCategories];\n    }\n  } catch (error) {\n    console.error('❌ Error fetching RSS categories:', error);\n  }\n\n  // Fallback categories\n  return [{\n    id: 'all',\n    label: 'All Health News'\n  }, {\n    id: 'nutrition',\n    label: 'Nutrition & Diet'\n  }, {\n    id: 'medical',\n    label: 'Medical Research'\n  }, {\n    id: 'health',\n    label: 'Public Health'\n  }, {\n    id: 'clinical',\n    label: 'Clinical Studies'\n  }, {\n    id: 'prevention',\n    label: 'Disease Prevention'\n  }, {\n    id: 'mental',\n    label: 'Mental Health'\n  }, {\n    id: 'science',\n    label: 'Science Research'\n  }, {\n    id: 'general',\n    label: 'General Health'\n  }];\n};\n\n// Legacy compatibility\n\nexport class NewsService {\n  async fetchNews() {\n    var _response$articles;\n    const response = await fetchNewsFeed();\n    return ((_response$articles = response.articles) === null || _response$articles === void 0 ? void 0 : _response$articles.map(article => ({\n      title: article.title,\n      link: article.url,\n      description: article.summary,\n      pubDate: article.publishedDate,\n      source: article.source,\n      category: article.category,\n      thumbnailUrl: article.thumbnailUrl,\n      imageUrl: article.imageUrl,\n      author: article.author,\n      hasMedia: article.hasMedia\n    }))) || [];\n  }\n}\nexport const newsService = new NewsService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","TRUSTED_DOMAINS","NEWS_CATEGORIES","NUTRITION","MEDICAL","PUBLIC_HEALTH","CLINICAL","PREVENTION","MENTAL_HEALTH","GENERAL","SCIENCE","TECH","POLITICAL","SPORTS","ENTERTAINMENT","BUSINESS","NATURE","fetchNewsFeed","categories","limit","_data$articles","console","log","params","flat","length","mappedCategory","mapFrontendToBackendCategory","category","country","feed_id","response","get","timeout","data","success","articleCount","articles","count","filtersApplied","filters_applied","warn","getFallbackNews","filter","article","title","trim","map","index","_article$title","_article$description","_article$id","substring","description","hasMedia","has_media","mediaUrl","media_url","thumbUrl","media_thumb_url","domain","extractValidImageUrl","url","trimmed","startsWith","thumbnailUrl","imageUrl","summary","content_encoded","cleanSummary","id","toString","guid","Date","now","link","source","feed_name","extractDomain","mapBackendCategory","publishedDate","published_date","extracted_at","toISOString","relevanceScore","calculateRelevanceScore","tags","extractTags","mediaType","media_type","mediaDescription","media_description","author","fullContent","wordCount","word_count","readingTime","reading_time","Math","ceil","hasAuthor","has_author","contentLength","content_length","feedTitle","commentsUrl","comments_url","language","rights","extractedAt","lastModified","last_modified","timeAgo","time_ago","formatTimeAgo","isRecent","is_recent","contentQuality","content_quality","completeness","feedName","feedId","total","withImages","a","withAuthors","withSummaries","Set","categorizedArticles","forEach","push","lastUpdated","message","error","_error$response","code","status","fallback","getRSSFilters","countries","triggerRSSPolling","force","post","results","frontendCategory","categoryMap","toLowerCase","backendCategory","lowerCategory","key","value","Object","entries","includes","fallbackArticles","getArticlesByCategory","searchNewsArticles","query","feedResponse","undefined","searchTerm","matchingArticles","some","tag","slice","refreshNewsFeed","pollingResult","getNewsFeedStats","categoryCounts","sourcesCounts","totalWordCount","totalReadingTime","articlesWithImages","articlesWithAuthors","trustedSources","isTrustedDomain","stats","totalArticles","averageWordCount","round","averageReadingTime","formatArticleForDisplay","formattedDate","isTrusted","relevancePercentage","shortSummary","displayImage","feedThumbnailUrl","feedImageUrl","hasValidImage","qualityScore","calculateQualityScore","readingTimeText","score","min","URL","hostname","content","healthKeywords","matchingKeywords","keyword","existingTags","parsedTags","split","e","tagKeywords","replace","keys","trustedDomain","dateString","diffInHours","floor","getTime","diffInDays","diffInWeeks","diffInMonths","getAvailableCategories","filters","rssCategories","cat","label","NewsService","fetchNews","_response$articles","pubDate","newsService"],"sources":["C:/vHealth/vhealth/client/src/services/newsService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface NewsArticle {\r\n  id: string;\r\n  title: string;\r\n  summary: string;\r\n  url: string;\r\n  source: string;\r\n  domain: string;\r\n  category: string;\r\n  publishedDate: string;\r\n  relevanceScore: number;\r\n  tags: string[];\r\n  // Enhanced RSS fields\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  mediaType?: string;\r\n  mediaDescription?: string;\r\n  author?: string;\r\n  fullContent?: string;\r\n  wordCount?: number;\r\n  readingTime?: number;\r\n  hasMedia: boolean;\r\n  hasAuthor: boolean;\r\n  contentLength?: number;\r\n  feedTitle?: string;\r\n  feedImageUrl?: string;\r\n  feedThumbnailUrl?: string;\r\n  guid?: string;\r\n  commentsUrl?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  extractedAt?: string;\r\n  lastModified?: string;\r\n  // RSS API enhanced fields\r\n  timeAgo?: string;\r\n  isRecent?: boolean;\r\n  contentQuality?: 'low' | 'medium' | 'high';\r\n  completeness?: 'minimal' | 'partial' | 'complete';\r\n  country?: string;\r\n  feedName?: string;\r\n  feedId?: number;\r\n}\r\n\r\nexport interface NewsFeedResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  articles?: NewsArticle[];\r\n  categories?: Record<string, NewsArticle[]>;\r\n  lastUpdated?: string;\r\n  count?: number;\r\n  filtersApplied?: {\r\n    category?: string | null;\r\n    country?: string | null;\r\n    feed_id?: string | null;\r\n    limit?: number;\r\n  };\r\n}\r\n\r\n// RSS API response types\r\ninterface RSSArticleResponse {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n  published_date: string;\r\n  author?: string;\r\n  category?: string;\r\n  country?: string;\r\n  feed_name: string;\r\n  feed_id: number;\r\n  time_ago: string;\r\n  reading_time: number;\r\n  word_count: number;\r\n  is_recent: boolean;\r\n  content_quality: 'low' | 'medium' | 'high';\r\n  completeness: 'minimal' | 'partial' | 'complete';\r\n  domain: string;\r\n  extracted_at: string;\r\n  // Additional possible fields\r\n  media_thumb_url?: string;\r\n  media_url?: string;\r\n  media_type?: string;\r\n  media_description?: string;\r\n  content_encoded?: string;\r\n  guid?: string;\r\n  comments_url?: string;\r\n  language?: string;\r\n  rights?: string;\r\n  last_modified?: string;\r\n  has_media?: boolean;\r\n  has_author?: boolean;\r\n  content_length?: number;\r\n}\r\n\r\ninterface RSSResponse {\r\n  success: boolean;\r\n  articles: RSSArticleResponse[];\r\n  count: number;\r\n  filters_applied: {\r\n    category: string | null;\r\n    country: string | null;\r\n    feed_id: string | null;\r\n    limit: number;\r\n  };\r\n  message?: string;\r\n}\r\n\r\ninterface RSSHealthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  status: {\r\n    controller_created: boolean;\r\n    database_available: boolean;\r\n    parser_available: boolean;\r\n    polling_available: boolean;\r\n    is_initialized: boolean;\r\n    initialization_error: string | null;\r\n    database_connection?: string;\r\n    timestamp: string;\r\n  };\r\n}\r\n\r\ninterface RSSCategoriesResponse {\r\n  success: boolean;\r\n  categories: string[];\r\n  countries: string[];\r\n}\r\n\r\ninterface RSSPollingResponse {\r\n  success: boolean;\r\n  message: string;\r\n  results: {\r\n    total: number;\r\n    successful: number;\r\n    failed: number;\r\n    articles_fetched: number;\r\n    duration: string;\r\n  };\r\n}\r\n\r\nexport const TRUSTED_DOMAINS: Record<string, number> = {\r\n  'nih.gov': 1,\r\n  'ncbi.nlm.nih.gov': 1,\r\n  'who.int': 1,\r\n  'cdc.gov': 1,\r\n  'fda.gov': 1,\r\n  'usda.gov': 1,\r\n  'jamanetwork.com': 1,\r\n  'nejm.org': 1,\r\n  'thelancet.com': 1,\r\n  'bmj.com': 1,\r\n  'nature.com': 1,\r\n  'science.org': 1,\r\n  'mayoclinic.org': 1,\r\n  'harvard.edu': 1,\r\n  'stanford.edu': 1,\r\n  'clevelandclinic.org': 1,\r\n  'uptodate.com': 1,\r\n  'cochranelibrary.com': 1,\r\n  'pubmed.ncbi.nlm.nih.gov': 1,\r\n  'medlineplus.gov': 1,\r\n  'livemint.com': 0.8,\r\n  'npr.org': 0.9,\r\n  'reuters.com': 0.9,\r\n  'cnn.com': 0.8,\r\n  'cbsnews.com': 0.8,\r\n  'abcnews.com': 0.8,\r\n  'washingtonpost.com': 0.8,\r\n  'nytimes.com': 0.8\r\n};\r\n\r\nexport const NEWS_CATEGORIES = {\r\n  NUTRITION: 'nutrition',\r\n  MEDICAL: 'medical',\r\n  PUBLIC_HEALTH: 'health',\r\n  CLINICAL: 'clinical',\r\n  PREVENTION: 'prevention',\r\n  MENTAL_HEALTH: 'mental',\r\n  GENERAL: 'general',\r\n  SCIENCE: 'science',\r\n  TECH: 'tech',\r\n  POLITICAL: 'political',\r\n  SPORTS: 'sports',\r\n  ENTERTAINMENT: 'entertainment',\r\n  BUSINESS: 'business',\r\n  NATURE: 'nature'\r\n};\r\n\r\n// Main function to fetch RSS articles\r\nexport const fetchNewsFeed = async (categories?: string[], limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔍 Fetching RSS articles...', { categories, limit });\r\n    \r\n    const params: any = {\r\n      limit: limit || 100,  // Increase default limit to 100\r\n      flat: true\r\n    };\r\n    \r\n    // Map frontend categories to backend categories\r\n    if (categories && categories.length > 0 && categories[0] !== 'all') {\r\n      const mappedCategory = mapFrontendToBackendCategory(categories[0]);\r\n      if (mappedCategory) {\r\n        params.category = mappedCategory;\r\n      }\r\n    }\r\n    \r\n    // Add the parameters that work in your curl example\r\n    if (!params.category) {\r\n      params.category = 'health'; // Default to health category\r\n    }\r\n    params.country = 'US';  // Add country parameter\r\n    params.feed_id = 276;   // Add feed_id parameter as shown in working curl\r\n    \r\n    console.log('📡 Making RSS API request:', `${API_URL}/news/articles`, 'with params:', params);\r\n    \r\n    const response = await axios.get<RSSResponse>(`${API_URL}/news/articles`, {\r\n      params,\r\n      timeout: 10000\r\n    });\r\n    \r\n    const data = response.data;\r\n    \r\n    console.log('✅ RSS API response:', {\r\n      success: data.success,\r\n      articleCount: data.articles?.length || 0,\r\n      count: data.count,\r\n      filtersApplied: data.filters_applied\r\n    });\r\n\r\n    if (!data.success) {\r\n      console.warn('⚠️ RSS API returned success=false, using fallback');\r\n      return await getFallbackNews();\r\n    }\r\n\r\n    // Convert RSS articles to NewsArticle format\r\n    const articles: NewsArticle[] = (data.articles || [])\r\n      .filter(article => article.title && article.title.trim() !== '')\r\n      .map((article: RSSArticleResponse, index: number) => {\r\n        \r\n        console.log(`📰 Processing article ${index + 1}:`, {\r\n          title: article.title?.substring(0, 50) + '...',\r\n          description: article.description?.substring(0, 100) + '...',\r\n          hasMedia: article.has_media,\r\n          mediaUrl: article.media_url,\r\n          thumbUrl: article.media_thumb_url,\r\n          category: article.category,\r\n          domain: article.domain\r\n        });\r\n        \r\n        // Enhanced image URL extraction\r\n        const extractValidImageUrl = (url: string | undefined): string => {\r\n          if (!url) return '';\r\n          const trimmed = url.trim();\r\n          if (trimmed === 'null' || trimmed === 'undefined' || trimmed === '') return '';\r\n          if (trimmed.startsWith('http') || trimmed.startsWith('//')) return trimmed;\r\n          return '';\r\n        };\r\n        \r\n        const thumbnailUrl = extractValidImageUrl(article.media_thumb_url);\r\n        const imageUrl = extractValidImageUrl(article.media_url);\r\n        const hasMedia = article.has_media || !!(thumbnailUrl || imageUrl);\r\n        \r\n        // Better summary handling\r\n        const summary = article.description || article.content_encoded || 'Click to read full article';\r\n        const cleanSummary = summary.length > 200 ? summary.substring(0, 200) + '...' : summary;\r\n        \r\n        return {\r\n          id: article.id?.toString() || article.guid || `rss_${Date.now()}_${index}`,\r\n          title: article.title || 'No title',\r\n          summary: cleanSummary,\r\n          url: article.link || '#',\r\n          source: article.feed_name || 'Unknown Source',\r\n          domain: article.domain || extractDomain(article.link || ''),\r\n          category: mapBackendCategory(article.category),\r\n          publishedDate: article.published_date || article.extracted_at || new Date().toISOString(),\r\n          relevanceScore: calculateRelevanceScore(article.title, article.description),\r\n          tags: extractTags(article.title, article.description),\r\n          \r\n          // RSS enhanced fields\r\n          thumbnailUrl,\r\n          imageUrl,\r\n          mediaType: article.media_type || (hasMedia ? 'image' : ''),\r\n          mediaDescription: article.media_description || '',\r\n          author: article.author || '',\r\n          fullContent: article.content_encoded || '',\r\n          wordCount: article.word_count || 0,\r\n          readingTime: article.reading_time || Math.ceil((article.word_count || 0) / 200), // Estimate reading time\r\n          hasMedia,\r\n          hasAuthor: article.has_author || !!(article.author && article.author.trim()),\r\n          contentLength: article.content_length || 0,\r\n          feedTitle: article.feed_name || '',\r\n          guid: article.guid || '',\r\n          commentsUrl: article.comments_url || '',\r\n          language: article.language || '',\r\n          rights: article.rights || '',\r\n          extractedAt: article.extracted_at || '',\r\n          lastModified: article.last_modified || '',\r\n          \r\n          // RSS API specific fields\r\n          timeAgo: article.time_ago || formatTimeAgo(article.published_date || article.extracted_at || ''),\r\n          isRecent: article.is_recent || false,\r\n          contentQuality: article.content_quality || 'medium',\r\n          completeness: article.completeness || 'partial',\r\n          country: article.country || '',\r\n          feedName: article.feed_name || '',\r\n          feedId: article.feed_id || 0\r\n        };\r\n      });\r\n    \r\n    console.log('📰 Processed RSS articles:', {\r\n      total: articles.length,\r\n      withImages: articles.filter(a => a.hasMedia).length,\r\n      withAuthors: articles.filter(a => a.hasAuthor).length,\r\n      withSummaries: articles.filter(a => a.summary !== 'Click to read full article').length,\r\n      categories: [...new Set(articles.map(a => a.category))]\r\n    });\r\n    \r\n    // Categorize articles\r\n    const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n    articles.forEach(article => {\r\n      const category = article.category;\r\n      if (!categorizedArticles[category]) {\r\n        categorizedArticles[category] = [];\r\n      }\r\n      categorizedArticles[category].push(article);\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      articles: articles,\r\n      categories: categorizedArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: articles.length,\r\n      filtersApplied: data.filters_applied,\r\n      message: 'Health news fetched successfully from RSS feeds'\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS feed:', error);\r\n    \r\n    if (error.code === 'ECONNREFUSED' || error.response?.status === 500) {\r\n      console.log('📱 RSS service unavailable, using fallback news...');\r\n    } else {\r\n      console.log('📱 RSS error, using fallback news...', error.message);\r\n    }\r\n    \r\n    const fallback = await getFallbackNews();\r\n    return {\r\n      ...fallback,\r\n      message: `RSS service error (${error.message}). Showing sample news.`\r\n    };\r\n  }\r\n};\r\n\r\n// Get available categories and countries from RSS API\r\nexport const getRSSFilters = async (): Promise<{\r\n  success: boolean;\r\n  categories?: string[];\r\n  countries?: string[];\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🏷️ Fetching RSS categories and countries...');\r\n    \r\n    const response = await axios.get<RSSCategoriesResponse>(`${API_URL}/news/categories-countries`, {\r\n      timeout: 5000\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS filters response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      categories: data.categories || [],\r\n      countries: data.countries || []\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS filters:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to fetch filters: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Trigger RSS polling manually\r\nexport const triggerRSSPolling = async (force?: boolean, feedId?: number): Promise<{\r\n  success: boolean;\r\n  results?: any;\r\n  message?: string;\r\n}> => {\r\n  try {\r\n    console.log('🔄 Triggering RSS polling...', { force, feedId });\r\n    \r\n    const params: any = {};\r\n    if (force) params.force = 'true';\r\n    if (feedId) params.feed_id = feedId.toString();\r\n    \r\n    const response = await axios.post<RSSPollingResponse>(`${API_URL}/news/polling/trigger`, {}, {\r\n      params,\r\n      timeout: 30000 // Longer timeout for polling\r\n    });\r\n    \r\n    const data = response.data;\r\n    console.log('✅ RSS polling response:', data);\r\n    \r\n    return {\r\n      success: data.success,\r\n      results: data.results,\r\n      message: data.message\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error triggering RSS polling:', error);\r\n    return {\r\n      success: false,\r\n      message: `Failed to trigger polling: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Map frontend categories to backend RSS categories\r\nconst mapFrontendToBackendCategory = (frontendCategory: string): string | null => {\r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'nutrition',\r\n    'medical': 'medical',\r\n    'health': 'health',\r\n    'clinical': 'medical',\r\n    'prevention': 'health',\r\n    'mental': 'mental',\r\n    'science': 'science',\r\n    'general': 'health',\r\n    'tech': 'tech',\r\n    'business': 'business'\r\n  };\r\n  \r\n  return categoryMap[frontendCategory.toLowerCase()] || 'health'; // Default to 'health' instead of null\r\n};\r\n\r\n// Map backend categories to frontend display categories\r\nconst mapBackendCategory = (backendCategory: string | undefined): string => {\r\n  if (!backendCategory) return 'General Health';\r\n  \r\n  const categoryMap: Record<string, string> = {\r\n    'nutrition': 'Nutrition & Diet',\r\n    'diet': 'Nutrition & Diet',\r\n    'medical': 'Medical Research',\r\n    'health': 'Public Health',\r\n    'mental': 'Mental Health',\r\n    'prevention': 'Disease Prevention',\r\n    'clinical': 'Clinical Studies',\r\n    'science': 'Medical Research',\r\n    'tech': 'Medical Technology',\r\n    'political': 'Health Policy',\r\n    'sports': 'Fitness & Sports',\r\n    'entertainment': 'Wellness',\r\n    'business': 'Health Business',\r\n    'nature': 'Environmental Health'\r\n  };\r\n  \r\n  const lowerCategory = backendCategory.toLowerCase();\r\n  for (const [key, value] of Object.entries(categoryMap)) {\r\n    if (lowerCategory.includes(key)) {\r\n      return value;\r\n    }\r\n  }\r\n  \r\n  return 'General Health';\r\n};\r\n\r\n// Enhanced fallback news with RSS structure\r\nconst getFallbackNews = async (): Promise<NewsFeedResponse> => {\r\n  const fallbackArticles: NewsArticle[] = [\r\n    {\r\n      id: 'fallback_1',\r\n      title: \"New Study Reveals Benefits of Mediterranean Diet for Heart Health\",\r\n      summary: \"Researchers found that following a Mediterranean diet can reduce cardiovascular disease risk by up to 30%. The study tracked over 7,000 participants for 5 years.\",\r\n      url: \"https://www.nih.gov/news-events/news-releases/mediterranean-diet-heart-health\",\r\n      source: \"NIH Health News\",\r\n      domain: \"nih.gov\",\r\n      category: \"Nutrition & Diet\",\r\n      publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.95,\r\n      tags: ['nutrition', 'heart-health', 'mediterranean-diet', 'cardiovascular'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Sarah Johnson\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 150,\r\n      readingTime: 1,\r\n      contentLength: 750,\r\n      timeAgo: \"1 day ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_2',\r\n      title: \"Exercise and Mental Health: The Connection You Need to Know\",\r\n      summary: \"New research shows that just 30 minutes of exercise daily can significantly improve mental well-being and reduce symptoms of depression and anxiety.\",\r\n      url: \"https://www.cdc.gov/mental-health/exercise-connection\",\r\n      source: \"CDC Health Updates\",\r\n      domain: \"cdc.gov\",\r\n      category: \"Mental Health\",\r\n      publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.90,\r\n      tags: ['mental-health', 'exercise', 'wellness', 'depression'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Michael Chen\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 180,\r\n      readingTime: 1,\r\n      contentLength: 900,\r\n      timeAgo: \"2 days ago\",\r\n      isRecent: true,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    },\r\n    {\r\n      id: 'fallback_3',\r\n      title: \"The Importance of Sleep for Immune System Function\",\r\n      summary: \"Studies demonstrate that quality sleep is crucial for maintaining a strong immune system. Adults need 7-9 hours of sleep per night for optimal health.\",\r\n      url: \"https://www.nih.gov/news-events/sleep-immune-system\",\r\n      source: \"Sleep Health Research\",\r\n      domain: \"nih.gov\",\r\n      category: \"General Health\",\r\n      publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n      relevanceScore: 0.85,\r\n      tags: ['sleep', 'immune-system', 'health', 'wellness'],\r\n      thumbnailUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=400&q=80\",\r\n      imageUrl: \"https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?w=800&q=80\",\r\n      mediaType: \"image\",\r\n      author: \"Dr. Lisa Rodriguez\",\r\n      hasMedia: true,\r\n      hasAuthor: true,\r\n      wordCount: 200,\r\n      readingTime: 1,\r\n      contentLength: 1000,\r\n      timeAgo: \"3 days ago\",\r\n      isRecent: false,\r\n      contentQuality: \"high\",\r\n      completeness: \"complete\"\r\n    }\r\n  ];\r\n\r\n  // Categorize fallback articles\r\n  const categorizedArticles: Record<string, NewsArticle[]> = {};\r\n  fallbackArticles.forEach(article => {\r\n    if (!categorizedArticles[article.category]) {\r\n      categorizedArticles[article.category] = [];\r\n    }\r\n    categorizedArticles[article.category].push(article);\r\n  });\r\n\r\n  return {\r\n    success: true,\r\n    articles: fallbackArticles,\r\n    categories: categorizedArticles,\r\n    lastUpdated: new Date().toISOString(),\r\n    count: fallbackArticles.length,\r\n    message: 'Using sample health news (RSS service unavailable)'\r\n  };\r\n};\r\n\r\n// Updated utility functions\r\nexport const getArticlesByCategory = async (category: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('📂 Fetching RSS articles for category:', category);\r\n    return await fetchNewsFeed([category], limit);\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching articles by category:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching articles by category'\r\n    };\r\n  }\r\n};\r\n\r\nexport const searchNewsArticles = async (query: string, category?: string, limit?: number): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔎 Searching RSS articles:', { query, category, limit });\r\n    \r\n    if (!query.trim()) {\r\n      return {\r\n        success: false,\r\n        message: 'Search query cannot be empty'\r\n      };\r\n    }\r\n    \r\n    const feedResponse = await fetchNewsFeed(category ? [category] : undefined, 100);\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available to search'\r\n      };\r\n    }\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    \r\n    const matchingArticles = feedResponse.articles\r\n      .filter(article => \r\n        article.title.toLowerCase().includes(searchTerm) ||\r\n        article.summary.toLowerCase().includes(searchTerm) ||\r\n        article.tags.some(tag => tag.includes(searchTerm)) ||\r\n        (article.author && article.author.toLowerCase().includes(searchTerm))\r\n      )\r\n      .slice(0, limit || 10);\r\n    \r\n    return {\r\n      success: true,\r\n      articles: matchingArticles,\r\n      lastUpdated: new Date().toISOString(),\r\n      count: matchingArticles.length,\r\n      message: `Search results for \"${query}\"`\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    console.error('❌ Error searching articles:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error searching articles'\r\n    };\r\n  }\r\n};\r\n\r\nexport const refreshNewsFeed = async (): Promise<NewsFeedResponse> => {\r\n  try {\r\n    console.log('🔄 Refreshing RSS feed...');\r\n    \r\n    // Trigger RSS polling\r\n    const pollingResult = await triggerRSSPolling(true);\r\n    if (pollingResult.success) {\r\n      console.log('✅ RSS polling triggered successfully:', pollingResult.results);\r\n    } else {\r\n      console.warn('⚠️ RSS polling failed:', pollingResult.message);\r\n    }\r\n    \r\n    // Fetch fresh articles\r\n    return await fetchNewsFeed();\r\n  } catch (error: any) {\r\n    console.error('❌ Error refreshing news feed:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error refreshing news feed'\r\n    };\r\n  }\r\n};\r\n\r\nexport const getNewsFeedStats = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  stats?: {\r\n    totalArticles: number;\r\n    categoryCounts: Record<string, number>;\r\n    lastUpdated: string;\r\n    sourcesCounts: Record<string, number>;\r\n    articlesWithImages: number;\r\n    articlesWithAuthors: number;\r\n    averageWordCount: number;\r\n    averageReadingTime: number;\r\n    trustedSources: number;\r\n  };\r\n}> => {\r\n  try {\r\n    const feedResponse = await fetchNewsFeed();\r\n    \r\n    if (!feedResponse.success || !feedResponse.articles) {\r\n      return {\r\n        success: false,\r\n        message: 'No articles available for stats'\r\n      };\r\n    }\r\n    \r\n    const categoryCounts: Record<string, number> = {};\r\n    const sourcesCounts: Record<string, number> = {};\r\n    \r\n    let totalWordCount = 0;\r\n    let totalReadingTime = 0;\r\n    let articlesWithImages = 0;\r\n    let articlesWithAuthors = 0;\r\n    let trustedSources = 0;\r\n    \r\n    feedResponse.articles.forEach(article => {\r\n      categoryCounts[article.category] = (categoryCounts[article.category] || 0) + 1;\r\n      sourcesCounts[article.source] = (sourcesCounts[article.source] || 0) + 1;\r\n      \r\n      if (article.hasMedia) articlesWithImages++;\r\n      if (article.hasAuthor) articlesWithAuthors++;\r\n      if (isTrustedDomain(article.url)) trustedSources++;\r\n      if (article.wordCount) totalWordCount += article.wordCount;\r\n      if (article.readingTime) totalReadingTime += article.readingTime;\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalArticles: feedResponse.articles.length,\r\n        categoryCounts,\r\n        lastUpdated: feedResponse.lastUpdated || new Date().toISOString(),\r\n        sourcesCounts,\r\n        articlesWithImages,\r\n        articlesWithAuthors,\r\n        averageWordCount: Math.round(totalWordCount / feedResponse.articles.length) || 0,\r\n        averageReadingTime: Math.round(totalReadingTime / feedResponse.articles.length) || 0,\r\n        trustedSources\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    console.error('❌ Error fetching RSS stats:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Error fetching news feed statistics'\r\n    };\r\n  }\r\n};\r\n\r\n// Utility functions\r\nexport const formatArticleForDisplay = (article: NewsArticle) => {\r\n  return {\r\n    ...article,\r\n    formattedDate: article.timeAgo || formatTimeAgo(article.publishedDate),\r\n    isTrusted: isTrustedDomain(article.url),\r\n    relevancePercentage: Math.round(article.relevanceScore * 100),\r\n    shortSummary: article.summary.length > 150 \r\n      ? article.summary.substring(0, 150) + '...'\r\n      : article.summary,\r\n    displayImage: article.thumbnailUrl || article.imageUrl || article.feedThumbnailUrl || article.feedImageUrl || '',\r\n    hasValidImage: !!(article.thumbnailUrl || article.imageUrl),\r\n    qualityScore: calculateQualityScore(article),\r\n    readingTimeText: article.readingTime ? `${article.readingTime} min read` : 'Quick read'\r\n  };\r\n};\r\n\r\nconst calculateQualityScore = (article: NewsArticle): number => {\r\n  let score = 0;\r\n  \r\n  if (article.hasAuthor) score += 0.2;\r\n  if (article.hasMedia) score += 0.2;\r\n  if (article.wordCount && article.wordCount > 100) score += 0.2;\r\n  if (article.contentLength && article.contentLength > 500) score += 0.2;\r\n  if (isTrustedDomain(article.url)) score += 0.2;\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst extractDomain = (url: string): string => {\r\n  try {\r\n    return new URL(url).hostname.toLowerCase();\r\n  } catch {\r\n    return 'unknown';\r\n  }\r\n};\r\n\r\nconst calculateRelevanceScore = (title: string = '', description: string = ''): number => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  \r\n  const healthKeywords = ['health', 'medical', 'wellness', 'fitness', 'nutrition', 'diet', 'exercise', 'mental health', 'disease', 'treatment', 'research', 'study'];\r\n  const matchingKeywords = healthKeywords.filter(keyword => content.includes(keyword));\r\n  \r\n  let score = 0.5;\r\n  score += (matchingKeywords.length * 0.08);\r\n  \r\n  return Math.min(score, 1.0);\r\n};\r\n\r\nconst extractTags = (title: string = '', description: string = '', existingTags?: string): string[] => {\r\n  const content = `${title} ${description}`.toLowerCase();\r\n  const tags: string[] = [];\r\n  \r\n  if (existingTags) {\r\n    try {\r\n      const parsedTags = existingTags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\r\n      tags.push(...parsedTags);\r\n    } catch (e) {\r\n      // Continue with keyword extraction\r\n    }\r\n  }\r\n  \r\n  const tagKeywords = [\r\n    'health', 'medical', 'nutrition', 'diet', 'fitness', 'exercise',\r\n    'mental-health', 'wellness', 'prevention', 'treatment', 'research',\r\n    'study', 'clinical', 'vaccine', 'medicine', 'hospital', 'doctor',\r\n    'heart', 'cancer', 'diabetes', 'sleep', 'immune', 'therapy'\r\n  ];\r\n  \r\n  tagKeywords.forEach(keyword => {\r\n    if (content.includes(keyword.replace('-', ' ')) && !tags.includes(keyword)) {\r\n      tags.push(keyword);\r\n    }\r\n  });\r\n  \r\n  return tags.slice(0, 5);\r\n};\r\n\r\nexport const isTrustedDomain = (url: string): boolean => {\r\n  try {\r\n    const domain = new URL(url).hostname.toLowerCase();\r\n    return Object.keys(TRUSTED_DOMAINS).some(trustedDomain => \r\n      domain.includes(trustedDomain.toLowerCase())\r\n    );\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const formatTimeAgo = (dateString: string): string => {\r\n  try {\r\n    const now = new Date();\r\n    const publishedDate = new Date(dateString);\r\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    const diffInWeeks = Math.floor(diffInDays / 7);\r\n    if (diffInWeeks < 4) return `${diffInWeeks}w ago`;\r\n    \r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    return `${diffInMonths}mo ago`;\r\n  } catch {\r\n    return 'Unknown';\r\n  }\r\n};\r\n\r\nexport const getAvailableCategories = async (): Promise<Array<{id: string, label: string}>> => {\r\n  try {\r\n    const filters = await getRSSFilters();\r\n    \r\n    if (filters.success && filters.categories) {\r\n      // Map RSS categories to display labels\r\n      const rssCategories = filters.categories.map(cat => ({\r\n        id: cat,\r\n        label: mapBackendCategory(cat)\r\n      }));\r\n      \r\n      return [\r\n        { id: 'all', label: 'All Health News' },\r\n        ...rssCategories\r\n      ];\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error fetching RSS categories:', error);\r\n  }\r\n  \r\n  // Fallback categories\r\n  return [\r\n    { id: 'all', label: 'All Health News' },\r\n    { id: 'nutrition', label: 'Nutrition & Diet' },\r\n    { id: 'medical', label: 'Medical Research' },\r\n    { id: 'health', label: 'Public Health' },\r\n    { id: 'clinical', label: 'Clinical Studies' },\r\n    { id: 'prevention', label: 'Disease Prevention' },\r\n    { id: 'mental', label: 'Mental Health' },\r\n    { id: 'science', label: 'Science Research' },\r\n    { id: 'general', label: 'General Health' }\r\n  ];\r\n};\r\n\r\n// Legacy compatibility\r\nexport interface NewsItem {\r\n  title: string;\r\n  link: string;\r\n  description: string;\r\n  pubDate: string;\r\n  source: string;\r\n  category: string;\r\n  thumbnailUrl?: string;\r\n  imageUrl?: string;\r\n  author?: string;\r\n  hasMedia?: boolean;\r\n}\r\n\r\nexport class NewsService {\r\n  async fetchNews(): Promise<NewsItem[]> {\r\n    const response = await fetchNewsFeed();\r\n    \r\n    return response.articles?.map(article => ({\r\n      title: article.title,\r\n      link: article.url,\r\n      description: article.summary,\r\n      pubDate: article.publishedDate,\r\n      source: article.source,\r\n      category: article.category,\r\n      thumbnailUrl: article.thumbnailUrl,\r\n      imageUrl: article.imageUrl,\r\n      author: article.author,\r\n      hasMedia: article.hasMedia\r\n    })) || [];\r\n  }\r\n}\r\n\r\nexport const newsService = new NewsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}