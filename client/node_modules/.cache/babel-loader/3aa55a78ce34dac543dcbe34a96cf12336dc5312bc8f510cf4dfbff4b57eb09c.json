{"ast":null,"code":"import React from'react';import{Chart as ChartJS,ArcElement,Tooltip,Legend}from'chart.js';import{Doughnut}from'react-chartjs-2';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(ArcElement,Tooltip,Legend);// Extract nutrition data from unified API response only\nconst extractNutritionData=apiResponse=>{console.log('=== EXTRACTING NUTRITION DATA FROM NEW API ===');console.log('API Response:',apiResponse);// Handle unified API response\nif(apiResponse&&apiResponse.success&&apiResponse.data){var _apiResponse$data$cha;console.log('Processing unified API nutrition data');// Use charts_data if available for direct rendering\nif((_apiResponse$data$cha=apiResponse.data.charts_data)!==null&&_apiResponse$data$cha!==void 0&&_apiResponse$data$cha.nutrition_breakdown){const chartData=apiResponse.data.charts_data.nutrition_breakdown;console.log('Using charts_data for nutrition breakdown:',chartData);return{type:'chart_data',labels:chartData.labels,values:chartData.values,colors:chartData.colors,chart_type:chartData.chart_type};}// Use nutrition_data from the API response\nif(apiResponse.data.nutrition_data){const nutrition=apiResponse.data.nutrition_data;const extractedData={type:'nutrition_facts',calories:nutrition.estimated_calories||0,protein:nutrition.protein||0,carbs:nutrition.carbohydrates||0,fat:nutrition.fat||0,fiber:nutrition.fiber||0,sugar:nutrition.sugar||0,sodium:nutrition.sodium||0,nourish_score:nutrition.nourish_score||0,nourish_category:nutrition.nourish_category||'Unknown',macronutrients:nutrition.macronutrients||null};console.log('=== EXTRACTED NUTRITION DATA FROM NEW API ===');console.log('Final extracted data:',extractedData);return extractedData;}}console.log('No nutrition data available in API response');return null;};const NutritionChart=_ref=>{let{apiResponse,query}=_ref;// Extract nutrition data using new unified approach\nconst nutritionData=extractNutritionData(apiResponse);// Only render if we have nutrition data\nif(!nutritionData){return null;}// Handle chart_data type (direct from API charts_data)\nif(nutritionData.type==='chart_data'){const chartData=nutritionData;const data={datasets:[{data:chartData.values,backgroundColor:chartData.colors,borderColor:chartData.colors.map(color=>color),borderWidth:2}],labels:chartData.labels};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'bottom',labels:{padding:20,font:{size:14}}},tooltip:{callbacks:{label:function(context){const label=context.label||'';const value=context.parsed;return\"\".concat(label,\": \").concat(value,\"%\");}}}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"nutrition-chart-container\",children:[/*#__PURE__*/_jsx(\"h4\",{style:{marginBottom:'15px',color:'#666'},children:\"Nutrition Breakdown\"}),/*#__PURE__*/_jsx(\"div\",{style:{width:'300px',height:'300px',margin:'0 auto'},children:/*#__PURE__*/_jsx(Doughnut,{data:data,options:options})})]});}// Handle nutrition_facts type (calculated from nutrition.facts)\nconst nutritionFacts=nutritionData;let protein,carbs,fat,total;if(nutritionFacts.macronutrients){// Use pre-calculated macronutrients percentages\nprotein=nutritionFacts.macronutrients.protein;carbs=nutritionFacts.macronutrients.carbs;fat=nutritionFacts.macronutrients.fat;total=protein+carbs+fat;}else{// Calculate percentages from gram values\ntotal=nutritionFacts.protein+nutritionFacts.carbs+nutritionFacts.fat;if(total>0){protein=Math.round(nutritionFacts.protein/total*100);carbs=Math.round(nutritionFacts.carbs/total*100);fat=Math.round(nutritionFacts.fat/total*100);}else{protein=carbs=fat=0;}}const{calories}=nutritionFacts;// Prepare data for the pie chart\nconst data={datasets:[{data:[protein,carbs,fat],backgroundColor:['#10B981',// Green for protein\n'#F59E0B',// Yellow for carbs  \n'#EF4444'// Red for fat\n],borderWidth:0,cutout:'60%'}]};const options={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false},tooltip:{callbacks:{label:function(context){const labels=['Protein','Carbs','Fat'];const label=labels[context.dataIndex];const value=context.parsed;const percentage=total>0?Math.round(value/total*100):0;return\"\".concat(label,\": \").concat(value,\"g (\").concat(percentage,\"%)\");}}}}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',height:'200px',width:'200px',margin:'0 auto'},children:[/*#__PURE__*/_jsx(Doughnut,{data:data,options:options}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'1.5rem',fontWeight:'bold',color:'#374151'},children:calories}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.75rem',color:'#6B7280'},children:\"Calories\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',marginBottom:'0.5rem'},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'1.2rem',marginRight:'0.5rem'},children:\"\\u26A1\"}),/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:'500',color:'#374151',fontSize:'1rem'},children:\"Good\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',gap:'1rem',fontSize:'0.875rem'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#10B981',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Protein: \",total>0?Math.round(protein/total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#F59E0B',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Carbs: \",total>0?Math.round(carbs/total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.25rem'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'12px',height:'12px',backgroundColor:'#EF4444',borderRadius:'2px'}}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Fat: \",total>0?Math.round(fat/total*100):0,\"%\"]})]})]})]})]});};export default NutritionChart;","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","jsx","_jsx","jsxs","_jsxs","register","extractNutritionData","apiResponse","console","log","success","data","_apiResponse$data$cha","charts_data","nutrition_breakdown","chartData","type","labels","values","colors","chart_type","nutrition_data","nutrition","extractedData","calories","estimated_calories","protein","carbs","carbohydrates","fat","fiber","sugar","sodium","nourish_score","nourish_category","macronutrients","NutritionChart","_ref","query","nutritionData","datasets","backgroundColor","borderColor","map","color","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","padding","font","size","tooltip","callbacks","label","context","value","parsed","concat","className","children","style","marginBottom","width","height","margin","nutritionFacts","total","Math","round","cutout","display","dataIndex","percentage","textAlign","top","left","transform","fontSize","fontWeight","marginTop","alignItems","justifyContent","marginRight","gap","borderRadius"],"sources":["C:/repo/wihy_ui/client/src/components/charts/NutritionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { UnifiedResponse } from '../../services/wihyAPI';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface NutritionChartProps {\r\n  apiResponse?: UnifiedResponse | any;\r\n  query?: string;\r\n}\r\n\r\n// Extract nutrition data from unified API response only\r\nconst extractNutritionData = (apiResponse?: UnifiedResponse | any) => {\r\n  console.log('=== EXTRACTING NUTRITION DATA FROM NEW API ===');\r\n  console.log('API Response:', apiResponse);\r\n  \r\n  // Handle unified API response\r\n  if (apiResponse && apiResponse.success && apiResponse.data) {\r\n    console.log('Processing unified API nutrition data');\r\n    \r\n    // Use charts_data if available for direct rendering\r\n    if (apiResponse.data.charts_data?.nutrition_breakdown) {\r\n      const chartData = apiResponse.data.charts_data.nutrition_breakdown;\r\n      console.log('Using charts_data for nutrition breakdown:', chartData);\r\n      return {\r\n        type: 'chart_data',\r\n        labels: chartData.labels,\r\n        values: chartData.values,\r\n        colors: chartData.colors,\r\n        chart_type: chartData.chart_type\r\n      };\r\n    }\r\n    \r\n    // Use nutrition_data from the API response\r\n    if (apiResponse.data.nutrition_data) {\r\n      const nutrition = apiResponse.data.nutrition_data;\r\n      const extractedData = {\r\n        type: 'nutrition_facts',\r\n        calories: nutrition.estimated_calories || 0,\r\n        protein: nutrition.protein || 0,\r\n        carbs: nutrition.carbohydrates || 0,\r\n        fat: nutrition.fat || 0,\r\n        fiber: nutrition.fiber || 0,\r\n        sugar: nutrition.sugar || 0,\r\n        sodium: nutrition.sodium || 0,\r\n        nourish_score: nutrition.nourish_score || 0,\r\n        nourish_category: nutrition.nourish_category || 'Unknown',\r\n        macronutrients: nutrition.macronutrients || null\r\n      };\r\n      \r\n      console.log('=== EXTRACTED NUTRITION DATA FROM NEW API ===');\r\n      console.log('Final extracted data:', extractedData);\r\n      return extractedData;\r\n    }\r\n  }\r\n  \r\n  console.log('No nutrition data available in API response');\r\n  return null;\r\n};\r\n\r\nconst NutritionChart: React.FC<NutritionChartProps> = ({ apiResponse, query }) => {\r\n  // Extract nutrition data using new unified approach\r\n  const nutritionData = extractNutritionData(apiResponse);\r\n\r\n  // Only render if we have nutrition data\r\n  if (!nutritionData) {\r\n    return null;\r\n  }\r\n\r\n  // Handle chart_data type (direct from API charts_data)\r\n  if ((nutritionData as any).type === 'chart_data') {\r\n    const chartData = nutritionData as any;\r\n    const data = {\r\n      datasets: [\r\n        {\r\n          data: chartData.values,\r\n          backgroundColor: chartData.colors,\r\n          borderColor: chartData.colors.map((color: string) => color),\r\n          borderWidth: 2,\r\n        },\r\n      ],\r\n      labels: chartData.labels,\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'bottom' as const,\r\n          labels: {\r\n            padding: 20,\r\n            font: {\r\n              size: 14,\r\n            },\r\n          },\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: function(context: any) {\r\n              const label = context.label || '';\r\n              const value = context.parsed;\r\n              return `${label}: ${value}%`;\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className=\"nutrition-chart-container\">\r\n        <h4 style={{ marginBottom: '15px', color: '#666' }}>Nutrition Breakdown</h4>\r\n        <div style={{ width: '300px', height: '300px', margin: '0 auto' }}>\r\n          <Doughnut data={data} options={options} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle nutrition_facts type (calculated from nutrition.facts)\r\n  const nutritionFacts = nutritionData as any;\r\n  let protein, carbs, fat, total;\r\n  \r\n  if (nutritionFacts.macronutrients) {\r\n    // Use pre-calculated macronutrients percentages\r\n    protein = nutritionFacts.macronutrients.protein;\r\n    carbs = nutritionFacts.macronutrients.carbs;\r\n    fat = nutritionFacts.macronutrients.fat;\r\n    total = protein + carbs + fat;\r\n  } else {\r\n    // Calculate percentages from gram values\r\n    total = nutritionFacts.protein + nutritionFacts.carbs + nutritionFacts.fat;\r\n    if (total > 0) {\r\n      protein = Math.round((nutritionFacts.protein / total) * 100);\r\n      carbs = Math.round((nutritionFacts.carbs / total) * 100);\r\n      fat = Math.round((nutritionFacts.fat / total) * 100);\r\n    } else {\r\n      protein = carbs = fat = 0;\r\n    }\r\n  }\r\n\r\n  const { calories } = nutritionFacts;\r\n  \r\n  // Prepare data for the pie chart\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: [protein, carbs, fat],\r\n        backgroundColor: [\r\n          '#10B981', // Green for protein\r\n          '#F59E0B', // Yellow for carbs  \r\n          '#EF4444', // Red for fat\r\n        ],\r\n        borderWidth: 0,\r\n        cutout: '60%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const labels = ['Protein', 'Carbs', 'Fat'];\r\n            const label = labels[context.dataIndex];\r\n            const value = context.parsed;\r\n            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\r\n            return `${label}: ${value}g (${percentage}%)`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ position: 'relative', height: '200px', width: '200px', margin: '0 auto' }}>\r\n        <Doughnut data={data} options={options} />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#374151' }}>\r\n            {calories}\r\n          </div>\r\n          <div style={{ fontSize: '0.75rem', color: '#6B7280' }}>\r\n            Calories\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div style={{ marginTop: '1rem' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          marginBottom: '0.5rem' \r\n        }}>\r\n          <span style={{ \r\n            fontSize: '1.2rem', \r\n            marginRight: '0.5rem' \r\n          }}>\r\n            ⚡\r\n          </span>\r\n          <span style={{ \r\n            fontWeight: '500', \r\n            color: '#374151',\r\n            fontSize: '1rem'\r\n          }}>\r\n            Good\r\n          </span>\r\n        </div>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          gap: '1rem',\r\n          fontSize: '0.875rem'\r\n        }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#10B981',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Protein: {total > 0 ? Math.round((protein / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#F59E0B',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Carbs: {total > 0 ? Math.round((carbs / total) * 100) : 0}%</span>\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n            <div\r\n              style={{\r\n                width: '12px',\r\n                height: '12px',\r\n                backgroundColor: '#EF4444',\r\n                borderRadius: '2px',\r\n              }}\r\n            />\r\n            <span>Fat: {total > 0 ? Math.round((fat / total) * 100) : 0}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NutritionChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}