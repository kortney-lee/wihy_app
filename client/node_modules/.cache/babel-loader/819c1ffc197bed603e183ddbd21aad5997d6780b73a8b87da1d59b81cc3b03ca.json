{"ast":null,"code":"// src/services/visionAnalysisService.ts\nclass VisionAnalysisService{/**\r\n   * Analyze image using browser-native APIs and backend services\r\n   */async analyzeImage(imageFile){try{console.log('🔍 Starting comprehensive image analysis...');// Get basic image information\nconst imageInfo=this.getImageInfo(imageFile);console.log('📊 Image info:',imageInfo);// Use existing WiHy API for comprehensive food analysis\nlet wihyAnalysis='';let nutritionInfo='';try{var _wihyResult$data,_wihyResult$data$ai_r;console.log('🍎 Attempting WiHy API analysis...');const{wihyAPI}=await import('./wihyAPI');const wihyResult=await wihyAPI.scanFood(imageFile);if(wihyResult.success&&'data'in wihyResult&&(_wihyResult$data=wihyResult.data)!==null&&_wihyResult$data!==void 0&&(_wihyResult$data$ai_r=_wihyResult$data.ai_response)!==null&&_wihyResult$data$ai_r!==void 0&&_wihyResult$data$ai_r.response){wihyAnalysis=wihyResult.data.ai_response.response;console.log('✅ WiHy analysis successful');}}catch(error){console.log('ℹ️ WiHy API analysis not available');}// Extract potential nutrition and food information\nconst foodAnalysis=this.analyzeFoodContent(wihyAnalysis,imageInfo);const result={success:true,data:{description:wihyAnalysis||'Image uploaded for analysis',foodItems:foodAnalysis.foodItems,brands:foodAnalysis.brands,nutritionText:foodAnalysis.nutritionText,barcodes:[],// Future: could integrate barcode detection\nqrCodes:[],// Future: could integrate QR code detection\ntext:'',// Future: could integrate OCR\nimageInfo}};console.log('✅ Analysis complete:',result);return result;}catch(error){console.error('❌ Vision analysis error:',error);return{success:false,error:error instanceof Error?error.message:'Analysis failed'};}}/**\r\n   * Get basic image file information\r\n   */getImageInfo(file){const sizeInMB=(file.size/(1024*1024)).toFixed(2);return{name:file.name,size:\"\".concat(sizeInMB,\" MB\"),type:file.type,dimensions:'Analyzing...'// Could load image to get actual dimensions\n};}/**\r\n   * Analyze food-related content from text and AI response\r\n   */analyzeFoodContent(analysisText,imageInfo){const text=analysisText.toLowerCase();// Common food keywords\nconst foodKeywords=['apple','banana','orange','bread','milk','cheese','chicken','beef','rice','pasta','salad','sandwich','pizza','burger','fruit','vegetable','cereal','yogurt','soup','snack','cookie','chocolate','candy'];// Common brand keywords\nconst brandKeywords=['coca cola','pepsi','nestlé','kraft','kellogs','general mills','unilever','procter','johnson','mars','ferrero','danone'];// Nutrition-related keywords\nconst nutritionKeywords=['calories','protein','carbs','fat','sugar','sodium','fiber','vitamin','mineral','organic','natural','healthy','nutrition'];const detectedFood=foodKeywords.filter(keyword=>text.includes(keyword));const detectedBrands=brandKeywords.filter(keyword=>text.includes(keyword));const nutritionMentions=nutritionKeywords.filter(keyword=>text.includes(keyword));return{foodItems:detectedFood,brands:detectedBrands,nutritionText:nutritionMentions.length>0?\"Nutrition-related content detected: \".concat(nutritionMentions.join(', ')):''};}/**\r\n   * Format analysis results for display\r\n   */formatForDisplay(result){if(!result.success||!result.data){return result.error||'Image analysis failed';}const{data}=result;const parts=[];// Primary description from AI analysis\nif(data.description){parts.push(data.description);}// Add detected food items\nif(data.foodItems&&data.foodItems.length>0){parts.push(\"Detected foods: \".concat(data.foodItems.join(', ')));}// Add brands if detected\nif(data.brands&&data.brands.length>0){parts.push(\"Brands: \".concat(data.brands.join(', ')));}// Add nutrition info\nif(data.nutritionText){parts.push(data.nutritionText);}// Add basic image info\nif(data.imageInfo){parts.push(\"Image: \".concat(data.imageInfo.name,\" (\").concat(data.imageInfo.size,\")\"));}return parts.length>0?parts.join('\\n\\n'):'Image analyzed - ready for health insights';}}export const visionAnalysisService=new VisionAnalysisService();","map":{"version":3,"names":["VisionAnalysisService","analyzeImage","imageFile","console","log","imageInfo","getImageInfo","wihyAnalysis","nutritionInfo","_wihyResult$data","_wihyResult$data$ai_r","wihyAPI","wihyResult","scanFood","success","data","ai_response","response","error","foodAnalysis","analyzeFoodContent","result","description","foodItems","brands","nutritionText","barcodes","qrCodes","text","Error","message","file","sizeInMB","size","toFixed","name","concat","type","dimensions","analysisText","toLowerCase","foodKeywords","brandKeywords","nutritionKeywords","detectedFood","filter","keyword","includes","detectedBrands","nutritionMentions","length","join","formatForDisplay","parts","push","visionAnalysisService"],"sources":["C:/repo/wihy_ui/client/src/services/visionAnalysisService.ts"],"sourcesContent":["// src/services/visionAnalysisService.ts\r\n\r\ninterface VisionAnalysisResult {\r\n  success: boolean;\r\n  data?: {\r\n    barcodes?: string[];\r\n    qrCodes?: string[];\r\n    text?: string;\r\n    nutritionText?: string;\r\n    description?: string;\r\n    foodItems?: string[];\r\n    brands?: string[];\r\n    imageInfo?: {\r\n      name: string;\r\n      size: string;\r\n      type: string;\r\n      dimensions: string;\r\n    };\r\n  };\r\n  error?: string;\r\n}\r\n\r\nclass VisionAnalysisService {\r\n  /**\r\n   * Analyze image using browser-native APIs and backend services\r\n   */\r\n  async analyzeImage(imageFile: File): Promise<VisionAnalysisResult> {\r\n    try {\r\n      console.log('🔍 Starting comprehensive image analysis...');\r\n      \r\n      // Get basic image information\r\n      const imageInfo = this.getImageInfo(imageFile);\r\n      console.log('📊 Image info:', imageInfo);\r\n\r\n      // Use existing WiHy API for comprehensive food analysis\r\n      let wihyAnalysis = '';\r\n      let nutritionInfo = '';\r\n      \r\n      try {\r\n        console.log('🍎 Attempting WiHy API analysis...');\r\n        const { wihyAPI } = await import('./wihyAPI');\r\n        const wihyResult = await wihyAPI.scanFood(imageFile);\r\n        \r\n        if (wihyResult.success && 'data' in wihyResult && wihyResult.data?.ai_response?.response) {\r\n          wihyAnalysis = wihyResult.data.ai_response.response;\r\n          console.log('✅ WiHy analysis successful');\r\n        }\r\n      } catch (error) {\r\n        console.log('ℹ️ WiHy API analysis not available');\r\n      }\r\n\r\n      // Extract potential nutrition and food information\r\n      const foodAnalysis = this.analyzeFoodContent(wihyAnalysis, imageInfo);\r\n      \r\n      const result: VisionAnalysisResult = {\r\n        success: true,\r\n        data: {\r\n          description: wihyAnalysis || 'Image uploaded for analysis',\r\n          foodItems: foodAnalysis.foodItems,\r\n          brands: foodAnalysis.brands,\r\n          nutritionText: foodAnalysis.nutritionText,\r\n          barcodes: [], // Future: could integrate barcode detection\r\n          qrCodes: [], // Future: could integrate QR code detection\r\n          text: '', // Future: could integrate OCR\r\n          imageInfo\r\n        }\r\n      };\r\n\r\n      console.log('✅ Analysis complete:', result);\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Vision analysis error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Analysis failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get basic image file information\r\n   */\r\n  private getImageInfo(file: File) {\r\n    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\r\n    \r\n    return {\r\n      name: file.name,\r\n      size: `${sizeInMB} MB`,\r\n      type: file.type,\r\n      dimensions: 'Analyzing...' // Could load image to get actual dimensions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze food-related content from text and AI response\r\n   */\r\n  private analyzeFoodContent(analysisText: string, imageInfo: any) {\r\n    const text = analysisText.toLowerCase();\r\n    \r\n    // Common food keywords\r\n    const foodKeywords = [\r\n      'apple', 'banana', 'orange', 'bread', 'milk', 'cheese', 'chicken', 'beef',\r\n      'rice', 'pasta', 'salad', 'sandwich', 'pizza', 'burger', 'fruit', 'vegetable',\r\n      'cereal', 'yogurt', 'soup', 'snack', 'cookie', 'chocolate', 'candy'\r\n    ];\r\n    \r\n    // Common brand keywords\r\n    const brandKeywords = [\r\n      'coca cola', 'pepsi', 'nestlé', 'kraft', 'kellogs', 'general mills',\r\n      'unilever', 'procter', 'johnson', 'mars', 'ferrero', 'danone'\r\n    ];\r\n    \r\n    // Nutrition-related keywords\r\n    const nutritionKeywords = [\r\n      'calories', 'protein', 'carbs', 'fat', 'sugar', 'sodium', 'fiber',\r\n      'vitamin', 'mineral', 'organic', 'natural', 'healthy', 'nutrition'\r\n    ];\r\n    \r\n    const detectedFood = foodKeywords.filter(keyword => text.includes(keyword));\r\n    const detectedBrands = brandKeywords.filter(keyword => text.includes(keyword));\r\n    const nutritionMentions = nutritionKeywords.filter(keyword => text.includes(keyword));\r\n    \r\n    return {\r\n      foodItems: detectedFood,\r\n      brands: detectedBrands,\r\n      nutritionText: nutritionMentions.length > 0 ? \r\n        `Nutrition-related content detected: ${nutritionMentions.join(', ')}` : \r\n        ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format analysis results for display\r\n   */\r\n  formatForDisplay(result: VisionAnalysisResult): string {\r\n    if (!result.success || !result.data) {\r\n      return result.error || 'Image analysis failed';\r\n    }\r\n\r\n    const { data } = result;\r\n    const parts: string[] = [];\r\n\r\n    // Primary description from AI analysis\r\n    if (data.description) {\r\n      parts.push(data.description);\r\n    }\r\n\r\n    // Add detected food items\r\n    if (data.foodItems && data.foodItems.length > 0) {\r\n      parts.push(`Detected foods: ${data.foodItems.join(', ')}`);\r\n    }\r\n\r\n    // Add brands if detected\r\n    if (data.brands && data.brands.length > 0) {\r\n      parts.push(`Brands: ${data.brands.join(', ')}`);\r\n    }\r\n\r\n    // Add nutrition info\r\n    if (data.nutritionText) {\r\n      parts.push(data.nutritionText);\r\n    }\r\n\r\n    // Add basic image info\r\n    if (data.imageInfo) {\r\n      parts.push(`Image: ${data.imageInfo.name} (${data.imageInfo.size})`);\r\n    }\r\n\r\n    return parts.length > 0 ? parts.join('\\n\\n') : 'Image analyzed - ready for health insights';\r\n  }\r\n}\r\n\r\nexport const visionAnalysisService = new VisionAnalysisService();\r\nexport type { VisionAnalysisResult };"],"mappings":"AAAA;AAsBA,KAAM,CAAAA,qBAAsB,CAC1B;AACF;AACA,KACE,KAAM,CAAAC,YAAYA,CAACC,SAAe,CAAiC,CACjE,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC,CAE1D;AACA,KAAM,CAAAC,SAAS,CAAG,IAAI,CAACC,YAAY,CAACJ,SAAS,CAAC,CAC9CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEC,SAAS,CAAC,CAExC;AACA,GAAI,CAAAE,YAAY,CAAG,EAAE,CACrB,GAAI,CAAAC,aAAa,CAAG,EAAE,CAEtB,GAAI,KAAAC,gBAAA,CAAAC,qBAAA,CACFP,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACjD,KAAM,CAAEO,OAAQ,CAAC,CAAG,KAAM,OAAM,CAAC,WAAW,CAAC,CAC7C,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAD,OAAO,CAACE,QAAQ,CAACX,SAAS,CAAC,CAEpD,GAAIU,UAAU,CAACE,OAAO,EAAI,MAAM,EAAI,CAAAF,UAAU,GAAAH,gBAAA,CAAIG,UAAU,CAACG,IAAI,UAAAN,gBAAA,YAAAC,qBAAA,CAAfD,gBAAA,CAAiBO,WAAW,UAAAN,qBAAA,WAA5BA,qBAAA,CAA8BO,QAAQ,CAAE,CACxFV,YAAY,CAAGK,UAAU,CAACG,IAAI,CAACC,WAAW,CAACC,QAAQ,CACnDd,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAC3C,CACF,CAAE,MAAOc,KAAK,CAAE,CACdf,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACnD,CAEA;AACA,KAAM,CAAAe,YAAY,CAAG,IAAI,CAACC,kBAAkB,CAACb,YAAY,CAAEF,SAAS,CAAC,CAErE,KAAM,CAAAgB,MAA4B,CAAG,CACnCP,OAAO,CAAE,IAAI,CACbC,IAAI,CAAE,CACJO,WAAW,CAAEf,YAAY,EAAI,6BAA6B,CAC1DgB,SAAS,CAAEJ,YAAY,CAACI,SAAS,CACjCC,MAAM,CAAEL,YAAY,CAACK,MAAM,CAC3BC,aAAa,CAAEN,YAAY,CAACM,aAAa,CACzCC,QAAQ,CAAE,EAAE,CAAE;AACdC,OAAO,CAAE,EAAE,CAAE;AACbC,IAAI,CAAE,EAAE,CAAE;AACVvB,SACF,CACF,CAAC,CAEDF,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEiB,MAAM,CAAC,CAC3C,MAAO,CAAAA,MAAM,CAEf,CAAE,MAAOH,KAAK,CAAE,CACdf,OAAO,CAACe,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,CACLJ,OAAO,CAAE,KAAK,CACdI,KAAK,CAAEA,KAAK,WAAY,CAAAW,KAAK,CAAGX,KAAK,CAACY,OAAO,CAAG,iBAClD,CAAC,CACH,CACF,CAEA;AACF;AACA,KACUxB,YAAYA,CAACyB,IAAU,CAAE,CAC/B,KAAM,CAAAC,QAAQ,CAAG,CAACD,IAAI,CAACE,IAAI,EAAI,IAAI,CAAG,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAEvD,MAAO,CACLC,IAAI,CAAEJ,IAAI,CAACI,IAAI,CACfF,IAAI,IAAAG,MAAA,CAAKJ,QAAQ,OAAK,CACtBK,IAAI,CAAEN,IAAI,CAACM,IAAI,CACfC,UAAU,CAAE,cAAe;AAC7B,CAAC,CACH,CAEA;AACF;AACA,KACUlB,kBAAkBA,CAACmB,YAAoB,CAAElC,SAAc,CAAE,CAC/D,KAAM,CAAAuB,IAAI,CAAGW,YAAY,CAACC,WAAW,CAAC,CAAC,CAEvC;AACA,KAAM,CAAAC,YAAY,CAAG,CACnB,OAAO,CAAE,QAAQ,CAAE,QAAQ,CAAE,OAAO,CAAE,MAAM,CAAE,QAAQ,CAAE,SAAS,CAAE,MAAM,CACzE,MAAM,CAAE,OAAO,CAAE,OAAO,CAAE,UAAU,CAAE,OAAO,CAAE,QAAQ,CAAE,OAAO,CAAE,WAAW,CAC7E,QAAQ,CAAE,QAAQ,CAAE,MAAM,CAAE,OAAO,CAAE,QAAQ,CAAE,WAAW,CAAE,OAAO,CACpE,CAED;AACA,KAAM,CAAAC,aAAa,CAAG,CACpB,WAAW,CAAE,OAAO,CAAE,QAAQ,CAAE,OAAO,CAAE,SAAS,CAAE,eAAe,CACnE,UAAU,CAAE,SAAS,CAAE,SAAS,CAAE,MAAM,CAAE,SAAS,CAAE,QAAQ,CAC9D,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAG,CACxB,UAAU,CAAE,SAAS,CAAE,OAAO,CAAE,KAAK,CAAE,OAAO,CAAE,QAAQ,CAAE,OAAO,CACjE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,WAAW,CACnE,CAED,KAAM,CAAAC,YAAY,CAAGH,YAAY,CAACI,MAAM,CAACC,OAAO,EAAIlB,IAAI,CAACmB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAC3E,KAAM,CAAAE,cAAc,CAAGN,aAAa,CAACG,MAAM,CAACC,OAAO,EAAIlB,IAAI,CAACmB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAC9E,KAAM,CAAAG,iBAAiB,CAAGN,iBAAiB,CAACE,MAAM,CAACC,OAAO,EAAIlB,IAAI,CAACmB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAErF,MAAO,CACLvB,SAAS,CAAEqB,YAAY,CACvBpB,MAAM,CAAEwB,cAAc,CACtBvB,aAAa,CAAEwB,iBAAiB,CAACC,MAAM,CAAG,CAAC,wCAAAd,MAAA,CACFa,iBAAiB,CAACE,IAAI,CAAC,IAAI,CAAC,EACnE,EACJ,CAAC,CACH,CAEA;AACF;AACA,KACEC,gBAAgBA,CAAC/B,MAA4B,CAAU,CACrD,GAAI,CAACA,MAAM,CAACP,OAAO,EAAI,CAACO,MAAM,CAACN,IAAI,CAAE,CACnC,MAAO,CAAAM,MAAM,CAACH,KAAK,EAAI,uBAAuB,CAChD,CAEA,KAAM,CAAEH,IAAK,CAAC,CAAGM,MAAM,CACvB,KAAM,CAAAgC,KAAe,CAAG,EAAE,CAE1B;AACA,GAAItC,IAAI,CAACO,WAAW,CAAE,CACpB+B,KAAK,CAACC,IAAI,CAACvC,IAAI,CAACO,WAAW,CAAC,CAC9B,CAEA;AACA,GAAIP,IAAI,CAACQ,SAAS,EAAIR,IAAI,CAACQ,SAAS,CAAC2B,MAAM,CAAG,CAAC,CAAE,CAC/CG,KAAK,CAACC,IAAI,oBAAAlB,MAAA,CAAoBrB,IAAI,CAACQ,SAAS,CAAC4B,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAC5D,CAEA;AACA,GAAIpC,IAAI,CAACS,MAAM,EAAIT,IAAI,CAACS,MAAM,CAAC0B,MAAM,CAAG,CAAC,CAAE,CACzCG,KAAK,CAACC,IAAI,YAAAlB,MAAA,CAAYrB,IAAI,CAACS,MAAM,CAAC2B,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CACjD,CAEA;AACA,GAAIpC,IAAI,CAACU,aAAa,CAAE,CACtB4B,KAAK,CAACC,IAAI,CAACvC,IAAI,CAACU,aAAa,CAAC,CAChC,CAEA;AACA,GAAIV,IAAI,CAACV,SAAS,CAAE,CAClBgD,KAAK,CAACC,IAAI,WAAAlB,MAAA,CAAWrB,IAAI,CAACV,SAAS,CAAC8B,IAAI,OAAAC,MAAA,CAAKrB,IAAI,CAACV,SAAS,CAAC4B,IAAI,KAAG,CAAC,CACtE,CAEA,MAAO,CAAAoB,KAAK,CAACH,MAAM,CAAG,CAAC,CAAGG,KAAK,CAACF,IAAI,CAAC,MAAM,CAAC,CAAG,4CAA4C,CAC7F,CACF,CAEA,MAAO,MAAM,CAAAI,qBAAqB,CAAG,GAAI,CAAAvD,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}