{"ast":null,"code":"var _jsxFileName = \"C:\\\\vHealth\\\\vhealth\\\\client\\\\src\\\\SearchResults.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { searchCache } from './services/searchCache';\nimport ImageUploadModal from './components/ImageUploadModal';\nimport './styles/VHealthSearch.css';\nimport Header from './components/shared/components/Header';\n\n/* Define default topics and resources */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultRelatedTopics = [\"Nutrition and Diet Guidelines\", \"Exercise and Physical Activity\", \"Mental Health and Wellness\", \"Preventive Care and Screenings\", \"Chronic Disease Management\", \"Healthy Lifestyle Choices\"];\nconst defaultResources = [{\n  text: \"Nutrition ED - Learn More\",\n  url: \"https://vowels.com\"\n}, {\n  text: \"Nutrition 101\",\n  url: \"https://members.vowels.com\"\n}, {\n  text: \"The World Counts\",\n  url: \"https://www.theworldcounts.com/\"\n}];\n\n// Define the dummy data for \"test\" queries\nconst dummyTestData = {\n  query: \"test\",\n  healthInfo: `I'm sorry, but your query \"test\" is too vague. Could you please provide more details or specify the type of test you are interested in? It could be a medical test, a psychological test, or a physical fitness test, among others. Please provide more context so I can give you a more accurate and helpful response.\n\n**Recommendations:**\n• Consult healthcare professionals for personalized medical advice\n• Verify information with your doctor or medical provider\n• Follow evidence-based medical guidelines\n• Seek regular medical check-ups and screenings\n\n**Sources:** NIH Guidelines, CDC & WHO Publications, PubMed and peer-reviewed studies, Academic Medical Journals, Evidence-Based Clinical Reviews\n\nThis information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.`,\n  relatedTopics: [\"Nutrition and Diet Guidelines\", \"Exercise and Physical Activity\", \"Mental Health and Wellness\", \"Preventive Care and Screenings\", \"Chronic Disease Management\", \"Healthy Lifestyle Choices\"],\n  resources: [{\n    text: \"🩺 mHealth - Mobile Health Solutions\",\n    url: \"#\"\n  }, {\n    text: \"🏥 CDC - Health Guidelines\",\n    url: \"#\"\n  }, {\n    text: \"🌍 WHO - Global Health Information\",\n    url: \"#\"\n  }]\n};\n\n// Update the SearchResultsProps interface to include the new properties\n\n// Add this function before the SearchResults component\nconst convertLinksToClickable = text => {\n  // Handle non-string inputs\n  if (!text) return null;\n\n  // If text is not a string, convert it to string first\n  if (typeof text !== 'string') {\n    // If it's an object, try to stringify it or extract meaningful content\n    if (typeof text === 'object') {\n      // If it has specific properties we can use\n      if (text.content) {\n        text = text.content;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.details) {\n        text = text.details;\n      } else {\n        // Last resort - stringify the object\n        text = JSON.stringify(text);\n      }\n    } else {\n      // Convert other types to string\n      text = String(text);\n    }\n  }\n\n  // Now we're sure text is a string, proceed with original logic\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  const parts = text.split(urlRegex);\n  return parts.map((part, index) => {\n    if (part.match(urlRegex)) {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: part,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        style: {\n          color: '#2563eb',\n          textDecoration: 'underline'\n        },\n        children: part\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this);\n    }\n    return part;\n  });\n};\nconst SearchResults = ({\n  query,\n  results,\n  onBackToSearch,\n  onNewSearch,\n  isLoading = false,\n  dataSource,\n  citations\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [image, setImage] = useState(null);\n  const [currentPhotoId, setCurrentPhotoId] = useState(null);\n  const [newQuery, setNewQuery] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [notification, setNotification] = useState(null);\n  const [isUploadLoading, setUploadLoading] = useState(false);\n  const [lastProcessedQuery, setLastProcessedQuery] = useState('');\n  const [imageError, setImageError] = useState(false); // Add this state\n  const [currentResults, setCurrentResults] = useState(results);\n  const [currentQuery, setCurrentQuery] = useState(query);\n  const recognitionRef = useRef(null);\n\n  // Check if we have valid results to display\n  const hasValidResults = results && results.trim() !== '' && !isLoading;\n\n  // Cache results when they change\n  useEffect(() => {\n    if (query && results && !isLoading) {\n      searchCache.setCachedResult(query, results, window.location.href);\n    }\n  }, [query, results, isLoading]);\n\n  // Add effect to manage body class when modal opens/closes\n  useEffect(() => {\n    if (isUploadModalOpen) {\n      document.body.classList.add('modal-open');\n    } else {\n      document.body.classList.remove('modal-open');\n    }\n\n    // Cleanup on unmount\n    return () => {\n      document.body.classList.remove('modal-open');\n    };\n  }, [isUploadModalOpen]);\n\n  // Add cleanup effect\n  useEffect(() => {\n    return () => {\n      if (typeof image === 'string' && image.startsWith('blob:')) {\n        URL.revokeObjectURL(image);\n      }\n    };\n  }, [image]);\n\n  // Add this effect\n  useEffect(() => {\n    if (notification) {\n      const timer = setTimeout(() => {\n        setNotification(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [notification]);\n\n  // Update when props change\n  useEffect(() => {\n    setCurrentResults(results);\n    setCurrentQuery(query);\n  }, [results, query]);\n\n  // Handle new search submission - only allow if user explicitly searches from results page\n  const handleTextSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n    const trimmedQuery = input.trim();\n\n    // Prevent duplicate searches\n    if (trimmedQuery === lastProcessedQuery || trimmedQuery === query) {\n      console.log('Preventing duplicate search for:', trimmedQuery);\n      return;\n    }\n    setLastProcessedQuery(trimmedQuery);\n    onNewSearch(trimmedQuery);\n    setInput(''); // Clear input after search\n  };\n\n  // Handle voice input\n  const handleVoiceInput = () => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition not supported in this browser');\n      return;\n    }\n    if (!recognitionRef.current) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setNewQuery(transcript); // Update the input field\n        setIsListening(false);\n      };\n      recognition.onerror = () => {\n        setIsListening(false);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      recognitionRef.current = recognition;\n    }\n    if (!isListening) {\n      recognitionRef.current.start();\n    } else {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  // Handle image upload\n  const handleImageUpload = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (file) {\n      setImage(file);\n      console.log(`Image uploaded: ${file.name}`);\n    }\n  };\n\n  // Clear all search items\n  const handleClearAll = () => {\n    setInput('');\n    setNewQuery(''); // <-- Add this line\n    setImage(null);\n    setCurrentPhotoId(null);\n    setIsListening(false);\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n\n    // Remove CSS class\n    const searchInput = document.querySelector('.results-search-input');\n    if (searchInput) {\n      searchInput.classList.remove('with-image');\n    }\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleTextSubmit(e);\n    }\n  };\n\n  // Photo modal handlers\n  const handleCameraClick = () => {\n    setIsUploadModalOpen(true);\n  };\n\n  // Simple handler that just triggers a new search - only when user explicitly requests it\n  const handleAnalysisComplete = foodName => {\n    if (foodName && foodName !== lastProcessedQuery && foodName !== query) {\n      console.log('User explicit search from image analysis:', foodName);\n      setNewQuery(foodName);\n      setLastProcessedQuery(foodName);\n      onNewSearch(foodName);\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const files = Array.from(e.dataTransfer.files);\n    const imageFile = files.find(file => file.type.startsWith('image/'));\n    if (imageFile) {\n      // Instead of calling handleFileSelect, open the modal and let it handle the file\n      setIsUploadModalOpen(true);\n      // You could also trigger the analysis directly if you want immediate processing\n      // But it's cleaner to let the user see the modal and confirm\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleNewSearchSubmit = e => {\n    e.preventDefault();\n    if (!newQuery.trim() || isLoading) return;\n    const trimmedQuery = newQuery.trim();\n\n    // Prevent duplicate searches\n    if (trimmedQuery === lastProcessedQuery || trimmedQuery === query) {\n      console.log('Preventing duplicate search for:', trimmedQuery);\n      return;\n    }\n    console.log('User explicit search from new query:', trimmedQuery);\n    setLastProcessedQuery(trimmedQuery);\n    onNewSearch(trimmedQuery);\n    setNewQuery(''); // Reset after search\n  };\n\n  // Update last processed query when props change\n  useEffect(() => {\n    if (query && query !== lastProcessedQuery) {\n      setLastProcessedQuery(query);\n    }\n  }, [query]);\n\n  // Check if current query is \"test\" to show dummy data styles\n  const isTestQuery = query.toLowerCase().trim() === 'test';\n\n  // Header search complete handler\n  const handleHeaderSearchComplete = (newQuery, newResults) => {\n    console.log('SearchResults: Received new results from header:', newQuery, newResults);\n\n    // Update local state\n    setCurrentResults(newResults);\n    setCurrentQuery(newQuery);\n\n    // Update sessionStorage\n    sessionStorage.setItem('searchResults', JSON.stringify({\n      query: newQuery,\n      results: newResults,\n      dataSource: 'openai',\n      citations: newResults.sources || []\n    }));\n\n    // Update URL\n    window.history.pushState({}, '', `/results?q=${encodeURIComponent(newQuery)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      searchQuery: currentQuery,\n      onSearchSubmit: handleHeaderSearchComplete,\n      onVoiceInput: () => {/* voice logic */},\n      onImageUpload: () => setIsUploadModalOpen(true),\n      onLogoClick: onBackToSearch,\n      isListening: false,\n      variant: \"results\",\n      showLogin: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"results-header\",\n        children: [\"Search Results for: \\\"\", currentQuery, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), currentResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-results-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading results...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageUploadModal, {\n      isOpen: isUploadModalOpen,\n      onClose: () => setIsUploadModalOpen(false),\n      onAnalysisComplete: handleAnalysisComplete,\n      title: \"Upload Image\",\n      subtitle: \"Upload images for analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchResults, \"Nb2qv+t8ST88SqY7s06ZvH4G7Zo=\");\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["React","useState","useEffect","useRef","searchCache","ImageUploadModal","Header","jsxDEV","_jsxDEV","defaultRelatedTopics","defaultResources","text","url","dummyTestData","query","healthInfo","relatedTopics","resources","convertLinksToClickable","content","message","details","JSON","stringify","String","urlRegex","parts","split","map","part","index","match","href","target","rel","style","color","textDecoration","children","fileName","_jsxFileName","lineNumber","columnNumber","SearchResults","results","onBackToSearch","onNewSearch","isLoading","dataSource","citations","_s","input","setInput","image","setImage","currentPhotoId","setCurrentPhotoId","newQuery","setNewQuery","isListening","setIsListening","isUploadModalOpen","setIsUploadModalOpen","notification","setNotification","isUploadLoading","setUploadLoading","lastProcessedQuery","setLastProcessedQuery","imageError","setImageError","currentResults","setCurrentResults","currentQuery","setCurrentQuery","recognitionRef","hasValidResults","trim","setCachedResult","window","location","document","body","classList","add","remove","startsWith","URL","revokeObjectURL","timer","setTimeout","clearTimeout","handleTextSubmit","e","preventDefault","trimmedQuery","console","log","handleVoiceInput","alert","current","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onstart","onresult","event","transcript","onerror","onend","start","stop","handleImageUpload","_e$target$files","file","files","name","handleClearAll","searchInput","querySelector","handleKeyPress","key","handleCameraClick","handleAnalysisComplete","foodName","handleDrop","Array","from","dataTransfer","imageFile","find","type","handleDragOver","handleNewSearchSubmit","isTestQuery","toLowerCase","handleHeaderSearchComplete","newResults","sessionStorage","setItem","sources","history","pushState","encodeURIComponent","className","searchQuery","onSearchSubmit","onVoiceInput","onImageUpload","onLogoClick","variant","showLogin","isOpen","onClose","onAnalysisComplete","title","subtitle","_c","$RefreshReg$"],"sources":["C:/vHealth/vhealth/client/src/SearchResults.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { searchCache } from './services/searchCache';\r\nimport { photoStorageService } from './services/photoStorageService';\r\nimport { foodAnalysisService } from './components/foodAnalysisService';\r\nimport ImageUploadModal from './components/ImageUploadModal';\r\nimport MultiAuthLogin from './components/MultiAuthLogin';\r\nimport ResultQualityPie from './components/ResultQualityPie';\r\nimport NutritionChart from './components/NutritionChart';\r\nimport NovaChart from './components/NovaChart';\r\nimport './styles/VHealthSearch.css';\r\nimport Spinner from './components/Spinner';\r\nimport Header from './components/shared/components/Header';\r\n\r\n/* Define default topics and resources */\r\nconst defaultRelatedTopics = [\r\n  \"Nutrition and Diet Guidelines\",\r\n  \"Exercise and Physical Activity\", \r\n  \"Mental Health and Wellness\",\r\n  \"Preventive Care and Screenings\",\r\n  \"Chronic Disease Management\",\r\n  \"Healthy Lifestyle Choices\"\r\n];\r\n\r\nconst defaultResources = [\r\n  { text: \"Nutrition ED - Learn More\", url: \"https://vowels.com\" },\r\n  { text: \"Nutrition 101\", url: \"https://members.vowels.com\" },\r\n  { text: \"The World Counts\", url: \"https://www.theworldcounts.com/\" }\r\n];\r\n\r\n// Define the dummy data for \"test\" queries\r\nconst dummyTestData = {\r\n  query: \"test\",\r\n  healthInfo: `I'm sorry, but your query \"test\" is too vague. Could you please provide more details or specify the type of test you are interested in? It could be a medical test, a psychological test, or a physical fitness test, among others. Please provide more context so I can give you a more accurate and helpful response.\r\n\r\n**Recommendations:**\r\n• Consult healthcare professionals for personalized medical advice\r\n• Verify information with your doctor or medical provider\r\n• Follow evidence-based medical guidelines\r\n• Seek regular medical check-ups and screenings\r\n\r\n**Sources:** NIH Guidelines, CDC & WHO Publications, PubMed and peer-reviewed studies, Academic Medical Journals, Evidence-Based Clinical Reviews\r\n\r\nThis information is based on research from reputable medical institutions and peer-reviewed journals including NIH, CDC, WHO, JAMA, NEJM, and other academic publications. It is for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns.`,\r\n  relatedTopics: [\r\n    \"Nutrition and Diet Guidelines\",\r\n    \"Exercise and Physical Activity\", \r\n    \"Mental Health and Wellness\",\r\n    \"Preventive Care and Screenings\",\r\n    \"Chronic Disease Management\",\r\n    \"Healthy Lifestyle Choices\"\r\n  ],\r\n  resources: [\r\n    { text: \"🩺 mHealth - Mobile Health Solutions\", url: \"#\" },\r\n    { text: \"🏥 CDC - Health Guidelines\", url: \"#\" },\r\n    { text: \"🌍 WHO - Global Health Information\", url: \"#\" }\r\n  ]\r\n};\r\n\r\n// Update the SearchResultsProps interface to include the new properties\r\ninterface SearchResultsProps {\r\n  query: string;\r\n  results: string;\r\n  onBackToSearch: () => void;\r\n  onNewSearch: (query: string) => void;\r\n  isLoading: boolean;\r\n  dataSource: \"error\" | \"openai\" | \"local\" | \"vnutrition\";\r\n  citations?: string[];\r\n  recommendations?: string[];\r\n  disclaimer?: string;\r\n}\r\n\r\n// Add this function before the SearchResults component\r\nconst convertLinksToClickable = (text: any): React.ReactNode => {\r\n  // Handle non-string inputs\r\n  if (!text) return null;\r\n  \r\n  // If text is not a string, convert it to string first\r\n  if (typeof text !== 'string') {\r\n    // If it's an object, try to stringify it or extract meaningful content\r\n    if (typeof text === 'object') {\r\n      // If it has specific properties we can use\r\n      if (text.content) {\r\n        text = text.content;\r\n      } else if (text.message) {\r\n        text = text.message;\r\n      } else if (text.details) {\r\n        text = text.details;\r\n      } else {\r\n        // Last resort - stringify the object\r\n        text = JSON.stringify(text);\r\n      }\r\n    } else {\r\n      // Convert other types to string\r\n      text = String(text);\r\n    }\r\n  }\r\n\r\n  // Now we're sure text is a string, proceed with original logic\r\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n  const parts = text.split(urlRegex);\r\n  \r\n  return parts.map((part: string, index: number) => {\r\n    if (part.match(urlRegex)) {\r\n      return (\r\n        <a \r\n          key={index} \r\n          href={part} \r\n          target=\"_blank\" \r\n          rel=\"noopener noreferrer\"\r\n          style={{ color: '#2563eb', textDecoration: 'underline' }}\r\n        >\r\n          {part}\r\n        </a>\r\n      );\r\n    }\r\n    return part;\r\n  });\r\n};\r\n\r\nconst SearchResults: React.FC<SearchResultsProps> = ({ \r\n  query, \r\n  results, \r\n  onBackToSearch,\r\n  onNewSearch,\r\n  isLoading = false,\r\n  dataSource,\r\n  citations\r\n}) => {\r\n  const [input, setInput] = useState('');\r\n  const [image, setImage] = useState<File | string | null>(null);\r\n  const [currentPhotoId, setCurrentPhotoId] = useState<string | null>(null);\r\n  const [newQuery, setNewQuery] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\r\n  const [notification, setNotification] = useState<{message: string, type: string} | null>(null);\r\n  const [isUploadLoading, setUploadLoading] = useState(false);\r\n  const [lastProcessedQuery, setLastProcessedQuery] = useState<string>('');\r\n  const [imageError, setImageError] = useState(false); // Add this state\r\n  const [currentResults, setCurrentResults] = useState(results);\r\n  const [currentQuery, setCurrentQuery] = useState(query);\r\n  const recognitionRef = useRef<any>(null);\r\n\r\n  // Check if we have valid results to display\r\n  const hasValidResults = results && results.trim() !== '' && !isLoading;\r\n  \r\n  // Cache results when they change\r\n  useEffect(() => {\r\n    if (query && results && !isLoading) {\r\n      searchCache.setCachedResult(query, results, window.location.href);\r\n    }\r\n  }, [query, results, isLoading]);\r\n\r\n  // Add effect to manage body class when modal opens/closes\r\n  useEffect(() => {\r\n    if (isUploadModalOpen) {\r\n      document.body.classList.add('modal-open');\r\n    } else {\r\n      document.body.classList.remove('modal-open');\r\n    }\r\n    \r\n    // Cleanup on unmount\r\n    return () => {\r\n      document.body.classList.remove('modal-open');\r\n    };\r\n  }, [isUploadModalOpen]);\r\n\r\n  // Add cleanup effect\r\n  useEffect(() => {\r\n    return () => {\r\n      if (typeof image === 'string' && image.startsWith('blob:')) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, [image]);\r\n\r\n  // Add this effect\r\n  useEffect(() => {\r\n    if (notification) {\r\n      const timer = setTimeout(() => {\r\n        setNotification(null);\r\n      }, 5000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notification]);\r\n\r\n  // Update when props change\r\n  useEffect(() => {\r\n    setCurrentResults(results);\r\n    setCurrentQuery(query);\r\n  }, [results, query]);\r\n\r\n  // Handle new search submission - only allow if user explicitly searches from results page\r\n  const handleTextSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!input.trim() || isLoading) return;\r\n    \r\n    const trimmedQuery = input.trim();\r\n    \r\n    // Prevent duplicate searches\r\n    if (trimmedQuery === lastProcessedQuery || trimmedQuery === query) {\r\n      console.log('Preventing duplicate search for:', trimmedQuery);\r\n      return;\r\n    }\r\n    \r\n    setLastProcessedQuery(trimmedQuery);\r\n    onNewSearch(trimmedQuery);\r\n    setInput(''); // Clear input after search\r\n  };\r\n\r\n  // Handle voice input\r\n  const handleVoiceInput = () => {\r\n    if (!('webkitSpeechRecognition' in window)) {\r\n      alert('Speech recognition not supported in this browser');\r\n      return;\r\n    }\r\n\r\n    if (!recognitionRef.current) {\r\n      const recognition = new (window as any).webkitSpeechRecognition();\r\n      recognition.continuous = false;\r\n      recognition.interimResults = false;\r\n      recognition.lang = 'en-US';\r\n\r\n      recognition.onstart = () => {\r\n        setIsListening(true);\r\n      };\r\n\r\n      recognition.onresult = (event: any) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setNewQuery(transcript); // Update the input field\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognition.onerror = () => {\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognition.onend = () => {\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognitionRef.current = recognition;\r\n    }\r\n\r\n    if (!isListening) {\r\n      recognitionRef.current.start();\r\n    } else {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  // Handle image upload\r\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      setImage(file);\r\n      console.log(`Image uploaded: ${file.name}`);\r\n    }\r\n  };\r\n\r\n  // Clear all search items\r\n  const handleClearAll = () => {\r\n    setInput('');\r\n    setNewQuery(''); // <-- Add this line\r\n    setImage(null);\r\n    setCurrentPhotoId(null);\r\n    setIsListening(false);\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n    }\r\n    \r\n    // Remove CSS class\r\n    const searchInput = document.querySelector('.results-search-input') as HTMLInputElement;\r\n    if (searchInput) {\r\n      searchInput.classList.remove('with-image');\r\n    }\r\n  };\r\n\r\n  // Handle Enter key press\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleTextSubmit(e as any);\r\n    }\r\n  };\r\n\r\n  // Photo modal handlers\r\n  const handleCameraClick = () => {\r\n    setIsUploadModalOpen(true);\r\n  };\r\n\r\n  // Simple handler that just triggers a new search - only when user explicitly requests it\r\n  const handleAnalysisComplete = (foodName: string) => {\r\n    if (foodName && foodName !== lastProcessedQuery && foodName !== query) {\r\n      console.log('User explicit search from image analysis:', foodName);\r\n      setNewQuery(foodName);\r\n      setLastProcessedQuery(foodName);\r\n      onNewSearch(foodName);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    const imageFile = files.find(file => file.type.startsWith('image/'));\r\n    if (imageFile) {\r\n      // Instead of calling handleFileSelect, open the modal and let it handle the file\r\n      setIsUploadModalOpen(true);\r\n      // You could also trigger the analysis directly if you want immediate processing\r\n      // But it's cleaner to let the user see the modal and confirm\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleNewSearchSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newQuery.trim() || isLoading) return;\r\n    \r\n    const trimmedQuery = newQuery.trim();\r\n    \r\n    // Prevent duplicate searches\r\n    if (trimmedQuery === lastProcessedQuery || trimmedQuery === query) {\r\n      console.log('Preventing duplicate search for:', trimmedQuery);\r\n      return;\r\n    }\r\n    \r\n    console.log('User explicit search from new query:', trimmedQuery);\r\n    setLastProcessedQuery(trimmedQuery);\r\n    onNewSearch(trimmedQuery);\r\n    setNewQuery(''); // Reset after search\r\n  };\r\n\r\n  // Update last processed query when props change\r\n  useEffect(() => {\r\n    if (query && query !== lastProcessedQuery) {\r\n      setLastProcessedQuery(query);\r\n    }\r\n  }, [query]);\r\n\r\n  // Check if current query is \"test\" to show dummy data styles\r\n  const isTestQuery = query.toLowerCase().trim() === 'test';\r\n\r\n  // Header search complete handler\r\n  const handleHeaderSearchComplete = (newQuery: string, newResults: any) => {\r\n    console.log('SearchResults: Received new results from header:', newQuery, newResults);\r\n    \r\n    // Update local state\r\n    setCurrentResults(newResults);\r\n    setCurrentQuery(newQuery);\r\n    \r\n    // Update sessionStorage\r\n    sessionStorage.setItem('searchResults', JSON.stringify({\r\n      query: newQuery,\r\n      results: newResults,\r\n      dataSource: 'openai',\r\n      citations: newResults.sources || []\r\n    }));\r\n    \r\n    // Update URL\r\n    window.history.pushState({}, '', `/results?q=${encodeURIComponent(newQuery)}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"results-page\">\r\n      <Header\r\n        searchQuery={currentQuery}\r\n        onSearchSubmit={handleHeaderSearchComplete}\r\n        onVoiceInput={() => {/* voice logic */}}\r\n        onImageUpload={() => setIsUploadModalOpen(true)}\r\n        onLogoClick={onBackToSearch}\r\n        isListening={false}\r\n        variant=\"results\"\r\n        showLogin={true}\r\n      />\r\n      \r\n      <div className=\"results-container\">\r\n        <h1 className=\"results-header\">Search Results for: \"{currentQuery}\"</h1>\r\n        \r\n        {/* Use currentResults */}\r\n        {currentResults ? (\r\n          <div className=\"results-content\">\r\n            {/* Your existing results display using currentResults */}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-results-message\">\r\n            <p>Loading results...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* ImageUploadModal - always available */}\r\n      <ImageUploadModal\r\n        isOpen={isUploadModalOpen}\r\n        onClose={() => setIsUploadModalOpen(false)}\r\n        onAnalysisComplete={handleAnalysisComplete}\r\n        title=\"Upload Image\"\r\n        subtitle=\"Upload images for analysis\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}