{"ast":null,"code":"import openaiAPI from './openaiAPI';\nimport { healthAPI } from './healthAPI';\nimport axios from 'axios';\n// Helper functions defined outside the object\nconst fetchNutritionData = async barcode => {\n  try {\n    const response = await axios.post('/vnutrition/analyze', {\n      barcode\n    });\n    const responseData = response.data || {};\n    return responseData;\n  } catch (error) {\n    console.error('Error fetching nutrition data:', error);\n    throw error;\n  }\n};\nconst getErrorResponse = query => {\n  return {\n    summary: `We encountered an issue searching for information about \"${query}\".`,\n    details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\n    sources: ['System'],\n    relatedTopics: [],\n    recommendations: []\n  };\n};\nexport const healthSearchService = {\n  async searchHealthInfo(query, signal) {\n    console.log(\"HealthSearchService: Searching for\", query);\n    try {\n      // If request is aborted, throw AbortError\n      if (signal !== null && signal !== void 0 && signal.aborted) {\n        throw new DOMException('The operation was aborted', 'AbortError');\n      }\n\n      // If barcode, call nutrition\n      if (/^\\d{8,14}$/.test(query.trim())) {\n        const nutritionResult = await fetchNutritionData(query.trim());\n        return {\n          summary: `Nutrition info for barcode: ${query}`,\n          details: JSON.stringify(nutritionResult, null, 2),\n          sources: [],\n          relatedTopics: [],\n          recommendations: [],\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\n          dataSource: 'vnutrition'\n        };\n      }\n\n      // Try to use the API with fetch and abort signal\n      try {\n        const response = await fetch('http://localhost:5000/api/search/food', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          }),\n          signal: signal\n        });\n        if (!response.ok) {\n          throw new Error('API request failed');\n        }\n        return await response.json();\n      } catch (fetchError) {\n        if (fetchError.name === 'AbortError') {\n          console.log('Search request was aborted');\n          throw fetchError; // Re-throw to handle in caller\n        }\n        // Fall through to OpenAI if fetch failed\n      }\n\n      // Otherwise, call OpenAI or local health API\n      if (openaiAPI.isConfigured()) {\n        console.log(\"OpenAI API configured, using it for search\");\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\n        console.log(\"OpenAI search result:\", openaiResult);\n        return {\n          ...openaiResult,\n          dataSource: 'openai'\n        };\n      } else {\n        console.log(\"OpenAI API not configured, using fallback\");\n        const localResult = await healthAPI.searchHealthInfo(query);\n        return {\n          ...localResult,\n          dataSource: 'local'\n        };\n      }\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw error; // Let caller handle abort errors\n      }\n      console.error(\"Error in health search:\", error);\n      return getErrorResponse(query);\n    }\n  },\n  async searchByBarcode(barcode) {\n    try {\n      const nutritionData = await fetchNutritionData(barcode);\n      return nutritionData;\n    } catch (error) {\n      console.error('Error in barcode search:', error);\n      return getErrorResponse(`food with barcode ${barcode}`);\n    }\n  },\n  // Add missing checkServiceStatus method\n  async checkServiceStatus() {\n    try {\n      const response = await fetch('http://localhost:5000/api/status', {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        return {\n          status: 'error',\n          message: 'Service is not responding properly'\n        };\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error checking service status:\", error);\n      return {\n        status: 'offline',\n        message: 'Service is offline or unreachable'\n      };\n    }\n  }\n};","map":{"version":3,"names":["openaiAPI","healthAPI","axios","fetchNutritionData","barcode","response","post","responseData","data","error","console","getErrorResponse","query","summary","details","sources","relatedTopics","recommendations","healthSearchService","searchHealthInfo","signal","log","aborted","DOMException","test","trim","nutritionResult","JSON","stringify","medicalDisclaimer","dataSource","fetch","method","headers","body","ok","Error","json","fetchError","name","isConfigured","openaiResult","localResult","searchByBarcode","nutritionData","checkServiceStatus","status","message"],"sources":["C:/vHealth/vhealth/client/src/services/healthSearchService.ts"],"sourcesContent":["import openaiAPI, { openaiAPI as openaiService } from './openaiAPI';\r\nimport { healthAPI } from './healthAPI';\r\nimport axios from 'axios';\r\nimport { HealthSearchResult } from '../types/healthTypes';\r\n\r\n// Helper functions defined outside the object\r\nconst fetchNutritionData = async (barcode: string) => {\r\n  try {\r\n    const response = await axios.post('/vnutrition/analyze', { barcode });\r\n    const responseData: any = response.data || {};\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getErrorResponse = (query: string): HealthSearchResult => {\r\n  return {\r\n    summary: `We encountered an issue searching for information about \"${query}\".`,\r\n    details: `We're currently unable to provide detailed health information about \"${query}\". This could be due to:\\n\\n• Temporary service issues\\n• Network connectivity problems\\n• API limitations\\n\\nPlease try again in a few moments, or consider these general health resources:\\n\\n• Contact your healthcare provider\\n• Visit reputable medical websites like Mayo Clinic or WebMD\\n• Call a health information hotline\\n• Consult medical reference books`,\r\n    sources: ['System'],\r\n    relatedTopics: [],\r\n    recommendations: []\r\n  };\r\n};\r\n\r\nexport const healthSearchService = {\r\n  async searchHealthInfo(query: string, signal?: AbortSignal): Promise<HealthSearchResult> {\r\n    console.log(\"HealthSearchService: Searching for\", query);\r\n    try {\r\n      // If request is aborted, throw AbortError\r\n      if (signal?.aborted) {\r\n        throw new DOMException('The operation was aborted', 'AbortError');\r\n      }\r\n      \r\n      // If barcode, call nutrition\r\n      if (/^\\d{8,14}$/.test(query.trim())) {\r\n        const nutritionResult = await fetchNutritionData(query.trim());\r\n        return {\r\n          summary: `Nutrition info for barcode: ${query}`,\r\n          details: JSON.stringify(nutritionResult, null, 2),\r\n          sources: [],\r\n          relatedTopics: [],\r\n          recommendations: [],\r\n          medicalDisclaimer: 'Nutrition data from barcode lookup.',\r\n          dataSource: 'vnutrition'\r\n        };\r\n      }\r\n\r\n      // Try to use the API with fetch and abort signal\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/search/food', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ query }),\r\n          signal: signal\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('API request failed');\r\n        }\r\n        \r\n        return await response.json();\r\n      } catch (fetchError) {\r\n        if (fetchError.name === 'AbortError') {\r\n          console.log('Search request was aborted');\r\n          throw fetchError; // Re-throw to handle in caller\r\n        }\r\n        // Fall through to OpenAI if fetch failed\r\n      }\r\n\r\n      // Otherwise, call OpenAI or local health API\r\n      if (openaiAPI.isConfigured()) {\r\n        console.log(\"OpenAI API configured, using it for search\");\r\n        const openaiResult = await openaiAPI.searchHealthInfo(query);\r\n        console.log(\"OpenAI search result:\", openaiResult);\r\n        return {\r\n          ...openaiResult,\r\n          dataSource: 'openai'\r\n        };\r\n      } else {\r\n        console.log(\"OpenAI API not configured, using fallback\");\r\n        const localResult = await healthAPI.searchHealthInfo(query);\r\n        return {\r\n          ...localResult,\r\n          dataSource: 'local'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        throw error; // Let caller handle abort errors\r\n      }\r\n      console.error(\"Error in health search:\", error);\r\n      return getErrorResponse(query);\r\n    }\r\n  },\r\n\r\n  async searchByBarcode(barcode: string) {\r\n    try {\r\n      const nutritionData = await fetchNutritionData(barcode);\r\n      return nutritionData;\r\n    } catch (error) {\r\n      console.error('Error in barcode search:', error);\r\n      return getErrorResponse(`food with barcode ${barcode}`);\r\n    }\r\n  },\r\n\r\n  // Add missing checkServiceStatus method\r\n  async checkServiceStatus() {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/status', {\r\n        method: 'GET',\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        return { status: 'error', message: 'Service is not responding properly' };\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error checking service status:\", error);\r\n      return { status: 'offline', message: 'Service is offline or unreachable' };\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}