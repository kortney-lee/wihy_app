name: Deploy to VM with Docker (Auto)

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: wihy-ui
  CONTAINER_NAME: wihy-ui-app
  SKIP_DEPLOYMENT: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image locally (for testing)
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        docker images

    - name: Test Docker image locally
      run: |
        # Start container in background
        docker run -d --name test-container -p 8080:80 ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Test main page
        curl -f http://localhost:8080/ || exit 1
        
        # Stop test container
        docker stop test-container
        docker rm test-container
        
        echo "‚úÖ Docker image test passed!"

    - name: Save Docker image as tar
      if: github.ref == 'refs/heads/main'
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > wihy-ui-image.tar.gz
        ls -lh wihy-ui-image.tar.gz

    - name: Ensure Azure VM ports are open
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üîì Ensuring Azure VM firewall ports are open..."
        
        # Check if Azure CLI is installed and authenticated
        if command -v az &> /dev/null; then
          echo "üìã Opening port 80 in Azure Network Security Group..."
          az vm open-port --port 80 --resource-group vHealth --name wihy-ui-prod-vm || echo "‚ö†Ô∏è Port may already be open"
          
          echo "üìã Opening port 443 in Azure Network Security Group..."
          az vm open-port --port 443 --resource-group vHealth --name wihy-ui-prod-vm || echo "‚ö†Ô∏è Port may already be open"
          
          echo "‚úÖ Azure firewall configured"
        else
          echo "‚ö†Ô∏è Azure CLI not available - skipping firewall setup (manual configuration required)"
        fi

    - name: Check if deployment secrets are configured
      if: github.ref == 'refs/heads/main'
      run: |
        # Check for required secrets using conditional expressions
        if [ "${{ secrets.VM_HOST }}" = "" ] || [ "${{ secrets.VM_USERNAME }}" = "" ] || [ "${{ secrets.VM_SSH_PRIVATE_KEY }}" = "" ]; then
          echo "‚ö†Ô∏è  Deployment secrets not configured. Skipping deployment."
          echo "Please configure the following GitHub secrets:"
          echo "  - VM_HOST: 4.246.82.249"
          echo "  - VM_USERNAME: wihyadmin" 
          echo "  - VM_SSH_PRIVATE_KEY: <your SSH private key content>"
          echo "See GITHUB-ACTIONS-SETUP.md for instructions."
          echo "SKIP_DEPLOYMENT=true" >> $GITHUB_ENV
        else
          echo "‚úÖ All deployment secrets are configured."
          echo "SKIP_DEPLOYMENT=false" >> $GITHUB_ENV
        fi

    - name: Setup SSH key
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add host key to known_hosts (with error handling)
        if [ -n "${{ secrets.VM_HOST }}" ]; then
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts || echo "Warning: Could not scan host keys"
        else
          echo "Error: VM_HOST secret not configured"
          exit 1
        fi

    - name: Copy Docker image and scripts to VM
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üì¶ Copying Docker image and setup scripts to VM..."
        scp -o StrictHostKeyChecking=no wihy-ui-image.tar.gz ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/
        scp -o StrictHostKeyChecking=no setup-ssl.sh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/
        scp -o StrictHostKeyChecking=no setup-vm-environment.sh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/

    - name: Deploy to Production VM with Docker
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << 'EOF'
        set -e
        
        echo "üöÄ Starting Docker deployment..."
        
        # Run VM environment setup script
        echo "üîß Running VM environment setup..."
        chmod +x ~/setup-vm-environment.sh
        ~/setup-vm-environment.sh
        
        # Load the new Docker image
        echo "üì• Loading new Docker image..."
        sudo docker load < ~/wihy-ui-image.tar.gz
        
        # Stop and remove old container if it exists
        if sudo docker ps -a --format 'table {{.Names}}' | grep -q "^${{ env.CONTAINER_NAME }}$"; then
            echo "üõë Stopping old container..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true
        fi
        
        # Remove old images to save space (keep latest)
        echo "üßπ Cleaning up old images..."
        sudo docker image prune -f
        
        # Start new container
        echo "üöÄ Starting new container..."
        sudo docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          -p 80:80 \
          -p 443:443 \
          ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait for container to be ready
        echo "‚è≥ Waiting for container to start..."
        sleep 15
        
        # Verify deployment
        if sudo docker ps | grep -q "${{ env.CONTAINER_NAME }}"; then
            echo "‚úÖ Container is running!"
            sudo docker ps --filter name=${{ env.CONTAINER_NAME }}
        else
            echo "‚ùå Container failed to start!"
            sudo docker logs ${{ env.CONTAINER_NAME }}
            exit 1
        fi
        
        # Test health endpoint
        echo "üè• Testing health endpoint..."
        if curl -f http://localhost/health; then
            echo "‚úÖ Health check passed!"
        else
            echo "‚ùå Health check failed!"
            sudo docker logs ${{ env.CONTAINER_NAME }}
            exit 1
        fi
        
        # Get public IP
        PUBLIC_IP=$(curl -s ifconfig.me || echo "Unable to detect")
        
        echo "üéâ Deployment successful!"
        echo "üì± Application URLs:"
        echo "   http://$PUBLIC_IP"
        echo "   http://wihy-ui-prod.westus2.cloudapp.azure.com"
        echo "üè• Health check: http://$PUBLIC_IP/health"
        
        # Show container info
        echo "üìä Container info:"
        sudo docker stats ${{ env.CONTAINER_NAME }} --no-stream
        
        # Copy SSL setup script to proper location
        echo "üìã Setting up SSL script..."
        sudo mkdir -p /opt/wihy-ui
        sudo cp ~/setup-ssl.sh /opt/wihy-ui/setup-ssl.sh
        sudo chmod +x /opt/wihy-ui/setup-ssl.sh
        
        # Setup SSL certificates (if DNS is configured)
        echo "üîí Setting up SSL certificates..."
        /opt/wihy-ui/setup-ssl.sh || echo "‚ö†Ô∏è  SSL setup skipped or failed (this is normal if DNS isn't configured yet)"
        
        # Cleanup
        rm -f ~/wihy-ui-image.tar.gz
        
        EOF

    - name: Final Health Check
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üè• Final health check..."
        sleep 10
        if curl -f http://${{ secrets.VM_HOST }}/health; then
            echo "‚úÖ External health check passed!"
        else
            echo "‚ùå External health check failed!"
            exit 1
        fi

    - name: Deployment Summary
      if: success() && github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üéâ Docker Deployment Successful!"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üì± WiHy UI Application: http://wihy-ui-prod.westus2.cloudapp.azure.com"
        echo "üè• Health Check: http://wihy-ui-prod.westus2.cloudapp.azure.com/health"
        echo "üìä Features Available:"
        echo "   ‚Ä¢ Health Charts (search: activity, weight, sleep, dopamine, health risk)"
        echo "   ‚Ä¢ Updated API endpoint: wihymlapi.westus2.cloudapp.azure.com"
        echo "   ‚Ä¢ Responsive design with Chart.js integration"
        echo "   ‚Ä¢ Production-optimized Docker container"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    - name: Secrets Configuration Required
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'true'
      run: |
        echo "‚ö†Ô∏è  Deployment Skipped - Secrets Not Configured"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚úÖ Docker image built and tested successfully!"
        echo "üìã To enable automated deployment, configure these GitHub secrets:"
        echo "   ‚Ä¢ VM_HOST: 4.246.82.249"
        echo "   ‚Ä¢ VM_USERNAME: wihyadmin"
        echo "   ‚Ä¢ VM_SSH_PRIVATE_KEY: (content from C:\\Users\\Kortn\\.ssh\\wihy-ui-vm-key)"
        echo ""
        echo "üìñ See GITHUB-ACTIONS-SETUP.md for detailed instructions"
        echo "üöÄ Once configured, the next push will automatically deploy to your VM!"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"