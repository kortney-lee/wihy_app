name: Deploy to VM with Docker (Auto)

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: wihy-ui
  CONTAINER_NAME: wihy-ui-app
  SKIP_DEPLOYMENT: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image locally (for testing)
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        docker images

    - name: Test Docker image locally
      run: |
        # Start container in background
        docker run -d --name test-container -p 8080:80 ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Test main page
        curl -f http://localhost:8080/ || exit 1
        
        # Stop test container
        docker stop test-container
        docker rm test-container
        
        echo "‚úÖ Docker image test passed!"

    - name: Save Docker image as tar
      if: github.ref == 'refs/heads/main'
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > wihy-ui-image.tar.gz
        ls -lh wihy-ui-image.tar.gz

    - name: Ensure Azure VM ports are open
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üîì Ensuring Azure VM firewall ports are open..."
        
        # Check if Azure CLI is installed and authenticated
        if command -v az &> /dev/null; then
          echo "üìã Configuring Network Security Group for wihy-ui-prod-vm..."
          
          # Get the NSG name for the VM
          NSG_NAME=$(az network nsg list --resource-group vHealth --query "[?contains(name, 'wihy-ui-prod-vm')].name" -o tsv || echo "")
          
          if [ -n "$NSG_NAME" ]; then
            echo "üîç Found NSG: $NSG_NAME"
            
            # Remove port 80 rule if it exists (HTTPS only for security)
            echo "ÔøΩ Removing HTTP port 80 rule for security..."
            az network nsg rule delete \
              --resource-group vHealth \
              --nsg-name "$NSG_NAME" \
              --name open-port-80 || echo "‚ÑπÔ∏è Port 80 rule was already removed or didn't exist"
            
            # Check if port 443 rule exists, create if not
            echo "üìã Ensuring port 443 (HTTPS) is open..."
            if ! az network nsg rule show --resource-group vHealth --nsg-name "$NSG_NAME" --name allow-https &>/dev/null; then
              az network nsg rule create \
                --resource-group vHealth \
                --nsg-name "$NSG_NAME" \
                --name allow-https \
                --protocol Tcp \
                --priority 910 \
                --destination-port-range 443 \
                --access Allow \
                --source-address-prefix '*' \
                --destination-address-prefix '*' || echo "‚ö†Ô∏è Port 443 rule creation failed"
            else
              echo "‚úÖ Port 443 rule already exists"
            fi
            
            echo "‚úÖ Azure NSG configured for HTTPS only (port 443)"
          else
            echo "‚ö†Ô∏è Could not find NSG for wihy-ui-prod-vm, using fallback approach..."
            # Fallback - configure for HTTPS only
            az vm open-port --port 443 --resource-group vHealth --name wihy-ui-prod-vm || echo "‚ö†Ô∏è Port 443 may already be open or conflicted"
            echo "‚ÑπÔ∏è Port 80 removed for security - HTTPS only"
          fi
          
          echo "‚úÖ Azure firewall configured"
        else
          echo "‚ö†Ô∏è Azure CLI not available - skipping firewall setup"
          echo "üìã Manual NSG configuration required:"
          echo "   Resource Group: vHealth"
          echo "   NSG: wihy-ui-prod-vm-nsg"
          echo "   Rules needed:"
          echo "     - allow-https: Priority 910, Protocol Tcp, Port 443 (HTTPS only for security)"
        fi

    - name: Check if deployment secrets are configured
      if: github.ref == 'refs/heads/main'
      run: |
        # Check for required secrets using conditional expressions
        if [ "${{ secrets.VM_HOST }}" = "" ] || [ "${{ secrets.VM_USERNAME }}" = "" ] || [ "${{ secrets.VM_SSH_PRIVATE_KEY }}" = "" ]; then
          echo "‚ö†Ô∏è  Deployment secrets not configured. Skipping deployment."
          echo "Please configure the following GitHub secrets:"
          echo "  - VM_HOST: 4.246.82.249"
          echo "  - VM_USERNAME: wihyadmin" 
          echo "  - VM_SSH_PRIVATE_KEY: <your SSH private key content>"
          echo "See GITHUB-ACTIONS-SETUP.md for instructions."
          echo "SKIP_DEPLOYMENT=true" >> $GITHUB_ENV
        else
          echo "‚úÖ All deployment secrets are configured."
          echo "SKIP_DEPLOYMENT=false" >> $GITHUB_ENV
        fi

    - name: Setup SSH key
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        # Create SSH directory with proper permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Debug: Show secret length and first/last characters
        SECRET_LENGTH=$(echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" | wc -c)
        SECRET_START=$(echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" | head -c 50)
        SECRET_END=$(echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" | tail -c 50)
        echo "üîç SSH Key Debug Info:"
        echo "   Length: $SECRET_LENGTH characters"
        echo "   Starts with: $SECRET_START..."
        echo "   Ends with: ...$SECRET_END"
        
        # Create SSH private key with proper formatting
        echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Show actual key file info
        echo "üìã Created key file info:"
        ls -la ~/.ssh/id_rsa
        echo "   File size: $(wc -c < ~/.ssh/id_rsa) bytes"
        echo "   First line: $(head -n1 ~/.ssh/id_rsa)"
        echo "   Last line: $(tail -n1 ~/.ssh/id_rsa)"
        
        # Validate SSH key format
        echo "üîê Validating SSH key format..."
        if ssh-keygen -l -f ~/.ssh/id_rsa >/dev/null 2>&1; then
          echo "‚úÖ SSH private key format is valid"
          ssh-keygen -l -f ~/.ssh/id_rsa
        else
          echo "‚ùå Invalid SSH private key format"
          echo ""
          echo "üõ†Ô∏è  TROUBLESHOOTING STEPS:"
          echo "1. Your VM_SSH_PRIVATE_KEY secret must contain a complete private key"
          echo "2. The key should start with '-----BEGIN RSA PRIVATE KEY-----' or '-----BEGIN OPENSSH PRIVATE KEY-----'"
          echo "3. The key should end with '-----END RSA PRIVATE KEY-----' or '-----END OPENSSH PRIVATE KEY-----'"
          echo "4. All lines between the headers should be base64 encoded data"
          echo ""
          echo "üìã To generate a new SSH key:"
          echo "   On Windows: ssh-keygen -t rsa -b 4096 -C 'wihy-deploy' -f ~/.ssh/wihy_deploy"
          echo "   Copy ENTIRE private key to GitHub secret VM_SSH_PRIVATE_KEY"
          echo "   Copy public key to VM: ~/.ssh/authorized_keys"
          echo ""
          echo "üìñ See SSH_KEY_SETUP_WINDOWS.md for detailed instructions"
          exit 1
        fi
        
        # Add host key to known_hosts with retries
        if [ -n "${{ secrets.VM_HOST }}" ]; then
          echo "üîë Adding host key to known_hosts..."
          for i in {1..3}; do
            if ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "‚úÖ Host key added successfully"
              break
            else
              echo "‚ö†Ô∏è  Attempt $i: Failed to scan host keys, retrying..."
              sleep 2
            fi
          done
        else
          echo "‚ùå VM_HOST secret not configured"
          exit 1
        fi
        
        # Test SSH connection
        echo "üîå Testing SSH connection..."
        if ssh -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "echo 'SSH connection successful'" 2>/dev/null; then
          echo "‚úÖ SSH connection test passed"
        else
          echo "‚ùå SSH connection test failed"
          echo "Please verify:"
          echo "  1. VM_HOST is correct: ${{ secrets.VM_HOST }}"
          echo "  2. VM_USERNAME is correct: ${{ secrets.VM_USERNAME }}"
          echo "  3. SSH private key corresponds to a public key added to the VM"
          echo "  4. VM is running and accessible"
          echo "  5. Public key is in VM's ~/.ssh/authorized_keys file"
          echo ""
          echo "üìã Manual test command:"
          echo "   ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} 'echo test'"
          exit 1
        fi

    - name: Copy Docker image and scripts to VM
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üì¶ Copying Docker image and setup scripts to VM..."
        
        # Copy files with retry logic and better error handling
        copy_with_retry() {
          local file=$1
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üìã Copying $file (attempt $attempt/$max_attempts)..."
            if scp -o ConnectTimeout=30 -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no "$file" ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/; then
              echo "‚úÖ Successfully copied $file"
              return 0
            else
              echo "‚ö†Ô∏è  Failed to copy $file (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå Failed to copy $file after $max_attempts attempts"
                return 1
              fi
              sleep 5
              attempt=$((attempt + 1))
            fi
          done
        }
        
        # Copy each file with retry logic
        copy_with_retry "wihy-ui-image.tar.gz" || exit 1
        copy_with_retry "setup-ssl.sh" || exit 1  
        copy_with_retry "setup-ssl-template.sh" || exit 1
        copy_with_retry "cleanup-docker-images.sh" || exit 1
        
        echo "‚úÖ All files copied successfully"
        scp -o StrictHostKeyChecking=no setup-vm-environment.sh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/
        scp -o StrictHostKeyChecking=no add-ssh-key.sh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/
        scp -o StrictHostKeyChecking=no manual-cleanup.sh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/

    - name: Setup SSH Access for Local Development
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üîë Setting up SSH access for local development..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} 'chmod +x ~/add-ssh-key.sh && ~/add-ssh-key.sh'

    - name: Deploy to Production VM with Docker
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << 'EOF'
        set -e
        
        echo "üöÄ Starting Docker deployment..."
        
        # Run VM environment setup script
        echo "üîß Running VM environment setup..."
        chmod +x ~/setup-vm-environment.sh
        ~/setup-vm-environment.sh
        
        # Load the new Docker image
        echo "üì• Loading new Docker image..."
        sudo docker load < ~/wihy-ui-image.tar.gz
        
        # Stop and remove old container if it exists
        if sudo docker ps -a --format 'table {{.Names}}' | grep -q "^${{ env.CONTAINER_NAME }}$"; then
            echo "üõë Stopping old container..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true
        fi
        
        # Comprehensive Docker cleanup to prevent disk space issues
        echo "üßπ Running comprehensive Docker cleanup..."
        chmod +x ~/cleanup-docker-images.sh
        ~/cleanup-docker-images.sh ${{ env.CONTAINER_NAME }} || echo "‚ö†Ô∏è  Cleanup completed with warnings"
        
        # Start new container
        echo "üöÄ Starting new container..."
        sudo docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          -p 3000:80 \
          ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait for container to be ready
        echo "‚è≥ Waiting for container to start..."
        sleep 15
        
        # Verify deployment
        if sudo docker ps | grep -q "${{ env.CONTAINER_NAME }}"; then
            echo "‚úÖ Container is running!"
            sudo docker ps --filter name=${{ env.CONTAINER_NAME }}
        else
            echo "‚ùå Container failed to start!"
            sudo docker logs ${{ env.CONTAINER_NAME }}
            exit 1
        fi
        
        # Test health endpoint
        echo "üè• Testing health endpoint..."
        if curl -f http://localhost:3000/health; then
            echo "‚úÖ Health check passed!"
        else
            echo "‚ùå Health check failed!"
            sudo docker logs ${{ env.CONTAINER_NAME }}
            exit 1
        fi
        
        # Get public IP
        PUBLIC_IP=$(curl -s ifconfig.me || echo "Unable to detect")
        
        echo "üéâ Deployment successful!"
        echo "üì± Application URLs:"
        echo "   http://$PUBLIC_IP"
        echo "   http://wihy-ui-prod.westus2.cloudapp.azure.com"
        echo "üè• Health check: http://$PUBLIC_IP/health"
        
        # Show container info
        echo "üìä Container info:"
        sudo docker stats ${{ env.CONTAINER_NAME }} --no-stream
        
        # Copy SSL setup script to proper location
        echo "üìã Setting up SSL script..."
        sudo mkdir -p /opt/wihy-ui
        sudo cp ~/setup-ssl.sh /opt/wihy-ui/setup-ssl.sh
        sudo chmod +x /opt/wihy-ui/setup-ssl.sh
        
        # Install and configure Nginx
        echo "üåê Installing and configuring Nginx..."
        sudo apt-get update -qq
        sudo apt-get install -y nginx
        
        # Stop any existing nginx to avoid conflicts
        sudo systemctl stop nginx || true
        
        # Ensure nginx is enabled
        sudo systemctl enable nginx
        
        # Setup SSL certificates (if DNS is configured)
        echo "üîí Setting up SSL certificates..."
        /opt/wihy-ui/setup-ssl.sh || echo "‚ö†Ô∏è  SSL setup skipped or failed (this is normal if DNS isn't configured yet)"
        
        # Cleanup
        rm -f ~/wihy-ui-image.tar.gz
        
        EOF

    - name: Final Health Check
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üè• Final health check..."
        sleep 10
        if curl -f http://${{ secrets.VM_HOST }}/health; then
            echo "‚úÖ External health check passed!"
        else
            echo "‚ùå External health check failed!"
            exit 1
        fi

    - name: Deployment Summary
      if: success() && github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üéâ Docker Deployment Successful!"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üì± WiHy UI Application: https://wihy-ui-prod.westus2.cloudapp.azure.com (SSL on port 443)"
        echo "üè• Health Check: https://wihy-ui-prod.westus2.cloudapp.azure.com/health"
        echo "üìä Features Available:"
        echo "   ‚Ä¢ Health Charts (search: activity, weight, sleep, dopamine, health risk)"
        echo "   ‚Ä¢ Updated API endpoint: ml.wihy.ai (Enhanced Model)"
        echo "   ‚Ä¢ Responsive design with Chart.js integration"
        echo "   ‚Ä¢ Production-optimized Docker container (SSL/HTTPS only)"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    - name: Secrets Configuration Required
      if: github.ref == 'refs/heads/main' && env.SKIP_DEPLOYMENT == 'true'
      run: |
        echo "‚ö†Ô∏è  Deployment Skipped - Secrets Not Configured"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚úÖ Docker image built and tested successfully!"
        echo "üìã To enable automated deployment, configure these GitHub secrets:"
        echo "   ‚Ä¢ VM_HOST: 4.246.82.249"
        echo "   ‚Ä¢ VM_USERNAME: wihyadmin"
        echo "   ‚Ä¢ VM_SSH_PRIVATE_KEY: (content from C:\\Users\\Kortn\\.ssh\\wihy-ui-vm-key)"
        echo ""
        echo "üìñ See GITHUB-ACTIONS-SETUP.md for detailed instructions"
        echo "üöÄ Once configured, the next push will automatically deploy to your VM!"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"