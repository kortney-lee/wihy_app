name: Deploy to Azure Container Apps (Manual)

on:
  # Disabled - Using Docker VM deployment instead
  # push:
  #   branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_LOGIN_SERVER: wihymlregistry-b6fdh5cmhzgwbbgy.azurecr.io
  CONTAINER_APP_NAME: wihy-ui
  CONTAINER_APP_ENVIRONMENT: wihy-ml-env
  RESOURCE_GROUP: vHealth
  IMAGE_NAME: wihy-ui
  LOCATION: westus2
  SKIP_DEPLOYMENT: false
  API_BASE_URL: ${{ secrets.API_BASE_URL || 'https://ml.wihy.ai' }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME || 'wihymlregistry-b6fdh5cmhzgwbbgy' }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false
    
    - name: Build client
      run: |
        cd client
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check Azure credentials
      run: |
        echo "üîë Checking Azure credentials..."
        
        # Check individual secrets with safer approach
        MISSING=false
        if [ "${{ env.AZURE_CLIENT_ID }}" = "" ]; then
          echo "‚ùå AZURE_CLIENT_ID secret not configured"
          MISSING=true
        else
          echo "‚úÖ AZURE_CLIENT_ID configured"
        fi
        
        if [ "${{ env.AZURE_TENANT_ID }}" = "" ]; then
          echo "‚ùå AZURE_TENANT_ID secret not configured"  
          MISSING=true
        else
          echo "‚úÖ AZURE_TENANT_ID configured"
        fi
        
        if [ "${{ env.AZURE_CREDENTIALS }}" = "" ]; then
          echo "‚ùå AZURE_CREDENTIALS secret not configured"
          MISSING=true
        else
          echo "‚úÖ AZURE_CREDENTIALS configured"
        fi
        
        if [ "$MISSING" = true ]; then
          echo ""
          echo "‚ö†Ô∏è Required Azure secrets are missing!"
          echo "Please configure the following in repository Settings ‚Üí Secrets:"
          echo "- AZURE_CLIENT_ID"
          echo "- AZURE_TENANT_ID" 
          echo "- AZURE_CREDENTIALS"
          echo ""
          echo "Deployment will be skipped due to missing credentials."
          echo "SKIP_DEPLOYMENT=true" >> $GITHUB_ENV
        else
          echo "‚úÖ All Azure credentials configured"
          echo "SKIP_DEPLOYMENT=false" >> $GITHUB_ENV
        fi

    - name: Set up Docker Buildx
      if: env.SKIP_DEPLOYMENT == 'false'
      uses: docker/setup-buildx-action@v3

    - name: Azure Login
      if: env.SKIP_DEPLOYMENT == 'false'
      uses: azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      if: env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üîê Logging into wihymlregistry..."
        az acr login --name wihymlregistry

    - name: Build and push Docker image
      if: env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üèóÔ∏è Building with wihymlregistry..."
        echo "Registry: wihymlregistry"
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "SHA: ${{ github.sha }}"
        
        # Test ACR connectivity first
        echo "Testing ACR connectivity..."
        az acr show --name wihymlregistry --query "loginServer" -o tsv || {
          echo "‚ùå Cannot access ACR. Check permissions."
          exit 1
        }
        
        # Build and push with error handling
        az acr build \
          --registry wihymlregistry \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --timeout 1800 \
          --verbose \
          . || {
          echo "‚ùå ACR build failed. Error details above."
          echo "Common causes:"
          echo "1. Azure credentials expired or incorrect"
          echo "2. ACR permissions insufficient"
          echo "3. Build timeout or resource limits"
          exit 1
        }

    - name: Deploy to Azure Container Apps
      if: env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üöÄ Deploying to Azure Container Apps..."
        
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} || \
        az containerapp create \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
          --image ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --target-port 80 \
          --ingress external \
          --min-replicas 1 \
          --max-replicas 5 \
          --cpu 0.5 \
          --memory 1Gi \
          --env-vars \
            REACT_APP_ENVIRONMENT="production" \
            REACT_APP_API_BASE_URL="${{ env.API_BASE_URL }}" \
          --registry-server ${{ env.REGISTRY_LOGIN_SERVER }} \
          --registry-username ${{ env.REGISTRY_USERNAME }} \
          --registry-password ${{ env.REGISTRY_PASSWORD }}

    - name: Verify Deployment and Get URL
      if: env.SKIP_DEPLOYMENT == 'false'
      run: |
        echo "üåü WIHY UI Deployed Successfully!"
        echo "================================================"
        
        # Wait for deployment to be ready
        sleep 30
        
        UI_URL=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.configuration.ingress.fqdn' -o tsv)
        
        echo "üìç WIHY UI: https://$UI_URL"
        echo "================================================"
        
        # Test endpoint
        echo "üß™ Testing deployed endpoint..."
        curl -f "https://$UI_URL" || echo "‚ùå UI health check failed"
        echo "‚úÖ Deployment verification completed"

    - name: Deployment Skipped Notice
      if: env.SKIP_DEPLOYMENT == 'true'
      run: |
        echo "‚è≠Ô∏è Deployment skipped due to missing Azure credentials"
        echo "Code changes have been tested and built successfully"
        echo "Configure Azure secrets to enable automatic deployment"