name: Deploy to Azure Container Apps

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push to Azure Container Registry"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  CONTAINER_APP_NAME: wihy-ui
  CONTAINER_APP_ENVIRONMENT: ${{ secrets.CONTAINER_APP_ENVIRONMENT }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  IMAGE_NAME: wihy-ui

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Debug Workflow Trigger
      run: |
        echo "üîç Workflow Debug Info:"
        echo "Event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Workflow run: ${{ github.event.workflow_run.id || 'N/A' }}"
        echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion || 'N/A' }}"
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Azure credentials
      run: |
        if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_CLIENT_SECRET }}" ] || [ -z "${{ secrets.AZURE_TENANT_ID }}" ] || [ -z "${{ secrets.REGISTRY_PASSWORD }}" ]; then
          echo "‚ö†Ô∏è Azure credentials not configured"
          echo "Missing secrets. Required:"
          echo "- AZURE_CLIENT_ID"
          echo "- AZURE_CLIENT_SECRET"
          echo "- AZURE_TENANT_ID"
          echo "- AZURE_SUBSCRIPTION_ID"
          echo "- REGISTRY_PASSWORD"
          echo "- AZURE_CONTAINER_REGISTRY"
          echo "- REGISTRY_USERNAME"
          echo "Skipping Azure deployment..."
          exit 0
        fi
        echo "‚úÖ Azure credentials configured"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    # Azure Login using Service Principal (Modern Format)
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    # Alternative: Use legacy credentials format if needed
    # - name: Log in to Azure
    #   uses: azure/login@v2  
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        container-app-name: ${{ env.CONTAINER_APP_NAME }}
        container-app-environment: ${{ env.CONTAINER_APP_ENVIRONMENT }}
        image: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        registry-login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ env.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        environment-variables: |
          REACT_APP_ENVIRONMENT=production
          REACT_APP_API_BASE_URL=${{ secrets.API_BASE_URL }}
          REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          REACT_APP_MICROSOFT_CLIENT_ID=${{ secrets.MICROSOFT_CLIENT_ID }}
          REACT_APP_APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID }}
          REACT_APP_FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }}
        cpu: 0.25
        memory: 0.5Gi
        min-replicas: 0
        max-replicas: 10
        target-port: 80