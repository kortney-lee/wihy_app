{"ast":null,"code":"// Create a type for creating new notifications\n\nclass NotificationService {\n  constructor() {\n    this.listeners = new Set();\n    this.notifications = [{\n      id: '1',\n      title: '🎯 Daily Step Goal Achieved!',\n      text: \"Congratulations! You've crushed your 10,000 step goal for today. Keep up the great work!\",\n      time: '2 hours ago',\n      read: false,\n      type: 'success',\n      category: 'fitness',\n      priority: 'medium'\n    }, {\n      id: '2',\n      title: '⚖️ Weekly Weight Check-in',\n      text: \"It's time for your weekly weigh-in. Tracking your progress helps you stay on track with your health goals.\",\n      time: '1 day ago',\n      read: false,\n      type: 'info',\n      category: 'health',\n      priority: 'low'\n    }, {\n      id: '3',\n      title: '💧 Hydration Reminder',\n      text: \"You're only 0.7L away from your daily hydration goal! Grab a glass of water to finish strong.\",\n      time: '3 hours ago',\n      read: true,\n      type: 'warning',\n      category: 'health',\n      priority: 'medium'\n    }, {\n      id: '4',\n      title: '🍎 Nutrition Analysis Complete',\n      text: \"Your lunch photo has been analyzed. The meal contains 420 calories with balanced macros - great choice!\",\n      time: '4 hours ago',\n      read: false,\n      type: 'success',\n      category: 'nutrition',\n      priority: 'low'\n    }, {\n      id: '5',\n      title: '🏃‍♂️ Weekly Activity Summary',\n      text: \"You were active for 6.2 hours this week - that's 24% above your goal! Your consistency is paying off.\",\n      time: '2 days ago',\n      read: true,\n      type: 'info',\n      category: 'fitness',\n      priority: 'low'\n    }, {\n      id: '6',\n      title: '💊 Medication Reminder',\n      text: \"Don't forget to take your vitamin D supplement. It's been 2 days since your last dose.\",\n      time: '5 hours ago',\n      read: false,\n      type: 'warning',\n      category: 'medication',\n      priority: 'high'\n    }, {\n      id: '7',\n      title: '📅 Upcoming Doctor Appointment',\n      text: \"Reminder: You have a check-up appointment with Dr. Smith tomorrow at 2:00 PM.\",\n      time: '6 hours ago',\n      read: false,\n      type: 'info',\n      category: 'appointment',\n      priority: 'high'\n    }, {\n      id: '8',\n      title: '🔥 Streak Alert!',\n      text: \"Amazing! You're on a 7-day streak of meeting your daily activity goals. Don't break it now!\",\n      time: '1 day ago',\n      read: true,\n      type: 'success',\n      category: 'fitness',\n      priority: 'medium'\n    }, {\n      id: '9',\n      title: '🥗 Meal Planning Suggestion',\n      text: \"Based on your recent nutrition data, we recommend adding more leafy greens to boost your iron intake.\",\n      time: '8 hours ago',\n      read: false,\n      type: 'info',\n      category: 'nutrition',\n      priority: 'low'\n    }, {\n      id: '10',\n      title: '❤️ Heart Rate Zone Achievement',\n      text: \"You spent 45 minutes in your target heart rate zone during today's workout - excellent cardio session!\",\n      time: '5 hours ago',\n      read: true,\n      type: 'success',\n      category: 'fitness',\n      priority: 'medium'\n    }, {\n      id: '11',\n      title: '😴 Sleep Quality Update',\n      text: \"Your sleep quality last night was 82% - great improvement from last week's average of 74%!\",\n      time: '12 hours ago',\n      read: false,\n      type: 'success',\n      category: 'health',\n      priority: 'low'\n    }, {\n      id: '12',\n      title: '🚨 Health Alert',\n      text: \"Your blood pressure reading from yesterday (145/92) is higher than normal. Consider consulting your doctor.\",\n      time: '1 day ago',\n      read: false,\n      type: 'error',\n      category: 'health',\n      priority: 'high'\n    }];\n  }\n  subscribe(listener) {\n    this.listeners.add(listener);\n    listener(this.notifications); // Immediately call with current notifications\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n  getNotifications() {\n    return [...this.notifications].sort((a, b) => {\n      // Sort by: unread first, then by priority, then by time\n      if (a.read !== b.read) {\n        return a.read ? 1 : -1;\n      }\n      const priorityOrder = {\n        high: 3,\n        medium: 2,\n        low: 1\n      };\n      const aPriority = priorityOrder[a.priority || 'low'];\n      const bPriority = priorityOrder[b.priority || 'low'];\n      if (aPriority !== bPriority) {\n        return bPriority - aPriority;\n      }\n\n      // Sort by time (newer first) - you'd want to parse actual timestamps in a real app\n      return new Date(b.time).getTime() - new Date(a.time).getTime();\n    });\n  }\n  getUnreadCount() {\n    return this.notifications.filter(n => !n.read).length;\n  }\n  getNotificationsByCategory(category) {\n    return this.notifications.filter(n => n.category === category);\n  }\n  getNotificationsByType(type) {\n    return this.notifications.filter(n => n.type === type);\n  }\n  getHighPriorityNotifications() {\n    return this.notifications.filter(n => n.priority === 'high' && !n.read);\n  }\n  markAsRead(id) {\n    this.notifications = this.notifications.map(n => n.id === id ? {\n      ...n,\n      read: true\n    } : n);\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n  markAllAsRead() {\n    this.notifications = this.notifications.map(n => ({\n      ...n,\n      read: true\n    }));\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n  deleteNotification(id) {\n    this.notifications = this.notifications.filter(n => n.id !== id);\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n\n  // Updated addNotification method with better type handling\n  addNotification(notification) {\n    const newNotification = {\n      ...notification,\n      id: Date.now().toString(),\n      time: notification.time || 'Just now',\n      read: notification.read || false,\n      type: notification.type || 'info',\n      category: notification.category || 'health',\n      priority: notification.priority || 'low'\n    };\n    this.notifications = [newNotification, ...this.notifications];\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n\n  // Utility methods for creating specific types of notifications\n  addHealthAlert(title, text) {\n    this.addNotification({\n      title: `🚨 ${title}`,\n      text,\n      type: 'error',\n      category: 'health',\n      priority: 'high'\n    });\n  }\n  addFitnessAchievement(title, text) {\n    this.addNotification({\n      title: `🎯 ${title}`,\n      text,\n      type: 'success',\n      category: 'fitness',\n      priority: 'medium'\n    });\n  }\n  addNutritionInsight(title, text) {\n    this.addNotification({\n      title: `🍎 ${title}`,\n      text,\n      type: 'info',\n      category: 'nutrition',\n      priority: 'low'\n    });\n  }\n  addMedicationReminder(title, text) {\n    this.addNotification({\n      title: `💊 ${title}`,\n      text,\n      type: 'warning',\n      category: 'medication',\n      priority: 'high'\n    });\n  }\n  addAppointmentReminder(title, text) {\n    this.addNotification({\n      title: `📅 ${title}`,\n      text,\n      type: 'info',\n      category: 'appointment',\n      priority: 'high'\n    });\n  }\n\n  // Simulate real-time notifications (for demo purposes)\n  simulateRealTimeNotifications() {\n    const demoNotifications = [{\n      title: '💧 Hydration Check',\n      text: \"You haven't logged water intake in 2 hours. Stay hydrated!\",\n      type: 'warning',\n      category: 'health',\n      priority: 'medium'\n    }, {\n      title: '👟 Step Goal Progress',\n      text: \"You're 70% towards your daily step goal. A short walk could get you there!\",\n      type: 'info',\n      category: 'fitness',\n      priority: 'low'\n    }, {\n      title: '🍽️ Meal Logged Successfully',\n      text: \"Your dinner has been analyzed: 580 calories, high in protein and fiber.\",\n      type: 'success',\n      category: 'nutrition',\n      priority: 'low'\n    }];\n\n    // Add a random notification every 30 seconds (for demo)\n    setTimeout(() => {\n      const randomNotification = demoNotifications[Math.floor(Math.random() * demoNotifications.length)];\n      this.addNotification(randomNotification);\n\n      // Schedule next notification\n      if (this.notifications.length < 20) {\n        // Limit to prevent spam\n        this.simulateRealTimeNotifications();\n      }\n    }, 30000);\n  }\n\n  // Get statistics about notifications\n  getNotificationStats() {\n    const total = this.notifications.length;\n    const unread = this.getUnreadCount();\n    const byType = {\n      success: this.notifications.filter(n => n.type === 'success').length,\n      info: this.notifications.filter(n => n.type === 'info').length,\n      warning: this.notifications.filter(n => n.type === 'warning').length,\n      error: this.notifications.filter(n => n.type === 'error').length\n    };\n    const byCategory = {\n      health: this.getNotificationsByCategory('health').length,\n      fitness: this.getNotificationsByCategory('fitness').length,\n      nutrition: this.getNotificationsByCategory('nutrition').length,\n      medication: this.getNotificationsByCategory('medication').length,\n      appointment: this.getNotificationsByCategory('appointment').length\n    };\n    return {\n      total,\n      unread,\n      read: total - unread,\n      byType,\n      byCategory,\n      highPriority: this.getHighPriorityNotifications().length\n    };\n  }\n}\nexport const notificationService = new NotificationService();\n\n// Auto-start demo notifications in development\nif (process.env.NODE_ENV === 'development') {\n  // Wait a bit before starting demo notifications\n  setTimeout(() => {\n    notificationService.simulateRealTimeNotifications();\n  }, 10000);\n}","map":{"version":3,"names":["NotificationService","constructor","listeners","Set","notifications","id","title","text","time","read","type","category","priority","subscribe","listener","add","delete","getNotifications","sort","a","b","priorityOrder","high","medium","low","aPriority","bPriority","Date","getTime","getUnreadCount","filter","n","length","getNotificationsByCategory","getNotificationsByType","getHighPriorityNotifications","markAsRead","map","forEach","markAllAsRead","deleteNotification","addNotification","notification","newNotification","now","toString","addHealthAlert","addFitnessAchievement","addNutritionInsight","addMedicationReminder","addAppointmentReminder","simulateRealTimeNotifications","demoNotifications","setTimeout","randomNotification","Math","floor","random","getNotificationStats","total","unread","byType","success","info","warning","error","byCategory","health","fitness","nutrition","medication","appointment","highPriority","notificationService","process","env","NODE_ENV"],"sources":["C:/vHealth/vhealth/user/src/services/notificationService.ts"],"sourcesContent":["export interface Notification {\r\n  id: string;\r\n  title: string;\r\n  text: string;\r\n  time: string;\r\n  read: boolean;\r\n  type?: 'info' | 'success' | 'warning' | 'error';\r\n  category?: 'health' | 'fitness' | 'nutrition' | 'medication' | 'appointment';\r\n  priority?: 'low' | 'medium' | 'high';\r\n}\r\n\r\n// Create a type for creating new notifications\r\nexport interface CreateNotificationInput {\r\n  title: string;\r\n  text: string;\r\n  type?: 'info' | 'success' | 'warning' | 'error';\r\n  category?: 'health' | 'fitness' | 'nutrition' | 'medication' | 'appointment';\r\n  priority?: 'low' | 'medium' | 'high';\r\n  time?: string;\r\n  read?: boolean;\r\n}\r\n\r\nclass NotificationService {\r\n  private listeners: Set<(notifications: Notification[]) => void> = new Set();\r\n  private notifications: Notification[] = [\r\n    {\r\n      id: '1',\r\n      title: '🎯 Daily Step Goal Achieved!',\r\n      text: \"Congratulations! You've crushed your 10,000 step goal for today. Keep up the great work!\",\r\n      time: '2 hours ago',\r\n      read: false,\r\n      type: 'success',\r\n      category: 'fitness',\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: '⚖️ Weekly Weight Check-in',\r\n      text: \"It's time for your weekly weigh-in. Tracking your progress helps you stay on track with your health goals.\",\r\n      time: '1 day ago',\r\n      read: false,\r\n      type: 'info',\r\n      category: 'health',\r\n      priority: 'low'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: '💧 Hydration Reminder',\r\n      text: \"You're only 0.7L away from your daily hydration goal! Grab a glass of water to finish strong.\",\r\n      time: '3 hours ago',\r\n      read: true,\r\n      type: 'warning',\r\n      category: 'health',\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      id: '4',\r\n      title: '🍎 Nutrition Analysis Complete',\r\n      text: \"Your lunch photo has been analyzed. The meal contains 420 calories with balanced macros - great choice!\",\r\n      time: '4 hours ago',\r\n      read: false,\r\n      type: 'success',\r\n      category: 'nutrition',\r\n      priority: 'low'\r\n    },\r\n    {\r\n      id: '5',\r\n      title: '🏃‍♂️ Weekly Activity Summary',\r\n      text: \"You were active for 6.2 hours this week - that's 24% above your goal! Your consistency is paying off.\",\r\n      time: '2 days ago',\r\n      read: true,\r\n      type: 'info',\r\n      category: 'fitness',\r\n      priority: 'low'\r\n    },\r\n    {\r\n      id: '6',\r\n      title: '💊 Medication Reminder',\r\n      text: \"Don't forget to take your vitamin D supplement. It's been 2 days since your last dose.\",\r\n      time: '5 hours ago',\r\n      read: false,\r\n      type: 'warning',\r\n      category: 'medication',\r\n      priority: 'high'\r\n    },\r\n    {\r\n      id: '7',\r\n      title: '📅 Upcoming Doctor Appointment',\r\n      text: \"Reminder: You have a check-up appointment with Dr. Smith tomorrow at 2:00 PM.\",\r\n      time: '6 hours ago',\r\n      read: false,\r\n      type: 'info',\r\n      category: 'appointment',\r\n      priority: 'high'\r\n    },\r\n    {\r\n      id: '8',\r\n      title: '🔥 Streak Alert!',\r\n      text: \"Amazing! You're on a 7-day streak of meeting your daily activity goals. Don't break it now!\",\r\n      time: '1 day ago',\r\n      read: true,\r\n      type: 'success',\r\n      category: 'fitness',\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      id: '9',\r\n      title: '🥗 Meal Planning Suggestion',\r\n      text: \"Based on your recent nutrition data, we recommend adding more leafy greens to boost your iron intake.\",\r\n      time: '8 hours ago',\r\n      read: false,\r\n      type: 'info',\r\n      category: 'nutrition',\r\n      priority: 'low'\r\n    },\r\n    {\r\n      id: '10',\r\n      title: '❤️ Heart Rate Zone Achievement',\r\n      text: \"You spent 45 minutes in your target heart rate zone during today's workout - excellent cardio session!\",\r\n      time: '5 hours ago',\r\n      read: true,\r\n      type: 'success',\r\n      category: 'fitness',\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      id: '11',\r\n      title: '😴 Sleep Quality Update',\r\n      text: \"Your sleep quality last night was 82% - great improvement from last week's average of 74%!\",\r\n      time: '12 hours ago',\r\n      read: false,\r\n      type: 'success',\r\n      category: 'health',\r\n      priority: 'low'\r\n    },\r\n    {\r\n      id: '12',\r\n      title: '🚨 Health Alert',\r\n      text: \"Your blood pressure reading from yesterday (145/92) is higher than normal. Consider consulting your doctor.\",\r\n      time: '1 day ago',\r\n      read: false,\r\n      type: 'error',\r\n      category: 'health',\r\n      priority: 'high'\r\n    }\r\n  ];\r\n\r\n  subscribe(listener: (notifications: Notification[]) => void): () => void {\r\n    this.listeners.add(listener);\r\n    listener(this.notifications); // Immediately call with current notifications\r\n    return () => {\r\n      this.listeners.delete(listener);\r\n    };\r\n  }\r\n\r\n  getNotifications(): Notification[] {\r\n    return [...this.notifications].sort((a, b) => {\r\n      // Sort by: unread first, then by priority, then by time\r\n      if (a.read !== b.read) {\r\n        return a.read ? 1 : -1;\r\n      }\r\n      \r\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\r\n      const aPriority = priorityOrder[a.priority || 'low'];\r\n      const bPriority = priorityOrder[b.priority || 'low'];\r\n      \r\n      if (aPriority !== bPriority) {\r\n        return bPriority - aPriority;\r\n      }\r\n      \r\n      // Sort by time (newer first) - you'd want to parse actual timestamps in a real app\r\n      return new Date(b.time).getTime() - new Date(a.time).getTime();\r\n    });\r\n  }\r\n\r\n  getUnreadCount(): number {\r\n    return this.notifications.filter(n => !n.read).length;\r\n  }\r\n\r\n  getNotificationsByCategory(category: string): Notification[] {\r\n    return this.notifications.filter(n => n.category === category);\r\n  }\r\n\r\n  getNotificationsByType(type: string): Notification[] {\r\n    return this.notifications.filter(n => n.type === type);\r\n  }\r\n\r\n  getHighPriorityNotifications(): Notification[] {\r\n    return this.notifications.filter(n => n.priority === 'high' && !n.read);\r\n  }\r\n\r\n  markAsRead(id: string): void {\r\n    this.notifications = this.notifications.map(n =>\r\n      n.id === id ? { ...n, read: true } : n\r\n    );\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n\r\n  markAllAsRead(): void {\r\n    this.notifications = this.notifications.map(n => ({ ...n, read: true }));\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n\r\n  deleteNotification(id: string): void {\r\n    this.notifications = this.notifications.filter(n => n.id !== id);\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n\r\n  // Updated addNotification method with better type handling\r\n  addNotification(notification: CreateNotificationInput): void {\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id: Date.now().toString(),\r\n      time: notification.time || 'Just now',\r\n      read: notification.read || false,\r\n      type: notification.type || 'info',\r\n      category: notification.category || 'health',\r\n      priority: notification.priority || 'low'\r\n    };\r\n    this.notifications = [newNotification, ...this.notifications];\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n\r\n  // Utility methods for creating specific types of notifications\r\n  addHealthAlert(title: string, text: string): void {\r\n    this.addNotification({\r\n      title: `🚨 ${title}`,\r\n      text,\r\n      type: 'error',\r\n      category: 'health',\r\n      priority: 'high'\r\n    });\r\n  }\r\n\r\n  addFitnessAchievement(title: string, text: string): void {\r\n    this.addNotification({\r\n      title: `🎯 ${title}`,\r\n      text,\r\n      type: 'success',\r\n      category: 'fitness',\r\n      priority: 'medium'\r\n    });\r\n  }\r\n\r\n  addNutritionInsight(title: string, text: string): void {\r\n    this.addNotification({\r\n      title: `🍎 ${title}`,\r\n      text,\r\n      type: 'info',\r\n      category: 'nutrition',\r\n      priority: 'low'\r\n    });\r\n  }\r\n\r\n  addMedicationReminder(title: string, text: string): void {\r\n    this.addNotification({\r\n      title: `💊 ${title}`,\r\n      text,\r\n      type: 'warning',\r\n      category: 'medication',\r\n      priority: 'high'\r\n    });\r\n  }\r\n\r\n  addAppointmentReminder(title: string, text: string): void {\r\n    this.addNotification({\r\n      title: `📅 ${title}`,\r\n      text,\r\n      type: 'info',\r\n      category: 'appointment',\r\n      priority: 'high'\r\n    });\r\n  }\r\n\r\n  // Simulate real-time notifications (for demo purposes)\r\n  simulateRealTimeNotifications(): void {\r\n    const demoNotifications: CreateNotificationInput[] = [\r\n      {\r\n        title: '💧 Hydration Check',\r\n        text: \"You haven't logged water intake in 2 hours. Stay hydrated!\",\r\n        type: 'warning',\r\n        category: 'health',\r\n        priority: 'medium'\r\n      },\r\n      {\r\n        title: '👟 Step Goal Progress',\r\n        text: \"You're 70% towards your daily step goal. A short walk could get you there!\",\r\n        type: 'info',\r\n        category: 'fitness',\r\n        priority: 'low'\r\n      },\r\n      {\r\n        title: '🍽️ Meal Logged Successfully',\r\n        text: \"Your dinner has been analyzed: 580 calories, high in protein and fiber.\",\r\n        type: 'success',\r\n        category: 'nutrition',\r\n        priority: 'low'\r\n      }\r\n    ];\r\n\r\n    // Add a random notification every 30 seconds (for demo)\r\n    setTimeout(() => {\r\n      const randomNotification = demoNotifications[Math.floor(Math.random() * demoNotifications.length)];\r\n      this.addNotification(randomNotification);\r\n      \r\n      // Schedule next notification\r\n      if (this.notifications.length < 20) { // Limit to prevent spam\r\n        this.simulateRealTimeNotifications();\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  // Get statistics about notifications\r\n  getNotificationStats() {\r\n    const total = this.notifications.length;\r\n    const unread = this.getUnreadCount();\r\n    const byType = {\r\n      success: this.notifications.filter(n => n.type === 'success').length,\r\n      info: this.notifications.filter(n => n.type === 'info').length,\r\n      warning: this.notifications.filter(n => n.type === 'warning').length,\r\n      error: this.notifications.filter(n => n.type === 'error').length\r\n    };\r\n    const byCategory = {\r\n      health: this.getNotificationsByCategory('health').length,\r\n      fitness: this.getNotificationsByCategory('fitness').length,\r\n      nutrition: this.getNotificationsByCategory('nutrition').length,\r\n      medication: this.getNotificationsByCategory('medication').length,\r\n      appointment: this.getNotificationsByCategory('appointment').length\r\n    };\r\n\r\n    return {\r\n      total,\r\n      unread,\r\n      read: total - unread,\r\n      byType,\r\n      byCategory,\r\n      highPriority: this.getHighPriorityNotifications().length\r\n    };\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService();\r\n\r\n// Auto-start demo notifications in development\r\nif (process.env.NODE_ENV === 'development') {\r\n  // Wait a bit before starting demo notifications\r\n  setTimeout(() => {\r\n    notificationService.simulateRealTimeNotifications();\r\n  }, 10000);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}