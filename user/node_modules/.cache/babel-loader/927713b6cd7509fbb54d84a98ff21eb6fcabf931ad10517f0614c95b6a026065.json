{"ast":null,"code":"class AuthService {\n  constructor() {\n    this.listeners = new Set();\n    this.state = {\n      isAuthenticated: false,\n      user: null,\n      loading: false\n    };\n  }\n  subscribe(listener) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n  getState() {\n    return this.state;\n  }\n  setState(newState) {\n    this.state = {\n      ...this.state,\n      ...newState\n    };\n    this.listeners.forEach(listener => listener(this.state));\n  }\n  async signIn(email, password) {\n    this.setState({\n      loading: true\n    });\n    try {\n      // TODO: Replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n\n      const user = {\n        id: '1',\n        email,\n        name: email.split('@')[0]\n      };\n      this.setState({\n        isAuthenticated: true,\n        user,\n        loading: false\n      });\n    } catch (error) {\n      this.setState({\n        loading: false\n      });\n      throw error;\n    }\n  }\n  async signUp(email, password, name) {\n    this.setState({\n      loading: true\n    });\n    try {\n      // TODO: Replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n\n      const user = {\n        id: '1',\n        email,\n        name\n      };\n      this.setState({\n        isAuthenticated: true,\n        user,\n        loading: false\n      });\n    } catch (error) {\n      this.setState({\n        loading: false\n      });\n      throw error;\n    }\n  }\n  async signOut() {\n    this.setState({\n      isAuthenticated: false,\n      user: null,\n      loading: false\n    });\n  }\n  async checkAuth() {\n    this.setState({\n      loading: true\n    });\n    try {\n      // TODO: Replace with actual API call to check if user is logged in\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        // Simulate user data from token\n        const user = {\n          id: '1',\n          email: 'user@example.com',\n          name: 'User'\n        };\n        this.setState({\n          isAuthenticated: true,\n          user,\n          loading: false\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    } catch (error) {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["AuthService","constructor","listeners","Set","state","isAuthenticated","user","loading","subscribe","listener","add","delete","getState","setState","newState","forEach","signIn","email","password","Promise","resolve","setTimeout","id","name","split","error","signUp","signOut","checkAuth","token","localStorage","getItem","authService"],"sources":["C:/vHealth/vhealth/user/src/services/authService.ts"],"sourcesContent":["export interface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface AuthState {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  loading: boolean;\r\n}\r\n\r\nclass AuthService {\r\n  private listeners: Set<(state: AuthState) => void> = new Set();\r\n  private state: AuthState = {\r\n    isAuthenticated: false,\r\n    user: null,\r\n    loading: false\r\n  };\r\n\r\n  subscribe(listener: (state: AuthState) => void) {\r\n    this.listeners.add(listener);\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  getState(): AuthState {\r\n    return this.state;\r\n  }\r\n\r\n  private setState(newState: Partial<AuthState>) {\r\n    this.state = { ...this.state, ...newState };\r\n    this.listeners.forEach(listener => listener(this.state));\r\n  }\r\n\r\n  async signIn(email: string, password: string): Promise<void> {\r\n    this.setState({ loading: true });\r\n    try {\r\n      // TODO: Replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const user: User = {\r\n        id: '1',\r\n        email,\r\n        name: email.split('@')[0],\r\n      };\r\n\r\n      this.setState({\r\n        isAuthenticated: true,\r\n        user,\r\n        loading: false\r\n      });\r\n    } catch (error) {\r\n      this.setState({ loading: false });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async signUp(email: string, password: string, name: string): Promise<void> {\r\n    this.setState({ loading: true });\r\n    try {\r\n      // TODO: Replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const user: User = {\r\n        id: '1',\r\n        email,\r\n        name,\r\n      };\r\n\r\n      this.setState({\r\n        isAuthenticated: true,\r\n        user,\r\n        loading: false\r\n      });\r\n    } catch (error) {\r\n      this.setState({ loading: false });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async signOut(): Promise<void> {\r\n    this.setState({\r\n      isAuthenticated: false,\r\n      user: null,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  async checkAuth(): Promise<void> {\r\n    this.setState({ loading: true });\r\n    try {\r\n      // TODO: Replace with actual API call to check if user is logged in\r\n      const token = localStorage.getItem('authToken');\r\n      if (token) {\r\n        // Simulate user data from token\r\n        const user: User = {\r\n          id: '1',\r\n          email: 'user@example.com',\r\n          name: 'User',\r\n        };\r\n        this.setState({\r\n          isAuthenticated: true,\r\n          user,\r\n          loading: false\r\n        });\r\n      } else {\r\n        this.setState({ loading: false });\r\n      }\r\n    } catch (error) {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}