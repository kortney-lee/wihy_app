{"ast":null,"code":"class NotificationService {\n  constructor() {\n    this.listeners = new Set();\n    this.notifications = [{\n      id: '1',\n      title: 'Daily Step Goal Achieved!',\n      text: \"You've reached your 10,000 step goal for today.\",\n      time: '2 hours ago',\n      read: false,\n      type: 'success'\n    }, {\n      id: '2',\n      title: 'Weight Update Reminder',\n      text: \"Don't forget to log your weight for this week.\",\n      time: '1 day ago',\n      read: false,\n      type: 'info'\n    }, {\n      id: '3',\n      title: 'Hydration Goal',\n      text: \"You're 0.7L away from your daily hydration goal.\",\n      time: '3 hours ago',\n      read: true,\n      type: 'warning'\n    }];\n  }\n  subscribe(listener) {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n  getNotifications() {\n    return this.notifications;\n  }\n  getUnreadCount() {\n    return this.notifications.filter(n => !n.read).length;\n  }\n  markAsRead(id) {\n    this.notifications = this.notifications.map(n => n.id === id ? {\n      ...n,\n      read: true\n    } : n);\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n  markAllAsRead() {\n    this.notifications = this.notifications.map(n => ({\n      ...n,\n      read: true\n    }));\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n  addNotification(notification) {\n    const newNotification = {\n      ...notification,\n      id: Date.now().toString()\n    };\n    this.notifications = [newNotification, ...this.notifications];\n    this.listeners.forEach(listener => listener(this.notifications));\n  }\n}\nexport const notificationService = new NotificationService();","map":{"version":3,"names":["NotificationService","constructor","listeners","Set","notifications","id","title","text","time","read","type","subscribe","listener","add","delete","getNotifications","getUnreadCount","filter","n","length","markAsRead","map","forEach","markAllAsRead","addNotification","notification","newNotification","Date","now","toString","notificationService"],"sources":["C:/vHealth/vhealth/user/src/services/notificationService.ts"],"sourcesContent":["export interface Notification {\r\n  id: string;\r\n  title: string;\r\n  text: string;\r\n  time: string;\r\n  read: boolean;\r\n  type?: 'info' | 'success' | 'warning' | 'error';\r\n}\r\n\r\nclass NotificationService {\r\n  private listeners: Set<(notifications: Notification[]) => void> = new Set();\r\n  private notifications: Notification[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Daily Step Goal Achieved!',\r\n      text: \"You've reached your 10,000 step goal for today.\",\r\n      time: '2 hours ago',\r\n      read: false,\r\n      type: 'success'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Weight Update Reminder',\r\n      text: \"Don't forget to log your weight for this week.\",\r\n      time: '1 day ago',\r\n      read: false,\r\n      type: 'info'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Hydration Goal',\r\n      text: \"You're 0.7L away from your daily hydration goal.\",\r\n      time: '3 hours ago',\r\n      read: true,\r\n      type: 'warning'\r\n    }\r\n  ];\r\n\r\n  subscribe(listener: (notifications: Notification[]) => void): () => void {\r\n    this.listeners.add(listener);\r\n    return () => {\r\n      this.listeners.delete(listener);\r\n    };\r\n  }\r\n\r\n  getNotifications(): Notification[] {\r\n    return this.notifications;\r\n  }\r\n\r\n  getUnreadCount(): number {\r\n    return this.notifications.filter(n => !n.read).length;\r\n  }\r\n\r\n  markAsRead(id: string): void {\r\n    this.notifications = this.notifications.map(n =>\r\n      n.id === id ? { ...n, read: true } : n\r\n    );\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n\r\n  markAllAsRead(): void {\r\n    this.notifications = this.notifications.map(n => ({ ...n, read: true }));\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n\r\n  addNotification(notification: Omit<Notification, 'id'>): void {\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id: Date.now().toString(),\r\n    };\r\n    this.notifications = [newNotification, ...this.notifications];\r\n    this.listeners.forEach(listener => listener(this.notifications));\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService();"],"mappings":"AASA,MAAMA,mBAAmB,CAAC;EAAAC,YAAA;IAAA,KAChBC,SAAS,GAAiD,IAAIC,GAAG,CAAC,CAAC;IAAA,KACnEC,aAAa,GAAmB,CACtC;MACEC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,2BAA2B;MAClCC,IAAI,EAAE,iDAAiD;MACvDC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;IACR,CAAC,EACD;MACEL,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,wBAAwB;MAC/BC,IAAI,EAAE,gDAAgD;MACtDC,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;IACR,CAAC,EACD;MACEL,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,gBAAgB;MACvBC,IAAI,EAAE,kDAAkD;MACxDC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE;IACR,CAAC,CACF;EAAA;EAEDC,SAASA,CAACC,QAAiD,EAAc;IACvE,IAAI,CAACV,SAAS,CAACW,GAAG,CAACD,QAAQ,CAAC;IAC5B,OAAO,MAAM;MACX,IAAI,CAACV,SAAS,CAACY,MAAM,CAACF,QAAQ,CAAC;IACjC,CAAC;EACH;EAEAG,gBAAgBA,CAAA,EAAmB;IACjC,OAAO,IAAI,CAACX,aAAa;EAC3B;EAEAY,cAAcA,CAAA,EAAW;IACvB,OAAO,IAAI,CAACZ,aAAa,CAACa,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACT,IAAI,CAAC,CAACU,MAAM;EACvD;EAEAC,UAAUA,CAACf,EAAU,EAAQ;IAC3B,IAAI,CAACD,aAAa,GAAG,IAAI,CAACA,aAAa,CAACiB,GAAG,CAACH,CAAC,IAC3CA,CAAC,CAACb,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGa,CAAC;MAAET,IAAI,EAAE;IAAK,CAAC,GAAGS,CACvC,CAAC;IACD,IAAI,CAAChB,SAAS,CAACoB,OAAO,CAACV,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAACR,aAAa,CAAC,CAAC;EAClE;EAEAmB,aAAaA,CAAA,EAAS;IACpB,IAAI,CAACnB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACiB,GAAG,CAACH,CAAC,KAAK;MAAE,GAAGA,CAAC;MAAET,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC;IACxE,IAAI,CAACP,SAAS,CAACoB,OAAO,CAACV,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAACR,aAAa,CAAC,CAAC;EAClE;EAEAoB,eAAeA,CAACC,YAAsC,EAAQ;IAC5D,MAAMC,eAA6B,GAAG;MACpC,GAAGD,YAAY;MACfpB,EAAE,EAAEsB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;IAC1B,CAAC;IACD,IAAI,CAACzB,aAAa,GAAG,CAACsB,eAAe,EAAE,GAAG,IAAI,CAACtB,aAAa,CAAC;IAC7D,IAAI,CAACF,SAAS,CAACoB,OAAO,CAACV,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAACR,aAAa,CAAC,CAAC;EAClE;AACF;AAEA,OAAO,MAAM0B,mBAAmB,GAAG,IAAI9B,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}